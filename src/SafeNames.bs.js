// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Util = require("./Util.bs.js");
var $$String = require("rescript/lib/js/string.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_string = require("rescript/lib/js/caml_string.js");

var reservedWords = [
  "open",
  "private",
  "as",
  "external",
  "public",
  "protected",
  "string",
  "bool",
  "integer",
  "object",
  "type",
  "let",
  "and",
  "open",
  "float",
  "timestamp",
  "include",
  "boolean",
  "unit",
  "switch",
  "match",
  "for",
  "in",
  "while",
  "do",
  "export",
  "int",
  "tagList"
];

var uppercaseStartRe = new RegExp("^([A-Z]*)(.*)$");

function translateBadChars(name) {
  return $$String.map((function ($$char) {
                if ($$char >= /* 'A' */65 && $$char <= /* 'Z' */90 || $$char >= /* 'a' */97 && $$char <= /* 'z' */122 || $$char >= /* '0' */48 || $$char <= /* '9' */57) {
                  return $$char;
                } else {
                  return /* '_' */95;
                }
              }), name);
}

function translateReserved(name) {
  if (Belt_Array.some(reservedWords, (function (word) {
            return word === name;
          }))) {
    return name + "_";
  } else {
    return name;
  }
}

function stripLeadingNumbers(name) {
  if (name.length === 0) {
    return name;
  }
  var match = Caml_string.get(name, 0);
  if (match > 57 || match < 48) {
    return name;
  } else {
    return "x" + name;
  }
}

function safeMemberName(name) {
  var splitOnUppercase = name.match(uppercaseStartRe);
  if (splitOnUppercase === null) {
    return translateBadChars(translateReserved(stripLeadingNumbers(name)));
  }
  var upperpart = Belt_Array.get(splitOnUppercase, 1);
  var remaining = Belt_Array.get(splitOnUppercase, 2);
  if (upperpart === undefined) {
    return translateBadChars(translateReserved(stripLeadingNumbers(name)));
  }
  if (remaining === undefined) {
    return translateBadChars(translateReserved(stripLeadingNumbers(name)));
  }
  var upperLength = upperpart.length;
  var first = upperLength > 0 ? ($$String.sub(upperpart, 0, upperLength - 1 | 0) + $$String.sub(upperpart, upperLength - 1 | 0, 1)).toLowerCase() : "";
  return translateBadChars(translateReserved(stripLeadingNumbers(first + remaining)));
}

function safeTypeName(target) {
  var name = Util.symbolName(target);
  var namespace = Util.symbolNamespace(target);
  if (namespace === "smithy.api") {
    return safeMemberName("Base" + name);
  } else {
    return safeMemberName(name);
  }
}

function camelCase(name) {
  return name.charAt(0).toUpperCase() + name.slice(1);
}

var variantReplaceRe = new RegExp("-|#|:|\\.|/| |\\(|\\)|\\\\", "g");

function safeVariantName(name) {
  return Belt_Array.joinWith(Belt_Array.keepMap(name.replace(variantReplaceRe, "_").replace("*", "Star").split("_"), (function (x) {
                    if (x.length !== 0) {
                      return camelCase(x);
                    }
                    
                  })), "_", (function (x) {
                return x;
              }));
}

var safeConstructorName = camelCase;

exports.reservedWords = reservedWords;
exports.uppercaseStartRe = uppercaseStartRe;
exports.translateBadChars = translateBadChars;
exports.translateReserved = translateReserved;
exports.stripLeadingNumbers = stripLeadingNumbers;
exports.safeMemberName = safeMemberName;
exports.safeTypeName = safeTypeName;
exports.camelCase = camelCase;
exports.safeConstructorName = safeConstructorName;
exports.variantReplaceRe = variantReplaceRe;
exports.safeVariantName = safeVariantName;
/* uppercaseStartRe Not a pure module */
