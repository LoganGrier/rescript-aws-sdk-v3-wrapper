// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Js_json = require("rescript/lib/js/js_json.js");
var Js_option = require("rescript/lib/js/js_option.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function optionToResult(opt, errorString) {
  if (opt !== undefined) {
    return {
            TAG: /* Ok */0,
            _0: Caml_option.valFromOption(opt)
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: errorString
          };
  }
}

function parseJson(jsonString, rootParser) {
  var treeResult;
  try {
    treeResult = {
      TAG: /* Ok */0,
      _0: JSON.parse(jsonString)
    };
  }
  catch (raw_payload){
    var payload = Caml_js_exceptions.internalToOCamlException(raw_payload);
    if (payload.RE_EXN_ID === Js_exn.$$Error) {
      treeResult = {
        TAG: /* Error */1,
        _0: {
          TAG: /* SyntaxError */0,
          _0: Js_option.getWithDefault("unknown", payload._1.message)
        }
      };
    } else {
      throw payload;
    }
  }
  return Belt_Result.flatMap(treeResult, (function (tree) {
                return Curry._1(rootParser, {
                            TAG: /* Ok */0,
                            _0: {
                              tree: tree,
                              path: "$"
                            }
                          });
              }));
}

function parseObject(x) {
  return Belt_Result.flatMap(Belt_Result.map(x, (function (param) {
                    return [
                            Js_json.decodeObject(param.tree),
                            param.path
                          ];
                  })), (function (param) {
                var path = param[1];
                var dictOption = param[0];
                if (dictOption !== undefined) {
                  return {
                          TAG: /* Ok */0,
                          _0: {
                            object: Caml_option.valFromOption(dictOption),
                            path: path
                          }
                        };
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: {
                            TAG: /* NoValueError */2,
                            _0: path
                          }
                        };
                }
              }));
}

function parseRecord(recordObject, recordParser) {
  return Belt_Result.flatMap(Belt_Result.map(parseObject(recordObject), (function (param) {
                    return [
                            Js_dict.entries(param.object),
                            param.path
                          ];
                  })), (function (param) {
                var path = param[1];
                return param[0].reduce((function (records, param) {
                              var value = param[1];
                              var key = param[0];
                              return Belt_Result.flatMap(records, (function (recordsValue) {
                                            var record = Curry._2(recordParser, key, {
                                                  TAG: /* Ok */0,
                                                  _0: {
                                                    tree: value,
                                                    path: path + "." + key
                                                  }
                                                });
                                            if (record.TAG === /* Ok */0) {
                                              return {
                                                      TAG: /* Ok */0,
                                                      _0: [record._0].concat(recordsValue)
                                                    };
                                            }
                                            var error = record._0;
                                            if (error.TAG === /* CustomError */4) {
                                              return {
                                                      TAG: /* Error */1,
                                                      _0: {
                                                        TAG: /* RecordParseError */3,
                                                        _0: path + "." + key,
                                                        _1: error._0
                                                      }
                                                    };
                                            } else {
                                              return {
                                                      TAG: /* Error */1,
                                                      _0: error
                                                    };
                                            }
                                          }));
                            }), {
                            TAG: /* Ok */0,
                            _0: []
                          });
              }));
}

function parseString(x) {
  return Belt_Result.flatMap(Belt_Result.map(x, (function (param) {
                    return [
                            Js_json.decodeString(param.tree),
                            param.path
                          ];
                  })), (function (param) {
                var stringOption = param[0];
                if (stringOption !== undefined) {
                  return {
                          TAG: /* Ok */0,
                          _0: stringOption
                        };
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: {
                            TAG: /* WrongType */1,
                            _0: param[1],
                            _1: "string"
                          }
                        };
                }
              }));
}

function parseNumber(x) {
  return Belt_Result.flatMap(Belt_Result.map(x, (function (param) {
                    return [
                            Js_json.decodeNumber(param.tree),
                            param.path
                          ];
                  })), (function (param) {
                var numberOption = param[0];
                if (numberOption !== undefined) {
                  return {
                          TAG: /* Ok */0,
                          _0: numberOption
                        };
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: {
                            TAG: /* WrongType */1,
                            _0: param[1],
                            _1: "number"
                          }
                        };
                }
              }));
}

function parseArray(arrayRef, itemParser) {
  return Belt_Result.flatMap(Belt_Result.map(arrayRef, (function (param) {
                    return [
                            Js_json.decodeArray(param.tree),
                            param.path
                          ];
                  })), (function (param) {
                var path = param[1];
                var arrayOption = param[0];
                if (arrayOption !== undefined) {
                  return arrayOption.reduce((function (progress, next, i) {
                                return Belt_Result.flatMap(progress, (function (items) {
                                              var record = Curry._1(itemParser, {
                                                    TAG: /* Ok */0,
                                                    _0: {
                                                      tree: next,
                                                      path: path + "." + String(i)
                                                    }
                                                  });
                                              if (record.TAG === /* Ok */0) {
                                                return {
                                                        TAG: /* Ok */0,
                                                        _0: [record._0].concat(items)
                                                      };
                                              } else {
                                                return {
                                                        TAG: /* Error */1,
                                                        _0: record._0
                                                      };
                                              }
                                            }));
                              }), {
                              TAG: /* Ok */0,
                              _0: []
                            });
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: {
                            TAG: /* WrongType */1,
                            _0: path,
                            _1: "array"
                          }
                        };
                }
              }));
}

function field(objectRef, fieldName) {
  return Belt_Result.flatMap(Belt_Result.map(objectRef, (function (param) {
                    return [
                            Js_dict.get(param.object, fieldName),
                            param.path
                          ];
                  })), (function (param) {
                var path = param[1];
                var fieldValueOption = param[0];
                if (fieldValueOption !== undefined) {
                  return {
                          TAG: /* Ok */0,
                          _0: {
                            tree: Caml_option.valFromOption(fieldValueOption),
                            path: path + "." + fieldName
                          }
                        };
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: {
                            TAG: /* NoValueError */2,
                            _0: path + "." + fieldName
                          }
                        };
                }
              }));
}

function optional(decodedResult) {
  if (decodedResult.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: Caml_option.some(decodedResult._0)
          };
  }
  var error = decodedResult._0;
  if (error.TAG === /* NoValueError */2) {
    return {
            TAG: /* Ok */0,
            _0: undefined
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: error
          };
  }
}

var Decode = {
  map_result: Belt_Result.map,
  flatMap_result: Belt_Result.flatMap,
  optionToResult: optionToResult,
  parseJson: parseJson,
  parseObject: parseObject,
  parseRecord: parseRecord,
  parseString: parseString,
  parseNumber: parseNumber,
  parseArray: parseArray,
  field: field,
  optional: optional
};

function map2(result1, result2, mapper) {
  if (result1.TAG === /* Ok */0) {
    if (result2.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: Curry._2(mapper, result1._0, result2._0)
            };
    } else {
      return {
              TAG: /* Error */1,
              _0: result2._0
            };
    }
  } else {
    return {
            TAG: /* Error */1,
            _0: result1._0
          };
  }
}

function map3(result1, result2, result3, mapper) {
  if (result1.TAG === /* Ok */0) {
    if (result2.TAG === /* Ok */0) {
      if (result3.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: Curry._3(mapper, result1._0, result2._0, result3._0)
              };
      } else {
        return {
                TAG: /* Error */1,
                _0: result3._0
              };
      }
    } else {
      return {
              TAG: /* Error */1,
              _0: result2._0
            };
    }
  } else {
    return {
            TAG: /* Error */1,
            _0: result1._0
          };
  }
}

function map4(r1, r2, r3, r4, mapper) {
  if (r1.TAG === /* Ok */0) {
    if (r2.TAG === /* Ok */0) {
      if (r3.TAG === /* Ok */0) {
        if (r4.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: Curry._4(mapper, r1._0, r2._0, r3._0, r4._0)
                };
        } else {
          return {
                  TAG: /* Error */1,
                  _0: r4._0
                };
        }
      } else {
        return {
                TAG: /* Error */1,
                _0: r3._0
              };
      }
    } else {
      return {
              TAG: /* Error */1,
              _0: r2._0
            };
    }
  } else {
    return {
            TAG: /* Error */1,
            _0: r1._0
          };
  }
}

function map5(r1, r2, r3, r4, r5, mapper) {
  if (r1.TAG === /* Ok */0) {
    if (r2.TAG === /* Ok */0) {
      if (r3.TAG === /* Ok */0) {
        if (r4.TAG === /* Ok */0) {
          if (r5.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: Curry._5(mapper, r1._0, r2._0, r3._0, r4._0, r5._0)
                  };
          } else {
            return {
                    TAG: /* Error */1,
                    _0: r5._0
                  };
          }
        } else {
          return {
                  TAG: /* Error */1,
                  _0: r4._0
                };
        }
      } else {
        return {
                TAG: /* Error */1,
                _0: r3._0
              };
      }
    } else {
      return {
              TAG: /* Error */1,
              _0: r2._0
            };
    }
  } else {
    return {
            TAG: /* Error */1,
            _0: r1._0
          };
  }
}

function mapOptional(resultWithOption, mapper) {
  if (resultWithOption.TAG !== /* Ok */0) {
    return {
            TAG: /* Error */1,
            _0: resultWithOption._0
          };
  }
  var optValue = resultWithOption._0;
  if (optValue === undefined) {
    return {
            TAG: /* Ok */0,
            _0: undefined
          };
  }
  var result = Curry._1(mapper, {
        TAG: /* Ok */0,
        _0: Caml_option.valFromOption(optValue)
      });
  if (result.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: Caml_option.some(result._0)
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: result._0
          };
  }
}

var ResultHelpers = {
  map2: map2,
  map3: map3,
  map4: map4,
  map5: map5,
  mapOptional: mapOptional
};

exports.Decode = Decode;
exports.ResultHelpers = ResultHelpers;
/* No side effect */
