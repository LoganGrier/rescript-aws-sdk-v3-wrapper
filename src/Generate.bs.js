// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Util = require("./Util.bs.js");
var Trait = require("./Trait.bs.js");
var $$String = require("rescript/lib/js/string.js");
var Js_option = require("rescript/lib/js/js_option.js");
var SafeNames = require("./SafeNames.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

function generateType(name, definition) {
  return "type " + SafeNames.safeTypeName(name) + " = " + definition;
}

function generateField(asName, fieldName, typeName) {
  return Belt_Option.mapWithDefault(asName, "", (function (x) {
                return "@as(\"" + x + "\") ";
              })) + SafeNames.safeMemberName(fieldName) + ": " + typeName;
}

function generateRecordTypeDefinition(members) {
  return "{\n" + Belt_Array.joinWith(members, ",\n  ", (function (x) {
                return x;
              })) + "\n};";
}

function generateIntegerShape(name) {
  return generateType(name, "int");
}

function generateLongShape(name) {
  return generateType(name, "float");
}

function generateDoubleShape(name) {
  return generateType(name, "float");
}

function generateFloatShape(name) {
  return generateType(name, "float");
}

function generateBooleanShape(name) {
  return generateType(name, "bool");
}

function generateBinaryShape(name) {
  return generateType(name, "NodeJs.Buffer.t");
}

function generateResponseMetadata(param) {
  return generateType("responseMetadata", generateRecordTypeDefinition([
                  generateField(undefined, "httpStatusCode", "option<float>"),
                  generateField(undefined, "requestId", "option<string>"),
                  generateField(undefined, "extendedRequestId", "option<string>"),
                  generateField(undefined, "cfId", "option<string>"),
                  generateField(undefined, "attempts", "option<int>"),
                  generateField(undefined, "totalRetryDelay", "option<int>")
                ]));
}

function generateExceptionType(name, members) {
  return generateType(name, generateRecordTypeDefinition(Belt_Array.concat([
                      generateField(undefined, "name", "string"),
                      generateField("$fault", "fault", "[#client | #server]"),
                      generateField("$service", "service", "option<string>"),
                      generateField("$metadata", "metadata", "responseMetadata")
                    ], members)));
}

function generateStringShape(name, details) {
  var enumTrait = Js_option.map((function (traits) {
          return Caml_option.undefined_to_opt(traits.find(Trait.isEnumTrait));
        }), details.traits);
  if (enumTrait !== undefined) {
    var match = Caml_option.valFromOption(enumTrait);
    if (match !== undefined && typeof match !== "number" && match.TAG === /* EnumTrait */8) {
      var $$enum = Belt_Array.map(match._0, (function (pair) {
              return "@as(\"" + pair.value + "\")" + " #" + SafeNames.safeVariantName(pair.value);
            }));
      return "type " + SafeNames.safeTypeName(name) + " = [" + Belt_Array.joinWith($$enum, " | ", (function (x) {
                    return x;
                  })) + "]";
    }
    
  }
  return "type " + SafeNames.safeTypeName(name) + " = string";
}

function generateMember(m) {
  var safeName = SafeNames.safeMemberName(m.name);
  var required = Trait.hasTrait(m.traits, Trait.isRequiredTrait);
  var valueType = required ? SafeNames.safeTypeName(m.target) : "option<" + SafeNames.safeTypeName(m.target) + ">";
  var asName = safeName !== m.name ? m.name : undefined;
  return generateField(asName, safeName, valueType);
}

function indentString(indent) {
  var is = [];
  Belt_Array.fill(is, 0, indent, " ");
  return Belt_Array.joinWith(is, "", (function (x) {
                return x;
              }));
}

function generateStructureShape(name, details, indentOpt, param) {
  var indent = indentOpt !== undefined ? indentOpt : 0;
  var is = indentString(indent);
  var memberStrings = Belt_Array.map(details.members, (function (member) {
          return is + indentString(2) + generateMember(member);
        }));
  var isError = Trait.hasTrait(details.traits, Trait.isErrorTrait);
  if (isError) {
    return generateExceptionType(name, Belt_Array.map(details.members, generateMember));
  } else {
    return is + "type " + SafeNames.safeTypeName(name) + " = " + (
            memberStrings.length === 0 ? "unit" : "{\n" + Belt_Array.joinWith(memberStrings, ",\n", (function (x) {
                      return x;
                    })) + "\n" + is + "}"
          );
  }
}

function generateUnionMember(param) {
  return SafeNames.safeConstructorName(param.name) + "(" + SafeNames.safeTypeName(param.target) + ")";
}

function generateUnionShape(name, details) {
  var memberStrings = Belt_Array.map(details.members, generateUnionMember);
  return "type " + SafeNames.safeTypeName(name) + " = " + Belt_Array.joinWith(memberStrings, " | ", (function (x) {
                return x;
              })) + ";";
}

function generateListShape(name, target) {
  return "type " + SafeNames.safeTypeName(name) + " = array<" + SafeNames.safeTypeName(target) + ">";
}

function generateMapShape(name, param, mapValue) {
  var valueType = SafeNames.safeTypeName(mapValue.target);
  return "type " + SafeNames.safeTypeName(name) + " = Js.Dict.t< " + valueType + ">";
}

var NoServiceTrait = /* @__PURE__ */Caml_exceptions.create("Generate.NoServiceTrait");

var UnknownTimestampFormat = /* @__PURE__ */Caml_exceptions.create("Generate.UnknownTimestampFormat");

function generateServiceShape(serviceName, traits) {
  var match = Trait.findTrait(traits, Trait.isAwsApiServiceTrait);
  if (match !== undefined && !(typeof match === "number" || match.TAG !== /* ServiceTrait */3)) {
    return "type awsServiceClient;\n@module(\"@aws-sdk/client-" + serviceName + "\") @new external createClient: unit => awsServiceClient = \"" + match._0.cloudFormationName + "Client\";";
  } else {
    return "";
  }
}

function generateSetShape(name, details) {
  return "type " + SafeNames.safeTypeName(name) + " = array<" + SafeNames.safeTypeName(details.target) + ">";
}

function generateTimestampShape(name, param) {
  var timestampFormat = Trait.findTrait(Belt_Option.getWithDefault(param.traits, []), Trait.isTimestampFormatTrait);
  var typeName = SafeNames.safeTypeName(name);
  if (timestampFormat !== undefined && typeof timestampFormat !== "number" && timestampFormat.TAG === /* TimestampFormatTrait */12) {
    switch (timestampFormat._0) {
      case "date-time" :
          return "type " + typeName + " = Js.Date.t;";
      case "epoch-seconds" :
          return "type " + typeName + " = int;";
      default:
        
    }
  }
  return "type " + typeName + " = Js.Date.t;";
}

function generateOperationStructureType(varName, opStruct) {
  if (typeof opStruct === "number") {
    return "";
  } else if (opStruct.TAG === /* OperationStructure */0) {
    return generateStructureShape("#" + varName, opStruct._0, 2, undefined);
  } else {
    return "type " + varName + " = " + SafeNames.safeTypeName(opStruct._0) + ";";
  }
}

function isOperationStructureNone(opStruct) {
  if (typeof opStruct === "number") {
    return true;
  } else {
    return false;
  }
}

function generateOperationModule(moduleName, param) {
  var output = param[2];
  var input = param[1];
  var name = param[0];
  var commandName = Util.symbolName(name) + "Command";
  var request = generateOperationStructureType("request", input);
  var response = generateOperationStructureType("response", output);
  var inputType = isOperationStructureNone(input) ? "unit" : "request";
  var outputType = isOperationStructureNone(output) ? "Js.Promise.t<unit>" : "Js.Promise.t<response>";
  return "module " + Util.symbolName(name) + " = {\n" + "  type t;\n" + ("  " + request + "\n") + ("  " + response + "\n") + ("  @module(\"@aws-sdk/client-" + moduleName + "\") @new external new_: (" + inputType + ") => t = \"" + commandName + "\";\n") + ("  @send external rawSend: (awsServiceClient, t) => " + outputType + " = \"send\";\n") + "}\n";
}

function generateTypeBlock(serviceName, param) {
  var descriptor = param.descriptor;
  var name = param.name;
  if (typeof descriptor === "number") {
    if (descriptor === /* BlobShape */0) {
      return generateType(name, "NodeJs.Buffer.t");
    } else {
      return "";
    }
  }
  switch (descriptor.TAG | 0) {
    case /* ListShape */0 :
        return generateListShape(name, descriptor._0.target);
    case /* OperationShape */1 :
        return "";
    case /* StructureShape */2 :
        return generateStructureShape(name, descriptor._0, undefined, undefined);
    case /* UnionShape */3 :
        return generateUnionShape(name, descriptor._0);
    case /* ServiceShape */4 :
        return generateServiceShape(serviceName, descriptor._0.traits);
    case /* BooleanShape */5 :
        return generateType(name, "bool");
    case /* IntegerShape */6 :
        return generateType(name, "int");
    case /* StringShape */7 :
        return generateStringShape(name, descriptor._0);
    case /* MapShape */8 :
        var details = descriptor._0;
        return generateMapShape(name, details.mapKey, details.mapValue);
    case /* TimestampShape */9 :
        return generateTimestampShape(name, descriptor._0);
    case /* LongShape */10 :
    case /* FloatShape */11 :
    case /* DoubleShape */12 :
        return generateType(name, "float");
    case /* SetShape */13 :
        return generateSetShape(name, descriptor._0);
    
  }
}

function generateRecursiveTypeBlock(serviceName, shapes) {
  var shapeTypes = Belt_Array.map(shapes, (function (shape) {
          return generateTypeBlock(serviceName, shape);
        }));
  var blocks = Belt_Array.map(shapeTypes, (function (shapeType) {
          return $$String.sub(shapeType, 5, shapeType.length);
        }));
  return "type rec " + Belt_Array.joinWith(blocks, " and ", (function (block) {
                return block;
              }));
}

exports.generateType = generateType;
exports.generateField = generateField;
exports.generateRecordTypeDefinition = generateRecordTypeDefinition;
exports.generateIntegerShape = generateIntegerShape;
exports.generateLongShape = generateLongShape;
exports.generateDoubleShape = generateDoubleShape;
exports.generateFloatShape = generateFloatShape;
exports.generateBooleanShape = generateBooleanShape;
exports.generateBinaryShape = generateBinaryShape;
exports.generateResponseMetadata = generateResponseMetadata;
exports.generateExceptionType = generateExceptionType;
exports.generateStringShape = generateStringShape;
exports.generateMember = generateMember;
exports.indentString = indentString;
exports.generateStructureShape = generateStructureShape;
exports.generateUnionMember = generateUnionMember;
exports.generateUnionShape = generateUnionShape;
exports.generateListShape = generateListShape;
exports.generateMapShape = generateMapShape;
exports.NoServiceTrait = NoServiceTrait;
exports.UnknownTimestampFormat = UnknownTimestampFormat;
exports.generateServiceShape = generateServiceShape;
exports.generateSetShape = generateSetShape;
exports.generateTimestampShape = generateTimestampShape;
exports.generateOperationStructureType = generateOperationStructureType;
exports.isOperationStructureNone = isOperationStructureNone;
exports.generateOperationModule = generateOperationModule;
exports.generateTypeBlock = generateTypeBlock;
exports.generateRecursiveTypeBlock = generateRecursiveTypeBlock;
/* SafeNames Not a pure module */
