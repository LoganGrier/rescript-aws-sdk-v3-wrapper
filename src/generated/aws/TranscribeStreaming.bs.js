// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var AudioStreamUnspecified = /* @__PURE__ */Caml_exceptions.create("TranscribeStreaming-AwsSdkV3.AudioStream.AudioStreamUnspecified");

function classify(value) {
  var x = value.AudioEvent;
  if (x !== undefined) {
    return /* AudioEvent */{
            _0: x
          };
  }
  throw {
        RE_EXN_ID: AudioStreamUnspecified,
        Error: new Error()
      };
}

function make(value) {
  return {
          AudioEvent: value._0
        };
}

var AudioStream = {
  AudioStreamUnspecified: AudioStreamUnspecified,
  classify: classify,
  make: make
};

var TranscriptResultStreamUnspecified = /* @__PURE__ */Caml_exceptions.create("TranscribeStreaming-AwsSdkV3.TranscriptResultStream.TranscriptResultStreamUnspecified");

function classify$1(value) {
  var x = value.ServiceUnavailableException;
  if (x !== undefined) {
    return {
            TAG: /* ServiceUnavailableException */0,
            _0: x
          };
  }
  var x$1 = value.ConflictException;
  if (x$1 !== undefined) {
    return {
            TAG: /* ConflictException */1,
            _0: x$1
          };
  }
  var x$2 = value.InternalFailureException;
  if (x$2 !== undefined) {
    return {
            TAG: /* InternalFailureException */2,
            _0: x$2
          };
  }
  var x$3 = value.LimitExceededException;
  if (x$3 !== undefined) {
    return {
            TAG: /* LimitExceededException */3,
            _0: x$3
          };
  }
  var x$4 = value.BadRequestException;
  if (x$4 !== undefined) {
    return {
            TAG: /* BadRequestException */4,
            _0: x$4
          };
  }
  var x$5 = value.TranscriptEvent;
  if (x$5 !== undefined) {
    return {
            TAG: /* TranscriptEvent */5,
            _0: x$5
          };
  }
  throw {
        RE_EXN_ID: TranscriptResultStreamUnspecified,
        Error: new Error()
      };
}

function make$1(value) {
  switch (value.TAG | 0) {
    case /* ServiceUnavailableException */0 :
        return {
                ServiceUnavailableException: value._0,
                ConflictException: undefined,
                InternalFailureException: undefined,
                LimitExceededException: undefined,
                BadRequestException: undefined,
                TranscriptEvent: undefined
              };
    case /* ConflictException */1 :
        return {
                ServiceUnavailableException: undefined,
                ConflictException: value._0,
                InternalFailureException: undefined,
                LimitExceededException: undefined,
                BadRequestException: undefined,
                TranscriptEvent: undefined
              };
    case /* InternalFailureException */2 :
        return {
                ServiceUnavailableException: undefined,
                ConflictException: undefined,
                InternalFailureException: value._0,
                LimitExceededException: undefined,
                BadRequestException: undefined,
                TranscriptEvent: undefined
              };
    case /* LimitExceededException */3 :
        return {
                ServiceUnavailableException: undefined,
                ConflictException: undefined,
                InternalFailureException: undefined,
                LimitExceededException: value._0,
                BadRequestException: undefined,
                TranscriptEvent: undefined
              };
    case /* BadRequestException */4 :
        return {
                ServiceUnavailableException: undefined,
                ConflictException: undefined,
                InternalFailureException: undefined,
                LimitExceededException: undefined,
                BadRequestException: value._0,
                TranscriptEvent: undefined
              };
    case /* TranscriptEvent */5 :
        return {
                ServiceUnavailableException: undefined,
                ConflictException: undefined,
                InternalFailureException: undefined,
                LimitExceededException: undefined,
                BadRequestException: undefined,
                TranscriptEvent: value._0
              };
    
  }
}

var TranscriptResultStream = {
  TranscriptResultStreamUnspecified: TranscriptResultStreamUnspecified,
  classify: classify$1,
  make: make$1
};

var MedicalTranscriptResultStreamUnspecified = /* @__PURE__ */Caml_exceptions.create("TranscribeStreaming-AwsSdkV3.MedicalTranscriptResultStream.MedicalTranscriptResultStreamUnspecified");

function classify$2(value) {
  var x = value.ServiceUnavailableException;
  if (x !== undefined) {
    return {
            TAG: /* ServiceUnavailableException */0,
            _0: x
          };
  }
  var x$1 = value.ConflictException;
  if (x$1 !== undefined) {
    return {
            TAG: /* ConflictException */1,
            _0: x$1
          };
  }
  var x$2 = value.InternalFailureException;
  if (x$2 !== undefined) {
    return {
            TAG: /* InternalFailureException */2,
            _0: x$2
          };
  }
  var x$3 = value.LimitExceededException;
  if (x$3 !== undefined) {
    return {
            TAG: /* LimitExceededException */3,
            _0: x$3
          };
  }
  var x$4 = value.BadRequestException;
  if (x$4 !== undefined) {
    return {
            TAG: /* BadRequestException */4,
            _0: x$4
          };
  }
  var x$5 = value.TranscriptEvent;
  if (x$5 !== undefined) {
    return {
            TAG: /* TranscriptEvent */5,
            _0: x$5
          };
  }
  throw {
        RE_EXN_ID: MedicalTranscriptResultStreamUnspecified,
        Error: new Error()
      };
}

function make$2(value) {
  switch (value.TAG | 0) {
    case /* ServiceUnavailableException */0 :
        return {
                ServiceUnavailableException: value._0,
                ConflictException: undefined,
                InternalFailureException: undefined,
                LimitExceededException: undefined,
                BadRequestException: undefined,
                TranscriptEvent: undefined
              };
    case /* ConflictException */1 :
        return {
                ServiceUnavailableException: undefined,
                ConflictException: value._0,
                InternalFailureException: undefined,
                LimitExceededException: undefined,
                BadRequestException: undefined,
                TranscriptEvent: undefined
              };
    case /* InternalFailureException */2 :
        return {
                ServiceUnavailableException: undefined,
                ConflictException: undefined,
                InternalFailureException: value._0,
                LimitExceededException: undefined,
                BadRequestException: undefined,
                TranscriptEvent: undefined
              };
    case /* LimitExceededException */3 :
        return {
                ServiceUnavailableException: undefined,
                ConflictException: undefined,
                InternalFailureException: undefined,
                LimitExceededException: value._0,
                BadRequestException: undefined,
                TranscriptEvent: undefined
              };
    case /* BadRequestException */4 :
        return {
                ServiceUnavailableException: undefined,
                ConflictException: undefined,
                InternalFailureException: undefined,
                LimitExceededException: undefined,
                BadRequestException: value._0,
                TranscriptEvent: undefined
              };
    case /* TranscriptEvent */5 :
        return {
                ServiceUnavailableException: undefined,
                ConflictException: undefined,
                InternalFailureException: undefined,
                LimitExceededException: undefined,
                BadRequestException: undefined,
                TranscriptEvent: value._0
              };
    
  }
}

var MedicalTranscriptResultStream = {
  MedicalTranscriptResultStreamUnspecified: MedicalTranscriptResultStreamUnspecified,
  classify: classify$2,
  make: make$2
};

var StartStreamTranscription = {};

var StartMedicalStreamTranscription = {};

exports.AudioStream = AudioStream;
exports.TranscriptResultStream = TranscriptResultStream;
exports.MedicalTranscriptResultStream = MedicalTranscriptResultStream;
exports.StartStreamTranscription = StartStreamTranscription;
exports.StartMedicalStreamTranscription = StartMedicalStreamTranscription;
/* No side effect */
