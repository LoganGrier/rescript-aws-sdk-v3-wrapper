// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var HeaderMatchMethodUnspecified = /* @__PURE__ */Caml_exceptions.create("AppMesh-AwsSdkV3.HeaderMatchMethod.HeaderMatchMethodUnspecified");

function classify(value) {
  var x = value.suffix;
  if (x !== undefined) {
    return {
            TAG: /* Suffix */0,
            _0: x
          };
  }
  var x$1 = value.prefix;
  if (x$1 !== undefined) {
    return {
            TAG: /* Prefix */1,
            _0: x$1
          };
  }
  var x$2 = value.range;
  if (x$2 !== undefined) {
    return {
            TAG: /* Range */2,
            _0: x$2
          };
  }
  var x$3 = value.regex;
  if (x$3 !== undefined) {
    return {
            TAG: /* Regex */3,
            _0: x$3
          };
  }
  var x$4 = value.exact;
  if (x$4 !== undefined) {
    return {
            TAG: /* Exact */4,
            _0: x$4
          };
  }
  throw {
        RE_EXN_ID: HeaderMatchMethodUnspecified,
        Error: new Error()
      };
}

function make(value) {
  switch (value.TAG | 0) {
    case /* Suffix */0 :
        return {
                suffix: value._0,
                prefix: undefined,
                range: undefined,
                regex: undefined,
                exact: undefined
              };
    case /* Prefix */1 :
        return {
                suffix: undefined,
                prefix: value._0,
                range: undefined,
                regex: undefined,
                exact: undefined
              };
    case /* Range */2 :
        return {
                suffix: undefined,
                prefix: undefined,
                range: value._0,
                regex: undefined,
                exact: undefined
              };
    case /* Regex */3 :
        return {
                suffix: undefined,
                prefix: undefined,
                range: undefined,
                regex: value._0,
                exact: undefined
              };
    case /* Exact */4 :
        return {
                suffix: undefined,
                prefix: undefined,
                range: undefined,
                regex: undefined,
                exact: value._0
              };
    
  }
}

var HeaderMatchMethod = {
  HeaderMatchMethodUnspecified: HeaderMatchMethodUnspecified,
  classify: classify,
  make: make
};

var GrpcRouteMetadataMatchMethodUnspecified = /* @__PURE__ */Caml_exceptions.create("AppMesh-AwsSdkV3.GrpcRouteMetadataMatchMethod.GrpcRouteMetadataMatchMethodUnspecified");

function classify$1(value) {
  var x = value.suffix;
  if (x !== undefined) {
    return {
            TAG: /* Suffix */0,
            _0: x
          };
  }
  var x$1 = value.prefix;
  if (x$1 !== undefined) {
    return {
            TAG: /* Prefix */1,
            _0: x$1
          };
  }
  var x$2 = value.range;
  if (x$2 !== undefined) {
    return {
            TAG: /* Range */2,
            _0: x$2
          };
  }
  var x$3 = value.regex;
  if (x$3 !== undefined) {
    return {
            TAG: /* Regex */3,
            _0: x$3
          };
  }
  var x$4 = value.exact;
  if (x$4 !== undefined) {
    return {
            TAG: /* Exact */4,
            _0: x$4
          };
  }
  throw {
        RE_EXN_ID: GrpcRouteMetadataMatchMethodUnspecified,
        Error: new Error()
      };
}

function make$1(value) {
  switch (value.TAG | 0) {
    case /* Suffix */0 :
        return {
                suffix: value._0,
                prefix: undefined,
                range: undefined,
                regex: undefined,
                exact: undefined
              };
    case /* Prefix */1 :
        return {
                suffix: undefined,
                prefix: value._0,
                range: undefined,
                regex: undefined,
                exact: undefined
              };
    case /* Range */2 :
        return {
                suffix: undefined,
                prefix: undefined,
                range: value._0,
                regex: undefined,
                exact: undefined
              };
    case /* Regex */3 :
        return {
                suffix: undefined,
                prefix: undefined,
                range: undefined,
                regex: value._0,
                exact: undefined
              };
    case /* Exact */4 :
        return {
                suffix: undefined,
                prefix: undefined,
                range: undefined,
                regex: undefined,
                exact: value._0
              };
    
  }
}

var GrpcRouteMetadataMatchMethod = {
  GrpcRouteMetadataMatchMethodUnspecified: GrpcRouteMetadataMatchMethodUnspecified,
  classify: classify$1,
  make: make$1
};

var VirtualServiceProviderUnspecified = /* @__PURE__ */Caml_exceptions.create("AppMesh-AwsSdkV3.VirtualServiceProvider.VirtualServiceProviderUnspecified");

function classify$2(value) {
  var x = value.virtualRouter;
  if (x !== undefined) {
    return {
            TAG: /* VirtualRouter */0,
            _0: x
          };
  }
  var x$1 = value.virtualNode;
  if (x$1 !== undefined) {
    return {
            TAG: /* VirtualNode */1,
            _0: x$1
          };
  }
  throw {
        RE_EXN_ID: VirtualServiceProviderUnspecified,
        Error: new Error()
      };
}

function make$2(value) {
  if (value.TAG === /* VirtualRouter */0) {
    return {
            virtualRouter: value._0,
            virtualNode: undefined
          };
  } else {
    return {
            virtualRouter: undefined,
            virtualNode: value._0
          };
  }
}

var VirtualServiceProvider = {
  VirtualServiceProviderUnspecified: VirtualServiceProviderUnspecified,
  classify: classify$2,
  make: make$2
};

var VirtualNodeConnectionPoolUnspecified = /* @__PURE__ */Caml_exceptions.create("AppMesh-AwsSdkV3.VirtualNodeConnectionPool.VirtualNodeConnectionPoolUnspecified");

function classify$3(value) {
  var x = value.grpc;
  if (x !== undefined) {
    return {
            TAG: /* Grpc */0,
            _0: x
          };
  }
  var x$1 = value.http2;
  if (x$1 !== undefined) {
    return {
            TAG: /* Http2 */1,
            _0: x$1
          };
  }
  var x$2 = value.http;
  if (x$2 !== undefined) {
    return {
            TAG: /* Http */2,
            _0: x$2
          };
  }
  var x$3 = value.tcp;
  if (x$3 !== undefined) {
    return {
            TAG: /* Tcp */3,
            _0: x$3
          };
  }
  throw {
        RE_EXN_ID: VirtualNodeConnectionPoolUnspecified,
        Error: new Error()
      };
}

function make$3(value) {
  switch (value.TAG | 0) {
    case /* Grpc */0 :
        return {
                grpc: value._0,
                http2: undefined,
                http: undefined,
                tcp: undefined
              };
    case /* Http2 */1 :
        return {
                grpc: undefined,
                http2: value._0,
                http: undefined,
                tcp: undefined
              };
    case /* Http */2 :
        return {
                grpc: undefined,
                http2: undefined,
                http: value._0,
                tcp: undefined
              };
    case /* Tcp */3 :
        return {
                grpc: undefined,
                http2: undefined,
                http: undefined,
                tcp: value._0
              };
    
  }
}

var VirtualNodeConnectionPool = {
  VirtualNodeConnectionPoolUnspecified: VirtualNodeConnectionPoolUnspecified,
  classify: classify$3,
  make: make$3
};

var VirtualGatewayListenerTlsValidationContextTrustUnspecified = /* @__PURE__ */Caml_exceptions.create("AppMesh-AwsSdkV3.VirtualGatewayListenerTlsValidationContextTrust.VirtualGatewayListenerTlsValidationContextTrustUnspecified");

function classify$4(value) {
  var x = value.sds;
  if (x !== undefined) {
    return {
            TAG: /* Sds */0,
            _0: x
          };
  }
  var x$1 = value.file;
  if (x$1 !== undefined) {
    return {
            TAG: /* File */1,
            _0: x$1
          };
  }
  throw {
        RE_EXN_ID: VirtualGatewayListenerTlsValidationContextTrustUnspecified,
        Error: new Error()
      };
}

function make$4(value) {
  if (value.TAG === /* Sds */0) {
    return {
            sds: value._0,
            file: undefined
          };
  } else {
    return {
            sds: undefined,
            file: value._0
          };
  }
}

var VirtualGatewayListenerTlsValidationContextTrust = {
  VirtualGatewayListenerTlsValidationContextTrustUnspecified: VirtualGatewayListenerTlsValidationContextTrustUnspecified,
  classify: classify$4,
  make: make$4
};

var VirtualGatewayListenerTlsCertificateUnspecified = /* @__PURE__ */Caml_exceptions.create("AppMesh-AwsSdkV3.VirtualGatewayListenerTlsCertificate.VirtualGatewayListenerTlsCertificateUnspecified");

function classify$5(value) {
  var x = value.sds;
  if (x !== undefined) {
    return {
            TAG: /* Sds */0,
            _0: x
          };
  }
  var x$1 = value.file;
  if (x$1 !== undefined) {
    return {
            TAG: /* File */1,
            _0: x$1
          };
  }
  var x$2 = value.acm;
  if (x$2 !== undefined) {
    return {
            TAG: /* Acm */2,
            _0: x$2
          };
  }
  throw {
        RE_EXN_ID: VirtualGatewayListenerTlsCertificateUnspecified,
        Error: new Error()
      };
}

function make$5(value) {
  switch (value.TAG | 0) {
    case /* Sds */0 :
        return {
                sds: value._0,
                file: undefined,
                acm: undefined
              };
    case /* File */1 :
        return {
                sds: undefined,
                file: value._0,
                acm: undefined
              };
    case /* Acm */2 :
        return {
                sds: undefined,
                file: undefined,
                acm: value._0
              };
    
  }
}

var VirtualGatewayListenerTlsCertificate = {
  VirtualGatewayListenerTlsCertificateUnspecified: VirtualGatewayListenerTlsCertificateUnspecified,
  classify: classify$5,
  make: make$5
};

var VirtualGatewayConnectionPoolUnspecified = /* @__PURE__ */Caml_exceptions.create("AppMesh-AwsSdkV3.VirtualGatewayConnectionPool.VirtualGatewayConnectionPoolUnspecified");

function classify$6(value) {
  var x = value.grpc;
  if (x !== undefined) {
    return {
            TAG: /* Grpc */0,
            _0: x
          };
  }
  var x$1 = value.http2;
  if (x$1 !== undefined) {
    return {
            TAG: /* Http2 */1,
            _0: x$1
          };
  }
  var x$2 = value.http;
  if (x$2 !== undefined) {
    return {
            TAG: /* Http */2,
            _0: x$2
          };
  }
  throw {
        RE_EXN_ID: VirtualGatewayConnectionPoolUnspecified,
        Error: new Error()
      };
}

function make$6(value) {
  switch (value.TAG | 0) {
    case /* Grpc */0 :
        return {
                grpc: value._0,
                http2: undefined,
                http: undefined
              };
    case /* Http2 */1 :
        return {
                grpc: undefined,
                http2: value._0,
                http: undefined
              };
    case /* Http */2 :
        return {
                grpc: undefined,
                http2: undefined,
                http: value._0
              };
    
  }
}

var VirtualGatewayConnectionPool = {
  VirtualGatewayConnectionPoolUnspecified: VirtualGatewayConnectionPoolUnspecified,
  classify: classify$6,
  make: make$6
};

var VirtualGatewayClientTlsCertificateUnspecified = /* @__PURE__ */Caml_exceptions.create("AppMesh-AwsSdkV3.VirtualGatewayClientTlsCertificate.VirtualGatewayClientTlsCertificateUnspecified");

function classify$7(value) {
  var x = value.sds;
  if (x !== undefined) {
    return {
            TAG: /* Sds */0,
            _0: x
          };
  }
  var x$1 = value.file;
  if (x$1 !== undefined) {
    return {
            TAG: /* File */1,
            _0: x$1
          };
  }
  throw {
        RE_EXN_ID: VirtualGatewayClientTlsCertificateUnspecified,
        Error: new Error()
      };
}

function make$7(value) {
  if (value.TAG === /* Sds */0) {
    return {
            sds: value._0,
            file: undefined
          };
  } else {
    return {
            sds: undefined,
            file: value._0
          };
  }
}

var VirtualGatewayClientTlsCertificate = {
  VirtualGatewayClientTlsCertificateUnspecified: VirtualGatewayClientTlsCertificateUnspecified,
  classify: classify$7,
  make: make$7
};

var VirtualGatewayAccessLogUnspecified = /* @__PURE__ */Caml_exceptions.create("AppMesh-AwsSdkV3.VirtualGatewayAccessLog.VirtualGatewayAccessLogUnspecified");

function classify$8(value) {
  var x = value.file;
  if (x !== undefined) {
    return /* File */{
            _0: x
          };
  }
  throw {
        RE_EXN_ID: VirtualGatewayAccessLogUnspecified,
        Error: new Error()
      };
}

function make$8(value) {
  return {
          file: value._0
        };
}

var VirtualGatewayAccessLog = {
  VirtualGatewayAccessLogUnspecified: VirtualGatewayAccessLogUnspecified,
  classify: classify$8,
  make: make$8
};

var ListenerTlsValidationContextTrustUnspecified = /* @__PURE__ */Caml_exceptions.create("AppMesh-AwsSdkV3.ListenerTlsValidationContextTrust.ListenerTlsValidationContextTrustUnspecified");

function classify$9(value) {
  var x = value.sds;
  if (x !== undefined) {
    return {
            TAG: /* Sds */0,
            _0: x
          };
  }
  var x$1 = value.file;
  if (x$1 !== undefined) {
    return {
            TAG: /* File */1,
            _0: x$1
          };
  }
  throw {
        RE_EXN_ID: ListenerTlsValidationContextTrustUnspecified,
        Error: new Error()
      };
}

function make$9(value) {
  if (value.TAG === /* Sds */0) {
    return {
            sds: value._0,
            file: undefined
          };
  } else {
    return {
            sds: undefined,
            file: value._0
          };
  }
}

var ListenerTlsValidationContextTrust = {
  ListenerTlsValidationContextTrustUnspecified: ListenerTlsValidationContextTrustUnspecified,
  classify: classify$9,
  make: make$9
};

var ListenerTlsCertificateUnspecified = /* @__PURE__ */Caml_exceptions.create("AppMesh-AwsSdkV3.ListenerTlsCertificate.ListenerTlsCertificateUnspecified");

function classify$10(value) {
  var x = value.sds;
  if (x !== undefined) {
    return {
            TAG: /* Sds */0,
            _0: x
          };
  }
  var x$1 = value.file;
  if (x$1 !== undefined) {
    return {
            TAG: /* File */1,
            _0: x$1
          };
  }
  var x$2 = value.acm;
  if (x$2 !== undefined) {
    return {
            TAG: /* Acm */2,
            _0: x$2
          };
  }
  throw {
        RE_EXN_ID: ListenerTlsCertificateUnspecified,
        Error: new Error()
      };
}

function make$10(value) {
  switch (value.TAG | 0) {
    case /* Sds */0 :
        return {
                sds: value._0,
                file: undefined,
                acm: undefined
              };
    case /* File */1 :
        return {
                sds: undefined,
                file: value._0,
                acm: undefined
              };
    case /* Acm */2 :
        return {
                sds: undefined,
                file: undefined,
                acm: value._0
              };
    
  }
}

var ListenerTlsCertificate = {
  ListenerTlsCertificateUnspecified: ListenerTlsCertificateUnspecified,
  classify: classify$10,
  make: make$10
};

var ClientTlsCertificateUnspecified = /* @__PURE__ */Caml_exceptions.create("AppMesh-AwsSdkV3.ClientTlsCertificate.ClientTlsCertificateUnspecified");

function classify$11(value) {
  var x = value.sds;
  if (x !== undefined) {
    return {
            TAG: /* Sds */0,
            _0: x
          };
  }
  var x$1 = value.file;
  if (x$1 !== undefined) {
    return {
            TAG: /* File */1,
            _0: x$1
          };
  }
  throw {
        RE_EXN_ID: ClientTlsCertificateUnspecified,
        Error: new Error()
      };
}

function make$11(value) {
  if (value.TAG === /* Sds */0) {
    return {
            sds: value._0,
            file: undefined
          };
  } else {
    return {
            sds: undefined,
            file: value._0
          };
  }
}

var ClientTlsCertificate = {
  ClientTlsCertificateUnspecified: ClientTlsCertificateUnspecified,
  classify: classify$11,
  make: make$11
};

var AccessLogUnspecified = /* @__PURE__ */Caml_exceptions.create("AppMesh-AwsSdkV3.AccessLog.AccessLogUnspecified");

function classify$12(value) {
  var x = value.file;
  if (x !== undefined) {
    return /* File */{
            _0: x
          };
  }
  throw {
        RE_EXN_ID: AccessLogUnspecified,
        Error: new Error()
      };
}

function make$12(value) {
  return {
          file: value._0
        };
}

var AccessLog = {
  AccessLogUnspecified: AccessLogUnspecified,
  classify: classify$12,
  make: make$12
};

var VirtualGatewayTlsValidationContextTrustUnspecified = /* @__PURE__ */Caml_exceptions.create("AppMesh-AwsSdkV3.VirtualGatewayTlsValidationContextTrust.VirtualGatewayTlsValidationContextTrustUnspecified");

function classify$13(value) {
  var x = value.sds;
  if (x !== undefined) {
    return {
            TAG: /* Sds */0,
            _0: x
          };
  }
  var x$1 = value.file;
  if (x$1 !== undefined) {
    return {
            TAG: /* File */1,
            _0: x$1
          };
  }
  var x$2 = value.acm;
  if (x$2 !== undefined) {
    return {
            TAG: /* Acm */2,
            _0: x$2
          };
  }
  throw {
        RE_EXN_ID: VirtualGatewayTlsValidationContextTrustUnspecified,
        Error: new Error()
      };
}

function make$13(value) {
  switch (value.TAG | 0) {
    case /* Sds */0 :
        return {
                sds: value._0,
                file: undefined,
                acm: undefined
              };
    case /* File */1 :
        return {
                sds: undefined,
                file: value._0,
                acm: undefined
              };
    case /* Acm */2 :
        return {
                sds: undefined,
                file: undefined,
                acm: value._0
              };
    
  }
}

var VirtualGatewayTlsValidationContextTrust = {
  VirtualGatewayTlsValidationContextTrustUnspecified: VirtualGatewayTlsValidationContextTrustUnspecified,
  classify: classify$13,
  make: make$13
};

var TlsValidationContextTrustUnspecified = /* @__PURE__ */Caml_exceptions.create("AppMesh-AwsSdkV3.TlsValidationContextTrust.TlsValidationContextTrustUnspecified");

function classify$14(value) {
  var x = value.sds;
  if (x !== undefined) {
    return {
            TAG: /* Sds */0,
            _0: x
          };
  }
  var x$1 = value.file;
  if (x$1 !== undefined) {
    return {
            TAG: /* File */1,
            _0: x$1
          };
  }
  var x$2 = value.acm;
  if (x$2 !== undefined) {
    return {
            TAG: /* Acm */2,
            _0: x$2
          };
  }
  throw {
        RE_EXN_ID: TlsValidationContextTrustUnspecified,
        Error: new Error()
      };
}

function make$14(value) {
  switch (value.TAG | 0) {
    case /* Sds */0 :
        return {
                sds: value._0,
                file: undefined,
                acm: undefined
              };
    case /* File */1 :
        return {
                sds: undefined,
                file: value._0,
                acm: undefined
              };
    case /* Acm */2 :
        return {
                sds: undefined,
                file: undefined,
                acm: value._0
              };
    
  }
}

var TlsValidationContextTrust = {
  TlsValidationContextTrustUnspecified: TlsValidationContextTrustUnspecified,
  classify: classify$14,
  make: make$14
};

var ListenerTimeoutUnspecified = /* @__PURE__ */Caml_exceptions.create("AppMesh-AwsSdkV3.ListenerTimeout.ListenerTimeoutUnspecified");

function classify$15(value) {
  var x = value.grpc;
  if (x !== undefined) {
    return {
            TAG: /* Grpc */0,
            _0: x
          };
  }
  var x$1 = value.http2;
  if (x$1 !== undefined) {
    return {
            TAG: /* Http2 */1,
            _0: x$1
          };
  }
  var x$2 = value.http;
  if (x$2 !== undefined) {
    return {
            TAG: /* Http */2,
            _0: x$2
          };
  }
  var x$3 = value.tcp;
  if (x$3 !== undefined) {
    return {
            TAG: /* Tcp */3,
            _0: x$3
          };
  }
  throw {
        RE_EXN_ID: ListenerTimeoutUnspecified,
        Error: new Error()
      };
}

function make$15(value) {
  switch (value.TAG | 0) {
    case /* Grpc */0 :
        return {
                grpc: value._0,
                http2: undefined,
                http: undefined,
                tcp: undefined
              };
    case /* Http2 */1 :
        return {
                grpc: undefined,
                http2: value._0,
                http: undefined,
                tcp: undefined
              };
    case /* Http */2 :
        return {
                grpc: undefined,
                http2: undefined,
                http: value._0,
                tcp: undefined
              };
    case /* Tcp */3 :
        return {
                grpc: undefined,
                http2: undefined,
                http: undefined,
                tcp: value._0
              };
    
  }
}

var ListenerTimeout = {
  ListenerTimeoutUnspecified: ListenerTimeoutUnspecified,
  classify: classify$15,
  make: make$15
};

var ServiceDiscoveryUnspecified = /* @__PURE__ */Caml_exceptions.create("AppMesh-AwsSdkV3.ServiceDiscovery.ServiceDiscoveryUnspecified");

function classify$16(value) {
  var x = value.awsCloudMap;
  if (x !== undefined) {
    return {
            TAG: /* AwsCloudMap */0,
            _0: x
          };
  }
  var x$1 = value.dns;
  if (x$1 !== undefined) {
    return {
            TAG: /* Dns */1,
            _0: x$1
          };
  }
  throw {
        RE_EXN_ID: ServiceDiscoveryUnspecified,
        Error: new Error()
      };
}

function make$16(value) {
  if (value.TAG === /* AwsCloudMap */0) {
    return {
            awsCloudMap: value._0,
            dns: undefined
          };
  } else {
    return {
            awsCloudMap: undefined,
            dns: value._0
          };
  }
}

var ServiceDiscovery = {
  ServiceDiscoveryUnspecified: ServiceDiscoveryUnspecified,
  classify: classify$16,
  make: make$16
};

var BackendUnspecified = /* @__PURE__ */Caml_exceptions.create("AppMesh-AwsSdkV3.Backend.BackendUnspecified");

function classify$17(value) {
  var x = value.virtualService;
  if (x !== undefined) {
    return /* VirtualService */{
            _0: x
          };
  }
  throw {
        RE_EXN_ID: BackendUnspecified,
        Error: new Error()
      };
}

function make$17(value) {
  return {
          virtualService: value._0
        };
}

var Backend = {
  BackendUnspecified: BackendUnspecified,
  classify: classify$17,
  make: make$17
};

var UntagResource = {};

var TagResource = {};

var ListVirtualServices = {};

var ListVirtualRouters = {};

var ListVirtualNodes = {};

var ListVirtualGateways = {};

var ListTagsForResource = {};

var ListRoutes = {};

var ListMeshes = {};

var ListGatewayRoutes = {};

var UpdateMesh = {};

var DescribeMesh = {};

var DeleteMesh = {};

var CreateMesh = {};

var UpdateVirtualService = {};

var DescribeVirtualService = {};

var DeleteVirtualService = {};

var CreateVirtualService = {};

var UpdateVirtualRouter = {};

var DescribeVirtualRouter = {};

var DeleteVirtualRouter = {};

var CreateVirtualRouter = {};

var UpdateGatewayRoute = {};

var DescribeGatewayRoute = {};

var DeleteGatewayRoute = {};

var CreateGatewayRoute = {};

var UpdateRoute = {};

var DescribeRoute = {};

var DeleteRoute = {};

var CreateRoute = {};

var UpdateVirtualGateway = {};

var DescribeVirtualGateway = {};

var DeleteVirtualGateway = {};

var CreateVirtualGateway = {};

var UpdateVirtualNode = {};

var DescribeVirtualNode = {};

var DeleteVirtualNode = {};

var CreateVirtualNode = {};

exports.HeaderMatchMethod = HeaderMatchMethod;
exports.GrpcRouteMetadataMatchMethod = GrpcRouteMetadataMatchMethod;
exports.VirtualServiceProvider = VirtualServiceProvider;
exports.VirtualNodeConnectionPool = VirtualNodeConnectionPool;
exports.VirtualGatewayListenerTlsValidationContextTrust = VirtualGatewayListenerTlsValidationContextTrust;
exports.VirtualGatewayListenerTlsCertificate = VirtualGatewayListenerTlsCertificate;
exports.VirtualGatewayConnectionPool = VirtualGatewayConnectionPool;
exports.VirtualGatewayClientTlsCertificate = VirtualGatewayClientTlsCertificate;
exports.VirtualGatewayAccessLog = VirtualGatewayAccessLog;
exports.ListenerTlsValidationContextTrust = ListenerTlsValidationContextTrust;
exports.ListenerTlsCertificate = ListenerTlsCertificate;
exports.ClientTlsCertificate = ClientTlsCertificate;
exports.AccessLog = AccessLog;
exports.VirtualGatewayTlsValidationContextTrust = VirtualGatewayTlsValidationContextTrust;
exports.TlsValidationContextTrust = TlsValidationContextTrust;
exports.ListenerTimeout = ListenerTimeout;
exports.ServiceDiscovery = ServiceDiscovery;
exports.Backend = Backend;
exports.UntagResource = UntagResource;
exports.TagResource = TagResource;
exports.ListVirtualServices = ListVirtualServices;
exports.ListVirtualRouters = ListVirtualRouters;
exports.ListVirtualNodes = ListVirtualNodes;
exports.ListVirtualGateways = ListVirtualGateways;
exports.ListTagsForResource = ListTagsForResource;
exports.ListRoutes = ListRoutes;
exports.ListMeshes = ListMeshes;
exports.ListGatewayRoutes = ListGatewayRoutes;
exports.UpdateMesh = UpdateMesh;
exports.DescribeMesh = DescribeMesh;
exports.DeleteMesh = DeleteMesh;
exports.CreateMesh = CreateMesh;
exports.UpdateVirtualService = UpdateVirtualService;
exports.DescribeVirtualService = DescribeVirtualService;
exports.DeleteVirtualService = DeleteVirtualService;
exports.CreateVirtualService = CreateVirtualService;
exports.UpdateVirtualRouter = UpdateVirtualRouter;
exports.DescribeVirtualRouter = DescribeVirtualRouter;
exports.DeleteVirtualRouter = DeleteVirtualRouter;
exports.CreateVirtualRouter = CreateVirtualRouter;
exports.UpdateGatewayRoute = UpdateGatewayRoute;
exports.DescribeGatewayRoute = DescribeGatewayRoute;
exports.DeleteGatewayRoute = DeleteGatewayRoute;
exports.CreateGatewayRoute = CreateGatewayRoute;
exports.UpdateRoute = UpdateRoute;
exports.DescribeRoute = DescribeRoute;
exports.DeleteRoute = DeleteRoute;
exports.CreateRoute = CreateRoute;
exports.UpdateVirtualGateway = UpdateVirtualGateway;
exports.DescribeVirtualGateway = DescribeVirtualGateway;
exports.DeleteVirtualGateway = DeleteVirtualGateway;
exports.CreateVirtualGateway = CreateVirtualGateway;
exports.UpdateVirtualNode = UpdateVirtualNode;
exports.DescribeVirtualNode = DescribeVirtualNode;
exports.DeleteVirtualNode = DeleteVirtualNode;
exports.CreateVirtualNode = CreateVirtualNode;
/* No side effect */
