// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var TooManyTagsException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.TooManyTagsException");

var ResourceNotFoundException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.ResourceNotFoundException");

var RequestInProgressException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.RequestInProgressException");

var RequestFailedException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.RequestFailedException");

var RequestAlreadyProcessedException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.RequestAlreadyProcessedException");

var PermissionAlreadyExistsException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.PermissionAlreadyExistsException");

var MalformedCertificateException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.MalformedCertificateException");

var MalformedCSRException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.MalformedCSRException");

var LockoutPreventedException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.LockoutPreventedException");

var LimitExceededException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.LimitExceededException");

var InvalidTagException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.InvalidTagException");

var InvalidStateException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.InvalidStateException");

var InvalidRequestException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.InvalidRequestException");

var InvalidPolicyException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.InvalidPolicyException");

var InvalidNextTokenException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.InvalidNextTokenException");

var InvalidArnException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.InvalidArnException");

var InvalidArgsException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.InvalidArgsException");

var ConcurrentModificationException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.ConcurrentModificationException");

var CertificateMismatchException = /* @__PURE__ */Caml_exceptions.create("ACMPCA.CertificateMismatchException");

var RevokeCertificate = {};

var RestoreCertificateAuthority = {};

var PutPolicy = {};

var ImportCertificateAuthorityCertificate = {};

var GetPolicy = {};

var GetCertificateAuthorityCsr = {};

var GetCertificateAuthorityCertificate = {};

var GetCertificate = {};

var DescribeCertificateAuthorityAuditReport = {};

var DeletePolicy = {};

var DeletePermission = {};

var DeleteCertificateAuthority = {};

var CreateCertificateAuthorityAuditReport = {};

var CreatePermission = {};

var UpdateCertificateAuthority = {};

var UntagCertificateAuthority = {};

var TagCertificateAuthority = {};

var ListTags = {};

var ListPermissions = {};

var CreateCertificateAuthority = {};

var IssueCertificate = {};

var DescribeCertificateAuthority = {};

var ListCertificateAuthorities = {};

exports.TooManyTagsException = TooManyTagsException;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.RequestInProgressException = RequestInProgressException;
exports.RequestFailedException = RequestFailedException;
exports.RequestAlreadyProcessedException = RequestAlreadyProcessedException;
exports.PermissionAlreadyExistsException = PermissionAlreadyExistsException;
exports.MalformedCertificateException = MalformedCertificateException;
exports.MalformedCSRException = MalformedCSRException;
exports.LockoutPreventedException = LockoutPreventedException;
exports.LimitExceededException = LimitExceededException;
exports.InvalidTagException = InvalidTagException;
exports.InvalidStateException = InvalidStateException;
exports.InvalidRequestException = InvalidRequestException;
exports.InvalidPolicyException = InvalidPolicyException;
exports.InvalidNextTokenException = InvalidNextTokenException;
exports.InvalidArnException = InvalidArnException;
exports.InvalidArgsException = InvalidArgsException;
exports.ConcurrentModificationException = ConcurrentModificationException;
exports.CertificateMismatchException = CertificateMismatchException;
exports.RevokeCertificate = RevokeCertificate;
exports.RestoreCertificateAuthority = RestoreCertificateAuthority;
exports.PutPolicy = PutPolicy;
exports.ImportCertificateAuthorityCertificate = ImportCertificateAuthorityCertificate;
exports.GetPolicy = GetPolicy;
exports.GetCertificateAuthorityCsr = GetCertificateAuthorityCsr;
exports.GetCertificateAuthorityCertificate = GetCertificateAuthorityCertificate;
exports.GetCertificate = GetCertificate;
exports.DescribeCertificateAuthorityAuditReport = DescribeCertificateAuthorityAuditReport;
exports.DeletePolicy = DeletePolicy;
exports.DeletePermission = DeletePermission;
exports.DeleteCertificateAuthority = DeleteCertificateAuthority;
exports.CreateCertificateAuthorityAuditReport = CreateCertificateAuthorityAuditReport;
exports.CreatePermission = CreatePermission;
exports.UpdateCertificateAuthority = UpdateCertificateAuthority;
exports.UntagCertificateAuthority = UntagCertificateAuthority;
exports.TagCertificateAuthority = TagCertificateAuthority;
exports.ListTags = ListTags;
exports.ListPermissions = ListPermissions;
exports.CreateCertificateAuthority = CreateCertificateAuthority;
exports.IssueCertificate = IssueCertificate;
exports.DescribeCertificateAuthority = DescribeCertificateAuthority;
exports.ListCertificateAuthorities = ListCertificateAuthorities;
/* No side effect */
