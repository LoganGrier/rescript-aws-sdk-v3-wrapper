// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("rescript/lib/js/caml_option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var SelectObjectContentEventStreamUnspecified = /* @__PURE__ */Caml_exceptions.create("S3-AwsSdkV3.SelectObjectContentEventStream.SelectObjectContentEventStreamUnspecified");

function classify(value) {
  var x = value.End;
  if (x !== undefined) {
    return {
            TAG: /* End */0,
            _0: Caml_option.valFromOption(x)
          };
  }
  var x$1 = value.Cont;
  if (x$1 !== undefined) {
    return {
            TAG: /* Cont */1,
            _0: Caml_option.valFromOption(x$1)
          };
  }
  var x$2 = value.Progress;
  if (x$2 !== undefined) {
    return {
            TAG: /* Progress */2,
            _0: x$2
          };
  }
  var x$3 = value.Stats;
  if (x$3 !== undefined) {
    return {
            TAG: /* Stats */3,
            _0: x$3
          };
  }
  var x$4 = value.Records;
  if (x$4 !== undefined) {
    return {
            TAG: /* Records */4,
            _0: x$4
          };
  }
  throw {
        RE_EXN_ID: SelectObjectContentEventStreamUnspecified,
        Error: new Error()
      };
}

function make(value) {
  switch (value.TAG | 0) {
    case /* End */0 :
        return {
                End: Caml_option.some(value._0),
                Cont: undefined,
                Progress: undefined,
                Stats: undefined,
                Records: undefined
              };
    case /* Cont */1 :
        return {
                End: undefined,
                Cont: Caml_option.some(value._0),
                Progress: undefined,
                Stats: undefined,
                Records: undefined
              };
    case /* Progress */2 :
        return {
                End: undefined,
                Cont: undefined,
                Progress: value._0,
                Stats: undefined,
                Records: undefined
              };
    case /* Stats */3 :
        return {
                End: undefined,
                Cont: undefined,
                Progress: undefined,
                Stats: value._0,
                Records: undefined
              };
    case /* Records */4 :
        return {
                End: undefined,
                Cont: undefined,
                Progress: undefined,
                Stats: undefined,
                Records: value._0
              };
    
  }
}

var SelectObjectContentEventStream = {
  SelectObjectContentEventStreamUnspecified: SelectObjectContentEventStreamUnspecified,
  classify: classify,
  make: make
};

var ReplicationRuleFilterUnspecified = /* @__PURE__ */Caml_exceptions.create("S3-AwsSdkV3.ReplicationRuleFilter.ReplicationRuleFilterUnspecified");

function classify$1(value) {
  var x = value.And;
  if (x !== undefined) {
    return {
            TAG: /* And */0,
            _0: x
          };
  }
  var x$1 = value.Tag;
  if (x$1 !== undefined) {
    return {
            TAG: /* Tag */1,
            _0: x$1
          };
  }
  var x$2 = value.Prefix;
  if (x$2 !== undefined) {
    return {
            TAG: /* Prefix */2,
            _0: x$2
          };
  }
  throw {
        RE_EXN_ID: ReplicationRuleFilterUnspecified,
        Error: new Error()
      };
}

function make$1(value) {
  switch (value.TAG | 0) {
    case /* And */0 :
        return {
                And: value._0,
                Tag: undefined,
                Prefix: undefined
              };
    case /* Tag */1 :
        return {
                And: undefined,
                Tag: value._0,
                Prefix: undefined
              };
    case /* Prefix */2 :
        return {
                And: undefined,
                Tag: undefined,
                Prefix: value._0
              };
    
  }
}

var ReplicationRuleFilter = {
  ReplicationRuleFilterUnspecified: ReplicationRuleFilterUnspecified,
  classify: classify$1,
  make: make$1
};

var MetricsFilterUnspecified = /* @__PURE__ */Caml_exceptions.create("S3-AwsSdkV3.MetricsFilter.MetricsFilterUnspecified");

function classify$2(value) {
  var x = value.And;
  if (x !== undefined) {
    return {
            TAG: /* And */0,
            _0: x
          };
  }
  var x$1 = value.Tag;
  if (x$1 !== undefined) {
    return {
            TAG: /* Tag */1,
            _0: x$1
          };
  }
  var x$2 = value.Prefix;
  if (x$2 !== undefined) {
    return {
            TAG: /* Prefix */2,
            _0: x$2
          };
  }
  throw {
        RE_EXN_ID: MetricsFilterUnspecified,
        Error: new Error()
      };
}

function make$2(value) {
  switch (value.TAG | 0) {
    case /* And */0 :
        return {
                And: value._0,
                Tag: undefined,
                Prefix: undefined
              };
    case /* Tag */1 :
        return {
                And: undefined,
                Tag: value._0,
                Prefix: undefined
              };
    case /* Prefix */2 :
        return {
                And: undefined,
                Tag: undefined,
                Prefix: value._0
              };
    
  }
}

var MetricsFilter = {
  MetricsFilterUnspecified: MetricsFilterUnspecified,
  classify: classify$2,
  make: make$2
};

var LifecycleRuleFilterUnspecified = /* @__PURE__ */Caml_exceptions.create("S3-AwsSdkV3.LifecycleRuleFilter.LifecycleRuleFilterUnspecified");

function classify$3(value) {
  var x = value.And;
  if (x !== undefined) {
    return {
            TAG: /* And */0,
            _0: x
          };
  }
  var x$1 = value.Tag;
  if (x$1 !== undefined) {
    return {
            TAG: /* Tag */1,
            _0: x$1
          };
  }
  var x$2 = value.Prefix;
  if (x$2 !== undefined) {
    return {
            TAG: /* Prefix */2,
            _0: x$2
          };
  }
  throw {
        RE_EXN_ID: LifecycleRuleFilterUnspecified,
        Error: new Error()
      };
}

function make$3(value) {
  switch (value.TAG | 0) {
    case /* And */0 :
        return {
                And: value._0,
                Tag: undefined,
                Prefix: undefined
              };
    case /* Tag */1 :
        return {
                And: undefined,
                Tag: value._0,
                Prefix: undefined
              };
    case /* Prefix */2 :
        return {
                And: undefined,
                Tag: undefined,
                Prefix: value._0
              };
    
  }
}

var LifecycleRuleFilter = {
  LifecycleRuleFilterUnspecified: LifecycleRuleFilterUnspecified,
  classify: classify$3,
  make: make$3
};

var AnalyticsFilterUnspecified = /* @__PURE__ */Caml_exceptions.create("S3-AwsSdkV3.AnalyticsFilter.AnalyticsFilterUnspecified");

function classify$4(value) {
  var x = value.And;
  if (x !== undefined) {
    return {
            TAG: /* And */0,
            _0: x
          };
  }
  var x$1 = value.Tag;
  if (x$1 !== undefined) {
    return {
            TAG: /* Tag */1,
            _0: x$1
          };
  }
  var x$2 = value.Prefix;
  if (x$2 !== undefined) {
    return {
            TAG: /* Prefix */2,
            _0: x$2
          };
  }
  throw {
        RE_EXN_ID: AnalyticsFilterUnspecified,
        Error: new Error()
      };
}

function make$4(value) {
  switch (value.TAG | 0) {
    case /* And */0 :
        return {
                And: value._0,
                Tag: undefined,
                Prefix: undefined
              };
    case /* Tag */1 :
        return {
                And: undefined,
                Tag: value._0,
                Prefix: undefined
              };
    case /* Prefix */2 :
        return {
                And: undefined,
                Tag: undefined,
                Prefix: value._0
              };
    
  }
}

var AnalyticsFilter = {
  AnalyticsFilterUnspecified: AnalyticsFilterUnspecified,
  classify: classify$4,
  make: make$4
};

var UploadPart = {};

var PutBucketPolicy = {};

var HeadBucket = {};

var GetObjectTorrent = {};

var GetBucketVersioning = {};

var GetBucketRequestPayment = {};

var GetBucketPolicy = {};

var GetBucketLocation = {};

var GetBucketAccelerateConfiguration = {};

var DeletePublicAccessBlock = {};

var DeleteObjectTagging = {};

var DeleteObject = {};

var DeleteBucketWebsite = {};

var DeleteBucketTagging = {};

var DeleteBucketReplication = {};

var DeleteBucketPolicy = {};

var DeleteBucketOwnershipControls = {};

var DeleteBucketMetricsConfiguration = {};

var DeleteBucketLifecycle = {};

var DeleteBucketInventoryConfiguration = {};

var DeleteBucketIntelligentTieringConfiguration = {};

var DeleteBucketEncryption = {};

var DeleteBucketCors = {};

var DeleteBucketAnalyticsConfiguration = {};

var DeleteBucket = {};

var AbortMultipartUpload = {};

var WriteGetObjectResponse = {};

var UploadPartCopy = {};

var PutPublicAccessBlock = {};

var PutObjectRetention = {};

var PutObjectLegalHold = {};

var PutObject = {};

var PutBucketVersioning = {};

var PutBucketRequestPayment = {};

var PutBucketAccelerateConfiguration = {};

var HeadObject = {};

var GetPublicAccessBlock = {};

var GetObjectRetention = {};

var GetObjectLegalHold = {};

var GetObject = {};

var GetBucketPolicyStatus = {};

var CreateMultipartUpload = {};

var CreateBucket = {};

var CopyObject = {};

var ListParts = {};

var ListBuckets = {};

var GetObjectTagging = {};

var GetBucketTagging = {};

var SelectObjectContent = {};

var PutObjectTagging = {};

var PutObjectLockConfiguration = {};

var PutBucketTagging = {};

var PutBucketOwnershipControls = {};

var ListObjectsV2 = {};

var ListObjects = {};

var ListObjectVersions = {};

var ListMultipartUploads = {};

var GetObjectLockConfiguration = {};

var GetObjectAcl = {};

var GetBucketWebsite = {};

var GetBucketOwnershipControls = {};

var GetBucketCors = {};

var GetBucketAcl = {};

var DeleteObjects = {};

var CompleteMultipartUpload = {};

var PutObjectAcl = {};

var PutBucketWebsite = {};

var PutBucketEncryption = {};

var PutBucketCors = {};

var PutBucketAcl = {};

var GetBucketLogging = {};

var GetBucketEncryption = {};

var PutBucketMetricsConfiguration = {};

var PutBucketLogging = {};

var PutBucketInventoryConfiguration = {};

var PutBucketIntelligentTieringConfiguration = {};

var PutBucketAnalyticsConfiguration = {};

var GetBucketMetricsConfiguration = {};

var GetBucketInventoryConfiguration = {};

var GetBucketIntelligentTieringConfiguration = {};

var GetBucketAnalyticsConfiguration = {};

var RestoreObject = {};

var ListBucketMetricsConfigurations = {};

var ListBucketInventoryConfigurations = {};

var ListBucketIntelligentTieringConfigurations = {};

var ListBucketAnalyticsConfigurations = {};

var GetBucketNotificationConfiguration = {};

var GetBucketLifecycleConfiguration = {};

var PutBucketReplication = {};

var PutBucketNotificationConfiguration = {};

var PutBucketLifecycleConfiguration = {};

var GetBucketReplication = {};

exports.SelectObjectContentEventStream = SelectObjectContentEventStream;
exports.ReplicationRuleFilter = ReplicationRuleFilter;
exports.MetricsFilter = MetricsFilter;
exports.LifecycleRuleFilter = LifecycleRuleFilter;
exports.AnalyticsFilter = AnalyticsFilter;
exports.UploadPart = UploadPart;
exports.PutBucketPolicy = PutBucketPolicy;
exports.HeadBucket = HeadBucket;
exports.GetObjectTorrent = GetObjectTorrent;
exports.GetBucketVersioning = GetBucketVersioning;
exports.GetBucketRequestPayment = GetBucketRequestPayment;
exports.GetBucketPolicy = GetBucketPolicy;
exports.GetBucketLocation = GetBucketLocation;
exports.GetBucketAccelerateConfiguration = GetBucketAccelerateConfiguration;
exports.DeletePublicAccessBlock = DeletePublicAccessBlock;
exports.DeleteObjectTagging = DeleteObjectTagging;
exports.DeleteObject = DeleteObject;
exports.DeleteBucketWebsite = DeleteBucketWebsite;
exports.DeleteBucketTagging = DeleteBucketTagging;
exports.DeleteBucketReplication = DeleteBucketReplication;
exports.DeleteBucketPolicy = DeleteBucketPolicy;
exports.DeleteBucketOwnershipControls = DeleteBucketOwnershipControls;
exports.DeleteBucketMetricsConfiguration = DeleteBucketMetricsConfiguration;
exports.DeleteBucketLifecycle = DeleteBucketLifecycle;
exports.DeleteBucketInventoryConfiguration = DeleteBucketInventoryConfiguration;
exports.DeleteBucketIntelligentTieringConfiguration = DeleteBucketIntelligentTieringConfiguration;
exports.DeleteBucketEncryption = DeleteBucketEncryption;
exports.DeleteBucketCors = DeleteBucketCors;
exports.DeleteBucketAnalyticsConfiguration = DeleteBucketAnalyticsConfiguration;
exports.DeleteBucket = DeleteBucket;
exports.AbortMultipartUpload = AbortMultipartUpload;
exports.WriteGetObjectResponse = WriteGetObjectResponse;
exports.UploadPartCopy = UploadPartCopy;
exports.PutPublicAccessBlock = PutPublicAccessBlock;
exports.PutObjectRetention = PutObjectRetention;
exports.PutObjectLegalHold = PutObjectLegalHold;
exports.PutObject = PutObject;
exports.PutBucketVersioning = PutBucketVersioning;
exports.PutBucketRequestPayment = PutBucketRequestPayment;
exports.PutBucketAccelerateConfiguration = PutBucketAccelerateConfiguration;
exports.HeadObject = HeadObject;
exports.GetPublicAccessBlock = GetPublicAccessBlock;
exports.GetObjectRetention = GetObjectRetention;
exports.GetObjectLegalHold = GetObjectLegalHold;
exports.GetObject = GetObject;
exports.GetBucketPolicyStatus = GetBucketPolicyStatus;
exports.CreateMultipartUpload = CreateMultipartUpload;
exports.CreateBucket = CreateBucket;
exports.CopyObject = CopyObject;
exports.ListParts = ListParts;
exports.ListBuckets = ListBuckets;
exports.GetObjectTagging = GetObjectTagging;
exports.GetBucketTagging = GetBucketTagging;
exports.SelectObjectContent = SelectObjectContent;
exports.PutObjectTagging = PutObjectTagging;
exports.PutObjectLockConfiguration = PutObjectLockConfiguration;
exports.PutBucketTagging = PutBucketTagging;
exports.PutBucketOwnershipControls = PutBucketOwnershipControls;
exports.ListObjectsV2 = ListObjectsV2;
exports.ListObjects = ListObjects;
exports.ListObjectVersions = ListObjectVersions;
exports.ListMultipartUploads = ListMultipartUploads;
exports.GetObjectLockConfiguration = GetObjectLockConfiguration;
exports.GetObjectAcl = GetObjectAcl;
exports.GetBucketWebsite = GetBucketWebsite;
exports.GetBucketOwnershipControls = GetBucketOwnershipControls;
exports.GetBucketCors = GetBucketCors;
exports.GetBucketAcl = GetBucketAcl;
exports.DeleteObjects = DeleteObjects;
exports.CompleteMultipartUpload = CompleteMultipartUpload;
exports.PutObjectAcl = PutObjectAcl;
exports.PutBucketWebsite = PutBucketWebsite;
exports.PutBucketEncryption = PutBucketEncryption;
exports.PutBucketCors = PutBucketCors;
exports.PutBucketAcl = PutBucketAcl;
exports.GetBucketLogging = GetBucketLogging;
exports.GetBucketEncryption = GetBucketEncryption;
exports.PutBucketMetricsConfiguration = PutBucketMetricsConfiguration;
exports.PutBucketLogging = PutBucketLogging;
exports.PutBucketInventoryConfiguration = PutBucketInventoryConfiguration;
exports.PutBucketIntelligentTieringConfiguration = PutBucketIntelligentTieringConfiguration;
exports.PutBucketAnalyticsConfiguration = PutBucketAnalyticsConfiguration;
exports.GetBucketMetricsConfiguration = GetBucketMetricsConfiguration;
exports.GetBucketInventoryConfiguration = GetBucketInventoryConfiguration;
exports.GetBucketIntelligentTieringConfiguration = GetBucketIntelligentTieringConfiguration;
exports.GetBucketAnalyticsConfiguration = GetBucketAnalyticsConfiguration;
exports.RestoreObject = RestoreObject;
exports.ListBucketMetricsConfigurations = ListBucketMetricsConfigurations;
exports.ListBucketInventoryConfigurations = ListBucketInventoryConfigurations;
exports.ListBucketIntelligentTieringConfigurations = ListBucketIntelligentTieringConfigurations;
exports.ListBucketAnalyticsConfigurations = ListBucketAnalyticsConfigurations;
exports.GetBucketNotificationConfiguration = GetBucketNotificationConfiguration;
exports.GetBucketLifecycleConfiguration = GetBucketLifecycleConfiguration;
exports.PutBucketReplication = PutBucketReplication;
exports.PutBucketNotificationConfiguration = PutBucketNotificationConfiguration;
exports.PutBucketLifecycleConfiguration = PutBucketLifecycleConfiguration;
exports.GetBucketReplication = GetBucketReplication;
/* No side effect */
