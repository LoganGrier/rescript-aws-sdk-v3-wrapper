// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var SubscribeToShardEventStreamUnspecified = /* @__PURE__ */Caml_exceptions.create("Kinesis-AwsSdkV3.SubscribeToShardEventStream.SubscribeToShardEventStreamUnspecified");

function classify(value) {
  var x = value.InternalFailureException;
  if (x !== undefined) {
    return {
            TAG: /* InternalFailureException */0,
            _0: x
          };
  }
  var x$1 = value.KMSThrottlingException;
  if (x$1 !== undefined) {
    return {
            TAG: /* KMSThrottlingException */1,
            _0: x$1
          };
  }
  var x$2 = value.KMSOptInRequired;
  if (x$2 !== undefined) {
    return {
            TAG: /* KMSOptInRequired */2,
            _0: x$2
          };
  }
  var x$3 = value.KMSNotFoundException;
  if (x$3 !== undefined) {
    return {
            TAG: /* KMSNotFoundException */3,
            _0: x$3
          };
  }
  var x$4 = value.KMSAccessDeniedException;
  if (x$4 !== undefined) {
    return {
            TAG: /* KMSAccessDeniedException */4,
            _0: x$4
          };
  }
  var x$5 = value.KMSInvalidStateException;
  if (x$5 !== undefined) {
    return {
            TAG: /* KMSInvalidStateException */5,
            _0: x$5
          };
  }
  var x$6 = value.KMSDisabledException;
  if (x$6 !== undefined) {
    return {
            TAG: /* KMSDisabledException */6,
            _0: x$6
          };
  }
  var x$7 = value.ResourceInUseException;
  if (x$7 !== undefined) {
    return {
            TAG: /* ResourceInUseException */7,
            _0: x$7
          };
  }
  var x$8 = value.ResourceNotFoundException;
  if (x$8 !== undefined) {
    return {
            TAG: /* ResourceNotFoundException */8,
            _0: x$8
          };
  }
  var x$9 = value.SubscribeToShardEvent;
  if (x$9 !== undefined) {
    return {
            TAG: /* SubscribeToShardEvent */9,
            _0: x$9
          };
  }
  throw {
        RE_EXN_ID: SubscribeToShardEventStreamUnspecified,
        Error: new Error()
      };
}

function make(value) {
  switch (value.TAG | 0) {
    case /* InternalFailureException */0 :
        return {
                InternalFailureException: value._0,
                KMSThrottlingException: undefined,
                KMSOptInRequired: undefined,
                KMSNotFoundException: undefined,
                KMSAccessDeniedException: undefined,
                KMSInvalidStateException: undefined,
                KMSDisabledException: undefined,
                ResourceInUseException: undefined,
                ResourceNotFoundException: undefined,
                SubscribeToShardEvent: undefined
              };
    case /* KMSThrottlingException */1 :
        return {
                InternalFailureException: undefined,
                KMSThrottlingException: value._0,
                KMSOptInRequired: undefined,
                KMSNotFoundException: undefined,
                KMSAccessDeniedException: undefined,
                KMSInvalidStateException: undefined,
                KMSDisabledException: undefined,
                ResourceInUseException: undefined,
                ResourceNotFoundException: undefined,
                SubscribeToShardEvent: undefined
              };
    case /* KMSOptInRequired */2 :
        return {
                InternalFailureException: undefined,
                KMSThrottlingException: undefined,
                KMSOptInRequired: value._0,
                KMSNotFoundException: undefined,
                KMSAccessDeniedException: undefined,
                KMSInvalidStateException: undefined,
                KMSDisabledException: undefined,
                ResourceInUseException: undefined,
                ResourceNotFoundException: undefined,
                SubscribeToShardEvent: undefined
              };
    case /* KMSNotFoundException */3 :
        return {
                InternalFailureException: undefined,
                KMSThrottlingException: undefined,
                KMSOptInRequired: undefined,
                KMSNotFoundException: value._0,
                KMSAccessDeniedException: undefined,
                KMSInvalidStateException: undefined,
                KMSDisabledException: undefined,
                ResourceInUseException: undefined,
                ResourceNotFoundException: undefined,
                SubscribeToShardEvent: undefined
              };
    case /* KMSAccessDeniedException */4 :
        return {
                InternalFailureException: undefined,
                KMSThrottlingException: undefined,
                KMSOptInRequired: undefined,
                KMSNotFoundException: undefined,
                KMSAccessDeniedException: value._0,
                KMSInvalidStateException: undefined,
                KMSDisabledException: undefined,
                ResourceInUseException: undefined,
                ResourceNotFoundException: undefined,
                SubscribeToShardEvent: undefined
              };
    case /* KMSInvalidStateException */5 :
        return {
                InternalFailureException: undefined,
                KMSThrottlingException: undefined,
                KMSOptInRequired: undefined,
                KMSNotFoundException: undefined,
                KMSAccessDeniedException: undefined,
                KMSInvalidStateException: value._0,
                KMSDisabledException: undefined,
                ResourceInUseException: undefined,
                ResourceNotFoundException: undefined,
                SubscribeToShardEvent: undefined
              };
    case /* KMSDisabledException */6 :
        return {
                InternalFailureException: undefined,
                KMSThrottlingException: undefined,
                KMSOptInRequired: undefined,
                KMSNotFoundException: undefined,
                KMSAccessDeniedException: undefined,
                KMSInvalidStateException: undefined,
                KMSDisabledException: value._0,
                ResourceInUseException: undefined,
                ResourceNotFoundException: undefined,
                SubscribeToShardEvent: undefined
              };
    case /* ResourceInUseException */7 :
        return {
                InternalFailureException: undefined,
                KMSThrottlingException: undefined,
                KMSOptInRequired: undefined,
                KMSNotFoundException: undefined,
                KMSAccessDeniedException: undefined,
                KMSInvalidStateException: undefined,
                KMSDisabledException: undefined,
                ResourceInUseException: value._0,
                ResourceNotFoundException: undefined,
                SubscribeToShardEvent: undefined
              };
    case /* ResourceNotFoundException */8 :
        return {
                InternalFailureException: undefined,
                KMSThrottlingException: undefined,
                KMSOptInRequired: undefined,
                KMSNotFoundException: undefined,
                KMSAccessDeniedException: undefined,
                KMSInvalidStateException: undefined,
                KMSDisabledException: undefined,
                ResourceInUseException: undefined,
                ResourceNotFoundException: value._0,
                SubscribeToShardEvent: undefined
              };
    case /* SubscribeToShardEvent */9 :
        return {
                InternalFailureException: undefined,
                KMSThrottlingException: undefined,
                KMSOptInRequired: undefined,
                KMSNotFoundException: undefined,
                KMSAccessDeniedException: undefined,
                KMSInvalidStateException: undefined,
                KMSDisabledException: undefined,
                ResourceInUseException: undefined,
                ResourceNotFoundException: undefined,
                SubscribeToShardEvent: value._0
              };
    
  }
}

var SubscribeToShardEventStream = {
  SubscribeToShardEventStreamUnspecified: SubscribeToShardEventStreamUnspecified,
  classify: classify,
  make: make
};

var UpdateShardCount = {};

var StopStreamEncryption = {};

var StartStreamEncryption = {};

var SplitShard = {};

var PutRecord = {};

var MergeShards = {};

var IncreaseStreamRetentionPeriod = {};

var GetShardIterator = {};

var DescribeLimits = {};

var DeregisterStreamConsumer = {};

var DeleteStream = {};

var DecreaseStreamRetentionPeriod = {};

var CreateStream = {};

var RemoveTagsFromStream = {};

var RegisterStreamConsumer = {};

var ListStreams = {};

var EnableEnhancedMonitoring = {};

var DisableEnhancedMonitoring = {};

var DescribeStreamConsumer = {};

var AddTagsToStream = {};

var PutRecords = {};

var ListTagsForStream = {};

var ListStreamConsumers = {};

var ListShards = {};

var GetRecords = {};

var DescribeStreamSummary = {};

var DescribeStream = {};

var SubscribeToShard = {};

exports.SubscribeToShardEventStream = SubscribeToShardEventStream;
exports.UpdateShardCount = UpdateShardCount;
exports.StopStreamEncryption = StopStreamEncryption;
exports.StartStreamEncryption = StartStreamEncryption;
exports.SplitShard = SplitShard;
exports.PutRecord = PutRecord;
exports.MergeShards = MergeShards;
exports.IncreaseStreamRetentionPeriod = IncreaseStreamRetentionPeriod;
exports.GetShardIterator = GetShardIterator;
exports.DescribeLimits = DescribeLimits;
exports.DeregisterStreamConsumer = DeregisterStreamConsumer;
exports.DeleteStream = DeleteStream;
exports.DecreaseStreamRetentionPeriod = DecreaseStreamRetentionPeriod;
exports.CreateStream = CreateStream;
exports.RemoveTagsFromStream = RemoveTagsFromStream;
exports.RegisterStreamConsumer = RegisterStreamConsumer;
exports.ListStreams = ListStreams;
exports.EnableEnhancedMonitoring = EnableEnhancedMonitoring;
exports.DisableEnhancedMonitoring = DisableEnhancedMonitoring;
exports.DescribeStreamConsumer = DescribeStreamConsumer;
exports.AddTagsToStream = AddTagsToStream;
exports.PutRecords = PutRecords;
exports.ListTagsForStream = ListTagsForStream;
exports.ListStreamConsumers = ListStreamConsumers;
exports.ListShards = ListShards;
exports.GetRecords = GetRecords;
exports.DescribeStreamSummary = DescribeStreamSummary;
exports.DescribeStream = DescribeStream;
exports.SubscribeToShard = SubscribeToShard;
/* No side effect */
