// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("rescript/lib/js/caml_option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var PathElementUnspecified = /* @__PURE__ */Caml_exceptions.create("AccessAnalyzer-AwsSdkV3.PathElement.PathElementUnspecified");

function classify(value) {
  var x = value.value;
  if (x !== undefined) {
    return {
            TAG: /* Value */0,
            _0: x
          };
  }
  var x$1 = value.substring;
  if (x$1 !== undefined) {
    return {
            TAG: /* Substring */1,
            _0: x$1
          };
  }
  var x$2 = value.key;
  if (x$2 !== undefined) {
    return {
            TAG: /* Key */2,
            _0: x$2
          };
  }
  var x$3 = value.index;
  if (x$3 !== undefined) {
    return {
            TAG: /* Index */3,
            _0: x$3
          };
  }
  throw {
        RE_EXN_ID: PathElementUnspecified,
        Error: new Error()
      };
}

function make(value) {
  switch (value.TAG | 0) {
    case /* Value */0 :
        return {
                value: value._0,
                substring: undefined,
                key: undefined,
                index: undefined
              };
    case /* Substring */1 :
        return {
                value: undefined,
                substring: value._0,
                key: undefined,
                index: undefined
              };
    case /* Key */2 :
        return {
                value: undefined,
                substring: undefined,
                key: value._0,
                index: undefined
              };
    case /* Index */3 :
        return {
                value: undefined,
                substring: undefined,
                key: undefined,
                index: value._0
              };
    
  }
}

var PathElement = {
  PathElementUnspecified: PathElementUnspecified,
  classify: classify,
  make: make
};

var AclGranteeUnspecified = /* @__PURE__ */Caml_exceptions.create("AccessAnalyzer-AwsSdkV3.AclGrantee.AclGranteeUnspecified");

function classify$1(value) {
  var x = value.uri;
  if (x !== undefined) {
    return {
            TAG: /* Uri */0,
            _0: x
          };
  }
  var x$1 = value.id;
  if (x$1 !== undefined) {
    return {
            TAG: /* Id */1,
            _0: x$1
          };
  }
  throw {
        RE_EXN_ID: AclGranteeUnspecified,
        Error: new Error()
      };
}

function make$1(value) {
  if (value.TAG === /* Uri */0) {
    return {
            uri: value._0,
            id: undefined
          };
  } else {
    return {
            uri: undefined,
            id: value._0
          };
  }
}

var AclGrantee = {
  AclGranteeUnspecified: AclGranteeUnspecified,
  classify: classify$1,
  make: make$1
};

var NetworkOriginConfigurationUnspecified = /* @__PURE__ */Caml_exceptions.create("AccessAnalyzer-AwsSdkV3.NetworkOriginConfiguration.NetworkOriginConfigurationUnspecified");

function classify$2(value) {
  var x = value.internetConfiguration;
  if (x !== undefined) {
    return {
            TAG: /* InternetConfiguration */0,
            _0: Caml_option.valFromOption(x)
          };
  }
  var x$1 = value.vpcConfiguration;
  if (x$1 !== undefined) {
    return {
            TAG: /* VpcConfiguration */1,
            _0: x$1
          };
  }
  throw {
        RE_EXN_ID: NetworkOriginConfigurationUnspecified,
        Error: new Error()
      };
}

function make$2(value) {
  if (value.TAG === /* InternetConfiguration */0) {
    return {
            internetConfiguration: Caml_option.some(value._0),
            vpcConfiguration: undefined
          };
  } else {
    return {
            internetConfiguration: undefined,
            vpcConfiguration: value._0
          };
  }
}

var NetworkOriginConfiguration = {
  NetworkOriginConfigurationUnspecified: NetworkOriginConfigurationUnspecified,
  classify: classify$2,
  make: make$2
};

var ConfigurationUnspecified = /* @__PURE__ */Caml_exceptions.create("AccessAnalyzer-AwsSdkV3.Configuration.ConfigurationUnspecified");

function classify$3(value) {
  var x = value.sqsQueue;
  if (x !== undefined) {
    return {
            TAG: /* SqsQueue */0,
            _0: x
          };
  }
  var x$1 = value.s3Bucket;
  if (x$1 !== undefined) {
    return {
            TAG: /* S3Bucket */1,
            _0: x$1
          };
  }
  var x$2 = value.secretsManagerSecret;
  if (x$2 !== undefined) {
    return {
            TAG: /* SecretsManagerSecret */2,
            _0: x$2
          };
  }
  var x$3 = value.kmsKey;
  if (x$3 !== undefined) {
    return {
            TAG: /* KmsKey */3,
            _0: x$3
          };
  }
  var x$4 = value.iamRole;
  if (x$4 !== undefined) {
    return {
            TAG: /* IamRole */4,
            _0: x$4
          };
  }
  throw {
        RE_EXN_ID: ConfigurationUnspecified,
        Error: new Error()
      };
}

function make$3(value) {
  switch (value.TAG | 0) {
    case /* SqsQueue */0 :
        return {
                sqsQueue: value._0,
                s3Bucket: undefined,
                secretsManagerSecret: undefined,
                kmsKey: undefined,
                iamRole: undefined
              };
    case /* S3Bucket */1 :
        return {
                sqsQueue: undefined,
                s3Bucket: value._0,
                secretsManagerSecret: undefined,
                kmsKey: undefined,
                iamRole: undefined
              };
    case /* SecretsManagerSecret */2 :
        return {
                sqsQueue: undefined,
                s3Bucket: undefined,
                secretsManagerSecret: value._0,
                kmsKey: undefined,
                iamRole: undefined
              };
    case /* KmsKey */3 :
        return {
                sqsQueue: undefined,
                s3Bucket: undefined,
                secretsManagerSecret: undefined,
                kmsKey: value._0,
                iamRole: undefined
              };
    case /* IamRole */4 :
        return {
                sqsQueue: undefined,
                s3Bucket: undefined,
                secretsManagerSecret: undefined,
                kmsKey: undefined,
                iamRole: value._0
              };
    
  }
}

var Configuration = {
  ConfigurationUnspecified: ConfigurationUnspecified,
  classify: classify$3,
  make: make$3
};

var UpdateFindings = {};

var UntagResource = {};

var TagResource = {};

var StartResourceScan = {};

var ListTagsForResource = {};

var GetAnalyzedResource = {};

var DeleteArchiveRule = {};

var DeleteAnalyzer = {};

var CancelPolicyGeneration = {};

var ApplyArchiveRule = {};

var UpdateArchiveRule = {};

var ListPolicyGenerations = {};

var ListAnalyzedResources = {};

var GetAnalyzer = {};

var CreateArchiveRule = {};

var StartPolicyGeneration = {};

var ListAnalyzers = {};

var ListAccessPreviews = {};

var GetFinding = {};

var GetArchiveRule = {};

var ListFindings = {};

var ListArchiveRules = {};

var ListAccessPreviewFindings = {};

var CreateAnalyzer = {};

var GetGeneratedPolicy = {};

var ValidatePolicy = {};

var CreateAccessPreview = {};

var GetAccessPreview = {};

exports.PathElement = PathElement;
exports.AclGrantee = AclGrantee;
exports.NetworkOriginConfiguration = NetworkOriginConfiguration;
exports.Configuration = Configuration;
exports.UpdateFindings = UpdateFindings;
exports.UntagResource = UntagResource;
exports.TagResource = TagResource;
exports.StartResourceScan = StartResourceScan;
exports.ListTagsForResource = ListTagsForResource;
exports.GetAnalyzedResource = GetAnalyzedResource;
exports.DeleteArchiveRule = DeleteArchiveRule;
exports.DeleteAnalyzer = DeleteAnalyzer;
exports.CancelPolicyGeneration = CancelPolicyGeneration;
exports.ApplyArchiveRule = ApplyArchiveRule;
exports.UpdateArchiveRule = UpdateArchiveRule;
exports.ListPolicyGenerations = ListPolicyGenerations;
exports.ListAnalyzedResources = ListAnalyzedResources;
exports.GetAnalyzer = GetAnalyzer;
exports.CreateArchiveRule = CreateArchiveRule;
exports.StartPolicyGeneration = StartPolicyGeneration;
exports.ListAnalyzers = ListAnalyzers;
exports.ListAccessPreviews = ListAccessPreviews;
exports.GetFinding = GetFinding;
exports.GetArchiveRule = GetArchiveRule;
exports.ListFindings = ListFindings;
exports.ListArchiveRules = ListArchiveRules;
exports.ListAccessPreviewFindings = ListAccessPreviewFindings;
exports.CreateAnalyzer = CreateAnalyzer;
exports.GetGeneratedPolicy = GetGeneratedPolicy;
exports.ValidatePolicy = ValidatePolicy;
exports.CreateAccessPreview = CreateAccessPreview;
exports.GetAccessPreview = GetAccessPreview;
/* No side effect */
