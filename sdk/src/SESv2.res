type responseMetadata = {
  httpStatusCode: option<float>,
  requestId: option<string>,
  extendedRequestId: option<string>,
  cfId: option<string>,
  attempts: option<int>,
  totalRetryDelay: option<int>,
}
type awsServiceClient
@module("@aws-sdk/client-ses") @new external createClient: unit => awsServiceClient = "SESv2Client"
type baseString = string
type baseBoolean = bool
type baseInteger = int
type baseTimestamp = Js.Date.t
type baseLong = float
type websiteURL = string
@ocaml.doc("<p>The warmup status of a dedicated IP.</p>")
type warmupStatus = [@as("DONE") #DONE | @as("IN_PROGRESS") #IN_PROGRESS]
@ocaml.doc("<p>An object that contains information about inbox placement volume.</p>")
type volume = float
type useDefaultIfPreferenceUnavailable = bool
type useCaseDescription = string
type unsubscribeAll = bool
type topicName = string
@ocaml.doc("<p>Specifies whether messages that use the configuration set are required to use
            Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only
            delivered if a TLS connection can be established. If the value is <code>Optional</code>,
            messages can be delivered in plain text if a TLS connection can't be established.</p>")
type tlsPolicy = [@as("OPTIONAL") #OPTIONAL | @as("REQUIRE") #REQUIRE]
type timestamp_ = Js.Date.t
@ocaml.doc("<p>The content of the custom verification email template.</p>")
type templateContent = string
type tagValue = string
type tagKey = string
@ocaml.doc("<p>The reason that the address was added to the suppression list for your account. The
            value can be one of the following:</p>
        <ul>
            <li>
                <p>
                  <code>COMPLAINT</code> – Amazon SES added an email address to the suppression
                    list for your account because a message sent to that address results in a
                    complaint.</p>
            </li>
            <li>
                <p>
                  <code>BOUNCE</code> – Amazon SES added an email address to the suppression
                    list for your account because a message sent to that address results in a hard
                    bounce.</p>
            </li>
         </ul>")
type suppressionListReason = [@as("COMPLAINT") #COMPLAINT | @as("BOUNCE") #BOUNCE]
@ocaml.doc("<p>The type of action to perform on the address. The following are possible values:</p>
        <ul>
            <li>
                <p>PUT: add the addresses to the suppression list.</p>
            </li>
            <li>
                <p>DELETE: remove the address from the suppression list.</p>
            </li>
         </ul>")
type suppressionListImportAction = [@as("PUT") #PUT | @as("DELETE") #DELETE]
@ocaml.doc("<p>The URL that the recipient of the verification email is sent to if his or her address
            is successfully verified.</p>")
type successRedirectionURL = string
type subscriptionStatus = [@as("OPT_OUT") #OPT_OUT | @as("OPT_IN") #OPT_IN]
type subject = string
type sentLast24Hours = float
@ocaml.doc("<p>The name of the dedicated IP pool to associate with the configuration set.</p>")
type sendingPoolName = string
type selector = string
@ocaml.doc("<p>An Amazon S3 URL in the format
                s3://<i><bucket_name></i>/<i><object></i>.</p>")
type s3Url = string
type reviewStatus = [
  | @as("DENIED") #DENIED
  | @as("GRANTED") #GRANTED
  | @as("FAILED") #FAILED
  | @as("PENDING") #PENDING
]
@ocaml.doc(
  "<p>A name that helps you identify a report generated by the Deliverability dashboard.</p>"
)
type reportName = string
@ocaml.doc("<p>A unique string that identifies a Deliverability dashboard report.</p>")
type reportId = string
@ocaml.doc("<p>The complete MIME message rendered by applying the data in the TemplateData parameter
            to the template specified in the TemplateName parameter.</p>")
type renderedEmailTemplate = string
@ocaml.doc("<p>The name of a blacklist that an IP address was found on.</p>") type rblName = string
@ocaml.doc("<p>The raw email message. The message has to meet the following criteria:</p>
        <ul>
            <li>
                <p>The message has to contain a header and a body, separated by one blank
                    line.</p>
            </li>
            <li>
                <p>All of the required header fields must be present in the message.</p>
            </li>
            <li>
                <p>Each part of a multipart MIME message must be formatted properly.</p>
            </li>
            <li>
                <p>Attachments must be in a file format that the Amazon SES API v2 supports.
                    </p>
            </li>
            <li>
                <p>The entire message must be Base64 encoded.</p>
            </li>
            <li>
                <p>If any of the MIME parts in your message contain content that is outside of
                    the 7-bit ASCII character range, you should encode that content to ensure that
                    recipients' email clients render the message properly.</p>
            </li>
            <li>
                <p>The length of any single line of text in the message can't exceed 1,000
                    characters. This restriction is defined in <a href=\"https://tools.ietf.org/html/rfc5321\">RFC 5321</a>.</p>
            </li>
         </ul>")
type rawMessageData = NodeJs.Buffer.t
type processedRecordsCount = int
type privateKey = string
@ocaml.doc("<p>The name of a dedicated IP pool.</p>") type poolName = string
@ocaml.doc("<p>The name of the policy.</p>
        <p>The policy name cannot exceed 64 characters and can only include alphanumeric
            characters, dashes, and underscores.</p>")
type policyName = string
@ocaml.doc("<p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p>
        <p>For information about the syntax of sending authorization policies, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html\">Amazon SES Developer Guide</a>.</p>")
type policy = string
type percentage100Wrapper = int
@ocaml.doc("<p>An object that contains information about inbox placement percentages.</p>")
type percentage = float
type outboundMessageId = string
type nextToken = string
@ocaml.doc("<p>The value of the message tag. The message tag value has to meet the following
            criteria:</p>
        <ul>
            <li>
                <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9),
                    underscores (_), or dashes (-).</p>
            </li>
            <li>
                <p>It can contain no more than 256 characters.</p>
            </li>
         </ul>")
type messageTagValue = string
@ocaml.doc("<p>The name of the message tag. The message tag name has to meet the following
            criteria:</p>
        <ul>
            <li>
                <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9),
                    underscores (_), or dashes (-).</p>
            </li>
            <li>
                <p>It can contain no more than 256 characters.</p>
            </li>
         </ul>")
type messageTagName = string
type messageData = string
@ocaml.doc("<p>The body of an email message.</p>") type messageContent = string
type maxSendRate = float
type maxItems = int
type max24HourSend = float
type mailType = [@as("TRANSACTIONAL") #TRANSACTIONAL | @as("MARKETING") #MARKETING]
@ocaml.doc("<p>The status of the MAIL FROM domain. This status can have the following values:</p>
        <ul>
            <li>
                <p>
                  <code>PENDING</code> – Amazon SES hasn't started searching for the MX record
                    yet.</p>
            </li>
            <li>
                <p>
                  <code>SUCCESS</code> – Amazon SES detected the required MX record for the
                    MAIL FROM domain.</p>
            </li>
            <li>
                <p>
                  <code>FAILED</code> – Amazon SES can't find the required MX record, or the
                    record no longer exists.</p>
            </li>
            <li>
                <p>
                  <code>TEMPORARY_FAILURE</code> – A temporary issue occurred, which
                    prevented Amazon SES from determining the status of the MAIL FROM domain.</p>
            </li>
         </ul>")
type mailFromDomainStatus = [
  | @as("TEMPORARY_FAILURE") #TEMPORARY_FAILURE
  | @as("FAILED") #FAILED
  | @as("SUCCESS") #SUCCESS
  | @as("PENDING") #PENDING
]
@ocaml.doc("<p>The domain to use as a MAIL FROM domain.</p>") type mailFromDomainName = string
@ocaml.doc("<p>The date and time (in Unix time) when the reputation metrics were last given a fresh
            start. When your account is given a fresh start, your reputation metrics are calculated
            starting from the date of the fresh start.</p>")
type lastFreshStart = Js.Date.t
@ocaml.doc("<p>The status of the import job.</p>")
type jobStatus = [
  | @as("FAILED") #FAILED
  | @as("COMPLETED") #COMPLETED
  | @as("PROCESSING") #PROCESSING
  | @as("CREATED") #CREATED
]
@ocaml.doc("<p>A string that represents the import job ID.</p>") type jobId = string
@ocaml.doc("<p>The name of an email provider.</p>") type ispName = string
@ocaml.doc("<p>An IPv4 address.</p>") type ip = string
@ocaml.doc("<p>The destination of the import job, which can be used to list import jobs that have a
            certain <code>ImportDestinationType</code>.</p>")
type importDestinationType = [
  | @as("CONTACT_LIST") #CONTACT_LIST
  | @as("SUPPRESSION_LIST") #SUPPRESSION_LIST
]
type imageUrl = string
type identityType = [
  | @as("MANAGED_DOMAIN") #MANAGED_DOMAIN
  | @as("DOMAIN") #DOMAIN
  | @as("EMAIL_ADDRESS") #EMAIL_ADDRESS
]
type identity = string
type generalEnforcementStatus = string
type feedbackId = string
@ocaml.doc("<p>The URL that the recipient of the verification email is sent to if his or her address
            is not successfully verified.</p>")
type failureRedirectionURL = string
type failedRecordsS3Url = string
type failedRecordsCount = int
@ocaml.doc("<p>An email sending event type. For example, email sends, opens, and bounces are all
            email events.</p>")
type eventType = [
  | @as("SUBSCRIPTION") #SUBSCRIPTION
  | @as("DELIVERY_DELAY") #DELIVERY_DELAY
  | @as("RENDERING_FAILURE") #RENDERING_FAILURE
  | @as("CLICK") #CLICK
  | @as("OPEN") #OPEN
  | @as("DELIVERY") #DELIVERY
  | @as("COMPLAINT") #COMPLAINT
  | @as("BOUNCE") #BOUNCE
  | @as("REJECT") #REJECT
  | @as("SEND") #SEND
]
@ocaml.doc("<p>The name of an event destination.</p>
        <p>
            <i>Events</i> include message sends, deliveries, opens, clicks, bounces,
            and complaints. <i>Event destinations</i> are places that you can send
            information about these events to. For example, you can send event data to Amazon SNS to
            receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to
            stream data to Amazon S3 for long-term storage.</p>")
type eventDestinationName = string
type esp = string
type errorMessage = string
type enabledWrapper = bool
type enabled = bool
@ocaml.doc("<p>The email body that will be visible to recipients whose email clients do not display
            HTML.</p>")
type emailTemplateText = string
@ocaml.doc("<p>The subject line of the email.</p>") type emailTemplateSubject = string
@ocaml.doc("<p>The name of the template. You will refer to this name when you send email using the
                <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code>
            operations.</p>")
type emailTemplateName = string
@ocaml.doc("<p>The HTML body of the email.</p>") type emailTemplateHtml = string
@ocaml.doc("<p>An object that defines the values to use for message variables in the template. This
            object is a set of key-value pairs. Each key defines a message variable in the template.
            The corresponding value defines the value to use for that variable.</p>")
type emailTemplateData = string
type emailAddress = string
type domain = string
type dnsToken = string
@ocaml.doc("<p>The DKIM authentication status of the identity. The status can be one of the
            following:</p>
        <ul>
            <li>
                <p>
                  <code>PENDING</code> – The verification process was initiated, but Amazon SES
                    hasn't yet detected the DKIM records in the DNS configuration for the
                    domain.</p>
            </li>
            <li>
                <p>
                  <code>SUCCESS</code> – The verification process completed
                    successfully.</p>
            </li>
            <li>
                <p>
                  <code>FAILED</code> – The verification process failed. This typically
                    occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the
                    domain.</p>
            </li>
            <li>
                <p>
                  <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon SES
                    from determining the DKIM authentication status of the domain.</p>
            </li>
            <li>
                <p>
                  <code>NOT_STARTED</code> – The DKIM verification process hasn't been
                    initiated for the domain.</p>
            </li>
         </ul>")
type dkimStatus = [
  | @as("NOT_STARTED") #NOT_STARTED
  | @as("TEMPORARY_FAILURE") #TEMPORARY_FAILURE
  | @as("FAILED") #FAILED
  | @as("SUCCESS") #SUCCESS
  | @as("PENDING") #PENDING
]
type dkimSigningKeyLength = [@as("RSA_2048_BIT") #RSA_2048_BIT | @as("RSA_1024_BIT") #RSA_1024_BIT]
type dkimSigningAttributesOrigin = [@as("EXTERNAL") #EXTERNAL | @as("AWS_SES") #AWS_SES]
type displayName = string
@ocaml.doc("<p>The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. To
            use the message tags that you specify using an <code>X-SES-MESSAGE-TAGS</code> header or
            a parameter to the <code>SendEmail</code> or <code>SendRawEmail</code> API, choose
                <code>messageTag</code>. To use your own email headers, choose
                <code>emailHeader</code>. To use link tags, choose <code>linkTags</code>.</p>")
type dimensionValueSource = [
  | @as("LINK_TAG") #LINK_TAG
  | @as("EMAIL_HEADER") #EMAIL_HEADER
  | @as("MESSAGE_TAG") #MESSAGE_TAG
]
@ocaml.doc("<p>The name of an Amazon CloudWatch dimension associated with an email sending metric. The name has to
            meet the following criteria:</p>
        <ul>
            <li>
                <p>It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_),
                    or dashes (-).</p>
            </li>
            <li>
                <p>It can contain no more than 256 characters.</p>
            </li>
         </ul>")
type dimensionName = string
type description = string
@ocaml.doc(
  "<p>The subject line for an email that you submitted in a predictive inbox placement test.</p>"
)
type deliverabilityTestSubject = string
@ocaml.doc("<p>The status of a predictive inbox placement test. If the status is <code>IN_PROGRESS</code>, then the predictive inbox placement test is
            currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test.
            If the status is <code>COMPLETE</code>, then the test is finished, and you can use the
                <code>GetDeliverabilityTestReport</code> operation to view the results of the
            test.</p>")
type deliverabilityTestStatus = [@as("COMPLETED") #COMPLETED | @as("IN_PROGRESS") #IN_PROGRESS]
@ocaml.doc("<p>The current status of your Deliverability dashboard subscription. If this value is
                <code>PENDING_EXPIRATION</code>, your subscription is scheduled to expire at the end
            of the current calendar month.</p>")
type deliverabilityDashboardAccountStatus = [
  | @as("DISABLED") #DISABLED
  | @as("PENDING_EXPIRATION") #PENDING_EXPIRATION
  | @as("ACTIVE") #ACTIVE
]
@ocaml.doc("<p>The default value of the dimension that is published to Amazon CloudWatch if you don't provide the
            value of the dimension when you send an email. This value has to meet the following
            criteria:</p>
        <ul>
            <li>
                <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9),
                    underscores (_), or dashes (-).</p>
            </li>
            <li>
                <p>It can contain no more than 256 characters.</p>
            </li>
         </ul>")
type defaultDimensionValue = string
@ocaml.doc("<p>The data format of the import job's data source.</p>")
type dataFormat = [@as("JSON") #JSON | @as("CSV") #CSV]
@ocaml.doc("<p>The domain to use for tracking open and click events.</p>")
type customRedirectDomain = string
type contactListName = string
type contactListImportAction = [@as("PUT") #PUT | @as("DELETE") #DELETE]
type contactLanguage = [@as("JA") #JA | @as("EN") #EN]
@ocaml.doc("<p>The name of a configuration set.</p>
        <p>
            <i>Configuration sets</i> are groups of rules that you can apply to the
            emails you send. You apply a configuration set to an email by including a reference to
            the configuration set in the headers of the email. When you apply a configuration set to
            an email, all of the rules in that configuration set are applied to the email.</p>")
type configurationSetName = string
type charset = string
type caseId = string
type campaignId = string
type bulkEmailStatus = [
  | @as("FAILED") #FAILED
  | @as("TRANSIENT_FAILURE") #TRANSIENT_FAILURE
  | @as("INVALID_PARAMETER") #INVALID_PARAMETER
  | @as("CONFIGURATION_SET_SENDING_PAUSED") #CONFIGURATION_SET_SENDING_PAUSED
  | @as("ACCOUNT_SENDING_PAUSED") #ACCOUNT_SENDING_PAUSED
  | @as("INVALID_SENDING_POOL_NAME") #INVALID_SENDING_POOL_NAME
  | @as("ACCOUNT_DAILY_QUOTA_EXCEEDED") #ACCOUNT_DAILY_QUOTA_EXCEEDED
  | @as("ACCOUNT_THROTTLED") #ACCOUNT_THROTTLED
  | @as("ACCOUNT_SUSPENDED") #ACCOUNT_SUSPENDED
  | @as("TEMPLATE_NOT_FOUND") #TEMPLATE_NOT_FOUND
  | @as("CONFIGURATION_SET_NOT_FOUND") #CONFIGURATION_SET_NOT_FOUND
  | @as("MAIL_FROM_DOMAIN_NOT_VERIFIED") #MAIL_FROM_DOMAIN_NOT_VERIFIED
  | @as("MESSAGE_REJECTED") #MESSAGE_REJECTED
  | @as("SUCCESS") #SUCCESS
]
@ocaml.doc("<p>A description of the blacklisting event.</p>") type blacklistingDescription = string
@ocaml.doc("<p>An IP address that you want to obtain blacklist information for.</p>")
type blacklistItemName = string
@ocaml.doc("<p>The action to take if the required MX record can't be found when you send an email.
            When you set this value to <code>UseDefaultValue</code>, the mail is sent using
                <i>amazonses.com</i> as the MAIL FROM domain. When you set this value
            to <code>RejectMessage</code>, the Amazon SES API v2 returns a
                <code>MailFromDomainNotVerified</code> error, and doesn't attempt to deliver the
            email.</p>
        <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the
                <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code>
            states.</p>")
type behaviorOnMxFailure = [
  | @as("REJECT_MESSAGE") #REJECT_MESSAGE
  | @as("USE_DEFAULT_VALUE") #USE_DEFAULT_VALUE
]
type attributesData = string
type amazonResourceName = string
type additionalContactEmailAddress = string
@ocaml.doc("<p>An object that contains information about the amount of email that was delivered to
            recipients.</p>")
type volumeStatistics = {
  @ocaml.doc("<p>An estimate of the percentage of emails sent from the current domain that will arrive
            in recipients' spam or junk mail folders.</p>")
  @as("ProjectedSpam")
  projectedSpam: option<volume>,
  @ocaml.doc("<p>An estimate of the percentage of emails sent from the current domain that will arrive
            in recipients' inboxes.</p>")
  @as("ProjectedInbox")
  projectedInbox: option<volume>,
  @ocaml.doc("<p>The total number of emails that arrived in recipients' spam or junk mail
            folders.</p>")
  @as("SpamRawCount")
  spamRawCount: option<volume>,
  @ocaml.doc("<p>The total number of emails that arrived in recipients' inboxes.</p>")
  @as("InboxRawCount")
  inboxRawCount: option<volume>,
}
@ocaml.doc("<p>An object that defines the tracking options for a configuration set. When you use the
            Amazon SES API v2 to send an email, it contains an invisible image that's used to track when
            recipients open your email. If your email contains links, those links are changed
            slightly in order to track when recipients click them.</p>
        <p>These images and links include references to a domain operated by Amazon Web Services. You can
            optionally configure the Amazon SES to use a domain that you operate for these images and
            links.</p>")
type trackingOptions = {
  @ocaml.doc("<p>The domain to use for tracking open and click events.</p>")
  @as("CustomRedirectDomain")
  customRedirectDomain: customRedirectDomain,
}
@ocaml.doc("<p>The contact's preference for being opted-in to or opted-out of a topic.</p>")
type topicPreference = {
  @ocaml.doc("<p>The contact's subscription status to a topic which is either <code>OPT_IN</code> or
                <code>OPT_OUT</code>.</p>")
  @as("SubscriptionStatus")
  subscriptionStatus: subscriptionStatus,
  @ocaml.doc("<p>The name of the topic.</p>") @as("TopicName") topicName: topicName,
}
@ocaml.doc("<p>Used for filtering by a specific topic preference.</p>")
type topicFilter = {
  @ocaml.doc("<p>Notes that the default subscription status should be applied to a contact because the
            contact has not noted their preference for subscribing to a topic.</p>")
  @as("UseDefaultIfPreferenceUnavailable")
  useDefaultIfPreferenceUnavailable: option<useDefaultIfPreferenceUnavailable>,
  @ocaml.doc("<p>The name of a topic on which you wish to apply the filter.</p>") @as("TopicName")
  topicName: option<topicName>,
}
@ocaml.doc("<p>An interest group, theme, or label within a list. Lists can have multiple
            topics.</p>")
type topic = {
  @ocaml.doc("<p>The default subscription status to be applied to a contact if the contact has not
            noted their preference for subscribing to a topic.</p>")
  @as("DefaultSubscriptionStatus")
  defaultSubscriptionStatus: subscriptionStatus,
  @ocaml.doc("<p>A description of what the topic is about, which the contact will see.</p>")
  @as("Description")
  description: option<description>,
  @ocaml.doc("<p>The name of the topic the contact will see.</p>") @as("DisplayName")
  displayName: displayName,
  @ocaml.doc("<p>The name of the topic.</p>") @as("TopicName") topicName: topicName,
}
@ocaml.doc("<p>An object that defines the email template to use for an email message, and the values
            to use for any message variables in that template. An <i>email
                template</i> is a type of message template that contains content that you
            want to define, save, and reuse in email messages that you send.</p>")
type template = {
  @ocaml.doc("<p>An object that defines the values to use for message variables in the template. This
            object is a set of key-value pairs. Each key defines a message variable in the template.
            The corresponding value defines the value to use for that variable.</p>")
  @as("TemplateData")
  templateData: option<emailTemplateData>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the template.</p>") @as("TemplateArn")
  templateArn: option<amazonResourceName>,
  @ocaml.doc("<p>The name of the template. You will refer to this name when you send email using the
                <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.
        </p>")
  @as("TemplateName")
  templateName: option<emailTemplateName>,
}
type tagKeyList = array<tagKey>
@ocaml.doc("<p>An object that defines the tags that are associated with a resource.
                A <i>tag</i> is a label that you optionally define and associate with
            a resource. Tags can help you categorize and manage resources in different ways, such as
            by purpose, owner, environment, or other criteria. A resource can have as many as 50
            tags.</p>
        <p>Each tag consists of a required <i>tag key</i> and an
                associated <i>tag value</i>, both of which you define. A tag key is a
            general label that acts as a category for a more specific tag value. A tag value acts as
            a descriptor within a tag key. A tag key can contain as many as 128 characters. A tag
            value can contain as many as 256 characters. The characters can be Unicode letters,
            digits, white space, or one of the following symbols: _ . : / = + -. The following
            additional restrictions apply to tags:</p>
        <ul>
            <li>
                <p>Tag keys and values are case sensitive.</p>
            </li>
            <li>
                <p>For each associated resource, each tag key must be unique and it can have only
                    one value.</p>
            </li>
            <li>
                <p>The <code>aws:</code> prefix is reserved for use by Amazon Web Services; you can’t use it in
                    any tag keys or values that you define. In addition, you can't edit or remove
                    tag keys or values that use this prefix. Tags that use this prefix don’t count
                    against the limit of 50 tags per resource.</p>
            </li>
            <li>
                <p>You can associate tags with public or shared resources, but the tags are
                    available only for your Amazon Web Services account, not any other accounts that share the
                    resource. In addition, the tags are available only for resources that are
                    located in the specified Amazon Web Services Region for your Amazon Web Services account.</p>
            </li>
         </ul>")
type tag = {
  @ocaml.doc("<p>The optional part of a key-value pair that defines a tag. The maximum length of a tag
            value is 256 characters. The minimum length is 0 characters. If you don't want a
            resource to have a specific tag value, don't specify a value for this parameter. If you
            don't specify a value, Amazon SES sets the value to an empty string.</p>")
  @as("Value")
  value: tagValue,
  @ocaml.doc("<p>One part of a key-value pair that defines a tag. The maximum length of a tag key is
            128 characters. The minimum length is 1 character.</p>")
  @as("Key")
  key: tagKey,
}
type suppressionListReasons = array<suppressionListReason>
@ocaml.doc("<p>An object that contains details about the action of suppression list.</p>")
type suppressionListDestination = {
  @ocaml.doc("<p>The type of action to perform on the address. The following are possible values:</p>
        <ul>
            <li>
                <p>PUT: add the addresses to the suppression list. If the record already exists,
                    it will override it with the new value.</p>
            </li>
            <li>
                <p>DELETE: remove the addresses from the suppression list.</p>
            </li>
         </ul>")
  @as("SuppressionListImportAction")
  suppressionListImportAction: suppressionListImportAction,
}
@ocaml.doc("<p>A summary that describes the suppressed email address.</p>")
type suppressedDestinationSummary = {
  @ocaml.doc("<p>The date and time when the suppressed destination was last updated, shown in Unix time
            format.</p>")
  @as("LastUpdateTime")
  lastUpdateTime: timestamp_,
  @ocaml.doc(
    "<p>The reason that the address was added to the suppression list for your account.</p>"
  )
  @as("Reason")
  reason: suppressionListReason,
  @ocaml.doc("<p>The email address that's on the suppression list for your account.</p>")
  @as("EmailAddress")
  emailAddress: emailAddress,
}
@ocaml.doc("<p>An object that contains additional attributes that are related an email address that
            is on the suppression list for your account.</p>")
type suppressedDestinationAttributes = {
  @ocaml.doc("<p>A unique identifier that's generated when an email address is added to the suppression
            list for your account.</p>")
  @as("FeedbackId")
  feedbackId: option<feedbackId>,
  @ocaml.doc("<p>The unique identifier of the email message that caused the email address to be added
            to the suppression list for your account.</p>")
  @as("MessageId")
  messageId: option<outboundMessageId>,
}
@ocaml.doc("<p>An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to
            send notification when certain email events occur.</p>")
type snsDestination = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Amazon SNS topic to publish email events to. For
            more information about Amazon SNS topics, see the <a href=\"https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html\">Amazon SNS Developer Guide</a>.</p>")
  @as("TopicArn")
  topicArn: amazonResourceName,
}
@ocaml.doc("<p>Used to enable or disable email sending for messages that use this configuration set
            in the current Amazon Web Services Region.</p>")
type sendingOptions = {
  @ocaml.doc("<p>If <code>true</code>, email sending is enabled for the configuration set. If
                <code>false</code>, email sending is disabled for the configuration set.</p>")
  @as("SendingEnabled")
  sendingEnabled: option<enabled>,
}
@ocaml.doc("<p>An object that contains information about the per-day and per-second sending limits
            for your Amazon SES account in the current Amazon Web Services Region.</p>")
type sendQuota = {
  @ocaml.doc("<p>The number of emails sent from your Amazon SES account in the current Amazon Web Services Region over the
            past 24 hours.</p>")
  @as("SentLast24Hours")
  sentLast24Hours: option<sentLast24Hours>,
  @ocaml.doc("<p>The maximum number of emails that you can send per second in the current Amazon Web Services Region.
            This value is also called your <i>maximum sending rate</i> or your
                <i>maximum TPS (transactions per second) rate</i>.</p>")
  @as("MaxSendRate")
  maxSendRate: option<maxSendRate>,
  @ocaml.doc("<p>The maximum number of emails that you can send in the current Amazon Web Services Region over a
            24-hour period. This value is also called your <i>sending
            quota</i>.</p>")
  @as("Max24HourSend")
  max24HourSend: option<max24HourSend>,
}
@ocaml.doc("<p>An object that contains information about your account details review.</p>")
type reviewDetails = {
  @ocaml.doc("<p>The associated support center case ID (if any).</p>") @as("CaseId")
  caseId: option<caseId>,
  @ocaml.doc("<p>The status of the latest review of your account. The status can be one of the
            following:</p>
        <ul>
            <li>
                <p>
                  <code>PENDING</code> – We have received your appeal and are in the
                    process of reviewing it.</p>
            </li>
            <li>
                <p>
                  <code>GRANTED</code> – Your appeal has been reviewed and your production
                    access has been granted.</p>
            </li>
            <li>
                <p>
                  <code>DENIED</code> – Your appeal has been reviewed and your production
                    access has been denied.</p>
            </li>
            <li>
                <p>
                  <code>FAILED</code> – An internal error occurred and we didn't receive
                    your appeal. You can submit your appeal again.</p>
            </li>
         </ul>")
  @as("Status")
  status: option<reviewStatus>,
}
@ocaml.doc("<p>Enable or disable collection of reputation metrics for emails that you send using this
            configuration set in the current Amazon Web Services Region. </p>")
type reputationOptions = {
  @ocaml.doc("<p>The date and time (in Unix time) when the reputation metrics were last given a fresh
            start. When your account is given a fresh start, your reputation metrics are calculated
            starting from the date of the fresh start.</p>")
  @as("LastFreshStart")
  lastFreshStart: option<lastFreshStart>,
  @ocaml.doc("<p>If <code>true</code>, tracking of reputation metrics is enabled for the configuration
            set. If <code>false</code>, tracking of reputation metrics is disabled for the
            configuration set.</p>")
  @as("ReputationMetricsEnabled")
  reputationMetricsEnabled: option<enabled>,
}
@ocaml.doc("<p>An object which contains <code>ReplacementTemplateData</code> to be used for a
            specific <code>BulkEmailEntry</code>.</p>")
type replacementTemplate = {
  @ocaml.doc("<p>A list of replacement values to apply to the template. This parameter is a JSON
            object, typically consisting of key-value pairs in which the keys correspond to
            replacement tags in the email template.</p>")
  @as("ReplacementTemplateData")
  replacementTemplateData: option<emailTemplateData>,
}
@ocaml.doc("<p>Represents the raw content of an email message.</p>")
type rawMessage = {
  @ocaml.doc("<p>The raw email message. The message has to meet the following criteria:</p>
        <ul>
            <li>
                <p>The message has to contain a header and a body, separated by one blank
                    line.</p>
            </li>
            <li>
                <p>All of the required header fields must be present in the message.</p>
            </li>
            <li>
                <p>Each part of a multipart MIME message must be formatted properly.</p>
            </li>
            <li>
                <p>Attachments must be in a file format that the Amazon SES supports.</p>
            </li>
            <li>
                <p>The entire message must be Base64 encoded.</p>
            </li>
            <li>
                <p>If any of the MIME parts in your message contain content that is outside of
                    the 7-bit ASCII character range, you should encode that content to ensure that
                    recipients' email clients render the message properly.</p>
            </li>
            <li>
                <p>The length of any single line of text in the message can't exceed 1,000
                    characters. This restriction is defined in <a href=\"https://tools.ietf.org/html/rfc5321\">RFC 5321</a>.</p>
            </li>
         </ul>")
  @as("Data")
  data: rawMessageData,
}
@ocaml.doc("<p>An object that contains mapping between <code>PolicyName</code> and
                <code>Policy</code> text.</p>")
type policyMap = Js.Dict.t<policy>
@ocaml.doc("<p>An object that contains inbox placement data for an email provider.</p>")
type placementStatistics = {
  @ocaml.doc("<p>The percentage of emails that were authenticated by using DomainKeys Identified Mail
            (DKIM) during the predictive inbox placement test.</p>")
  @as("DkimPercentage")
  dkimPercentage: option<percentage>,
  @ocaml.doc("<p>The percentage of emails that were authenticated by using Sender Policy Framework
            (SPF) during the predictive inbox placement test.</p>")
  @as("SpfPercentage")
  spfPercentage: option<percentage>,
  @ocaml.doc("<p>The percentage of emails that didn't arrive in recipients' inboxes at all during the
            predictive inbox placement test.</p>")
  @as("MissingPercentage")
  missingPercentage: option<percentage>,
  @ocaml.doc("<p>The percentage of emails that arrived in recipients' spam or junk mail folders during
            the predictive inbox placement test.</p>")
  @as("SpamPercentage")
  spamPercentage: option<percentage>,
  @ocaml.doc(
    "<p>The percentage of emails that arrived in recipients' inboxes during the predictive inbox placement test.</p>"
  )
  @as("InboxPercentage")
  inboxPercentage: option<percentage>,
}
@ocaml.doc("<p>An object that defines an Amazon Pinpoint project destination for email events. You can send
            email event data to a Amazon Pinpoint project to view metrics using the Transactional Messaging
            dashboards that are built in to Amazon Pinpoint. For more information, see <a href=\"https://docs.aws.amazon.com/pinpoint/latest/userguide/analytics-transactional-messages.html\">Transactional
                Messaging Charts</a> in the <i>Amazon Pinpoint User Guide</i>.</p>")
type pinpointDestination = {
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the Amazon Pinpoint project to send email events to.</p>"
  )
  @as("ApplicationArn")
  applicationArn: option<amazonResourceName>,
}
@ocaml.doc("<p>Contains the name and value of a tag that you apply to an email. You can use message
            tags when you publish email sending events.
            </p>")
type messageTag = {
  @ocaml.doc("<p>The value of the message tag. The message tag value has to meet the following
            criteria:</p>
        <ul>
            <li>
                <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9),
                    underscores (_), or dashes (-).</p>
            </li>
            <li>
                <p>It can contain no more than 256 characters.</p>
            </li>
         </ul>")
  @as("Value")
  value: messageTagValue,
  @ocaml.doc("<p>The name of the message tag. The message tag name has to meet the following
            criteria:</p>
        <ul>
            <li>
                <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9),
                    underscores (_), or dashes (-).</p>
            </li>
            <li>
                <p>It can contain no more than 256 characters.</p>
            </li>
         </ul>")
  @as("Name")
  name: messageTagName,
}
@ocaml.doc("<p>A list of attributes that are associated with a MAIL FROM domain.</p>")
type mailFromAttributes = {
  @ocaml.doc("<p>The action to take if the required MX record can't be found when you send an email.
            When you set this value to <code>UseDefaultValue</code>, the mail is sent using
                <i>amazonses.com</i> as the MAIL FROM domain. When you set this value
            to <code>RejectMessage</code>, the Amazon SES API v2 returns a
                <code>MailFromDomainNotVerified</code> error, and doesn't attempt to deliver the
            email.</p>
        <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the
                <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code>
            states.</p>")
  @as("BehaviorOnMxFailure")
  behaviorOnMxFailure: behaviorOnMxFailure,
  @ocaml.doc("<p>The status of the MAIL FROM domain. This status can have the following values:</p>
        <ul>
            <li>
                <p>
                  <code>PENDING</code> – Amazon SES hasn't started searching for the MX record
                    yet.</p>
            </li>
            <li>
                <p>
                  <code>SUCCESS</code> – Amazon SES detected the required MX record for the
                    MAIL FROM domain.</p>
            </li>
            <li>
                <p>
                  <code>FAILED</code> – Amazon SES can't find the required MX record, or the
                    record no longer exists.</p>
            </li>
            <li>
                <p>
                  <code>TEMPORARY_FAILURE</code> – A temporary issue occurred, which
                    prevented Amazon SES from determining the status of the MAIL FROM domain.</p>
            </li>
         </ul>")
  @as("MailFromDomainStatus")
  mailFromDomainStatus: mailFromDomainStatus,
  @ocaml.doc(
    "<p>The name of a domain that an email identity uses as a custom MAIL FROM domain.</p>"
  )
  @as("MailFromDomain")
  mailFromDomain: mailFromDomainName,
}
@ocaml.doc(
  "<p>A list of dedicated IP pools that are associated with your Amazon Web Services account.</p>"
)
type listOfDedicatedIpPools = array<poolName>
@ocaml.doc("<p>An object used to specify a list or topic to which an email belongs, which will be
            used when a contact chooses to unsubscribe.</p>")
type listManagementOptions = {
  @ocaml.doc("<p>The name of the topic.</p>") @as("TopicName") topicName: option<topicName>,
  @ocaml.doc("<p>The name of the contact list.</p>") @as("ContactListName")
  contactListName: contactListName,
}
@ocaml.doc("<p>An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to
            stream data to other services, such as Amazon S3 and Amazon Redshift.</p>")
type kinesisFirehoseDestination = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Amazon Kinesis Data Firehose stream that the Amazon SES API v2 sends email
            events to.</p>")
  @as("DeliveryStreamArn")
  deliveryStreamArn: amazonResourceName,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the IAM role that the Amazon SES API v2 uses to send email
            events to the Amazon Kinesis Data Firehose stream.</p>")
  @as("IamRoleArn")
  iamRoleArn: amazonResourceName,
}
type ispNameList = array<ispName>
type ipList = array<ip>
@ocaml.doc("<p>An object that contains details about the data source of the import job.</p>")
type importDataSource = {
  @ocaml.doc("<p>The data format of the import job's data source.</p>") @as("DataFormat")
  dataFormat: dataFormat,
  @ocaml.doc("<p>An Amazon S3 URL in the format
                s3://<i><bucket_name></i>/<i><object></i>.</p>")
  @as("S3Url")
  s3Url: s3Url,
}
@ocaml.doc("<p>Information about an email identity.</p>")
type identityInfo = {
  @ocaml.doc("<p>Indicates whether or not you can send email from the identity.</p>
        <p>An <i>identity</i> is an email address or domain that you send email
            from. Before you can send email from an identity, you have to demostrate that you own
            the identity, and that you authorize Amazon SES to send email from that identity.</p>")
  @as("SendingEnabled")
  sendingEnabled: option<enabled>,
  @ocaml.doc("<p>The address or domain of the identity.</p>") @as("IdentityName")
  identityName: option<identity>,
  @ocaml.doc("<p>The email identity type. Note: the <code>MANAGED_DOMAIN</code> type is not supported
            for email identity types.</p>")
  @as("IdentityType")
  identityType: option<identityType>,
}
@ocaml.doc("<p>An object that contains the failure details about an import job.</p>")
type failureInfo = {
  @ocaml.doc("<p>A message about why the import job failed.</p>") @as("ErrorMessage")
  errorMessage: option<errorMessage>,
  @ocaml.doc("<p>An Amazon S3 presigned URL that contains all the failed records and related
            information.</p>")
  @as("FailedRecordsS3Url")
  failedRecordsS3Url: option<failedRecordsS3Url>,
}
type eventTypes = array<eventType>
type esps = array<esp>
@ocaml.doc("<p>Contains information about an email template.</p>")
type emailTemplateMetadata = {
  @ocaml.doc("<p>The time and date the template was created.</p>") @as("CreatedTimestamp")
  createdTimestamp: option<timestamp_>,
  @ocaml.doc("<p>The name of the template.</p>") @as("TemplateName")
  templateName: option<emailTemplateName>,
}
@ocaml.doc("<p>The content of the email, composed of a subject line, an HTML part, and a text-only
            part.</p>")
type emailTemplateContent = {
  @ocaml.doc("<p>The HTML body of the email.</p>") @as("Html") html: option<emailTemplateHtml>,
  @ocaml.doc("<p>The email body that will be visible to recipients whose email clients do not display
            HTML.</p>")
  @as("Text")
  text: option<emailTemplateText>,
  @ocaml.doc("<p>The subject line of the email.</p>") @as("Subject")
  subject: option<emailTemplateSubject>,
}
type emailAddressList = array<emailAddress>
@ocaml.doc("<p>An object that contains inbox placement data for email sent from one of your email
            domains to a specific email provider.</p>")
type domainIspPlacement = {
  @ocaml.doc("<p>The percentage of messages that were sent from the selected domain to the specified
            email provider that arrived in recipients' spam or junk mail folders.</p>")
  @as("SpamPercentage")
  spamPercentage: option<percentage>,
  @ocaml.doc("<p>The percentage of messages that were sent from the selected domain to the specified
            email provider that arrived in recipients' inboxes.</p>")
  @as("InboxPercentage")
  inboxPercentage: option<percentage>,
  @ocaml.doc("<p>The total number of messages that were sent from the selected domain to the specified
            email provider that arrived in recipients' spam or junk mail folders.</p>")
  @as("SpamRawCount")
  spamRawCount: option<volume>,
  @ocaml.doc("<p>The total number of messages that were sent from the selected domain to the specified
            email provider that arrived in recipients' inboxes.</p>")
  @as("InboxRawCount")
  inboxRawCount: option<volume>,
  @ocaml.doc("<p>The name of the email provider that the inbox placement data applies to.</p>")
  @as("IspName")
  ispName: option<ispName>,
}
type dnsTokenList = array<dnsToken>
@ocaml.doc(
  "<p>An object that contains configuration for Bring Your Own DKIM (BYODKIM), or, for Easy DKIM</p>"
)
type dkimSigningAttributes = {
  @ocaml.doc(
    "<p>[Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day.</p>"
  )
  @as("NextSigningKeyLength")
  nextSigningKeyLength: option<dkimSigningKeyLength>,
  @ocaml.doc("<p>[Bring Your Own DKIM] A private key that's used to generate a DKIM signature.</p>
        <p>The private key must use 1024 or 2048-bit RSA encryption, and must be encoded using
            base64 encoding.</p>")
  @as("DomainSigningPrivateKey")
  domainSigningPrivateKey: option<privateKey>,
  @ocaml.doc("<p>[Bring Your Own DKIM] A string that's used to identify a public key in the DNS configuration for a
            domain.</p>")
  @as("DomainSigningSelector")
  domainSigningSelector: option<selector>,
}
@ocaml.doc("<p>Used to associate a configuration set with a dedicated IP pool.</p>")
type deliveryOptions = {
  @ocaml.doc("<p>The name of the dedicated IP pool to associate with the configuration set.</p>")
  @as("SendingPoolName")
  sendingPoolName: option<poolName>,
  @ocaml.doc("<p>Specifies whether messages that use the configuration set are required to use
            Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only
            delivered if a TLS connection can be established. If the value is <code>Optional</code>,
            messages can be delivered in plain text if a TLS connection can't be established.</p>")
  @as("TlsPolicy")
  tlsPolicy: option<tlsPolicy>,
}
@ocaml.doc("<p>An object that contains metadata related to a predictive inbox placement test.</p>")
type deliverabilityTestReport = {
  @ocaml.doc("<p>The status of the predictive inbox placement test. If the status is <code>IN_PROGRESS</code>, then the predictive inbox placement test
            is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the
            test. If the status is <code>COMPLETE</code>, then the test is finished, and you can use
            the <code>GetDeliverabilityTestReport</code> to view the results of the test.</p>")
  @as("DeliverabilityTestStatus")
  deliverabilityTestStatus: option<deliverabilityTestStatus>,
  @ocaml.doc(
    "<p>The date and time when the predictive inbox placement test was created, in Unix time format.</p>"
  )
  @as("CreateDate")
  createDate: option<timestamp_>,
  @ocaml.doc(
    "<p>The sender address that you specified for the predictive inbox placement test.</p>"
  )
  @as("FromEmailAddress")
  fromEmailAddress: option<emailAddress>,
  @ocaml.doc(
    "<p>The subject line for an email that you submitted in a predictive inbox placement test.</p>"
  )
  @as("Subject")
  subject: option<deliverabilityTestSubject>,
  @ocaml.doc("<p>A name that helps you identify a predictive inbox placement test report.</p>")
  @as("ReportName")
  reportName: option<reportName>,
  @ocaml.doc("<p>A unique string that identifies the predictive inbox placement test.</p>")
  @as("ReportId")
  reportId: option<reportId>,
}
@ocaml.doc("<p>Contains information about a dedicated IP address that is associated with your Amazon SES
            account.</p>
        <p>To learn more about requesting dedicated IP addresses, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/dedicated-ip-case.html\">Requesting and Relinquishing
                Dedicated IP Addresses</a> in the <i>Amazon SES Developer
            Guide</i>.</p>")
type dedicatedIp = {
  @ocaml.doc("<p>The name of the dedicated IP pool that the IP address is associated with.</p>")
  @as("PoolName")
  poolName: option<poolName>,
  @ocaml.doc("<p>Indicates how complete the dedicated IP warm-up process is. When this value equals 1,
            the address has completed the warm-up process and is ready for use.</p>")
  @as("WarmupPercentage")
  warmupPercentage: percentage100Wrapper,
  @ocaml.doc("<p>The warm-up status of a dedicated IP address. The status can have one of the following
            values:</p>
        <ul>
            <li>
                <p>
                  <code>IN_PROGRESS</code> – The IP address isn't ready to use because the
                    dedicated IP warm-up process is ongoing.</p>
            </li>
            <li>
                <p>
                  <code>DONE</code> – The dedicated IP warm-up process is complete, and
                    the IP address is ready to use.</p>
            </li>
         </ul>")
  @as("WarmupStatus")
  warmupStatus: warmupStatus,
  @ocaml.doc("<p>An IPv4 address.</p>") @as("Ip") ip: ip,
}
@ocaml.doc("<p>Contains information about a custom verification email template.</p>")
type customVerificationEmailTemplateMetadata = {
  @ocaml.doc("<p>The URL that the recipient of the verification email is sent to if his or her address
            is not successfully verified.</p>")
  @as("FailureRedirectionURL")
  failureRedirectionURL: option<failureRedirectionURL>,
  @ocaml.doc("<p>The URL that the recipient of the verification email is sent to if his or her address
            is successfully verified.</p>")
  @as("SuccessRedirectionURL")
  successRedirectionURL: option<successRedirectionURL>,
  @ocaml.doc("<p>The subject line of the custom verification email.</p>") @as("TemplateSubject")
  templateSubject: option<emailTemplateSubject>,
  @ocaml.doc("<p>The email address that the custom verification email is sent from.</p>")
  @as("FromEmailAddress")
  fromEmailAddress: option<emailAddress>,
  @ocaml.doc("<p>The name of the custom verification email template.</p>") @as("TemplateName")
  templateName: option<emailTemplateName>,
}
@ocaml.doc("<p>An object that represents the content of the email, and optionally a character set
            specification.</p>")
type content = {
  @ocaml.doc("<p>The character set for the content. Because of the constraints of the SMTP protocol,
            Amazon SES uses 7-bit ASCII by default. If the text includes characters outside of the ASCII
            range, you have to specify a character set. For example, you could specify
                <code>UTF-8</code>, <code>ISO-8859-1</code>, or <code>Shift_JIS</code>.</p>")
  @as("Charset")
  charset: option<charset>,
  @ocaml.doc("<p>The content of the message itself.</p>") @as("Data") data: messageData,
}
@ocaml.doc("<p>An object that contains details about the action of a contact list.</p>")
type contactListDestination = {
  @ocaml.doc("<p>>The type of action to perform on the addresses. The following are the 
            possible values:</p>
        <ul>
            <li>
                <p>PUT: add the addresses to the contact list. If the record already exists, it
                    will override it with the new value.</p>
            </li>
            <li>
                <p>DELETE: remove the addresses from the contact list.</p>
            </li>
         </ul>")
  @as("ContactListImportAction")
  contactListImportAction: contactListImportAction,
  @ocaml.doc("<p>The name of the contact list.</p>") @as("ContactListName")
  contactListName: contactListName,
}
@ocaml.doc("<p>A list that contains contacts that have subscribed to a particular topic or
            topics.</p>")
type contactList = {
  @ocaml.doc("<p>A timestamp noting the last time the contact list was updated.</p>")
  @as("LastUpdatedTimestamp")
  lastUpdatedTimestamp: option<timestamp_>,
  @ocaml.doc("<p>The name of the contact list.</p>") @as("ContactListName")
  contactListName: option<contactListName>,
}
type configurationSetNameList = array<configurationSetName>
@ocaml.doc("<p>An object that defines the dimension configuration to use when you send email events
            to Amazon CloudWatch.</p>")
type cloudWatchDimensionConfiguration = {
  @ocaml.doc("<p>The default value of the dimension that is published to Amazon CloudWatch if you don't provide the
            value of the dimension when you send an email. This value has to meet the following
            criteria:</p>
        <ul>
            <li>
                <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9),
                    underscores (_), or dashes (-).</p>
            </li>
            <li>
                <p>It can contain no more than 256 characters.</p>
            </li>
         </ul>")
  @as("DefaultDimensionValue")
  defaultDimensionValue: defaultDimensionValue,
  @ocaml.doc("<p>The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. To
            use the message tags that you specify using an <code>X-SES-MESSAGE-TAGS</code> header or
            a parameter to the <code>SendEmail</code> or <code>SendRawEmail</code> API, choose
                <code>messageTag</code>. To use your own email headers, choose
                <code>emailHeader</code>. To use link tags, choose <code>linkTags</code>.</p>")
  @as("DimensionValueSource")
  dimensionValueSource: dimensionValueSource,
  @ocaml.doc("<p>The name of an Amazon CloudWatch dimension associated with an email sending metric. The name has to
            meet the following criteria:</p>
        <ul>
            <li>
                <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9),
                    underscores (_), or dashes (-).</p>
            </li>
            <li>
                <p>It can contain no more than 256 characters.</p>
            </li>
         </ul>")
  @as("DimensionName")
  dimensionName: dimensionName,
}
@ocaml.doc("<p>The result of the <code>SendBulkEmail</code> operation of each specified
                <code>BulkEmailEntry</code>.</p>")
type bulkEmailEntryResult = {
  @ocaml.doc("<p>The unique message identifier returned from the <code>SendBulkTemplatedEmail</code>
            operation.</p>")
  @as("MessageId")
  messageId: option<outboundMessageId>,
  @ocaml.doc("<p>A description of an error that prevented a message being sent using the
                <code>SendBulkTemplatedEmail</code> operation.</p>")
  @as("Error")
  error: option<errorMessage>,
  @ocaml.doc("<p>The status of a message sent using the <code>SendBulkTemplatedEmail</code>
            operation.</p>
        <p>Possible values for this parameter include:</p>
        <ul>
            <li>
                <p>SUCCESS: Amazon SES accepted the message, and will attempt to deliver it to
                    the recipients.</p>
            </li>
            <li>
                <p>MESSAGE_REJECTED: The message was rejected because it contained a
                    virus.</p>
            </li>
            <li>
                <p>MAIL_FROM_DOMAIN_NOT_VERIFIED: The sender's email address or domain was not
                    verified.</p>
            </li>
            <li>
                <p>CONFIGURATION_SET_DOES_NOT_EXIST: The configuration set you specified does not
                    exist.</p>
            </li>
            <li>
                <p>TEMPLATE_DOES_NOT_EXIST: The template you specified does not exist.</p>
            </li>
            <li>
                <p>ACCOUNT_SUSPENDED: Your account has been shut down because of issues related
                    to your email sending practices.</p>
            </li>
            <li>
                <p>ACCOUNT_THROTTLED: The number of emails you can send has been reduced because
                    your account has exceeded its allocated sending limit.</p>
            </li>
            <li>
                <p>ACCOUNT_DAILY_QUOTA_EXCEEDED: You have reached or exceeded the maximum number
                    of emails you can send from your account in a 24-hour period.</p>
            </li>
            <li>
                <p>INVALID_SENDING_POOL_NAME: The configuration set you specified refers to an IP
                    pool that does not exist.</p>
            </li>
            <li>
                <p>ACCOUNT_SENDING_PAUSED: Email sending for the Amazon SES account was disabled
                    using the <a href=\"https://docs.aws.amazon.com/ses/latest/APIReference/API_UpdateAccountSendingEnabled.html\">UpdateAccountSendingEnabled</a> operation.</p>
            </li>
            <li>
                <p>CONFIGURATION_SET_SENDING_PAUSED: Email sending for this configuration set was
                    disabled using the <a href=\"https://docs.aws.amazon.com/ses/latest/APIReference/API_UpdateConfigurationSetSendingEnabled.html\">UpdateConfigurationSetSendingEnabled</a> operation.</p>
            </li>
            <li>
                <p>INVALID_PARAMETER_VALUE: One or more of the parameters you specified when
                    calling this operation was invalid. See the error message for additional
                    information.</p>
            </li>
            <li>
                <p>TRANSIENT_FAILURE: Amazon SES was unable to process your request because of a
                    temporary issue.</p>
            </li>
            <li>
                <p>FAILED: Amazon SES was unable to process your request. See the error message
                    for additional information.</p>
            </li>
         </ul>")
  @as("Status")
  status: option<bulkEmailStatus>,
}
type blacklistItemNames = array<blacklistItemName>
@ocaml.doc("<p>An object that contains information about a blacklisting event that impacts one of the
            dedicated IP addresses that is associated with your account.</p>")
type blacklistEntry = {
  @ocaml.doc("<p>Additional information about the blacklisting event, as provided by the blacklist
            maintainer.</p>")
  @as("Description")
  description: option<blacklistingDescription>,
  @ocaml.doc("<p>The time when the blacklisting event occurred, shown in Unix time format.</p>")
  @as("ListingTime")
  listingTime: option<timestamp_>,
  @ocaml.doc("<p>The name of the blacklist that the IP address appears on.</p>") @as("RblName")
  rblName: option<rblName>,
}
type additionalContactEmailAddresses = array<additionalContactEmailAddress>
type topics = array<topic>
type topicPreferenceList = array<topicPreference>
type tagList_ = array<tag>
@ocaml.doc("<p>An object that contains information about the suppression list preferences for your
            account.</p>")
type suppressionOptions = {
  @ocaml.doc("<p>A list that contains the reasons that email addresses are automatically added to the
            suppression list for your account. This list can contain any or all of the
            following:</p>
        <ul>
            <li>
                <p>
                  <code>COMPLAINT</code> – Amazon SES adds an email address to the suppression
                    list for your account when a message sent to that address results in a
                    complaint.</p>
            </li>
            <li>
                <p>
                  <code>BOUNCE</code> – Amazon SES adds an email address to the suppression
                    list for your account when a message sent to that address results in a hard
                    bounce.</p>
            </li>
         </ul>")
  @as("SuppressedReasons")
  suppressedReasons: option<suppressionListReasons>,
}
@ocaml.doc("<p>An object that contains information about the email address suppression preferences
            for your account in the current Amazon Web Services Region.</p>")
type suppressionAttributes = {
  @ocaml.doc("<p>A list that contains the reasons that email addresses will be automatically added to
            the suppression list for your account. This list can contain any or all of the
            following:</p>
        <ul>
            <li>
                <p>
                  <code>COMPLAINT</code> – Amazon SES adds an email address to the suppression
                    list for your account when a message sent to that address results in a
                    complaint.</p>
            </li>
            <li>
                <p>
                  <code>BOUNCE</code> – Amazon SES adds an email address to the suppression
                    list for your account when a message sent to that address results in a hard
                    bounce.</p>
            </li>
         </ul>")
  @as("SuppressedReasons")
  suppressedReasons: option<suppressionListReasons>,
}
type suppressedDestinationSummaries = array<suppressedDestinationSummary>
@ocaml.doc("<p>An object that contains information about an email address that is on the suppression
            list for your account.</p>")
type suppressedDestination = {
  @ocaml.doc("<p>An optional value that can contain additional information about the reasons that the
            address was added to the suppression list for your account.</p>")
  @as("Attributes")
  attributes: option<suppressedDestinationAttributes>,
  @ocaml.doc("<p>The date and time when the suppressed destination was last updated, shown in Unix time
            format.</p>")
  @as("LastUpdateTime")
  lastUpdateTime: timestamp_,
  @ocaml.doc(
    "<p>The reason that the address was added to the suppression list for your account.</p>"
  )
  @as("Reason")
  reason: suppressionListReason,
  @ocaml.doc("<p>The email address that is on the suppression list for your account.</p>")
  @as("EmailAddress")
  emailAddress: emailAddress,
}
@ocaml.doc("<p>The <code>ReplaceEmailContent</code> object to be used for a specific
                <code>BulkEmailEntry</code>. The <code>ReplacementTemplate</code> can be specified
            within this object.</p>")
type replacementEmailContent = {
  @ocaml.doc("<p>The <code>ReplacementTemplate</code> associated with
                <code>ReplacementEmailContent</code>.</p>")
  @as("ReplacementTemplate")
  replacementTemplate: option<replacementTemplate>,
}
@ocaml.doc("<p>A list of message tags.</p>") type messageTagList = array<messageTag>
type listOfContactLists = array<contactList>
@ocaml.doc("<p>A filter that can be applied to a list of contacts.</p>")
type listContactsFilter = {
  @ocaml.doc("<p>Used for filtering by a specific topic preference.</p>") @as("TopicFilter")
  topicFilter: option<topicFilter>,
  @ocaml.doc("<p>The status by which you are filtering: <code>OPT_IN</code> or
            <code>OPT_OUT</code>.</p>")
  @as("FilteredStatus")
  filteredStatus: option<subscriptionStatus>,
}
@ocaml.doc("<p>An object that describes how email sent during the predictive inbox placement test was handled by a certain
            email provider.</p>")
type ispPlacement = {
  @ocaml.doc(
    "<p>An object that contains inbox placement metrics for a specific email provider.</p>"
  )
  @as("PlacementStatistics")
  placementStatistics: option<placementStatistics>,
  @ocaml.doc("<p>The name of the email provider that the inbox placement data applies to.</p>")
  @as("IspName")
  ispName: option<ispName>,
}
@ocaml.doc("<p>An object that contains information about the inbox placement data settings for a
            verified domain that’s associated with your Amazon Web Services account. This data is available only
            if you enabled the Deliverability dashboard for the domain.</p>")
type inboxPlacementTrackingOption = {
  @ocaml.doc("<p>An array of strings, one for each major email provider that the inbox placement data
            applies to.</p>")
  @as("TrackedIsps")
  trackedIsps: option<ispNameList>,
  @ocaml.doc("<p>Specifies whether inbox placement data is being tracked for the domain.</p>")
  @as("Global")
  global: option<enabled>,
}
@ocaml.doc("<p>An object that contains details about the resource destination the import job is going
            to target.</p>")
type importDestination = {
  @ocaml.doc("<p>An object that contains the action of the import job towards a contact list.</p>")
  @as("ContactListDestination")
  contactListDestination: option<contactListDestination>,
  @ocaml.doc(
    "<p>An object that contains the action of the import job towards suppression list.</p>"
  )
  @as("SuppressionListDestination")
  suppressionListDestination: option<suppressionListDestination>,
}
type identityInfoList = array<identityInfo>
@ocaml.doc("<p>A list of the EmailTemplateMetadata object.</p>")
type emailTemplateMetadataList = array<emailTemplateMetadata>
type domainIspPlacements = array<domainIspPlacement>
@ocaml.doc("<p>An object that contains the deliverability data for a specific campaign. This data is
            available for a campaign only if the campaign sent email by using a domain that the
            Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code>
            operation).</p>")
type domainDeliverabilityCampaign = {
  @ocaml.doc("<p>The major email providers who handled the email message.</p>") @as("Esps")
  esps: option<esps>,
  @ocaml.doc("<p>The projected number of recipients that the email message was sent to.</p>")
  @as("ProjectedVolume")
  projectedVolume: option<volume>,
  @ocaml.doc("<p>The percentage of email messages that were opened and then deleted by recipients. Due
            to technical limitations, this value only includes recipients who opened the message by
            using an email client that supports images.</p>")
  @as("ReadDeleteRate")
  readDeleteRate: option<percentage>,
  @ocaml.doc("<p>The percentage of email messages that were deleted by recipients, without being opened
            first. Due to technical limitations, this value only includes recipients who opened the
            message by using an email client that supports images.</p>")
  @as("DeleteRate")
  deleteRate: option<percentage>,
  @ocaml.doc("<p>The percentage of email messages that were opened by recipients. Due to technical
            limitations, this value only includes recipients who opened the message by using an
            email client that supports images.</p>")
  @as("ReadRate")
  readRate: option<percentage>,
  @ocaml.doc("<p>The number of email messages that were delivered to recipients' spam or junk mail
            folders.</p>")
  @as("SpamCount")
  spamCount: option<volume>,
  @ocaml.doc("<p>The number of email messages that were delivered to recipients’ inboxes.</p>")
  @as("InboxCount")
  inboxCount: option<volume>,
  @ocaml.doc("<p>The last time, in Unix time format, when the email message was delivered to any
            recipient's inbox. This value can help you determine how long it took for a campaign to
            deliver an email message.</p>")
  @as("LastSeenDateTime")
  lastSeenDateTime: option<timestamp_>,
  @ocaml.doc("<p>The first time, in Unix time format, when the email message was delivered to any
            recipient's inbox. This value can help you determine how long it took for a campaign to
            deliver an email message.</p>")
  @as("FirstSeenDateTime")
  firstSeenDateTime: option<timestamp_>,
  @ocaml.doc("<p>The IP addresses that were used to send the email message.</p>") @as("SendingIps")
  sendingIps: option<ipList>,
  @ocaml.doc("<p>The verified email address that the email message was sent from.</p>")
  @as("FromAddress")
  fromAddress: option<identity>,
  @ocaml.doc("<p>The subject line, or title, of the email message.</p>") @as("Subject")
  subject: option<subject>,
  @ocaml.doc("<p>The URL of an image that contains a snapshot of the email message that was
            sent.</p>")
  @as("ImageUrl")
  imageUrl: option<imageUrl>,
  @ocaml.doc("<p>The unique identifier for the campaign. The Deliverability dashboard automatically generates
            and assigns this identifier to a campaign.</p>")
  @as("CampaignId")
  campaignId: option<campaignId>,
}
@ocaml.doc("<p>An object that contains information about the DKIM authentication status for an email
            identity.</p>
        <p>Amazon SES determines the authentication status by searching for specific records in the
            DNS configuration for the domain. If you used <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html\">Easy DKIM</a> to set up DKIM
            authentication, Amazon SES tries to find three unique CNAME records in the DNS configuration
            for your domain. If you provided a public key to perform DKIM authentication, Amazon SES
            tries to find a TXT record that uses the selector that you specified. The value of the
            TXT record must be a public key that's paired with the private key that you specified in
            the process of creating the identity</p>")
type dkimAttributes = {
  @ocaml.doc("<p>[Easy DKIM] The last time a key pair was generated for this identity.</p>")
  @as("LastKeyGenerationTimestamp")
  lastKeyGenerationTimestamp: option<timestamp_>,
  @ocaml.doc("<p>[Easy DKIM] The key length of the DKIM key pair in use.</p>")
  @as("CurrentSigningKeyLength")
  currentSigningKeyLength: option<dkimSigningKeyLength>,
  @ocaml.doc(
    "<p>[Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day.</p>"
  )
  @as("NextSigningKeyLength")
  nextSigningKeyLength: option<dkimSigningKeyLength>,
  @ocaml.doc("<p>A string that indicates how DKIM was configured for the identity. These are the
            possible values:</p>
        <ul>
            <li>
                <p>
                  <code>AWS_SES</code> – Indicates that DKIM was configured for the
                    identity by using <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html\">Easy DKIM</a>.</p>
            </li>
            <li>
                <p>
                  <code>EXTERNAL</code> – Indicates that DKIM was configured for the
                    identity by using Bring Your Own DKIM (BYODKIM).</p>
            </li>
         </ul>")
  @as("SigningAttributesOrigin")
  signingAttributesOrigin: option<dkimSigningAttributesOrigin>,
  @ocaml.doc("<p>If you used <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html\">Easy DKIM</a> to configure DKIM authentication for the domain, then this object
            contains a set of unique strings that you use to create a set of CNAME records that you
            add to the DNS configuration for your domain. When Amazon SES detects these records in the
            DNS configuration for your domain, the DKIM authentication process is complete.</p>
        <p>If you configured DKIM authentication for the domain by providing your own
            public-private key pair, then this object contains the selector for the public
            key.</p>
        <p>Regardless of the DKIM authentication method you use, Amazon SES searches for the
            appropriate records in the DNS configuration of the domain for up to 72 hours.</p>")
  @as("Tokens")
  tokens: option<dnsTokenList>,
  @ocaml.doc("<p>Describes whether or not Amazon SES has successfully located the DKIM records in the DNS
            records for the domain. The status can be one of the following:</p>
        <ul>
            <li>
                <p>
                  <code>PENDING</code> – The verification process was initiated, but Amazon SES
                    hasn't yet detected the DKIM records in the DNS configuration for the
                    domain.</p>
            </li>
            <li>
                <p>
                  <code>SUCCESS</code> – The verification process completed
                    successfully.</p>
            </li>
            <li>
                <p>
                  <code>FAILED</code> – The verification process failed. This typically
                    occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the
                    domain.</p>
            </li>
            <li>
                <p>
                  <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon SES
                    from determining the DKIM authentication status of the domain.</p>
            </li>
            <li>
                <p>
                  <code>NOT_STARTED</code> – The DKIM verification process hasn't been
                    initiated for the domain.</p>
            </li>
         </ul>")
  @as("Status")
  status: option<dkimStatus>,
  @ocaml.doc("<p>If the value is <code>true</code>, then the messages that you send from the identity
            are signed using DKIM. If the value is <code>false</code>, then the messages that you
            send from the identity aren't DKIM-signed.</p>")
  @as("SigningEnabled")
  signingEnabled: option<enabled>,
}
@ocaml.doc("<p>An object that describes the recipients for an email.</p>
        <note>
            <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href=\"https://tools.ietf.org/html/rfc6531\">RFC6531</a>. For this reason, the
                    <i>local part</i> of a destination email address (the part of the
                email address that precedes the @ sign) may only contain <a href=\"https://en.wikipedia.org/wiki/Email_address#Local-part\">7-bit ASCII
                    characters</a>. If the <i>domain part</i> of an address (the
                part after the @ sign) contains non-ASCII characters, they must be encoded using
                Punycode, as described in <a href=\"https://tools.ietf.org/html/rfc3492.html\">RFC3492</a>.</p>
        </note>")
type destination = {
  @ocaml.doc("<p>An array that contains the email addresses of the \"BCC\" (blind carbon copy) recipients
            for the email.</p>")
  @as("BccAddresses")
  bccAddresses: option<emailAddressList>,
  @ocaml.doc("<p>An array that contains the email addresses of the \"CC\" (carbon copy) recipients for
            the email.</p>")
  @as("CcAddresses")
  ccAddresses: option<emailAddressList>,
  @ocaml.doc("<p>An array that contains the email addresses of the \"To\" recipients for the
            email.</p>")
  @as("ToAddresses")
  toAddresses: option<emailAddressList>,
}
type deliverabilityTestReports = array<deliverabilityTestReport>
@ocaml.doc(
  "<p>A list of dedicated IP addresses that are associated with your Amazon Web Services account.</p>"
)
type dedicatedIpList = array<dedicatedIp>
@ocaml.doc("<p>A list of the custom verification email templates that exist in your account.</p>")
type customVerificationEmailTemplatesList = array<customVerificationEmailTemplateMetadata>
type cloudWatchDimensionConfigurations = array<cloudWatchDimensionConfiguration>
@ocaml.doc("<p>A list of <code>BulkMailEntry</code> objects.</p>")
type bulkEmailEntryResultList = array<bulkEmailEntryResult>
@ocaml.doc("<p>An object that contains the body of the message. You can specify a template
            message.</p>")
type bulkEmailContent = {
  @ocaml.doc("<p>The template to use for the bulk email message.</p>") @as("Template")
  template: option<template>,
}
@ocaml.doc("<p>Represents the body of the email message.</p>")
type body = {
  @ocaml.doc("<p>An object that represents the version of the message that is displayed in email
            clients that support HTML. HTML messages can include formatted text, hyperlinks, images,
            and more. </p>")
  @as("Html")
  html: option<content>,
  @ocaml.doc("<p>An object that represents the version of the message that is displayed in email
            clients that don't support HTML, or clients where the recipient has disabled HTML
            rendering.</p>")
  @as("Text")
  text: option<content>,
}
type blacklistEntries = array<blacklistEntry>
@ocaml.doc("<p>An object that contains information about your account details.</p>")
type accountDetails = {
  @ocaml.doc("<p>Information about the review of the latest details you submitted.</p>")
  @as("ReviewDetails")
  reviewDetails: option<reviewDetails>,
  @ocaml.doc("<p>Additional email addresses where updates are sent about your account review
            process.</p>")
  @as("AdditionalContactEmailAddresses")
  additionalContactEmailAddresses: option<additionalContactEmailAddresses>,
  @ocaml.doc("<p>A description of the types of email that you plan to send.</p>")
  @as("UseCaseDescription")
  useCaseDescription: option<useCaseDescription>,
  @ocaml.doc("<p>The language you would prefer for the case. The contact language can be one of
                <code>ENGLISH</code> or <code>JAPANESE</code>.</p>")
  @as("ContactLanguage")
  contactLanguage: option<contactLanguage>,
  @ocaml.doc("<p>The URL of your website. This information helps us better understand the type of
            content that you plan to send.</p>")
  @as("WebsiteURL")
  websiteURL: option<websiteURL>,
  @ocaml.doc("<p>The type of email your account is sending. The mail type can be one of the
            following:</p>
        <ul>
            <li>
                <p>
                  <code>MARKETING</code> – Most of your sending traffic is to keep your
                    customers informed of your latest offering.</p>
            </li>
            <li>
                <p>
                  <code>TRANSACTIONAL</code> – Most of your sending traffic is to
                    communicate during a transaction with a customer.</p>
            </li>
         </ul>")
  @as("MailType")
  mailType: option<mailType>,
}
@ocaml.doc("<p>An object that contains information about email that was sent from the selected
            domain.</p>")
type overallVolume = {
  @ocaml.doc("<p>An object that contains inbox and junk mail placement metrics for individual email
            providers.</p>")
  @as("DomainIspPlacements")
  domainIspPlacements: option<domainIspPlacements>,
  @ocaml.doc("<p>The percentage of emails that were sent from the domain that were read by their
            recipients.</p>")
  @as("ReadRatePercent")
  readRatePercent: option<percentage>,
  @ocaml.doc("<p>An object that contains information about the numbers of messages that arrived in
            recipients' inboxes and junk mail folders.</p>")
  @as("VolumeStatistics")
  volumeStatistics: option<volumeStatistics>,
}
@ocaml.doc("<p>Represents the email message that you're sending. The <code>Message</code> object
            consists of a subject line and a message body.</p>")
type message = {
  @ocaml.doc("<p>The body of the message. You can specify an HTML version of the message, a text-only
            version of the message, or both.</p>")
  @as("Body")
  body: body,
  @ocaml.doc("<p>The subject line of the email. The subject line can only contain 7-bit ASCII
            characters. However, you can specify non-ASCII characters in the subject line by using
            encoded-word syntax, as described in <a href=\"https://tools.ietf.org/html/rfc2047\">RFC 2047</a>.</p>")
  @as("Subject")
  subject: content,
}
type ispPlacements = array<ispPlacement>
@ocaml.doc("<p>A summary of the import job.</p>")
type importJobSummary = {
  @ocaml.doc("<p>The date and time when the import job was created.</p>") @as("CreatedTimestamp")
  createdTimestamp: option<timestamp_>,
  @as("JobStatus") jobStatus: option<jobStatus>,
  @as("ImportDestination") importDestination: option<importDestination>,
  @as("JobId") jobId: option<jobId>,
}
@ocaml.doc("<p>An object that contains information about the Deliverability dashboard subscription for a
            verified domain that you use to send email and currently has an active Deliverability dashboard
            subscription. If a Deliverability dashboard subscription is active for a domain, you gain access
            to reputation, inbox placement, and other metrics for the domain.</p>")
type domainDeliverabilityTrackingOption = {
  @ocaml.doc("<p>An object that contains information about the inbox placement data settings for the
            domain.</p>")
  @as("InboxPlacementTrackingOption")
  inboxPlacementTrackingOption: option<inboxPlacementTrackingOption>,
  @ocaml.doc("<p>The date, in Unix time format, when you enabled the Deliverability dashboard for the
            domain.</p>")
  @as("SubscriptionStartDate")
  subscriptionStartDate: option<timestamp_>,
  @ocaml.doc("<p>A verified domain that’s associated with your Amazon Web Services account and currently has an
            active Deliverability dashboard subscription.</p>")
  @as("Domain")
  domain: option<domain>,
}
@ocaml.doc("<p></p>") type domainDeliverabilityCampaignList = array<domainDeliverabilityCampaign>
@ocaml.doc("<p>An object that contains information about the volume of email sent on each day of the
            analysis period.</p>")
type dailyVolume = {
  @ocaml.doc("<p>An object that contains inbox placement metrics for a specified day in the analysis
            period, broken out by the recipient's email provider.</p>")
  @as("DomainIspPlacements")
  domainIspPlacements: option<domainIspPlacements>,
  @ocaml.doc("<p>An object that contains inbox placement metrics for a specific day in the analysis
            period.</p>")
  @as("VolumeStatistics")
  volumeStatistics: option<volumeStatistics>,
  @ocaml.doc("<p>The date that the DailyVolume metrics apply to, in Unix time.</p>")
  @as("StartDate")
  startDate: option<timestamp_>,
}
@ocaml.doc("<p>A contact is the end-user who is receiving the email.</p>")
type contact = {
  @ocaml.doc("<p>A timestamp noting the last time the contact's information was updated.</p>")
  @as("LastUpdatedTimestamp")
  lastUpdatedTimestamp: option<timestamp_>,
  @ocaml.doc("<p>A boolean value status noting if the contact is unsubscribed from all contact list
            topics.</p>")
  @as("UnsubscribeAll")
  unsubscribeAll: option<unsubscribeAll>,
  @ocaml.doc("<p>The default topic preferences applied to the contact.</p>")
  @as("TopicDefaultPreferences")
  topicDefaultPreferences: option<topicPreferenceList>,
  @ocaml.doc("<p>The contact's preference for being opted-in to or opted-out of a topic.</p>")
  @as("TopicPreferences")
  topicPreferences: option<topicPreferenceList>,
  @ocaml.doc("<p>The contact's email address.</p>") @as("EmailAddress")
  emailAddress: option<emailAddress>,
}
@ocaml.doc("<p>An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to
            monitor and gain insights on your email sending metrics.</p>")
type cloudWatchDestination = {
  @ocaml.doc("<p>An array of objects that define the dimensions to use when you send email events to
            Amazon CloudWatch.</p>")
  @as("DimensionConfigurations")
  dimensionConfigurations: cloudWatchDimensionConfigurations,
}
type bulkEmailEntry = {
  @ocaml.doc("<p>The <code>ReplacementEmailContent</code> associated with a
            <code>BulkEmailEntry</code>.</p>")
  @as("ReplacementEmailContent")
  replacementEmailContent: option<replacementEmailContent>,
  @ocaml.doc("<p>A list of tags, in the form of name/value pairs, to apply to an email that you send
            using the <code>SendBulkTemplatedEmail</code> operation. Tags correspond to
            characteristics of the email that you define, so that you can publish email sending
            events.</p>")
  @as("ReplacementTags")
  replacementTags: option<messageTagList>,
  @ocaml.doc("<p>Represents the destination of the message, consisting of To:, CC:, and BCC:
            fields.</p>
        <note>
            <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href=\"https://tools.ietf.org/html/rfc6531\">RFC6531</a>. For this reason, the
                local part of a destination email address (the part of the email address that
                precedes the @ sign) may only contain <a href=\"https://en.wikipedia.org/wiki/Email_address#Local-part\">7-bit ASCII
                    characters</a>. If the domain part of an address (the part after the @ sign)
                contains non-ASCII characters, they must be encoded using Punycode, as described in
                    <a href=\"https://tools.ietf.org/html/rfc3492.html\">RFC3492</a>.</p>
        </note>")
  @as("Destination")
  destination: destination,
}
type blacklistReport = Js.Dict.t<blacklistEntries>
type listOfContacts = array<contact>
@ocaml.doc("<p>A list of the import job summaries.</p>")
type importJobSummaryList = array<importJobSummary>
@ocaml.doc("<p>An object that defines the event destination. Specifically, it defines which services
            receive events from emails sent using the configuration set that the event destination
            is associated with. Also defines the types of events that are sent to the event
            destination.</p>")
type eventDestinationDefinition = {
  @ocaml.doc("<p>An object that defines an Amazon Pinpoint project destination for email events. You can send
            email event data to a Amazon Pinpoint project to view metrics using the Transactional Messaging
            dashboards that are built in to Amazon Pinpoint. For more information, see <a href=\"https://docs.aws.amazon.com/pinpoint/latest/userguide/analytics-transactional-messages.html\">Transactional
                Messaging Charts</a> in the <i>Amazon Pinpoint User Guide</i>.</p>")
  @as("PinpointDestination")
  pinpointDestination: option<pinpointDestination>,
  @ocaml.doc("<p>An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to
            send notification when certain email events occur.</p>")
  @as("SnsDestination")
  snsDestination: option<snsDestination>,
  @ocaml.doc("<p>An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to
            monitor and gain insights on your email sending metrics.</p>")
  @as("CloudWatchDestination")
  cloudWatchDestination: option<cloudWatchDestination>,
  @ocaml.doc("<p>An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to
            stream data to other services, such as Amazon S3 and Amazon Redshift.</p>")
  @as("KinesisFirehoseDestination")
  kinesisFirehoseDestination: option<kinesisFirehoseDestination>,
  @ocaml.doc("<p>An array that specifies which events the Amazon SES API v2 should send to the destinations in
            this <code>EventDestinationDefinition</code>.</p>")
  @as("MatchingEventTypes")
  matchingEventTypes: option<eventTypes>,
  @ocaml.doc("<p>If <code>true</code>, the event destination is enabled. When the event destination is
            enabled, the specified event types are sent to the destinations in this
                <code>EventDestinationDefinition</code>.</p>
        <p>If <code>false</code>, the event destination is disabled. When the event destination
            is disabled, events aren't sent to the specified destinations.</p>")
  @as("Enabled")
  enabled: option<enabled>,
}
@ocaml.doc("<p>In the Amazon SES API v2, <i>events</i> include message sends, deliveries, opens,
            clicks, bounces, complaints and delivery delays. <i>Event destinations</i>
            are places that you can send information about these events to. For example, you can
            send event data to Amazon SNS to receive notifications when you receive bounces or
            complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>")
type eventDestination = {
  @ocaml.doc("<p>An object that defines an Amazon Pinpoint project destination for email events. You can send
            email event data to a Amazon Pinpoint project to view metrics using the Transactional Messaging
            dashboards that are built in to Amazon Pinpoint. For more information, see <a href=\"https://docs.aws.amazon.com/pinpoint/latest/userguide/analytics-transactional-messages.html\">Transactional
                Messaging Charts</a> in the <i>Amazon Pinpoint User Guide</i>.</p>")
  @as("PinpointDestination")
  pinpointDestination: option<pinpointDestination>,
  @ocaml.doc("<p>An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to
            send notification when certain email events occur.</p>")
  @as("SnsDestination")
  snsDestination: option<snsDestination>,
  @ocaml.doc("<p>An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to
            monitor and gain insights on your email sending metrics.</p>")
  @as("CloudWatchDestination")
  cloudWatchDestination: option<cloudWatchDestination>,
  @ocaml.doc("<p>An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to
            stream data to other services, such as Amazon S3 and Amazon Redshift.</p>")
  @as("KinesisFirehoseDestination")
  kinesisFirehoseDestination: option<kinesisFirehoseDestination>,
  @ocaml.doc(
    "<p>The types of events that Amazon SES sends to the specified event destinations.</p>"
  )
  @as("MatchingEventTypes")
  matchingEventTypes: eventTypes,
  @ocaml.doc("<p>If <code>true</code>, the event destination is enabled. When the event destination is
            enabled, the specified event types are sent to the destinations in this
                <code>EventDestinationDefinition</code>.</p>
        <p>If <code>false</code>, the event destination is disabled. When the event destination
            is disabled, events aren't sent to the specified destinations.</p>")
  @as("Enabled")
  enabled: option<enabled>,
  @ocaml.doc("<p>A name that identifies the event destination.</p>") @as("Name")
  name: eventDestinationName,
}
@ocaml.doc("<p>An object that defines the entire content of the email, including the message headers
            and the body content. You can create a simple email message, in which you specify the
            subject and the text and HTML versions of the message body. You can also create raw
            messages, in which you specify a complete MIME-formatted message. Raw messages can
            include attachments and custom headers.</p>")
type emailContent = {
  @ocaml.doc("<p>The template to use for the email message.</p>") @as("Template")
  template: option<template>,
  @ocaml.doc("<p>The raw email message. The message has to meet the following criteria:</p>
        <ul>
            <li>
                <p>The message has to contain a header and a body, separated by one blank
                    line.</p>
            </li>
            <li>
                <p>All of the required header fields must be present in the message.</p>
            </li>
            <li>
                <p>Each part of a multipart MIME message must be formatted properly.</p>
            </li>
            <li>
                <p>If you include attachments, they must be in a file format that the Amazon SES API v2
                    supports.
                    </p>
            </li>
            <li>
                <p>The entire message must be Base64 encoded.</p>
            </li>
            <li>
                <p>If any of the MIME parts in your message contain content that is outside of
                    the 7-bit ASCII character range, you should encode that content to ensure that
                    recipients' email clients render the message properly.</p>
            </li>
            <li>
                <p>The length of any single line of text in the message can't exceed 1,000
                    characters. This restriction is defined in <a href=\"https://tools.ietf.org/html/rfc5321\">RFC 5321</a>.</p>
            </li>
         </ul>")
  @as("Raw")
  raw: option<rawMessage>,
  @ocaml.doc(
    "<p>The simple email message. The message consists of a subject and a message body.</p>"
  )
  @as("Simple")
  simple: option<message>,
}
@ocaml.doc("<p>An object that contains information about the Deliverability dashboard subscription for a
            verified domain that you use to send email and currently has an active Deliverability dashboard
            subscription. If a Deliverability dashboard subscription is active for a domain, you gain access
            to reputation, inbox placement, and other metrics for the domain.</p>")
type domainDeliverabilityTrackingOptions = array<domainDeliverabilityTrackingOption>
type dailyVolumes = array<dailyVolume>
@ocaml.doc("<p>A list of <code>BulkEmailEntry</code> objects.</p>")
type bulkEmailEntryList = array<bulkEmailEntry>
type eventDestinations = array<eventDestination>
@ocaml.doc("<fullname>Amazon SES API v2</fullname>
        
        <p>
            <a href=\"http://aws.amazon.com/ses\">Amazon SES</a> is an Amazon Web Services service that
            you can use to send email messages to your customers.</p>
        <p>If you're new to Amazon SES API v2, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/\">Amazon Simple Email Service Developer
                Guide</a>. The <i>Amazon SES Developer Guide</i> provides information
            and code samples that demonstrate how to use Amazon SES API v2 features programmatically.</p>")
module UpdateEmailIdentityPolicy = {
  type t
  @ocaml.doc("<p>Represents a request to update a sending authorization policy for an identity. Sending
            authorization is an Amazon SES feature that enables you to authorize other senders to use
            your identities. For information, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-identity-owner-tasks-management.html\">Amazon SES Developer Guide</a>.</p>")
  type request = {
    @ocaml.doc("<p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p>
        <p> For information about the syntax of sending authorization policies, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html\">Amazon SES Developer
                Guide</a>.</p>")
    @as("Policy")
    policy: policy,
    @ocaml.doc("<p>The name of the policy.</p>

        <p>The policy name cannot exceed 64 characters and can only include alphanumeric
            characters, dashes, and underscores.</p>")
    @as("PolicyName")
    policyName: policyName,
    @ocaml.doc("<p>The email identity.</p>") @as("EmailIdentity") emailIdentity: identity,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "UpdateEmailIdentityPolicyCommand"
  let make = (~policy, ~policyName, ~emailIdentity, ()) =>
    new({policy: policy, policyName: policyName, emailIdentity: emailIdentity})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module UpdateCustomVerificationEmailTemplate = {
  type t
  @ocaml.doc(
    "<p>Represents a request to update an existing custom verification email template.</p>"
  )
  type request = {
    @ocaml.doc("<p>The URL that the recipient of the verification email is sent to if his or her address
            is not successfully verified.</p>")
    @as("FailureRedirectionURL")
    failureRedirectionURL: failureRedirectionURL,
    @ocaml.doc("<p>The URL that the recipient of the verification email is sent to if his or her address
            is successfully verified.</p>")
    @as("SuccessRedirectionURL")
    successRedirectionURL: successRedirectionURL,
    @ocaml.doc("<p>The content of the custom verification email. The total size of the email must be less
            than 10 MB. The message body may contain HTML, with some limitations. For more
            information, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-verify-address-custom.html#custom-verification-emails-faq\">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES
                Developer Guide</i>.</p>")
    @as("TemplateContent")
    templateContent: templateContent,
    @ocaml.doc("<p>The subject line of the custom verification email.</p>") @as("TemplateSubject")
    templateSubject: emailTemplateSubject,
    @ocaml.doc("<p>The email address that the custom verification email is sent from.</p>")
    @as("FromEmailAddress")
    fromEmailAddress: emailAddress,
    @ocaml.doc("<p>The name of the custom verification email template that you want to update.</p>")
    @as("TemplateName")
    templateName: emailTemplateName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "UpdateCustomVerificationEmailTemplateCommand"
  let make = (
    ~failureRedirectionURL,
    ~successRedirectionURL,
    ~templateContent,
    ~templateSubject,
    ~fromEmailAddress,
    ~templateName,
    (),
  ) =>
    new({
      failureRedirectionURL: failureRedirectionURL,
      successRedirectionURL: successRedirectionURL,
      templateContent: templateContent,
      templateSubject: templateSubject,
      fromEmailAddress: fromEmailAddress,
      templateName: templateName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module TestRenderEmailTemplate = {
  type t
  @ocaml.doc("<p>>Represents a request to create a preview of the MIME content of an email when
            provided with a template and a set of replacement data.</p>")
  type request = {
    @ocaml.doc("<p>A list of replacement values to apply to the template. This parameter is a JSON
            object, typically consisting of key-value pairs in which the keys correspond to
            replacement tags in the email template.</p>")
    @as("TemplateData")
    templateData: emailTemplateData,
    @ocaml.doc("<p>The name of the template.</p>") @as("TemplateName")
    templateName: emailTemplateName,
  }
  @ocaml.doc("<p>The following element is returned by the service.</p>")
  type response = {
    @ocaml.doc("<p>The complete MIME message rendered by applying the data in the
                <code>TemplateData</code> parameter to the template specified in the TemplateName
            parameter.</p>")
    @as("RenderedTemplate")
    renderedTemplate: renderedEmailTemplate,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "TestRenderEmailTemplateCommand"
  let make = (~templateData, ~templateName, ()) =>
    new({templateData: templateData, templateName: templateName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module SendCustomVerificationEmail = {
  type t
  @ocaml.doc("<p>Represents a request to send a custom verification email to a specified
            recipient.</p>")
  type request = {
    @ocaml.doc("<p>Name of a configuration set to use when sending the verification email.</p>")
    @as("ConfigurationSetName")
    configurationSetName: option<configurationSetName>,
    @ocaml.doc("<p>The name of the custom verification email template to use when sending the
            verification email.</p>")
    @as("TemplateName")
    templateName: emailTemplateName,
    @ocaml.doc("<p>The email address to verify.</p>") @as("EmailAddress")
    emailAddress: emailAddress,
  }
  @ocaml.doc("<p>The following element is returned by the service.</p>")
  type response = {
    @ocaml.doc("<p>The unique message identifier returned from the
                <code>SendCustomVerificationEmail</code> operation.</p>")
    @as("MessageId")
    messageId: option<outboundMessageId>,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "SendCustomVerificationEmailCommand"
  let make = (~templateName, ~emailAddress, ~configurationSetName=?, ()) =>
    new({
      configurationSetName: configurationSetName,
      templateName: templateName,
      emailAddress: emailAddress,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module PutSuppressedDestination = {
  type t
  @ocaml.doc(
    "<p>A request to add an email destination to the suppression list for your account.</p>"
  )
  type request = {
    @ocaml.doc("<p>The factors that should cause the email address to be added to the suppression list
            for your account.</p>")
    @as("Reason")
    reason: suppressionListReason,
    @ocaml.doc("<p>The email address that should be added to the suppression list for your
            account.</p>")
    @as("EmailAddress")
    emailAddress: emailAddress,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "PutSuppressedDestinationCommand"
  let make = (~reason, ~emailAddress, ()) => new({reason: reason, emailAddress: emailAddress})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutEmailIdentityMailFromAttributes = {
  type t
  @ocaml.doc("<p>A request to configure the custom MAIL FROM domain for a verified identity.</p>")
  type request = {
    @ocaml.doc("<p>The action to take if the required MX record isn't found when you send an email. When
            you set this value to <code>UseDefaultValue</code>, the mail is sent using
                <i>amazonses.com</i> as the MAIL FROM domain. When you set this value
            to <code>RejectMessage</code>, the Amazon SES API v2 returns a
                <code>MailFromDomainNotVerified</code> error, and doesn't attempt to deliver the
            email.</p>
        <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the
                <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code>
            states.</p>")
    @as("BehaviorOnMxFailure")
    behaviorOnMxFailure: option<behaviorOnMxFailure>,
    @ocaml.doc("<p> The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM
            domain must meet the following criteria:</p>
        <ul>
            <li>
                <p>It has to be a subdomain of the verified identity.</p>
            </li>
            <li>
                <p>It can't be used to receive email.</p>
            </li>
            <li>
                <p>It can't be used in a \"From\" address if the MAIL FROM domain is a destination
                    for feedback forwarding emails.</p>
            </li>
         </ul>")
    @as("MailFromDomain")
    mailFromDomain: option<mailFromDomainName>,
    @ocaml.doc("<p>The verified email identity.</p>") @as("EmailIdentity") emailIdentity: identity,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutEmailIdentityMailFromAttributesCommand"
  let make = (~emailIdentity, ~behaviorOnMxFailure=?, ~mailFromDomain=?, ()) =>
    new({
      behaviorOnMxFailure: behaviorOnMxFailure,
      mailFromDomain: mailFromDomain,
      emailIdentity: emailIdentity,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutEmailIdentityFeedbackAttributes = {
  type t
  @ocaml.doc("<p>A request to set the attributes that control how bounce and complaint events are
            processed.</p>")
  type request = {
    @ocaml.doc("<p>Sets the feedback forwarding configuration for the identity.</p>
        <p>If the value is <code>true</code>, you receive email notifications when bounce or
            complaint events occur. These notifications are sent to the address that you specified
            in the <code>Return-Path</code> header of the original email.</p>
        <p>You're required to have a method of tracking bounces and complaints. If you haven't
            set up another mechanism for receiving bounce or complaint notifications (for example,
            by setting up an event destination), you receive an email notification when these events
            occur (even if this setting is disabled).</p>")
    @as("EmailForwardingEnabled")
    emailForwardingEnabled: option<enabled>,
    @ocaml.doc("<p>The email identity.</p>") @as("EmailIdentity") emailIdentity: identity,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutEmailIdentityFeedbackAttributesCommand"
  let make = (~emailIdentity, ~emailForwardingEnabled=?, ()) =>
    new({emailForwardingEnabled: emailForwardingEnabled, emailIdentity: emailIdentity})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutEmailIdentityDkimAttributes = {
  type t
  @ocaml.doc("<p>A request to enable or disable DKIM signing of email that you send from an email
            identity.</p>")
  type request = {
    @ocaml.doc("<p>Sets the DKIM signing configuration for the identity.</p>
        <p>When you set this value <code>true</code>, then the messages that are sent from the
            identity are signed using DKIM. If you set this value to <code>false</code>, your
            messages are sent without DKIM signing.</p>")
    @as("SigningEnabled")
    signingEnabled: option<enabled>,
    @ocaml.doc("<p>The email identity.</p>") @as("EmailIdentity") emailIdentity: identity,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutEmailIdentityDkimAttributesCommand"
  let make = (~emailIdentity, ~signingEnabled=?, ()) =>
    new({signingEnabled: signingEnabled, emailIdentity: emailIdentity})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutEmailIdentityConfigurationSetAttributes = {
  type t
  @ocaml.doc("<p>A request to associate a configuration set with an email identity.</p>")
  type request = {
    @ocaml.doc("<p>The configuration set to associate with an email identity.</p>")
    @as("ConfigurationSetName")
    configurationSetName: option<configurationSetName>,
    @ocaml.doc("<p>The email address or domain to associate with a configuration set.</p>")
    @as("EmailIdentity")
    emailIdentity: identity,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutEmailIdentityConfigurationSetAttributesCommand"
  let make = (~emailIdentity, ~configurationSetName=?, ()) =>
    new({configurationSetName: configurationSetName, emailIdentity: emailIdentity})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutDedicatedIpWarmupAttributes = {
  type t
  @ocaml.doc("<p>A request to change the warm-up attributes for a dedicated IP address. This operation
            is useful when you want to resume the warm-up process for an existing IP address.</p>")
  type request = {
    @ocaml.doc("<p>The warm-up percentage that you want to associate with the dedicated IP
            address.</p>")
    @as("WarmupPercentage")
    warmupPercentage: percentage100Wrapper,
    @ocaml.doc(
      "<p>The dedicated IP address that you want to update the warm-up attributes for.</p>"
    )
    @as("Ip")
    ip: ip,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutDedicatedIpWarmupAttributesCommand"
  let make = (~warmupPercentage, ~ip, ()) => new({warmupPercentage: warmupPercentage, ip: ip})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutDedicatedIpInPool = {
  type t
  @ocaml.doc("<p>A request to move a dedicated IP address to a dedicated IP pool.</p>")
  type request = {
    @ocaml.doc("<p>The name of the IP pool that you want to add the dedicated IP address to. You have to
            specify an IP pool that already exists.</p>")
    @as("DestinationPoolName")
    destinationPoolName: poolName,
    @ocaml.doc("<p>The IP address that you want to move to the dedicated IP pool. The value you specify
            has to be a dedicated IP address that's associated with your Amazon Web Services account.</p>")
    @as("Ip")
    ip: ip,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "PutDedicatedIpInPoolCommand"
  let make = (~destinationPoolName, ~ip, ()) =>
    new({destinationPoolName: destinationPoolName, ip: ip})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutConfigurationSetTrackingOptions = {
  type t
  @ocaml.doc("<p>A request to add a custom domain for tracking open and click events to a configuration
            set.</p>")
  type request = {
    @ocaml.doc("<p>The domain to use to track open and click events.</p>")
    @as("CustomRedirectDomain")
    customRedirectDomain: option<customRedirectDomain>,
    @ocaml.doc("<p>The name of the configuration set.</p>") @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutConfigurationSetTrackingOptionsCommand"
  let make = (~configurationSetName, ~customRedirectDomain=?, ()) =>
    new({customRedirectDomain: customRedirectDomain, configurationSetName: configurationSetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutConfigurationSetSendingOptions = {
  type t
  @ocaml.doc("<p>A request to enable or disable the ability of Amazon SES to send emails that use a specific
            configuration set.</p>")
  type request = {
    @ocaml.doc("<p>If <code>true</code>, email sending is enabled for the configuration set. If
                <code>false</code>, email sending is disabled for the configuration set.</p>")
    @as("SendingEnabled")
    sendingEnabled: option<enabled>,
    @ocaml.doc("<p>The name of the configuration set to enable or disable email sending for.</p>")
    @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutConfigurationSetSendingOptionsCommand"
  let make = (~configurationSetName, ~sendingEnabled=?, ()) =>
    new({sendingEnabled: sendingEnabled, configurationSetName: configurationSetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutConfigurationSetReputationOptions = {
  type t
  @ocaml.doc("<p>A request to enable or disable tracking of reputation metrics for a configuration
            set.</p>")
  type request = {
    @ocaml.doc("<p>If <code>true</code>, tracking of reputation metrics is enabled for the configuration
            set. If <code>false</code>, tracking of reputation metrics is disabled for the
            configuration set.</p>")
    @as("ReputationMetricsEnabled")
    reputationMetricsEnabled: option<enabled>,
    @ocaml.doc("<p>The name of the configuration set.</p>") @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutConfigurationSetReputationOptionsCommand"
  let make = (~configurationSetName, ~reputationMetricsEnabled=?, ()) =>
    new({
      reputationMetricsEnabled: reputationMetricsEnabled,
      configurationSetName: configurationSetName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutConfigurationSetDeliveryOptions = {
  type t
  @ocaml.doc("<p>A request to associate a configuration set with a dedicated IP pool.</p>")
  type request = {
    @ocaml.doc("<p>The name of the dedicated IP pool to associate with the configuration set.</p>")
    @as("SendingPoolName")
    sendingPoolName: option<sendingPoolName>,
    @ocaml.doc("<p>Specifies whether messages that use the configuration set are required to use
            Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only
            delivered if a TLS connection can be established. If the value is <code>Optional</code>,
            messages can be delivered in plain text if a TLS connection can't be established.</p>")
    @as("TlsPolicy")
    tlsPolicy: option<tlsPolicy>,
    @ocaml.doc("<p>The name of the configuration set to associate with a dedicated IP pool.</p>")
    @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutConfigurationSetDeliveryOptionsCommand"
  let make = (~configurationSetName, ~sendingPoolName=?, ~tlsPolicy=?, ()) =>
    new({
      sendingPoolName: sendingPoolName,
      tlsPolicy: tlsPolicy,
      configurationSetName: configurationSetName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutAccountSendingAttributes = {
  type t
  @ocaml.doc("<p>A request to change the ability of your account to send email.</p>")
  type request = {
    @ocaml.doc("<p>Enables or disables your account's ability to send email. Set to <code>true</code> to
            enable email sending, or set to <code>false</code> to disable email sending.</p>
        <note>
            <p>If Amazon Web Services paused your account's ability to send email, you can't use this operation
                to resume your account's ability to send email.</p>
        </note>")
    @as("SendingEnabled")
    sendingEnabled: option<enabled>,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutAccountSendingAttributesCommand"
  let make = (~sendingEnabled=?, ()) => new({sendingEnabled: sendingEnabled})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutAccountDedicatedIpWarmupAttributes = {
  type t
  @ocaml.doc("<p>A request to enable or disable the automatic IP address warm-up feature.</p>")
  type request = {
    @ocaml.doc("<p>Enables or disables the automatic warm-up feature for dedicated IP addresses that are
            associated with your Amazon SES account in the current Amazon Web Services Region. Set to <code>true</code>
            to enable the automatic warm-up feature, or set to <code>false</code> to disable
            it.</p>")
    @as("AutoWarmupEnabled")
    autoWarmupEnabled: option<enabled>,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutAccountDedicatedIpWarmupAttributesCommand"
  let make = (~autoWarmupEnabled=?, ()) => new({autoWarmupEnabled: autoWarmupEnabled})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module GetCustomVerificationEmailTemplate = {
  type t
  @ocaml.doc("<p>Represents a request to retrieve an existing custom verification email
            template.</p>")
  type request = {
    @ocaml.doc(
      "<p>The name of the custom verification email template that you want to retrieve.</p>"
    )
    @as("TemplateName")
    templateName: emailTemplateName,
  }
  @ocaml.doc("<p>The following elements are returned by the service.</p>")
  type response = {
    @ocaml.doc("<p>The URL that the recipient of the verification email is sent to if his or her address
            is not successfully verified.</p>")
    @as("FailureRedirectionURL")
    failureRedirectionURL: option<failureRedirectionURL>,
    @ocaml.doc("<p>The URL that the recipient of the verification email is sent to if his or her address
            is successfully verified.</p>")
    @as("SuccessRedirectionURL")
    successRedirectionURL: option<successRedirectionURL>,
    @ocaml.doc("<p>The content of the custom verification email.</p>") @as("TemplateContent")
    templateContent: option<templateContent>,
    @ocaml.doc("<p>The subject line of the custom verification email.</p>") @as("TemplateSubject")
    templateSubject: option<emailTemplateSubject>,
    @ocaml.doc("<p>The email address that the custom verification email is sent from.</p>")
    @as("FromEmailAddress")
    fromEmailAddress: option<emailAddress>,
    @ocaml.doc("<p>The name of the custom verification email template.</p>") @as("TemplateName")
    templateName: option<emailTemplateName>,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "GetCustomVerificationEmailTemplateCommand"
  let make = (~templateName, ()) => new({templateName: templateName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteSuppressedDestination = {
  type t
  @ocaml.doc("<p>A request to remove an email address from the suppression list for your
            account.</p>")
  type request = {
    @ocaml.doc(
      "<p>The suppressed email destination to remove from the account suppression list.</p>"
    )
    @as("EmailAddress")
    emailAddress: emailAddress,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "DeleteSuppressedDestinationCommand"
  let make = (~emailAddress, ()) => new({emailAddress: emailAddress})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteEmailTemplate = {
  type t
  @ocaml.doc("<p>Represents a request to delete an email template. For more information, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html\">Amazon SES Developer
                Guide</a>.</p>")
  type request = {
    @ocaml.doc("<p>The name of the template to be deleted.</p>") @as("TemplateName")
    templateName: emailTemplateName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "DeleteEmailTemplateCommand"
  let make = (~templateName, ()) => new({templateName: templateName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteEmailIdentityPolicy = {
  type t
  @ocaml.doc("<p>Represents a request to delete a sending authorization policy for an identity. Sending
            authorization is an Amazon SES feature that enables you to authorize other senders to
            use your identities. For information, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-identity-owner-tasks-management.html\">Amazon SES Developer Guide</a>.</p>")
  type request = {
    @ocaml.doc("<p>The name of the policy.</p>

        <p>The policy name cannot exceed 64 characters and can only include alphanumeric
            characters, dashes, and underscores.</p>")
    @as("PolicyName")
    policyName: policyName,
    @ocaml.doc("<p>The email identity.</p>") @as("EmailIdentity") emailIdentity: identity,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "DeleteEmailIdentityPolicyCommand"
  let make = (~policyName, ~emailIdentity, ()) =>
    new({policyName: policyName, emailIdentity: emailIdentity})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteEmailIdentity = {
  type t
  @ocaml.doc("<p>A request to delete an existing email identity. When you delete an identity, you lose
            the ability to send email from that identity. You can restore your ability to send email
            by completing the verification process for the identity again.</p>")
  type request = {
    @ocaml.doc("<p>The identity (that is, the email address or domain) to delete.</p>")
    @as("EmailIdentity")
    emailIdentity: identity,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "DeleteEmailIdentityCommand"
  let make = (~emailIdentity, ()) => new({emailIdentity: emailIdentity})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteDedicatedIpPool = {
  type t
  @ocaml.doc("<p>A request to delete a dedicated IP pool.</p>")
  type request = {
    @ocaml.doc("<p>The name of the dedicated IP pool that you want to delete.</p>") @as("PoolName")
    poolName: poolName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "DeleteDedicatedIpPoolCommand"
  let make = (~poolName, ()) => new({poolName: poolName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteCustomVerificationEmailTemplate = {
  type t
  @ocaml.doc(
    "<p>Represents a request to delete an existing custom verification email template.</p>"
  )
  type request = {
    @ocaml.doc("<p>The name of the custom verification email template that you want to delete.</p>")
    @as("TemplateName")
    templateName: emailTemplateName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "DeleteCustomVerificationEmailTemplateCommand"
  let make = (~templateName, ()) => new({templateName: templateName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteContactList = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the contact list.</p>") @as("ContactListName")
    contactListName: contactListName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "DeleteContactListCommand"
  let make = (~contactListName, ()) => new({contactListName: contactListName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteContact = {
  type t
  type request = {
    @ocaml.doc("<p>The contact's email address.</p>") @as("EmailAddress")
    emailAddress: emailAddress,
    @ocaml.doc("<p>The name of the contact list from which the contact should be removed.</p>")
    @as("ContactListName")
    contactListName: contactListName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "DeleteContactCommand"
  let make = (~emailAddress, ~contactListName, ()) =>
    new({emailAddress: emailAddress, contactListName: contactListName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteConfigurationSetEventDestination = {
  type t
  @ocaml.doc("<p>A request to delete an event destination from a configuration set.</p>")
  type request = {
    @ocaml.doc("<p>The name of the event destination to delete.</p>") @as("EventDestinationName")
    eventDestinationName: eventDestinationName,
    @ocaml.doc("<p>The name of the configuration set that contains the event destination to
            delete.</p>")
    @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "DeleteConfigurationSetEventDestinationCommand"
  let make = (~eventDestinationName, ~configurationSetName, ()) =>
    new({eventDestinationName: eventDestinationName, configurationSetName: configurationSetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteConfigurationSet = {
  type t
  @ocaml.doc("<p>A request to delete a configuration set.</p>")
  type request = {
    @ocaml.doc("<p>The name of the configuration set.</p>") @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "DeleteConfigurationSetCommand"
  let make = (~configurationSetName, ()) => new({configurationSetName: configurationSetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module CreateEmailIdentityPolicy = {
  type t
  @ocaml.doc("<p>Represents a request to create a sending authorization policy for an identity. Sending
            authorization is an Amazon SES feature that enables you to authorize other senders to use
            your identities. For information, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-identity-owner-tasks-management.html\">Amazon SES Developer Guide</a>.</p>")
  type request = {
    @ocaml.doc("<p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p>
        <p>For information about the syntax of sending authorization policies, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html\">Amazon SES Developer
                Guide</a>.</p>")
    @as("Policy")
    policy: policy,
    @ocaml.doc("<p>The name of the policy.</p>

        <p>The policy name cannot exceed 64 characters and can only include alphanumeric
            characters, dashes, and underscores.</p>")
    @as("PolicyName")
    policyName: policyName,
    @ocaml.doc("<p>The email identity.</p>") @as("EmailIdentity") emailIdentity: identity,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "CreateEmailIdentityPolicyCommand"
  let make = (~policy, ~policyName, ~emailIdentity, ()) =>
    new({policy: policy, policyName: policyName, emailIdentity: emailIdentity})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module CreateCustomVerificationEmailTemplate = {
  type t
  @ocaml.doc("<p>Represents a request to create a custom verification email template.</p>")
  type request = {
    @ocaml.doc("<p>The URL that the recipient of the verification email is sent to if his or her address
            is not successfully verified.</p>")
    @as("FailureRedirectionURL")
    failureRedirectionURL: failureRedirectionURL,
    @ocaml.doc("<p>The URL that the recipient of the verification email is sent to if his or her address
            is successfully verified.</p>")
    @as("SuccessRedirectionURL")
    successRedirectionURL: successRedirectionURL,
    @ocaml.doc("<p>The content of the custom verification email. The total size of the email must be less
            than 10 MB. The message body may contain HTML, with some limitations. For more
            information, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-verify-address-custom.html#custom-verification-emails-faq\">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES
                Developer Guide</i>.</p>")
    @as("TemplateContent")
    templateContent: templateContent,
    @ocaml.doc("<p>The subject line of the custom verification email.</p>") @as("TemplateSubject")
    templateSubject: emailTemplateSubject,
    @ocaml.doc("<p>The email address that the custom verification email is sent from.</p>")
    @as("FromEmailAddress")
    fromEmailAddress: emailAddress,
    @ocaml.doc("<p>The name of the custom verification email template.</p>") @as("TemplateName")
    templateName: emailTemplateName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "CreateCustomVerificationEmailTemplateCommand"
  let make = (
    ~failureRedirectionURL,
    ~successRedirectionURL,
    ~templateContent,
    ~templateSubject,
    ~fromEmailAddress,
    ~templateName,
    (),
  ) =>
    new({
      failureRedirectionURL: failureRedirectionURL,
      successRedirectionURL: successRedirectionURL,
      templateContent: templateContent,
      templateSubject: templateSubject,
      fromEmailAddress: fromEmailAddress,
      templateName: templateName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module UpdateEmailTemplate = {
  type t
  @ocaml.doc("<p>Represents a request to update an email template. For more information, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html\">Amazon SES
                Developer Guide</a>.</p>")
  type request = {
    @ocaml.doc("<p>The content of the email template, composed of a subject line, an HTML part, and a
            text-only part.</p>")
    @as("TemplateContent")
    templateContent: emailTemplateContent,
    @ocaml.doc("<p>The name of the template.</p>") @as("TemplateName")
    templateName: emailTemplateName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "UpdateEmailTemplateCommand"
  let make = (~templateContent, ~templateName, ()) =>
    new({templateContent: templateContent, templateName: templateName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module UntagResource = {
  type t
  type request = {
    @ocaml.doc("<p>The tags (tag keys) that you want to remove from the resource. When you specify a tag
            key, the action removes both that key and its associated tag value.</p>
        <p>To remove more than one tag from the resource, append the <code>TagKeys</code>
            parameter and argument for each additional tag to remove, separated by an ampersand. For
            example:
                <code>/v2/email/tags?ResourceArn=ResourceArn&TagKeys=Key1&TagKeys=Key2</code>
        </p>")
    @as("TagKeys")
    tagKeys: tagKeyList,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the resource that you want to remove one or more
            tags from.</p>")
    @as("ResourceArn")
    resourceArn: amazonResourceName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "UntagResourceCommand"
  let make = (~tagKeys, ~resourceArn, ()) => new({tagKeys: tagKeys, resourceArn: resourceArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutEmailIdentityDkimSigningAttributes = {
  type t
  @ocaml.doc("<p>A request to change the DKIM attributes for an email identity.</p>")
  type request = {
    @ocaml.doc("<p>An object that contains information about the private key and selector that you want
            to use to configure DKIM for the identity for Bring Your Own DKIM (BYODKIM) for the identity, or,
            configures the key length to be used for
            <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html\">Easy DKIM</a>.</p>")
    @as("SigningAttributes")
    signingAttributes: option<dkimSigningAttributes>,
    @ocaml.doc("<p>The method to use to configure DKIM for the identity. There are the following possible
            values:</p>
        <ul>
            <li>
                <p>
                  <code>AWS_SES</code> – Configure DKIM for the identity by using <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html\">Easy
                        DKIM</a>.</p>
            </li>
            <li>
                <p>
                  <code>EXTERNAL</code> – Configure DKIM for the identity by using Bring
                    Your Own DKIM (BYODKIM).</p>
            </li>
         </ul>")
    @as("SigningAttributesOrigin")
    signingAttributesOrigin: dkimSigningAttributesOrigin,
    @ocaml.doc("<p>The email identity.</p>") @as("EmailIdentity") emailIdentity: identity,
  }
  @ocaml.doc("<p>If the action is successful, the service sends back an HTTP 200 response.</p>
        <p>The following data is returned in JSON format by the service.</p>")
  type response = {
    @ocaml.doc("<p>If you used <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html\">Easy DKIM</a> to configure DKIM authentication for the domain, then this object
            contains a set of unique strings that you use to create a set of CNAME records that you
            add to the DNS configuration for your domain. When Amazon SES detects these records in the
            DNS configuration for your domain, the DKIM authentication process is complete.</p>
        <p>If you configured DKIM authentication for the domain by providing your own
            public-private key pair, then this object contains the selector that's associated with
            your public key.</p>
        <p>Regardless of the DKIM authentication method you use, Amazon SES searches for the
            appropriate records in the DNS configuration of the domain for up to 72 hours.</p>")
    @as("DkimTokens")
    dkimTokens: option<dnsTokenList>,
    @ocaml.doc("<p>The DKIM authentication status of the identity. Amazon SES determines the authentication
            status by searching for specific records in the DNS configuration for your domain. If
            you used <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html\">Easy
                DKIM</a> to set up DKIM authentication, Amazon SES tries to find three unique CNAME
            records in the DNS configuration for your domain.</p>
        <p>If you provided a public key to perform DKIM authentication, Amazon SES tries to find a TXT
            record that uses the selector that you specified. The value of the TXT record must be a
            public key that's paired with the private key that you specified in the process of
            creating the identity.</p>
        <p>The status can be one of the following:</p>
        <ul>
            <li>
                <p>
                  <code>PENDING</code> – The verification process was initiated, but Amazon SES
                    hasn't yet detected the DKIM records in the DNS configuration for the
                    domain.</p>
            </li>
            <li>
                <p>
                  <code>SUCCESS</code> – The verification process completed
                    successfully.</p>
            </li>
            <li>
                <p>
                  <code>FAILED</code> – The verification process failed. This typically
                    occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the
                    domain.</p>
            </li>
            <li>
                <p>
                  <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon SES
                    from determining the DKIM authentication status of the domain.</p>
            </li>
            <li>
                <p>
                  <code>NOT_STARTED</code> – The DKIM verification process hasn't been
                    initiated for the domain.</p>
            </li>
         </ul>")
    @as("DkimStatus")
    dkimStatus: option<dkimStatus>,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutEmailIdentityDkimSigningAttributesCommand"
  let make = (~signingAttributesOrigin, ~emailIdentity, ~signingAttributes=?, ()) =>
    new({
      signingAttributes: signingAttributes,
      signingAttributesOrigin: signingAttributesOrigin,
      emailIdentity: emailIdentity,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module PutConfigurationSetSuppressionOptions = {
  type t
  @ocaml.doc("<p>A request to change the account suppression list preferences for a specific
            configuration set.</p>")
  type request = {
    @ocaml.doc("<p>A list that contains the reasons that email addresses are automatically added to the
            suppression list for your account. This list can contain any or all of the
            following:</p>
        <ul>
            <li>
                <p>
                  <code>COMPLAINT</code> – Amazon SES adds an email address to the suppression
                    list for your account when a message sent to that address results in a
                    complaint.</p>
            </li>
            <li>
                <p>
                  <code>BOUNCE</code> – Amazon SES adds an email address to the suppression
                    list for your account when a message sent to that address results in a hard
                    bounce.</p>
            </li>
         </ul>")
    @as("SuppressedReasons")
    suppressedReasons: option<suppressionListReasons>,
    @ocaml.doc("<p>The name of the configuration set to change the suppression list preferences
            for.</p>")
    @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutConfigurationSetSuppressionOptionsCommand"
  let make = (~configurationSetName, ~suppressedReasons=?, ()) =>
    new({suppressedReasons: suppressedReasons, configurationSetName: configurationSetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutAccountSuppressionAttributes = {
  type t
  @ocaml.doc("<p>A request to change your account's suppression preferences.</p>")
  type request = {
    @ocaml.doc("<p>A list that contains the reasons that email addresses will be automatically added to
            the suppression list for your account. This list can contain any or all of the
            following:</p>
        <ul>
            <li>
                <p>
                  <code>COMPLAINT</code> – Amazon SES adds an email address to the suppression
                    list for your account when a message sent to that address results in a
                    complaint.</p>
            </li>
            <li>
                <p>
                  <code>BOUNCE</code> – Amazon SES adds an email address to the suppression
                    list for your account when a message sent to that address results in a hard
                    bounce.</p>
            </li>
         </ul>")
    @as("SuppressedReasons")
    suppressedReasons: option<suppressionListReasons>,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutAccountSuppressionAttributesCommand"
  let make = (~suppressedReasons=?, ()) => new({suppressedReasons: suppressedReasons})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutAccountDetails = {
  type t
  @ocaml.doc("<p>A request to submit new account details.</p>")
  type request = {
    @ocaml.doc("<p>Indicates whether or not your account should have production access in the current
            Amazon Web Services Region.</p>
        <p>If the value is <code>false</code>, then your account is in the
                <i>sandbox</i>. When your account is in the sandbox, you can only send
            email to verified identities. Additionally, the maximum number of emails you can send in
            a 24-hour period (your sending quota) is 200, and the maximum number of emails you can
            send per second (your maximum sending rate) is 1.</p>
        <p>If the value is <code>true</code>, then your account has production access. When your
            account has production access, you can send email to any address. The sending quota and
            maximum sending rate for your account vary based on your specific use case.</p>")
    @as("ProductionAccessEnabled")
    productionAccessEnabled: option<enabledWrapper>,
    @ocaml.doc("<p>Additional email addresses that you would like to be notified regarding Amazon SES
            matters.</p>")
    @as("AdditionalContactEmailAddresses")
    additionalContactEmailAddresses: option<additionalContactEmailAddresses>,
    @ocaml.doc("<p>A description of the types of email that you plan to send.</p>")
    @as("UseCaseDescription")
    useCaseDescription: useCaseDescription,
    @ocaml.doc("<p>The language you would prefer to be contacted with.</p>") @as("ContactLanguage")
    contactLanguage: option<contactLanguage>,
    @ocaml.doc("<p>The URL of your website. This information helps us better understand the type of
            content that you plan to send.</p>")
    @as("WebsiteURL")
    websiteURL: websiteURL,
    @ocaml.doc("<p>The type of email your account will send.</p>") @as("MailType")
    mailType: mailType,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "PutAccountDetailsCommand"
  let make = (
    ~useCaseDescription,
    ~websiteURL,
    ~mailType,
    ~productionAccessEnabled=?,
    ~additionalContactEmailAddresses=?,
    ~contactLanguage=?,
    (),
  ) =>
    new({
      productionAccessEnabled: productionAccessEnabled,
      additionalContactEmailAddresses: additionalContactEmailAddresses,
      useCaseDescription: useCaseDescription,
      contactLanguage: contactLanguage,
      websiteURL: websiteURL,
      mailType: mailType,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ListDedicatedIpPools = {
  type t
  @ocaml.doc("<p>A request to obtain a list of dedicated IP pools.</p>")
  type request = {
    @ocaml.doc("<p>The number of results to show in a single call to <code>ListDedicatedIpPools</code>.
            If the number of results is larger than the number you specified in this parameter, then
            the response includes a <code>NextToken</code> element, which you can use to obtain
            additional results.</p>")
    @as("PageSize")
    pageSize: option<maxItems>,
    @ocaml.doc("<p>A token returned from a previous call to <code>ListDedicatedIpPools</code> to indicate
            the position in the list of dedicated IP pools.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @ocaml.doc("<p>A list of dedicated IP pools.</p>")
  type response = {
    @ocaml.doc("<p>A token that indicates that there are additional IP pools to list. To view additional
            IP pools, issue another request to <code>ListDedicatedIpPools</code>, passing this token
            in the <code>NextToken</code> parameter.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of all of the dedicated IP pools that are associated with your Amazon Web Services account in
            the current Region.</p>")
    @as("DedicatedIpPools")
    dedicatedIpPools: option<listOfDedicatedIpPools>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "ListDedicatedIpPoolsCommand"
  let make = (~pageSize=?, ~nextToken=?, ()) => new({pageSize: pageSize, nextToken: nextToken})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ListConfigurationSets = {
  type t
  @ocaml.doc("<p>A request to obtain a list of configuration sets for your Amazon SES account in the current
            Amazon Web Services Region.</p>")
  type request = {
    @ocaml.doc("<p>The number of results to show in a single call to <code>ListConfigurationSets</code>.
            If the number of results is larger than the number you specified in this parameter, then
            the response includes a <code>NextToken</code> element, which you can use to obtain
            additional results.</p>")
    @as("PageSize")
    pageSize: option<maxItems>,
    @ocaml.doc("<p>A token returned from a previous call to <code>ListConfigurationSets</code> to
            indicate the position in the list of configuration sets.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @ocaml.doc(
    "<p>A list of configuration sets in your Amazon SES account in the current Amazon Web Services Region.</p>"
  )
  type response = {
    @ocaml.doc("<p>A token that indicates that there are additional configuration sets to list. To view
            additional configuration sets, issue another request to
                <code>ListConfigurationSets</code>, and pass this token in the
                <code>NextToken</code> parameter.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array that contains all of the configuration sets in your Amazon SES account in the
            current Amazon Web Services Region.</p>")
    @as("ConfigurationSets")
    configurationSets: option<configurationSetNameList>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "ListConfigurationSetsCommand"
  let make = (~pageSize=?, ~nextToken=?, ()) => new({pageSize: pageSize, nextToken: nextToken})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetEmailTemplate = {
  type t
  @ocaml.doc("<p>Represents a request to display the template object (which includes the subject line,
            HTML part and text part) for the template you specify.</p>")
  type request = {
    @ocaml.doc("<p>The name of the template.</p>") @as("TemplateName")
    templateName: emailTemplateName,
  }
  @ocaml.doc("<p>The following element is returned by the service.</p>")
  type response = {
    @ocaml.doc("<p>The content of the email template, composed of a subject line, an HTML part, and a
            text-only part.</p>")
    @as("TemplateContent")
    templateContent: emailTemplateContent,
    @ocaml.doc("<p>The name of the template.</p>") @as("TemplateName")
    templateName: emailTemplateName,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "GetEmailTemplateCommand"
  let make = (~templateName, ()) => new({templateName: templateName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetEmailIdentityPolicies = {
  type t
  @ocaml.doc("<p>A request to return the policies of an email identity.</p>")
  type request = {
    @ocaml.doc("<p>The email identity.</p>") @as("EmailIdentity") emailIdentity: identity,
  }
  @ocaml.doc("<p>Identity policies associated with email identity.</p>")
  type response = {
    @ocaml.doc("<p>A map of policy names to policies.</p>") @as("Policies")
    policies: option<policyMap>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "GetEmailIdentityPoliciesCommand"
  let make = (~emailIdentity, ()) => new({emailIdentity: emailIdentity})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetDedicatedIp = {
  type t
  @ocaml.doc("<p>A request to obtain more information about a dedicated IP address.</p>")
  type request = {
    @ocaml.doc("<p>The IP address that you want to obtain more information about. The value you specify
            has to be a dedicated IP address that's assocaited with your Amazon Web Services account.</p>")
    @as("Ip")
    ip: ip,
  }
  @ocaml.doc("<p>Information about a dedicated IP address.</p>")
  type response = {
    @ocaml.doc("<p>An object that contains information about a dedicated IP address.</p>")
    @as("DedicatedIp")
    dedicatedIp: option<dedicatedIp>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "GetDedicatedIpCommand"
  let make = (~ip, ()) => new({ip: ip})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateEmailTemplate = {
  type t
  @ocaml.doc("<p>Represents a request to create an email template. For more information, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html\">Amazon SES
                Developer Guide</a>.</p>")
  type request = {
    @ocaml.doc("<p>The content of the email template, composed of a subject line, an HTML part, and a
            text-only part.</p>")
    @as("TemplateContent")
    templateContent: emailTemplateContent,
    @ocaml.doc("<p>The name of the template.</p>") @as("TemplateName")
    templateName: emailTemplateName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "CreateEmailTemplateCommand"
  let make = (~templateContent, ~templateName, ()) =>
    new({templateContent: templateContent, templateName: templateName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module UpdateContactList = {
  type t
  type request = {
    @ocaml.doc("<p>A description of what the contact list is about.</p>") @as("Description")
    description: option<description>,
    @ocaml.doc("<p>An interest group, theme, or label within a list. A contact list can have multiple
            topics.</p>")
    @as("Topics")
    topics: option<topics>,
    @ocaml.doc("<p>The name of the contact list.</p>") @as("ContactListName")
    contactListName: contactListName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "UpdateContactListCommand"
  let make = (~contactListName, ~description=?, ~topics=?, ()) =>
    new({description: description, topics: topics, contactListName: contactListName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module UpdateContact = {
  type t
  type request = {
    @ocaml.doc("<p>The attribute data attached to a contact.</p>") @as("AttributesData")
    attributesData: option<attributesData>,
    @ocaml.doc("<p>A boolean value status noting if the contact is unsubscribed from all contact list
            topics.</p>")
    @as("UnsubscribeAll")
    unsubscribeAll: option<unsubscribeAll>,
    @ocaml.doc("<p>The contact's preference for being opted-in to or opted-out of a topic.</p>")
    @as("TopicPreferences")
    topicPreferences: option<topicPreferenceList>,
    @ocaml.doc("<p>The contact's email addres.</p>") @as("EmailAddress") emailAddress: emailAddress,
    @ocaml.doc("<p>The name of the contact list.</p>") @as("ContactListName")
    contactListName: contactListName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "UpdateContactCommand"
  let make = (
    ~emailAddress,
    ~contactListName,
    ~attributesData=?,
    ~unsubscribeAll=?,
    ~topicPreferences=?,
    (),
  ) =>
    new({
      attributesData: attributesData,
      unsubscribeAll: unsubscribeAll,
      topicPreferences: topicPreferences,
      emailAddress: emailAddress,
      contactListName: contactListName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module TagResource = {
  type t
  type request = {
    @ocaml.doc("<p>A list of the tags that you want to add to the resource. A tag consists of a required
            tag key (<code>Key</code>) and an associated tag value (<code>Value</code>). The maximum
            length of a tag key is 128 characters. The maximum length of a tag value is 256
            characters.</p>")
    @as("Tags")
    tags: tagList_,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the resource that you want to add one or more tags
            to.</p>")
    @as("ResourceArn")
    resourceArn: amazonResourceName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "TagResourceCommand"
  let make = (~tags, ~resourceArn, ()) => new({tags: tags, resourceArn: resourceArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ListTagsForResource = {
  type t
  type request = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the resource that you want to retrieve tag
            information for.</p>")
    @as("ResourceArn")
    resourceArn: amazonResourceName,
  }
  type response = {
    @ocaml.doc("<p>An array that lists all the tags that are associated with the resource. Each tag
            consists of a required tag key (<code>Key</code>) and an associated tag value
                (<code>Value</code>)</p>")
    @as("Tags")
    tags: tagList_,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "ListTagsForResourceCommand"
  let make = (~resourceArn, ()) => new({resourceArn: resourceArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ListSuppressedDestinations = {
  type t
  @ocaml.doc("<p>A request to obtain a list of email destinations that are on the suppression list for
            your account.</p>")
  type request = {
    @ocaml.doc("<p>The number of results to show in a single call to
                <code>ListSuppressedDestinations</code>. If the number of results is larger than the
            number you specified in this parameter, then the response includes a
                <code>NextToken</code> element, which you can use to obtain additional
            results.</p>")
    @as("PageSize")
    pageSize: option<maxItems>,
    @ocaml.doc("<p>A token returned from a previous call to <code>ListSuppressedDestinations</code> to
            indicate the position in the list of suppressed email addresses.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Used to filter the list of suppressed email destinations so that it only includes
            addresses that were added to the list before a specific date. The date that you specify
            should be in Unix time format.</p>")
    @as("EndDate")
    endDate: option<timestamp_>,
    @ocaml.doc("<p>Used to filter the list of suppressed email destinations so that it only includes
            addresses that were added to the list after a specific date. The date that you specify
            should be in Unix time format.</p>")
    @as("StartDate")
    startDate: option<timestamp_>,
    @ocaml.doc("<p>The factors that caused the email address to be added to .</p>") @as("Reasons")
    reasons: option<suppressionListReasons>,
  }
  @ocaml.doc("<p>A list of suppressed email addresses.</p>")
  type response = {
    @ocaml.doc("<p>A token that indicates that there are additional email addresses on the suppression
            list for your account. To view additional suppressed addresses, issue another request to
                <code>ListSuppressedDestinations</code>, and pass this token in the
                <code>NextToken</code> parameter.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of summaries, each containing a summary for a suppressed email
            destination.</p>")
    @as("SuppressedDestinationSummaries")
    suppressedDestinationSummaries: option<suppressedDestinationSummaries>,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "ListSuppressedDestinationsCommand"
  let make = (~pageSize=?, ~nextToken=?, ~endDate=?, ~startDate=?, ~reasons=?, ()) =>
    new({
      pageSize: pageSize,
      nextToken: nextToken,
      endDate: endDate,
      startDate: startDate,
      reasons: reasons,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ListEmailTemplates = {
  type t
  @ocaml.doc("<p>Represents a request to list the email templates present in your Amazon SES account in the
            current Amazon Web Services Region. For more information, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html\">Amazon SES Developer
                Guide</a>.</p>")
  type request = {
    @ocaml.doc("<p>The number of results to show in a single call to <code>ListEmailTemplates</code>. If the number of
            results is larger than the number you specified in this parameter, then the response
            includes a <code>NextToken</code> element, which you can use to obtain additional results.</p>
        <p>The value you specify has to be at least 1, and can be no more than 10.</p>")
    @as("PageSize")
    pageSize: option<maxItems>,
    @ocaml.doc("<p>A token returned from a previous call to <code>ListEmailTemplates</code> to indicate
            the position in the list of email templates.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @ocaml.doc("<p>The following elements are returned by the service.</p>")
  type response = {
    @ocaml.doc("<p>A token indicating that there are additional email templates available to be listed.
            Pass this token to a subsequent <code>ListEmailTemplates</code> call to retrieve the
            next 10 email templates.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array the contains the name and creation time stamp for each template in your Amazon SES
            account.</p>")
    @as("TemplatesMetadata")
    templatesMetadata: option<emailTemplateMetadataList>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "ListEmailTemplatesCommand"
  let make = (~pageSize=?, ~nextToken=?, ()) => new({pageSize: pageSize, nextToken: nextToken})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ListEmailIdentities = {
  type t
  @ocaml.doc("<p>A request to list all of the email identities associated with your Amazon Web Services account. This
            list includes identities that you've already verified, identities that are unverified,
            and identities that were verified in the past, but are no longer verified.</p>")
  type request = {
    @ocaml.doc("<p>The number of results to show in a single call to <code>ListEmailIdentities</code>. If
            the number of results is larger than the number you specified in this parameter, then
            the response includes a <code>NextToken</code> element, which you can use to obtain
            additional results.</p>
        <p>The value you specify has to be at least 0, and can be no more than 1000.</p>")
    @as("PageSize")
    pageSize: option<maxItems>,
    @ocaml.doc("<p>A token returned from a previous call to <code>ListEmailIdentities</code> to indicate
            the position in the list of identities.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @ocaml.doc("<p>A list of all of the identities that you've attempted to verify, regardless of whether
            or not those identities were successfully verified.</p>")
  type response = {
    @ocaml.doc("<p>A token that indicates that there are additional configuration sets to list. To view
            additional configuration sets, issue another request to
            <code>ListEmailIdentities</code>, and pass this token in the <code>NextToken</code>
            parameter.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array that includes all of the email identities associated with your Amazon Web Services
            account.</p>")
    @as("EmailIdentities")
    emailIdentities: option<identityInfoList>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "ListEmailIdentitiesCommand"
  let make = (~pageSize=?, ~nextToken=?, ()) => new({pageSize: pageSize, nextToken: nextToken})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ListDeliverabilityTestReports = {
  type t
  @ocaml.doc(
    "<p>A request to list all of the predictive inbox placement tests that you've performed.</p>"
  )
  type request = {
    @ocaml.doc("<p>The number of results to show in a single call to
                <code>ListDeliverabilityTestReports</code>. If the number of results is larger than
            the number you specified in this parameter, then the response includes a
                <code>NextToken</code> element, which you can use to obtain additional
            results.</p>
        <p>The value you specify has to be at least 0, and can be no more than 1000.</p>")
    @as("PageSize")
    pageSize: option<maxItems>,
    @ocaml.doc("<p>A token returned from a previous call to <code>ListDeliverabilityTestReports</code> to
            indicate the position in the list of predictive inbox placement tests.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @ocaml.doc("<p>A list of the predictive inbox placement test reports that are available for your account, regardless of
            whether or not those tests are complete.</p>")
  type response = {
    @ocaml.doc("<p>A token that indicates that there are additional predictive inbox placement tests to list. To view additional
            predictive inbox placement tests, issue another request to <code>ListDeliverabilityTestReports</code>, and pass
            this token in the <code>NextToken</code> parameter.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>An object that contains a lists of predictive inbox placement tests that you've performed.</p>"
    )
    @as("DeliverabilityTestReports")
    deliverabilityTestReports: deliverabilityTestReports,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "ListDeliverabilityTestReportsCommand"
  let make = (~pageSize=?, ~nextToken=?, ()) => new({pageSize: pageSize, nextToken: nextToken})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ListCustomVerificationEmailTemplates = {
  type t
  @ocaml.doc("<p>Represents a request to list the existing custom verification email templates for your
            account.</p>")
  type request = {
    @ocaml.doc("<p>The number of results to show in a single call to
                <code>ListCustomVerificationEmailTemplates</code>. If the number of results is
            larger than the number you specified in this parameter, then the response includes a
                <code>NextToken</code> element, which you can use to obtain additional
            results.</p>
        <p>The value you specify has to be at least 1, and can be no more than 50.</p>")
    @as("PageSize")
    pageSize: option<maxItems>,
    @ocaml.doc("<p>A token returned from a previous call to
                <code>ListCustomVerificationEmailTemplates</code> to indicate the position in the
            list of custom verification email templates.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @ocaml.doc("<p>The following elements are returned by the service.</p>")
  type response = {
    @ocaml.doc("<p>A token indicating that there are additional custom verification email templates
            available to be listed. Pass this token to a subsequent call to
                <code>ListCustomVerificationEmailTemplates</code> to retrieve the next 50 custom
            verification email templates.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>A list of the custom verification email templates that exist in your account.</p>"
    )
    @as("CustomVerificationEmailTemplates")
    customVerificationEmailTemplates: option<customVerificationEmailTemplatesList>,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "ListCustomVerificationEmailTemplatesCommand"
  let make = (~pageSize=?, ~nextToken=?, ()) => new({pageSize: pageSize, nextToken: nextToken})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ListContactLists = {
  type t
  type request = {
    @ocaml.doc("<p>A string token indicating that there might be additional contact lists available to be
            listed. Use the token provided in the Response to use in the subsequent call to
            ListContactLists with the same parameters to retrieve the next page of contact
            lists.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Maximum number of contact lists to return at once. Use this parameter to paginate
            results. If additional contact lists exist beyond the specified limit, the
                <code>NextToken</code> element is sent in the response. Use the
                <code>NextToken</code> value in subsequent requests to retrieve additional
            lists.</p>")
    @as("PageSize")
    pageSize: option<maxItems>,
  }
  type response = {
    @ocaml.doc("<p>A string token indicating that there might be additional contact lists available to be
            listed. Copy this token to a subsequent call to <code>ListContactLists</code> with the
            same parameters to retrieve the next page of contact lists.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The available contact lists.</p>") @as("ContactLists")
    contactLists: option<listOfContactLists>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "ListContactListsCommand"
  let make = (~nextToken=?, ~pageSize=?, ()) => new({nextToken: nextToken, pageSize: pageSize})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetSuppressedDestination = {
  type t
  @ocaml.doc("<p>A request to retrieve information about an email address that's on the suppression
            list for your account.</p>")
  type request = {
    @ocaml.doc("<p>The email address that's on the account suppression list.</p>")
    @as("EmailAddress")
    emailAddress: emailAddress,
  }
  @ocaml.doc("<p>Information about the suppressed email address.</p>")
  type response = {
    @ocaml.doc("<p>An object containing information about the suppressed email address.</p>")
    @as("SuppressedDestination")
    suppressedDestination: suppressedDestination,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "GetSuppressedDestinationCommand"
  let make = (~emailAddress, ()) => new({emailAddress: emailAddress})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetImportJob = {
  type t
  @ocaml.doc("<p>Represents a request for information about an import job using the import job
            ID.</p>")
  type request = {@ocaml.doc("<p>The ID of the import job.</p>") @as("JobId") jobId: jobId}
  @ocaml.doc("<p>An HTTP 200 response if the request succeeds, or an error message if the request
            fails.</p>")
  type response = {
    @ocaml.doc("<p>The number of records that failed processing because of invalid input or other
            reasons.</p>")
    @as("FailedRecordsCount")
    failedRecordsCount: option<failedRecordsCount>,
    @ocaml.doc("<p>The current number of records processed.</p>") @as("ProcessedRecordsCount")
    processedRecordsCount: option<processedRecordsCount>,
    @ocaml.doc("<p>The time stamp of when the import job was completed.</p>")
    @as("CompletedTimestamp")
    completedTimestamp: option<timestamp_>,
    @ocaml.doc("<p>The time stamp of when the import job was created.</p>") @as("CreatedTimestamp")
    createdTimestamp: option<timestamp_>,
    @ocaml.doc("<p>The status of the import job.</p>") @as("JobStatus")
    jobStatus: option<jobStatus>,
    @ocaml.doc("<p>The failure details about an import job.</p>") @as("FailureInfo")
    failureInfo: option<failureInfo>,
    @ocaml.doc("<p>The data source of the import job.</p>") @as("ImportDataSource")
    importDataSource: option<importDataSource>,
    @ocaml.doc("<p>The destination of the import job.</p>") @as("ImportDestination")
    importDestination: option<importDestination>,
    @ocaml.doc("<p>A string that represents the import job ID.</p>") @as("JobId")
    jobId: option<jobId>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "GetImportJobCommand"
  let make = (~jobId, ()) => new({jobId: jobId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetEmailIdentity = {
  type t
  @ocaml.doc("<p>A request to return details about an email identity.</p>")
  type request = {
    @ocaml.doc("<p>The email identity.</p>") @as("EmailIdentity") emailIdentity: identity,
  }
  @ocaml.doc("<p>Details about an email identity.</p>")
  type response = {
    @ocaml.doc("<p>The configuration set used by default when sending from this identity.</p>")
    @as("ConfigurationSetName")
    configurationSetName: option<configurationSetName>,
    @ocaml.doc("<p>An array of objects that define the tags (keys and values) that are associated with
            the email identity.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>A map of policy names to policies.</p>") @as("Policies")
    policies: option<policyMap>,
    @ocaml.doc("<p>An object that contains information about the Mail-From attributes for the email
            identity.</p>")
    @as("MailFromAttributes")
    mailFromAttributes: option<mailFromAttributes>,
    @ocaml.doc(
      "<p>An object that contains information about the DKIM attributes for the identity.</p>"
    )
    @as("DkimAttributes")
    dkimAttributes: option<dkimAttributes>,
    @ocaml.doc("<p>Specifies whether or not the identity is verified. You can only send email from
            verified email addresses or domains. For more information about verifying identities,
            see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html\">Amazon Pinpoint User Guide</a>.</p>")
    @as("VerifiedForSendingStatus")
    verifiedForSendingStatus: option<enabled>,
    @ocaml.doc("<p>The feedback forwarding configuration for the identity.</p>
        <p>If the value is <code>true</code>, you receive email notifications when bounce or
            complaint events occur. These notifications are sent to the address that you specified
            in the <code>Return-Path</code> header of the original email.</p>
        <p>You're required to have a method of tracking bounces and complaints. If you haven't
            set up another mechanism for receiving bounce or complaint notifications (for example,
            by setting up an event destination), you receive an email notification when these events
            occur (even if this setting is disabled).</p>")
    @as("FeedbackForwardingStatus")
    feedbackForwardingStatus: option<enabled>,
    @ocaml.doc("<p>The email identity type. Note: the <code>MANAGED_DOMAIN</code> identity type is not
            supported.</p>")
    @as("IdentityType")
    identityType: option<identityType>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "GetEmailIdentityCommand"
  let make = (~emailIdentity, ()) => new({emailIdentity: emailIdentity})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetDomainDeliverabilityCampaign = {
  type t
  @ocaml.doc("<p>Retrieve all the deliverability data for a specific campaign. This data is available
            for a campaign only if the campaign sent email by using a domain that the
            Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code>
            operation).</p>")
  type request = {
    @ocaml.doc("<p>The unique identifier for the campaign. The Deliverability dashboard automatically generates
            and assigns this identifier to a campaign.</p>")
    @as("CampaignId")
    campaignId: campaignId,
  }
  @ocaml.doc("<p>An object that contains all the deliverability data for a specific campaign. This data
            is available for a campaign only if the campaign sent email by using a domain that the
            Deliverability dashboard is enabled for.</p>")
  type response = {
    @ocaml.doc("<p>An object that contains the deliverability data for the campaign.</p>")
    @as("DomainDeliverabilityCampaign")
    domainDeliverabilityCampaign: domainDeliverabilityCampaign,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "GetDomainDeliverabilityCampaignCommand"
  let make = (~campaignId, ()) => new({campaignId: campaignId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetDedicatedIps = {
  type t
  @ocaml.doc("<p>A request to obtain more information about dedicated IP pools.</p>")
  type request = {
    @ocaml.doc("<p>The number of results to show in a single call to <code>GetDedicatedIpsRequest</code>.
            If the number of results is larger than the number you specified in this parameter, then
            the response includes a <code>NextToken</code> element, which you can use to obtain
            additional results.</p>")
    @as("PageSize")
    pageSize: option<maxItems>,
    @ocaml.doc("<p>A token returned from a previous call to <code>GetDedicatedIps</code> to indicate the
            position of the dedicated IP pool in the list of IP pools.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The name of the IP pool that the dedicated IP address is associated with.</p>")
    @as("PoolName")
    poolName: option<poolName>,
  }
  @ocaml.doc("<p>Information about the dedicated IP addresses that are associated with your Amazon Web Services
            account.</p>")
  type response = {
    @ocaml.doc("<p>A token that indicates that there are additional dedicated IP addresses to list. To
            view additional addresses, issue another request to <code>GetDedicatedIps</code>,
            passing this token in the <code>NextToken</code> parameter.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>A list of dedicated IP addresses that are associated with your Amazon Web Services account.</p>"
    )
    @as("DedicatedIps")
    dedicatedIps: option<dedicatedIpList>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "GetDedicatedIpsCommand"
  let make = (~pageSize=?, ~nextToken=?, ~poolName=?, ()) =>
    new({pageSize: pageSize, nextToken: nextToken, poolName: poolName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetContactList = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the contact list.</p>") @as("ContactListName")
    contactListName: contactListName,
  }
  type response = {
    @ocaml.doc("<p>The tags associated with a contact list.</p>") @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>A timestamp noting the last time the contact list was updated.</p>")
    @as("LastUpdatedTimestamp")
    lastUpdatedTimestamp: option<timestamp_>,
    @ocaml.doc("<p>A timestamp noting when the contact list was created.</p>")
    @as("CreatedTimestamp")
    createdTimestamp: option<timestamp_>,
    @ocaml.doc("<p>A description of what the contact list is about.</p>") @as("Description")
    description: option<description>,
    @ocaml.doc("<p>An interest group, theme, or label within a list. A contact list can have multiple
            topics.</p>")
    @as("Topics")
    topics: option<topics>,
    @ocaml.doc("<p>The name of the contact list.</p>") @as("ContactListName")
    contactListName: option<contactListName>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "GetContactListCommand"
  let make = (~contactListName, ()) => new({contactListName: contactListName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetContact = {
  type t
  type request = {
    @ocaml.doc("<p>The contact's email addres.</p>") @as("EmailAddress") emailAddress: emailAddress,
    @ocaml.doc("<p>The name of the contact list to which the contact belongs.</p>")
    @as("ContactListName")
    contactListName: contactListName,
  }
  type response = {
    @ocaml.doc("<p>A timestamp noting the last time the contact's information was updated.</p>")
    @as("LastUpdatedTimestamp")
    lastUpdatedTimestamp: option<timestamp_>,
    @ocaml.doc("<p>A timestamp noting when the contact was created.</p>") @as("CreatedTimestamp")
    createdTimestamp: option<timestamp_>,
    @ocaml.doc("<p>The attribute data attached to a contact.</p>") @as("AttributesData")
    attributesData: option<attributesData>,
    @ocaml.doc("<p>A boolean value status noting if the contact is unsubscribed from all contact list
            topics.</p>")
    @as("UnsubscribeAll")
    unsubscribeAll: option<unsubscribeAll>,
    @ocaml.doc("<p>The default topic preferences applied to the contact.</p>")
    @as("TopicDefaultPreferences")
    topicDefaultPreferences: option<topicPreferenceList>,
    @ocaml.doc("<p>The contact's preference for being opted-in to or opted-out of a topic.></p>")
    @as("TopicPreferences")
    topicPreferences: option<topicPreferenceList>,
    @ocaml.doc("<p>The contact's email addres.</p>") @as("EmailAddress")
    emailAddress: option<emailAddress>,
    @ocaml.doc("<p>The name of the contact list to which the contact belongs.</p>")
    @as("ContactListName")
    contactListName: option<contactListName>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "GetContactCommand"
  let make = (~emailAddress, ~contactListName, ()) =>
    new({emailAddress: emailAddress, contactListName: contactListName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetConfigurationSet = {
  type t
  @ocaml.doc("<p>A request to obtain information about a configuration set.</p>")
  type request = {
    @ocaml.doc("<p>The name of the configuration set.</p>") @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  @ocaml.doc("<p>Information about a configuration set.</p>")
  type response = {
    @ocaml.doc("<p>An object that contains information about the suppression list preferences for your
            account.</p>")
    @as("SuppressionOptions")
    suppressionOptions: option<suppressionOptions>,
    @ocaml.doc("<p>An array of objects that define the tags (keys and values) that are associated with
            the configuration set.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>An object that defines whether or not Amazon SES can send email that you send using the
            configuration set.</p>")
    @as("SendingOptions")
    sendingOptions: option<sendingOptions>,
    @ocaml.doc("<p>An object that defines whether or not Amazon SES collects reputation metrics for the emails
            that you send that use the configuration set.</p>")
    @as("ReputationOptions")
    reputationOptions: option<reputationOptions>,
    @ocaml.doc("<p>An object that defines the dedicated IP pool that is used to send emails that you send
            using the configuration set.</p>")
    @as("DeliveryOptions")
    deliveryOptions: option<deliveryOptions>,
    @ocaml.doc("<p>An object that defines the open and click tracking options for emails that you send
            using the configuration set.</p>")
    @as("TrackingOptions")
    trackingOptions: option<trackingOptions>,
    @ocaml.doc("<p>The name of the configuration set.</p>") @as("ConfigurationSetName")
    configurationSetName: option<configurationSetName>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "GetConfigurationSetCommand"
  let make = (~configurationSetName, ()) => new({configurationSetName: configurationSetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetAccount = {
  type t
  type request = {.}
  @ocaml.doc("<p>A list of details about the email-sending capabilities of your Amazon SES account in the
            current Amazon Web Services Region.</p>")
  type response = {
    @ocaml.doc("<p>An object that defines your account details.</p>") @as("Details")
    details: option<accountDetails>,
    @ocaml.doc("<p>An object that contains information about the email address suppression preferences
            for your account in the current Amazon Web Services Region.</p>")
    @as("SuppressionAttributes")
    suppressionAttributes: option<suppressionAttributes>,
    @ocaml.doc("<p>Indicates whether or not email sending is enabled for your Amazon SES account in the
            current Amazon Web Services Region.</p>")
    @as("SendingEnabled")
    sendingEnabled: option<enabled>,
    @ocaml.doc("<p>An object that contains information about the per-day and per-second sending limits
            for your Amazon SES account in the current Amazon Web Services Region.</p>")
    @as("SendQuota")
    sendQuota: option<sendQuota>,
    @ocaml.doc("<p>Indicates whether or not your account has production access in the current Amazon Web Services
            Region.</p>
        <p>If the value is <code>false</code>, then your account is in the
                <i>sandbox</i>. When your account is in the sandbox, you can only send
            email to verified identities. Additionally, the maximum number of emails you can send in
            a 24-hour period (your sending quota) is 200, and the maximum number of emails you can
            send per second (your maximum sending rate) is 1.</p>
        <p>If the value is <code>true</code>, then your account has production access. When your
            account has production access, you can send email to any address. The sending quota and
            maximum sending rate for your account vary based on your specific use case.</p>")
    @as("ProductionAccessEnabled")
    productionAccessEnabled: option<enabled>,
    @ocaml.doc("<p>The reputation status of your Amazon SES account. The status can be one of the
            following:</p>
        <ul>
            <li>
                <p>
                  <code>HEALTHY</code> – There are no reputation-related issues that
                    currently impact your account.</p>
            </li>
            <li>
                <p>
                  <code>PROBATION</code> – We've identified potential issues with your
                    Amazon SES account. We're placing your account under review while you work on
                    correcting these issues.</p>
            </li>
            <li>
                <p>
                  <code>SHUTDOWN</code> – Your account's ability to send email is
                    currently paused because of an issue with the email sent from your account. When
                    you correct the issue, you can contact us and request that your account's
                    ability to send email is resumed.</p>
            </li>
         </ul>")
    @as("EnforcementStatus")
    enforcementStatus: option<generalEnforcementStatus>,
    @ocaml.doc("<p>Indicates whether or not the automatic warm-up feature is enabled for dedicated IP
            addresses that are associated with your account.</p>")
    @as("DedicatedIpAutoWarmupEnabled")
    dedicatedIpAutoWarmupEnabled: option<enabled>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "GetAccountCommand"
  let make = () => new(Js.Obj.empty())
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateImportJob = {
  type t
  @ocaml.doc("<p>Represents a request to create an import job from a data source for a data
            destination.</p>")
  type request = {
    @ocaml.doc("<p>The data source for the import job.</p>") @as("ImportDataSource")
    importDataSource: importDataSource,
    @ocaml.doc("<p>The destination for the import job.</p>") @as("ImportDestination")
    importDestination: importDestination,
  }
  @ocaml.doc("<p>An HTTP 200 response if the request succeeds, or an error message if the request
            fails.</p>")
  type response = {
    @ocaml.doc("<p>A string that represents the import job ID.</p>") @as("JobId")
    jobId: option<jobId>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "CreateImportJobCommand"
  let make = (~importDataSource, ~importDestination, ()) =>
    new({importDataSource: importDataSource, importDestination: importDestination})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateEmailIdentity = {
  type t
  @ocaml.doc("<p>A request to begin the verification process for an email identity (an email address or
            domain).</p>")
  type request = {
    @ocaml.doc("<p>The configuration set to use by default when sending from this identity. Note that any
            configuration set defined in the email sending request takes precedence. </p>")
    @as("ConfigurationSetName")
    configurationSetName: option<configurationSetName>,
    @ocaml.doc("<p>If your request includes this object, Amazon SES configures the identity to use Bring Your
            Own DKIM (BYODKIM) for DKIM authentication purposes, or, configures the key length to be used for
            <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html\">Easy DKIM</a>.</p>
        <p>You can only specify this object if the email identity is a domain, as opposed to an
            address.</p>")
    @as("DkimSigningAttributes")
    dkimSigningAttributes: option<dkimSigningAttributes>,
    @ocaml.doc("<p>An array of objects that define the tags (keys and values) to associate with the email
            identity.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The email address or domain to verify.</p>") @as("EmailIdentity")
    emailIdentity: identity,
  }
  @ocaml.doc("<p>If the email identity is a domain, this object contains information about the DKIM
            verification status for the domain.</p>
        <p>If the email identity is an email address, this object is empty. </p>")
  type response = {
    @ocaml.doc(
      "<p>An object that contains information about the DKIM attributes for the identity.</p>"
    )
    @as("DkimAttributes")
    dkimAttributes: option<dkimAttributes>,
    @ocaml.doc("<p>Specifies whether or not the identity is verified. You can only send email from
            verified email addresses or domains. For more information about verifying identities,
            see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html\">Amazon Pinpoint User Guide</a>.</p>")
    @as("VerifiedForSendingStatus")
    verifiedForSendingStatus: option<enabled>,
    @ocaml.doc("<p>The email identity type. Note: the <code>MANAGED_DOMAIN</code> identity type is not
            supported.</p>")
    @as("IdentityType")
    identityType: option<identityType>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "CreateEmailIdentityCommand"
  let make = (~emailIdentity, ~configurationSetName=?, ~dkimSigningAttributes=?, ~tags=?, ()) =>
    new({
      configurationSetName: configurationSetName,
      dkimSigningAttributes: dkimSigningAttributes,
      tags: tags,
      emailIdentity: emailIdentity,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateDedicatedIpPool = {
  type t
  @ocaml.doc("<p>A request to create a new dedicated IP pool.</p>")
  type request = {
    @ocaml.doc("<p>An object that defines the tags (keys and values) that you want to associate with the
            pool.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The name of the dedicated IP pool.</p>") @as("PoolName") poolName: poolName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "CreateDedicatedIpPoolCommand"
  let make = (~poolName, ~tags=?, ()) => new({tags: tags, poolName: poolName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module CreateContactList = {
  type t
  type request = {
    @ocaml.doc("<p>The tags associated with a contact list.</p>") @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>A description of what the contact list is about.</p>") @as("Description")
    description: option<description>,
    @ocaml.doc("<p>An interest group, theme, or label within a list. A contact list can have multiple
            topics.</p>")
    @as("Topics")
    topics: option<topics>,
    @ocaml.doc("<p>The name of the contact list.</p>") @as("ContactListName")
    contactListName: contactListName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "CreateContactListCommand"
  let make = (~contactListName, ~tags=?, ~description=?, ~topics=?, ()) =>
    new({tags: tags, description: description, topics: topics, contactListName: contactListName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module CreateContact = {
  type t
  type request = {
    @ocaml.doc("<p>The attribute data attached to a contact.</p>") @as("AttributesData")
    attributesData: option<attributesData>,
    @ocaml.doc("<p>A boolean value status noting if the contact is unsubscribed from all contact list
            topics.</p>")
    @as("UnsubscribeAll")
    unsubscribeAll: option<unsubscribeAll>,
    @ocaml.doc("<p>The contact's preferences for being opted-in to or opted-out of topics.</p>")
    @as("TopicPreferences")
    topicPreferences: option<topicPreferenceList>,
    @ocaml.doc("<p>The contact's email address.</p>") @as("EmailAddress")
    emailAddress: emailAddress,
    @ocaml.doc("<p>The name of the contact list to which the contact should be added.</p>")
    @as("ContactListName")
    contactListName: contactListName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "CreateContactCommand"
  let make = (
    ~emailAddress,
    ~contactListName,
    ~attributesData=?,
    ~unsubscribeAll=?,
    ~topicPreferences=?,
    (),
  ) =>
    new({
      attributesData: attributesData,
      unsubscribeAll: unsubscribeAll,
      topicPreferences: topicPreferences,
      emailAddress: emailAddress,
      contactListName: contactListName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module CreateConfigurationSet = {
  type t
  @ocaml.doc("<p>A request to create a configuration set.</p>")
  type request = {
    @as("SuppressionOptions") suppressionOptions: option<suppressionOptions>,
    @ocaml.doc("<p>An array of objects that define the tags (keys and values) to associate with the
            configuration set.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>An object that defines whether or not Amazon SES can send email that you send using the
            configuration set.</p>")
    @as("SendingOptions")
    sendingOptions: option<sendingOptions>,
    @ocaml.doc("<p>An object that defines whether or not Amazon SES collects reputation metrics for the emails
            that you send that use the configuration set.</p>")
    @as("ReputationOptions")
    reputationOptions: option<reputationOptions>,
    @ocaml.doc("<p>An object that defines the dedicated IP pool that is used to send emails that you send
            using the configuration set.</p>")
    @as("DeliveryOptions")
    deliveryOptions: option<deliveryOptions>,
    @ocaml.doc("<p>An object that defines the open and click tracking options for emails that you send
            using the configuration set.</p>")
    @as("TrackingOptions")
    trackingOptions: option<trackingOptions>,
    @ocaml.doc("<p>The name of the configuration set. The name can contain up to 64 alphanumeric
            characters, including letters, numbers, hyphens (-) and underscores (_) only.</p>")
    @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "CreateConfigurationSetCommand"
  let make = (
    ~configurationSetName,
    ~suppressionOptions=?,
    ~tags=?,
    ~sendingOptions=?,
    ~reputationOptions=?,
    ~deliveryOptions=?,
    ~trackingOptions=?,
    (),
  ) =>
    new({
      suppressionOptions: suppressionOptions,
      tags: tags,
      sendingOptions: sendingOptions,
      reputationOptions: reputationOptions,
      deliveryOptions: deliveryOptions,
      trackingOptions: trackingOptions,
      configurationSetName: configurationSetName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ListDomainDeliverabilityCampaigns = {
  type t
  @ocaml.doc("<p>Retrieve deliverability data for all the campaigns that used a specific domain to send
            email during a specified time range. This data is available for a domain only if you
            enabled the Deliverability dashboard.</p>")
  type request = {
    @ocaml.doc("<p>The maximum number of results to include in response to a single call to the
                <code>ListDomainDeliverabilityCampaigns</code> operation. If the number of results
            is larger than the number that you specify in this parameter, the response includes a
                <code>NextToken</code> element, which you can use to obtain additional
            results.</p>")
    @as("PageSize")
    pageSize: option<maxItems>,
    @ocaml.doc("<p>A token that’s returned from a previous call to the
                <code>ListDomainDeliverabilityCampaigns</code> operation. This token indicates the
            position of a campaign in the list of campaigns.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The domain to obtain deliverability data for.</p>") @as("SubscribedDomain")
    subscribedDomain: domain,
    @ocaml.doc("<p>The last day, in Unix time format, that you want to obtain deliverability data for.
            This value has to be less than or equal to 30 days after the value of the
                <code>StartDate</code> parameter.</p>")
    @as("EndDate")
    endDate: timestamp_,
    @ocaml.doc("<p>The first day, in Unix time format, that you want to obtain deliverability data
            for.</p>")
    @as("StartDate")
    startDate: timestamp_,
  }
  @ocaml.doc("<p>An array of objects that provide deliverability data for all the campaigns that used a
            specific domain to send email during a specified time range. This data is available for
            a domain only if you enabled the Deliverability dashboard for the domain.</p>")
  type response = {
    @ocaml.doc("<p>A token that’s returned from a previous call to the
                <code>ListDomainDeliverabilityCampaigns</code> operation. This token indicates the
            position of the campaign in the list of campaigns.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array of responses, one for each campaign that used the domain to send email during
            the specified time range.</p>")
    @as("DomainDeliverabilityCampaigns")
    domainDeliverabilityCampaigns: domainDeliverabilityCampaignList,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "ListDomainDeliverabilityCampaignsCommand"
  let make = (~subscribedDomain, ~endDate, ~startDate, ~pageSize=?, ~nextToken=?, ()) =>
    new({
      pageSize: pageSize,
      nextToken: nextToken,
      subscribedDomain: subscribedDomain,
      endDate: endDate,
      startDate: startDate,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetDeliverabilityTestReport = {
  type t
  @ocaml.doc("<p>A request to retrieve the results of a predictive inbox placement test.</p>")
  type request = {
    @ocaml.doc("<p>A unique string that identifies the predictive inbox placement test.</p>")
    @as("ReportId")
    reportId: reportId,
  }
  @ocaml.doc("<p>The results of the predictive inbox placement test.</p>")
  type response = {
    @ocaml.doc("<p>An array of objects that define the tags (keys and values) that are associated with
            the predictive inbox placement test.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>An object that contains the message that you sent when you performed this
            predictive inbox placement test.</p>")
    @as("Message")
    message: option<messageContent>,
    @ocaml.doc("<p>An object that describes how the test email was handled by several email providers,
            including Gmail, Hotmail, Yahoo, AOL, and others.</p>")
    @as("IspPlacements")
    ispPlacements: ispPlacements,
    @ocaml.doc("<p>An object that specifies how many test messages that were sent during the predictive inbox placement test were
            delivered to recipients' inboxes, how many were sent to recipients' spam folders, and
            how many weren't delivered.</p>")
    @as("OverallPlacement")
    overallPlacement: placementStatistics,
    @ocaml.doc("<p>An object that contains the results of the predictive inbox placement test.</p>")
    @as("DeliverabilityTestReport")
    deliverabilityTestReport: deliverabilityTestReport,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "GetDeliverabilityTestReportCommand"
  let make = (~reportId, ()) => new({reportId: reportId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetBlacklistReports = {
  type t
  @ocaml.doc("<p>A request to retrieve a list of the blacklists that your dedicated IP addresses appear
            on.</p>")
  type request = {
    @ocaml.doc("<p>A list of IP addresses that you want to retrieve blacklist information about. You can
            only specify the dedicated IP addresses that you use to send email using Amazon SES or
            Amazon Pinpoint.</p>")
    @as("BlacklistItemNames")
    blacklistItemNames: blacklistItemNames,
  }
  @ocaml.doc("<p>An object that contains information about blacklist events.</p>")
  type response = {
    @ocaml.doc("<p>An object that contains information about a blacklist that one of your dedicated IP
            addresses appears on.</p>")
    @as("BlacklistReport")
    blacklistReport: blacklistReport,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "GetBlacklistReportsCommand"
  let make = (~blacklistItemNames, ()) => new({blacklistItemNames: blacklistItemNames})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module UpdateConfigurationSetEventDestination = {
  type t
  @ocaml.doc("<p>A request to change the settings for an event destination for a configuration
            set.</p>")
  type request = {
    @ocaml.doc("<p>An object that defines the event destination.</p>") @as("EventDestination")
    eventDestination: eventDestinationDefinition,
    @ocaml.doc("<p>The name of the event destination.</p>") @as("EventDestinationName")
    eventDestinationName: eventDestinationName,
    @ocaml.doc("<p>The name of the configuration set that contains the event destination to
            modify.</p>")
    @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "UpdateConfigurationSetEventDestinationCommand"
  let make = (~eventDestination, ~eventDestinationName, ~configurationSetName, ()) =>
    new({
      eventDestination: eventDestination,
      eventDestinationName: eventDestinationName,
      configurationSetName: configurationSetName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module SendEmail = {
  type t
  @ocaml.doc("<p>Represents a request to send a single formatted email using Amazon SES. For more
            information, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-formatted.html\">Amazon SES Developer
                Guide</a>.</p>")
  type request = {
    @ocaml.doc("<p>An object used to specify a list or topic to which an email belongs, which will be
            used when a contact chooses to unsubscribe.</p>")
    @as("ListManagementOptions")
    listManagementOptions: option<listManagementOptions>,
    @ocaml.doc("<p>The name of the configuration set to use when sending the email.</p>")
    @as("ConfigurationSetName")
    configurationSetName: option<configurationSetName>,
    @ocaml.doc("<p>A list of tags, in the form of name/value pairs, to apply to an email that you send
            using the <code>SendEmail</code> operation. Tags correspond to characteristics of the
            email that you define, so that you can publish email sending events. </p>")
    @as("EmailTags")
    emailTags: option<messageTagList>,
    @ocaml.doc("<p>An object that contains the body of the message. You can send either a Simple message
            Raw message or a template Message.</p>")
    @as("Content")
    content: emailContent,
    @ocaml.doc("<p>This parameter is used only for sending authorization. It is the ARN of the identity
            that is associated with the sending authorization policy that permits you to use the
            email address specified in the <code>FeedbackForwardingEmailAddress</code>
            parameter.</p>
        <p>For example, if the owner of example.com (which has ARN
            arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that
            authorizes you to use feedback@example.com, then you would specify the
                <code>FeedbackForwardingEmailAddressIdentityArn</code> to be
            arn:aws:ses:us-east-1:123456789012:identity/example.com, and the
                <code>FeedbackForwardingEmailAddress</code> to be feedback@example.com.</p>
        <p>For more information about sending authorization, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html\">Amazon SES Developer
                Guide</a>.</p>")
    @as("FeedbackForwardingEmailAddressIdentityArn")
    feedbackForwardingEmailAddressIdentityArn: option<amazonResourceName>,
    @ocaml.doc("<p>The address that you want bounce and complaint notifications to be sent to.</p>")
    @as("FeedbackForwardingEmailAddress")
    feedbackForwardingEmailAddress: option<emailAddress>,
    @ocaml.doc("<p>The \"Reply-to\" email addresses for the message. When the recipient replies to the
            message, each Reply-to address receives the reply.</p>")
    @as("ReplyToAddresses")
    replyToAddresses: option<emailAddressList>,
    @ocaml.doc("<p>An object that contains the recipients of the email message.</p>")
    @as("Destination")
    destination: option<destination>,
    @ocaml.doc("<p>This parameter is used only for sending authorization. It is the ARN of the identity
            that is associated with the sending authorization policy that permits you to use the
            email address specified in the <code>FromEmailAddress</code> parameter.</p>
        <p>For example, if the owner of example.com (which has ARN
            arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that
            authorizes you to use sender@example.com, then you would specify the
                <code>FromEmailAddressIdentityArn</code> to be
            arn:aws:ses:us-east-1:123456789012:identity/example.com, and the
                <code>FromEmailAddress</code> to be sender@example.com.</p>
        <p>For more information about sending authorization, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html\">Amazon SES Developer
                Guide</a>.</p>
        <p>For Raw emails, the <code>FromEmailAddressIdentityArn</code> value overrides the
            X-SES-SOURCE-ARN and X-SES-FROM-ARN headers specified in raw email message
            content.</p>")
    @as("FromEmailAddressIdentityArn")
    fromEmailAddressIdentityArn: option<amazonResourceName>,
    @ocaml.doc("<p>The email address to use as the \"From\" address for the email. The
            address that you specify has to be verified.
            </p>")
    @as("FromEmailAddress")
    fromEmailAddress: option<emailAddress>,
  }
  @ocaml.doc("<p>A unique message ID that you receive when an email is accepted for sending.</p>")
  type response = {
    @ocaml.doc("<p>A unique identifier for the message that is generated when the message is
            accepted.</p>
        <note>
            <p>It's possible for Amazon SES to accept a message without sending it. This can happen
                when the message that you're trying to send has an attachment contains a virus, or
                when you send a templated email that contains invalid personalization content, for
                example.</p>
        </note>")
    @as("MessageId")
    messageId: option<outboundMessageId>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "SendEmailCommand"
  let make = (
    ~content,
    ~listManagementOptions=?,
    ~configurationSetName=?,
    ~emailTags=?,
    ~feedbackForwardingEmailAddressIdentityArn=?,
    ~feedbackForwardingEmailAddress=?,
    ~replyToAddresses=?,
    ~destination=?,
    ~fromEmailAddressIdentityArn=?,
    ~fromEmailAddress=?,
    (),
  ) =>
    new({
      listManagementOptions: listManagementOptions,
      configurationSetName: configurationSetName,
      emailTags: emailTags,
      content: content,
      feedbackForwardingEmailAddressIdentityArn: feedbackForwardingEmailAddressIdentityArn,
      feedbackForwardingEmailAddress: feedbackForwardingEmailAddress,
      replyToAddresses: replyToAddresses,
      destination: destination,
      fromEmailAddressIdentityArn: fromEmailAddressIdentityArn,
      fromEmailAddress: fromEmailAddress,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module SendBulkEmail = {
  type t
  @ocaml.doc("<p>Represents a request to send email messages to multiple destinations using Amazon SES. For
            more information, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html\">Amazon SES Developer
                Guide</a>.</p>")
  type request = {
    @ocaml.doc("<p>The name of the configuration set to use when sending the email.</p>")
    @as("ConfigurationSetName")
    configurationSetName: option<configurationSetName>,
    @ocaml.doc("<p>The list of bulk email entry objects.</p>") @as("BulkEmailEntries")
    bulkEmailEntries: bulkEmailEntryList,
    @ocaml.doc("<p>An object that contains the body of the message. You can specify a template
            message.</p>")
    @as("DefaultContent")
    defaultContent: bulkEmailContent,
    @ocaml.doc("<p>A list of tags, in the form of name/value pairs, to apply to an email that you send
            using the <code>SendEmail</code> operation. Tags correspond to characteristics of the
            email that you define, so that you can publish email sending events.</p>")
    @as("DefaultEmailTags")
    defaultEmailTags: option<messageTagList>,
    @ocaml.doc("<p>This parameter is used only for sending authorization. It is the ARN of the identity
            that is associated with the sending authorization policy that permits you to use the
            email address specified in the <code>FeedbackForwardingEmailAddress</code>
            parameter.</p>
        <p>For example, if the owner of example.com (which has ARN
            arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that
            authorizes you to use feedback@example.com, then you would specify the
                <code>FeedbackForwardingEmailAddressIdentityArn</code> to be
            arn:aws:ses:us-east-1:123456789012:identity/example.com, and the
                <code>FeedbackForwardingEmailAddress</code> to be feedback@example.com.</p>
        <p>For more information about sending authorization, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html\">Amazon SES Developer
                Guide</a>.</p>")
    @as("FeedbackForwardingEmailAddressIdentityArn")
    feedbackForwardingEmailAddressIdentityArn: option<amazonResourceName>,
    @ocaml.doc("<p>The address that you want bounce and complaint notifications to be sent to.</p>")
    @as("FeedbackForwardingEmailAddress")
    feedbackForwardingEmailAddress: option<emailAddress>,
    @ocaml.doc("<p>The \"Reply-to\" email addresses for the message. When the recipient replies to the
            message, each Reply-to address receives the reply.</p>")
    @as("ReplyToAddresses")
    replyToAddresses: option<emailAddressList>,
    @ocaml.doc("<p>This parameter is used only for sending authorization. It is the ARN of the identity
            that is associated with the sending authorization policy that permits you to use the
            email address specified in the <code>FromEmailAddress</code> parameter.</p>
        <p>For example, if the owner of example.com (which has ARN
            arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that
            authorizes you to use sender@example.com, then you would specify the
                <code>FromEmailAddressIdentityArn</code> to be
            arn:aws:ses:us-east-1:123456789012:identity/example.com, and the
                <code>FromEmailAddress</code> to be sender@example.com.</p>
        <p>For more information about sending authorization, see the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html\">Amazon SES Developer
                Guide</a>.</p>")
    @as("FromEmailAddressIdentityArn")
    fromEmailAddressIdentityArn: option<amazonResourceName>,
    @ocaml.doc("<p>The email address to use as the \"From\" address for the email. The
            address that you specify has to be verified.</p>")
    @as("FromEmailAddress")
    fromEmailAddress: option<emailAddress>,
  }
  @ocaml.doc("<p>The following data is returned in JSON format by the service.</p>")
  type response = {
    @ocaml.doc("<p>One object per intended recipient. Check each response object and retry any messages
            with a failure status.</p>")
    @as("BulkEmailEntryResults")
    bulkEmailEntryResults: bulkEmailEntryResultList,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "SendBulkEmailCommand"
  let make = (
    ~bulkEmailEntries,
    ~defaultContent,
    ~configurationSetName=?,
    ~defaultEmailTags=?,
    ~feedbackForwardingEmailAddressIdentityArn=?,
    ~feedbackForwardingEmailAddress=?,
    ~replyToAddresses=?,
    ~fromEmailAddressIdentityArn=?,
    ~fromEmailAddress=?,
    (),
  ) =>
    new({
      configurationSetName: configurationSetName,
      bulkEmailEntries: bulkEmailEntries,
      defaultContent: defaultContent,
      defaultEmailTags: defaultEmailTags,
      feedbackForwardingEmailAddressIdentityArn: feedbackForwardingEmailAddressIdentityArn,
      feedbackForwardingEmailAddress: feedbackForwardingEmailAddress,
      replyToAddresses: replyToAddresses,
      fromEmailAddressIdentityArn: fromEmailAddressIdentityArn,
      fromEmailAddress: fromEmailAddress,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module PutDeliverabilityDashboardOption = {
  type t
  @ocaml.doc("<p>Enable or disable the Deliverability dashboard. When you enable the Deliverability dashboard, you gain
            access to reputation, deliverability, and other metrics for the domains that you use to
            send email using Amazon SES API v2. You also gain the ability to perform predictive inbox placement tests.</p>
        <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition
            to any other fees that you accrue by using Amazon SES and other Amazon Web Services services. For more
            information about the features and cost of a Deliverability dashboard subscription, see <a href=\"http://aws.amazon.com/pinpoint/pricing/\">Amazon Pinpoint Pricing</a>.</p>")
  type request = {
    @ocaml.doc("<p>An array of objects, one for each verified domain that you use to send email and
            enabled the Deliverability dashboard for.</p>")
    @as("SubscribedDomains")
    subscribedDomains: option<domainDeliverabilityTrackingOptions>,
    @ocaml.doc("<p>Specifies whether to enable the Deliverability dashboard. To enable the dashboard, set this
            value to <code>true</code>.</p>")
    @as("DashboardEnabled")
    dashboardEnabled: enabled,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutDeliverabilityDashboardOptionCommand"
  let make = (~dashboardEnabled, ~subscribedDomains=?, ()) =>
    new({subscribedDomains: subscribedDomains, dashboardEnabled: dashboardEnabled})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ListImportJobs = {
  type t
  @ocaml.doc("<p>Represents a request to list all of the import jobs for a data destination within the
            specified maximum number of import jobs.</p>")
  type request = {
    @ocaml.doc("<p>Maximum number of import jobs to return at once. Use this parameter to paginate
            results. If additional import jobs exist beyond the specified limit, the
                <code>NextToken</code> element is sent in the response. Use the
                <code>NextToken</code> value in subsequent requests to retrieve additional
            addresses.</p>")
    @as("PageSize")
    pageSize: option<maxItems>,
    @ocaml.doc("<p>A string token indicating that there might be additional import jobs available to be
            listed. Copy this token to a subsequent call to <code>ListImportJobs</code> with the
            same parameters to retrieve the next page of import jobs.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The destination of the import job, which can be used to list import jobs that have a
            certain <code>ImportDestinationType</code>.</p>")
    @as("ImportDestinationType")
    importDestinationType: option<importDestinationType>,
  }
  @ocaml.doc("<p>An HTTP 200 response if the request succeeds, or an error message if the request
            fails.</p>")
  type response = {
    @ocaml.doc("<p>A string token indicating that there might be additional import jobs available to be
            listed. Copy this token to a subsequent call to <code>ListImportJobs</code> with the
            same parameters to retrieve the next page of import jobs.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of the import job summaries.</p>") @as("ImportJobs")
    importJobs: option<importJobSummaryList>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "ListImportJobsCommand"
  let make = (~pageSize=?, ~nextToken=?, ~importDestinationType=?, ()) =>
    new({pageSize: pageSize, nextToken: nextToken, importDestinationType: importDestinationType})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ListContacts = {
  type t
  type request = {
    @ocaml.doc("<p>A string token indicating that there might be additional contacts available to be
            listed. Use the token provided in the Response to use in the subsequent call to
            ListContacts with the same parameters to retrieve the next page of contacts.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The number of contacts that may be returned at once, which is dependent on if there
            are more or less contacts than the value of the PageSize. Use this parameter to
            paginate results. If additional contacts exist beyond the specified limit, the
                <code>NextToken</code> element is sent in the response. Use the
                <code>NextToken</code> value in subsequent requests to retrieve additional
            contacts.</p>")
    @as("PageSize")
    pageSize: option<maxItems>,
    @ocaml.doc("<p>A filter that can be applied to a list of contacts.</p>") @as("Filter")
    filter: option<listContactsFilter>,
    @ocaml.doc("<p>The name of the contact list.</p>") @as("ContactListName")
    contactListName: contactListName,
  }
  type response = {
    @ocaml.doc("<p>A string token indicating that there might be additional contacts available to be
            listed. Copy this token to a subsequent call to <code>ListContacts</code> with the same
            parameters to retrieve the next page of contacts.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The contacts present in a specific contact list.</p>") @as("Contacts")
    contacts: option<listOfContacts>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "ListContactsCommand"
  let make = (~contactListName, ~nextToken=?, ~pageSize=?, ~filter=?, ()) =>
    new({
      nextToken: nextToken,
      pageSize: pageSize,
      filter: filter,
      contactListName: contactListName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetDomainStatisticsReport = {
  type t
  @ocaml.doc("<p>A request to obtain deliverability metrics for a domain.</p>")
  type request = {
    @ocaml.doc("<p>The last day (in Unix time) that you want to obtain domain deliverability metrics for.
            The <code>EndDate</code> that you specify has to be less than or equal to 30 days after
            the <code>StartDate</code>.</p>")
    @as("EndDate")
    endDate: timestamp_,
    @ocaml.doc("<p>The first day (in Unix time) that you want to obtain domain deliverability metrics
            for.</p>")
    @as("StartDate")
    startDate: timestamp_,
    @ocaml.doc("<p>The domain that you want to obtain deliverability metrics for.</p>")
    @as("Domain")
    domain: identity,
  }
  @ocaml.doc("<p>An object that includes statistics that are related to the domain that you
            specified.</p>")
  type response = {
    @ocaml.doc("<p>An object that contains deliverability metrics for the domain that you specified. This
            object contains data for each day, starting on the <code>StartDate</code> and ending on
            the <code>EndDate</code>.</p>")
    @as("DailyVolumes")
    dailyVolumes: dailyVolumes,
    @ocaml.doc("<p>An object that contains deliverability metrics for the domain that you specified. The
            data in this object is a summary of all of the data that was collected from the
                <code>StartDate</code> to the <code>EndDate</code>.</p>")
    @as("OverallVolume")
    overallVolume: overallVolume,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "GetDomainStatisticsReportCommand"
  let make = (~endDate, ~startDate, ~domain, ()) =>
    new({endDate: endDate, startDate: startDate, domain: domain})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetDeliverabilityDashboardOptions = {
  type t
  type request = {.}
  @ocaml.doc("<p>An object that shows the status of the Deliverability dashboard.</p>")
  type response = {
    @ocaml.doc("<p>An array of objects, one for each verified domain that you use to send email and
            currently has an active Deliverability dashboard subscription that's scheduled to expire at the
            end of the current calendar month.</p>")
    @as("PendingExpirationSubscribedDomains")
    pendingExpirationSubscribedDomains: option<domainDeliverabilityTrackingOptions>,
    @ocaml.doc("<p>An array of objects, one for each verified domain that you use to send email and
            currently has an active Deliverability dashboard subscription that isn’t scheduled to expire at
            the end of the current calendar month.</p>")
    @as("ActiveSubscribedDomains")
    activeSubscribedDomains: option<domainDeliverabilityTrackingOptions>,
    @ocaml.doc("<p>The current status of your Deliverability dashboard subscription. If this value is
                <code>PENDING_EXPIRATION</code>, your subscription is scheduled to expire at the end
            of the current calendar month.</p>")
    @as("AccountStatus")
    accountStatus: option<deliverabilityDashboardAccountStatus>,
    @ocaml.doc("<p>The date, in Unix time format, when your current subscription to the Deliverability dashboard
            is scheduled to expire, if your subscription is scheduled to expire at the end of the
            current calendar month. This value is null if you have an active subscription that isn’t
            due to expire at the end of the month.</p>")
    @as("SubscriptionExpiryDate")
    subscriptionExpiryDate: option<timestamp_>,
    @ocaml.doc("<p>Specifies whether the Deliverability dashboard is enabled. If this value is <code>true</code>,
            the dashboard is enabled.</p>")
    @as("DashboardEnabled")
    dashboardEnabled: enabled,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "GetDeliverabilityDashboardOptionsCommand"
  let make = () => new(Js.Obj.empty())
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateDeliverabilityTestReport = {
  type t
  @ocaml.doc("<p>A request to perform a predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will
            be handled by various email providers around the world. When you perform a predictive inbox placement test, you
            provide a sample message that contains the content that you plan to send to your
            customers. We send that message to special email addresses spread across several major
            email providers around the world. The test takes about 24 hours to complete. When the
            test is complete, you can use the <code>GetDeliverabilityTestReport</code> operation to
            view the results of the test.</p>")
  type request = {
    @ocaml.doc("<p>An array of objects that define the tags (keys and values) that you want to associate
            with the predictive inbox placement test.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc(
      "<p>The HTML body of the message that you sent when you performed the predictive inbox placement test.</p>"
    )
    @as("Content")
    content: emailContent,
    @ocaml.doc(
      "<p>The email address that the predictive inbox placement test email was sent from.</p>"
    )
    @as("FromEmailAddress")
    fromEmailAddress: emailAddress,
    @ocaml.doc("<p>A unique name that helps you to identify the predictive inbox placement test when you retrieve the
            results.</p>")
    @as("ReportName")
    reportName: option<reportName>,
  }
  @ocaml.doc("<p>Information about the predictive inbox placement test that you created.</p>")
  type response = {
    @ocaml.doc("<p>The status of the predictive inbox placement test. If the status is <code>IN_PROGRESS</code>, then the predictive inbox placement test
            is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the
            test. If the status is <code>COMPLETE</code>, then the test is finished, and you can use
            the <code>GetDeliverabilityTestReport</code> to view the results of the test.</p>")
    @as("DeliverabilityTestStatus")
    deliverabilityTestStatus: deliverabilityTestStatus,
    @ocaml.doc("<p>A unique string that identifies the predictive inbox placement test.</p>")
    @as("ReportId")
    reportId: reportId,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "CreateDeliverabilityTestReportCommand"
  let make = (~content, ~fromEmailAddress, ~tags=?, ~reportName=?, ()) =>
    new({tags: tags, content: content, fromEmailAddress: fromEmailAddress, reportName: reportName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateConfigurationSetEventDestination = {
  type t
  @ocaml.doc("<p>A request to add an event destination to a configuration set.</p>")
  type request = {
    @ocaml.doc("<p>An object that defines the event destination.</p>") @as("EventDestination")
    eventDestination: eventDestinationDefinition,
    @ocaml.doc("<p>A name that identifies the event destination within the configuration set.</p>")
    @as("EventDestinationName")
    eventDestinationName: eventDestinationName,
    @ocaml.doc("<p>The name of the configuration set .</p>") @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "CreateConfigurationSetEventDestinationCommand"
  let make = (~eventDestination, ~eventDestinationName, ~configurationSetName, ()) =>
    new({
      eventDestination: eventDestination,
      eventDestinationName: eventDestinationName,
      configurationSetName: configurationSetName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module GetConfigurationSetEventDestinations = {
  type t
  @ocaml.doc("<p>A request to obtain information about the event destinations for a configuration
            set.</p>")
  type request = {
    @ocaml.doc("<p>The name of the configuration set that contains the event destination.</p>")
    @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  @ocaml.doc("<p>Information about an event destination for a configuration set.</p>")
  type response = {
    @ocaml.doc("<p>An array that includes all of the events destinations that have been configured for
            the configuration set.</p>")
    @as("EventDestinations")
    eventDestinations: option<eventDestinations>,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "GetConfigurationSetEventDestinationsCommand"
  let make = (~configurationSetName, ()) => new({configurationSetName: configurationSetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
