type responseMetadata = {
  httpStatusCode: option<float>,
  requestId: option<string>,
  extendedRequestId: option<string>,
  cfId: option<string>,
  attempts: option<int>,
  totalRetryDelay: option<int>,
}
type awsServiceClient
@module("@aws-sdk/client-sagemaker") @new
external createClient: unit => awsServiceClient = "SageMakerClient"
type baseString = string
type baseBoolean = bool
type baseInteger = int
type baseTimestamp = Js.Date.t
type baseLong = float
type workteamName = string
type workteamArn = string
type workforceName = string
type workforceArn = string
type waitIntervalInSeconds = int
type vpcId = string
type volumeSizeInGB = int
type versionedArnOrName = string
type versionId = string
type variantWeight = float
type variantStatusMessage = string
type variantStatus = [
  | @as("Baking") #Baking
  | @as("ActivatingTraffic") #ActivatingTraffic
  | @as("Deleting") #Deleting
  | @as("Updating") #Updating
  | @as("Creating") #Creating
]
type variantPropertyType = [
  | @as("DataCaptureConfig") #DataCaptureConfig
  | @as("DesiredWeight") #DesiredWeight
  | @as("DesiredInstanceCount") #DesiredInstanceCount
]
type variantName = string
type userProfileStatus = [
  | @as("Delete_Failed") #Delete_Failed
  | @as("Update_Failed") #Update_Failed
  | @as("Updating") #Updating
  | @as("Pending") #Pending
  | @as("InService") #InService
  | @as("Failed") #Failed
  | @as("Deleting") #Deleting
]
type userProfileSortKey = [
  | @as("LastModifiedTime") #LastModifiedTime
  | @as("CreationTime") #CreationTime
]
type userProfileName = string
type userProfileArn = string
type url = string
type trialSourceArn = string
type trialComponentStatusMessage = string
type trialComponentSourceArn = string
type trialComponentPrimaryStatus = [
  | @as("Stopped") #Stopped
  | @as("Stopping") #Stopping
  | @as("Failed") #Failed
  | @as("Completed") #Completed
  | @as("InProgress") #InProgress
]
type trialComponentKey64 = string
type trialComponentKey256 = string
type trialComponentArtifactValue = string
type trialComponentArn = string
type trialArn = string
type transformJobStatus = [
  | @as("Stopped") #Stopped
  | @as("Stopping") #Stopping
  | @as("Failed") #Failed
  | @as("Completed") #Completed
  | @as("InProgress") #InProgress
]
type transformJobName = string
type transformJobArn = string
type transformInstanceType = [
  | @as("ml.g4dn.16xlarge") #Ml_G4dn_16xlarge
  | @as("ml.g4dn.12xlarge") #Ml_G4dn_12xlarge
  | @as("ml.g4dn.8xlarge") #Ml_G4dn_8xlarge
  | @as("ml.g4dn.4xlarge") #Ml_G4dn_4xlarge
  | @as("ml.g4dn.2xlarge") #Ml_G4dn_2xlarge
  | @as("ml.g4dn.xlarge") #Ml_G4dn_Xlarge
  | @as("ml.m5.24xlarge") #Ml_M5_24xlarge
  | @as("ml.m5.12xlarge") #Ml_M5_12xlarge
  | @as("ml.m5.4xlarge") #Ml_M5_4xlarge
  | @as("ml.m5.2xlarge") #Ml_M5_2xlarge
  | @as("ml.m5.xlarge") #Ml_M5_Xlarge
  | @as("ml.m5.large") #Ml_M5_Large
  | @as("ml.c5.18xlarge") #Ml_C5_18xlarge
  | @as("ml.c5.9xlarge") #Ml_C5_9xlarge
  | @as("ml.c5.4xlarge") #Ml_C5_4xlarge
  | @as("ml.c5.2xlarge") #Ml_C5_2xlarge
  | @as("ml.c5.xlarge") #Ml_C5_Xlarge
  | @as("ml.p3.16xlarge") #Ml_P3_16xlarge
  | @as("ml.p3.8xlarge") #Ml_P3_8xlarge
  | @as("ml.p3.2xlarge") #Ml_P3_2xlarge
  | @as("ml.p2.16xlarge") #Ml_P2_16xlarge
  | @as("ml.p2.8xlarge") #Ml_P2_8xlarge
  | @as("ml.p2.xlarge") #Ml_P2_Xlarge
  | @as("ml.c4.8xlarge") #Ml_C4_8xlarge
  | @as("ml.c4.4xlarge") #Ml_C4_4xlarge
  | @as("ml.c4.2xlarge") #Ml_C4_2xlarge
  | @as("ml.c4.xlarge") #Ml_C4_Xlarge
  | @as("ml.m4.16xlarge") #Ml_M4_16xlarge
  | @as("ml.m4.10xlarge") #Ml_M4_10xlarge
  | @as("ml.m4.4xlarge") #Ml_M4_4xlarge
  | @as("ml.m4.2xlarge") #Ml_M4_2xlarge
  | @as("ml.m4.xlarge") #Ml_M4_Xlarge
]
type transformInstanceCount = int
type transformEnvironmentValue = string
type transformEnvironmentKey = string
type trainingTimeInSeconds = int
type trainingJobStatusCounter = int
type trainingJobStatus = [
  | @as("Stopped") #Stopped
  | @as("Stopping") #Stopping
  | @as("Failed") #Failed
  | @as("Completed") #Completed
  | @as("InProgress") #InProgress
]
type trainingJobSortByOptions = [
  | @as("FinalObjectiveMetricValue") #FinalObjectiveMetricValue
  | @as("Status") #Status
  | @as("CreationTime") #CreationTime
  | @as("Name") #Name
]
type trainingJobName = string
type trainingJobEarlyStoppingType = [@as("Auto") #Auto | @as("Off") #Off]
type trainingJobArn = string
type trainingInstanceType = [
  | @as("ml.g5.48xlarge") #Ml_G5_48xlarge
  | @as("ml.g5.24xlarge") #Ml_G5_24xlarge
  | @as("ml.g5.12xlarge") #Ml_G5_12xlarge
  | @as("ml.g5.16xlarge") #Ml_G5_16xlarge
  | @as("ml.g5.8xlarge") #Ml_G5_8xlarge
  | @as("ml.g5.4xlarge") #Ml_G5_4xlarge
  | @as("ml.g5.2xlarge") #Ml_G5_2xlarge
  | @as("ml.g5.xlarge") #Ml_G5_Xlarge
  | @as("ml.c5n.18xlarge") #Ml_C5n_18xlarge
  | @as("ml.c5n.9xlarge") #Ml_C5n_9xlarge
  | @as("ml.c5n.4xlarge") #Ml_C5n_4xlarge
  | @as("ml.c5n.2xlarge") #Ml_C5n_2xlarge
  | @as("ml.c5n.xlarge") #Ml_C5n_Xlarge
  | @as("ml.c5.18xlarge") #Ml_C5_18xlarge
  | @as("ml.c5.9xlarge") #Ml_C5_9xlarge
  | @as("ml.c5.4xlarge") #Ml_C5_4xlarge
  | @as("ml.c5.2xlarge") #Ml_C5_2xlarge
  | @as("ml.c5.xlarge") #Ml_C5_Xlarge
  | @as("ml.p4d.24xlarge") #Ml_P4d_24xlarge
  | @as("ml.p3dn.24xlarge") #Ml_P3dn_24xlarge
  | @as("ml.p3.16xlarge") #Ml_P3_16xlarge
  | @as("ml.p3.8xlarge") #Ml_P3_8xlarge
  | @as("ml.p3.2xlarge") #Ml_P3_2xlarge
  | @as("ml.p2.16xlarge") #Ml_P2_16xlarge
  | @as("ml.p2.8xlarge") #Ml_P2_8xlarge
  | @as("ml.p2.xlarge") #Ml_P2_Xlarge
  | @as("ml.c4.8xlarge") #Ml_C4_8xlarge
  | @as("ml.c4.4xlarge") #Ml_C4_4xlarge
  | @as("ml.c4.2xlarge") #Ml_C4_2xlarge
  | @as("ml.c4.xlarge") #Ml_C4_Xlarge
  | @as("ml.m5.24xlarge") #Ml_M5_24xlarge
  | @as("ml.m5.12xlarge") #Ml_M5_12xlarge
  | @as("ml.m5.4xlarge") #Ml_M5_4xlarge
  | @as("ml.m5.2xlarge") #Ml_M5_2xlarge
  | @as("ml.m5.xlarge") #Ml_M5_Xlarge
  | @as("ml.m5.large") #Ml_M5_Large
  | @as("ml.g4dn.16xlarge") #Ml_G4dn_16xlarge
  | @as("ml.g4dn.12xlarge") #Ml_G4dn_12xlarge
  | @as("ml.g4dn.8xlarge") #Ml_G4dn_8xlarge
  | @as("ml.g4dn.4xlarge") #Ml_G4dn_4xlarge
  | @as("ml.g4dn.2xlarge") #Ml_G4dn_2xlarge
  | @as("ml.g4dn.xlarge") #Ml_G4dn_Xlarge
  | @as("ml.m4.16xlarge") #Ml_M4_16xlarge
  | @as("ml.m4.10xlarge") #Ml_M4_10xlarge
  | @as("ml.m4.4xlarge") #Ml_M4_4xlarge
  | @as("ml.m4.2xlarge") #Ml_M4_2xlarge
  | @as("ml.m4.xlarge") #Ml_M4_Xlarge
]
type trainingInstanceCount = int
@ocaml.doc("<p>The training input mode that the algorithm supports. For more information about input modes, see
            <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html\">Algorithms</a>.</p>

        <p>
            <b>Pipe mode</b>
         </p>
        <p>If an algorithm supports <code>Pipe</code> mode, Amazon SageMaker streams data directly
            from Amazon S3 to the container.</p>

        <p>
            <b>File mode</b>
         </p>
        <p>If an algorithm supports <code>File</code> mode, SageMaker
            downloads the training data from S3 to the provisioned ML storage volume, and mounts the
            directory to the Docker volume for the training container.</p>
        <p>You must provision the ML storage volume with sufficient capacity
            to accommodate the data downloaded from S3. In addition to the training data, the ML
            storage volume also stores the output model. The algorithm container uses the ML storage
            volume to also store intermediate information, if any.</p>
        <p>For distributed algorithms, training data is distributed uniformly.
            Your training duration is predictable if the input data objects sizes are
            approximately the same. SageMaker does not split the files any further for model training.
            If the object sizes are skewed, training won't be optimal as the data distribution is also
            skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in
            training.</p>

        <p>
            <b>FastFile mode</b>
         </p>
        <p>If an algorithm supports <code>FastFile</code> mode, SageMaker streams data directly
            from S3 to the container with no code changes, and provides file system access to
            the data. Users can author their training script to interact with these files as if
            they were stored on disk.</p>
        <p>
            <code>FastFile</code> mode works best when the data is read sequentially.
            Augmented manifest files aren't supported.
            The startup time is lower when there are fewer files in the S3 bucket provided.</p>")
type trainingInputMode = [@as("FastFile") #FastFile | @as("File") #File | @as("Pipe") #Pipe]
type trainingEnvironmentValue = string
type trainingEnvironmentKey = string
type trafficType = [@as("PHASES") #PHASES]
type trafficRoutingConfigType = [
  | @as("LINEAR") #LINEAR
  | @as("CANARY") #CANARY
  | @as("ALL_AT_ONCE") #ALL_AT_ONCE
]
type trafficDurationInSeconds = int
type timestamp_ = Js.Date.t
type thingName = string
type terminationWaitInSeconds = int
type tenthFractionsOfACent = int
type templateUrl = string
type templateContentSha256 = string
type templateContent = string
type taskTitle = string
type taskTimeLimitInSeconds = int
type taskKeyword = string
type taskInput = string
type taskDescription = string
type taskCount = int
type taskAvailabilityLifetimeInSeconds = int
type targetPlatformOs = [@as("LINUX") #LINUX | @as("ANDROID") #ANDROID]
type targetPlatformArch = [
  | @as("ARM_EABIHF") #ARM_EABIHF
  | @as("ARM_EABI") #ARM_EABI
  | @as("ARM64") #ARM64
  | @as("X86") #X86
  | @as("X86_64") #X86_64
]
type targetPlatformAccelerator = [
  | @as("NNA") #NNA
  | @as("NVIDIA") #NVIDIA
  | @as("MALI") #MALI
  | @as("INTEL_GRAPHICS") #INTEL_GRAPHICS
]
type targetObjectiveMetricValue = float
type targetDevice = [
  | @as("imx8mplus") #Imx8mplus
  | @as("jacinto_tda4vm") #Jacinto_Tda4vm
  | @as("coreml") #Coreml
  | @as("x86_win64") #X86_Win64
  | @as("x86_win32") #X86_Win32
  | @as("amba_cv25") #Amba_Cv25
  | @as("amba_cv22") #Amba_Cv22
  | @as("amba_cv2") #Amba_Cv2
  | @as("sitara_am57x") #Sitara_Am57x
  | @as("qcs603") #Qcs603
  | @as("qcs605") #Qcs605
  | @as("sbe_c") #Sbe_C
  | @as("aisage") #Aisage
  | @as("rk3288") #Rk3288
  | @as("rk3399") #Rk3399
  | @as("deeplens") #Deeplens
  | @as("imx8qm") #Imx8qm
  | @as("rasp3b") #Rasp3b
  | @as("jetson_xavier") #Jetson_Xavier
  | @as("jetson_nano") #Jetson_Nano
  | @as("jetson_tx2") #Jetson_Tx2
  | @as("jetson_tx1") #Jetson_Tx1
  | @as("ml_eia2") #Ml_Eia2
  | @as("ml_inf1") #Ml_Inf1
  | @as("ml_g4dn") #Ml_G4dn
  | @as("ml_p3") #Ml_P3
  | @as("ml_p2") #Ml_P2
  | @as("ml_c5") #Ml_C5
  | @as("ml_c4") #Ml_C4
  | @as("ml_m5") #Ml_M5
  | @as("ml_m4") #Ml_M4
  | @as("lambda") #Lambda
]
type targetAttributeName = string
type tagValue = string
type tagKey = string
type tableName = string
type synthesizedJsonHumanLoopActivationConditions = string
type success = bool
type subnetId = string
type studioLifecycleConfigSortKey = [
  | @as("Name") #Name
  | @as("LastModifiedTime") #LastModifiedTime
  | @as("CreationTime") #CreationTime
]
type studioLifecycleConfigName = string
type studioLifecycleConfigContent = string
type studioLifecycleConfigArn = string
type studioLifecycleConfigAppType = [
  | @as("KernelGateway") #KernelGateway
  | @as("JupyterServer") #JupyterServer
]
type stringParameterValue = string
type string8192 = string
type string64 = string
type string40 = string
type string3072 = string
type string256 = string
type string2048 = string
type string200 = string
type string128 = string
type string1024 = string
type string_ = string
type stepStatus = [
  | @as("Succeeded") #Succeeded
  | @as("Failed") #Failed
  | @as("Stopped") #Stopped
  | @as("Stopping") #Stopping
  | @as("Executing") #Executing
  | @as("Starting") #Starting
]
type stepName = string
type stepDisplayName = string
type stepDescription = string
type statusMessage = string
type statusDetails = string
type splitType = [
  | @as("TFRecord") #TFRecord
  | @as("RecordIO") #RecordIO
  | @as("Line") #Line
  | @as("None") #None
]
type spawnRate = int
type sourceUri = string
type sourceType = string
type sortTrialsBy = [@as("CreationTime") #CreationTime | @as("Name") #Name]
type sortTrialComponentsBy = [@as("CreationTime") #CreationTime | @as("Name") #Name]
type sortPipelinesBy = [@as("CreationTime") #CreationTime | @as("Name") #Name]
type sortPipelineExecutionsBy = [
  | @as("PipelineExecutionArn") #PipelineExecutionArn
  | @as("CreationTime") #CreationTime
]
type sortOrder = [@as("Descending") #Descending | @as("Ascending") #Ascending]
type sortLineageGroupsBy = [@as("CreationTime") #CreationTime | @as("Name") #Name]
type sortExperimentsBy = [@as("CreationTime") #CreationTime | @as("Name") #Name]
type sortContextsBy = [@as("CreationTime") #CreationTime | @as("Name") #Name]
type sortBy = [@as("Status") #Status | @as("CreationTime") #CreationTime | @as("Name") #Name]
type sortAssociationsBy = [
  | @as("CreationTime") #CreationTime
  | @as("DestinationType") #DestinationType
  | @as("SourceType") #SourceType
  | @as("DestinationArn") #DestinationArn
  | @as("SourceArn") #SourceArn
]
type sortArtifactsBy = [@as("CreationTime") #CreationTime]
type sortActionsBy = [@as("CreationTime") #CreationTime | @as("Name") #Name]
type snsTopicArn = string
type singleSignOnUserIdentifier = string
type sessionExpirationDurationInSeconds = int
type serviceCatalogEntityId = string
type serverlessMemorySizeInMB = int
type serverlessMaxConcurrency = int
type seed = float
type securityGroupId = string
type secretArn = string
type secondaryStatus = [
  | @as("Restarting") #Restarting
  | @as("Updating") #Updating
  | @as("MaxWaitTimeExceeded") #MaxWaitTimeExceeded
  | @as("Interrupted") #Interrupted
  | @as("Failed") #Failed
  | @as("Completed") #Completed
  | @as("MaxRuntimeExceeded") #MaxRuntimeExceeded
  | @as("Stopped") #Stopped
  | @as("Stopping") #Stopping
  | @as("Uploading") #Uploading
  | @as("Training") #Training
  | @as("DownloadingTrainingImage") #DownloadingTrainingImage
  | @as("Downloading") #Downloading
  | @as("PreparingTrainingStack") #PreparingTrainingStack
  | @as("LaunchingMLInstances") #LaunchingMLInstances
  | @as("Starting") #Starting
]
type searchSortOrder = [@as("Descending") #Descending | @as("Ascending") #Ascending]
type scheduleStatus = [
  | @as("Stopped") #Stopped
  | @as("Scheduled") #Scheduled
  | @as("Failed") #Failed
  | @as("Pending") #Pending
]
type scheduleExpression = string
type samplingPercentage = int
type sagemakerServicecatalogStatus = [@as("Disabled") #Disabled | @as("Enabled") #Enabled]
type s3Uri = string
type s3DataType = [
  | @as("AugmentedManifestFile") #AugmentedManifestFile
  | @as("S3Prefix") #S3Prefix
  | @as("ManifestFile") #ManifestFile
]
type s3DataDistribution = [
  | @as("ShardedByS3Key") #ShardedByS3Key
  | @as("FullyReplicated") #FullyReplicated
]
type ruleEvaluationStatus = [
  | @as("Stopped") #Stopped
  | @as("Stopping") #Stopping
  | @as("Error") #Error
  | @as("IssuesFound") #IssuesFound
  | @as("NoIssuesFound") #NoIssuesFound
  | @as("InProgress") #InProgress
]
type ruleConfigurationName = string
type rootAccess = [@as("Disabled") #Disabled | @as("Enabled") #Enabled]
type roleArn = string
type retentionType = [@as("Delete") #Delete | @as("Retain") #Retain]
type responseMIMEType = string
type resourceType = [
  | @as("Project") #Project
  | @as("FeatureGroup") #FeatureGroup
  | @as("PipelineExecution") #PipelineExecution
  | @as("Pipeline") #Pipeline
  | @as("ModelPackageGroup") #ModelPackageGroup
  | @as("ModelPackage") #ModelPackage
  | @as("Endpoint") #Endpoint
  | @as("ExperimentTrialComponent") #ExperimentTrialComponent
  | @as("ExperimentTrial") #ExperimentTrial
  | @as("Experiment") #Experiment
  | @as("TrainingJob") #TrainingJob
]
type resourcePropertyName = string
type resourcePolicyString = string
type resourceId = string
type resourceArn = string
type repositoryCredentialsProviderArn = string
type repositoryAccessMode = [@as("Vpc") #Vpc | @as("Platform") #Platform]
@ocaml.doc("<p>The database user name used in Redshift query execution.</p>")
type redshiftUserName = string
@ocaml.doc("<p>The data storage format for Redshift query results.</p>")
type redshiftResultFormat = [@as("CSV") #CSV | @as("PARQUET") #PARQUET]
@ocaml.doc("<p>The compression used for Redshift query results.</p>")
type redshiftResultCompressionType = [
  | @as("SNAPPY") #SNAPPY
  | @as("ZSTD") #ZSTD
  | @as("BZIP2") #BZIP2
  | @as("GZIP") #GZIP
  | @as("None") #None
]
@ocaml.doc("<p>The SQL query statements to be executed.</p>") type redshiftQueryString = string
@ocaml.doc("<p>The name of the Redshift database used in Redshift query execution.</p>")
type redshiftDatabase = string
@ocaml.doc("<p>The Redshift cluster Identifier.</p>") type redshiftClusterId = string
type recordWrapper = [@as("RecordIO") #RecordIO | @as("None") #None]
type recommendationJobType = [@as("Advanced") #Advanced | @as("Default") #Default]
type recommendationJobStatus = [
  | @as("STOPPED") #STOPPED
  | @as("STOPPING") #STOPPING
  | @as("FAILED") #FAILED
  | @as("COMPLETED") #COMPLETED
  | @as("IN_PROGRESS") #IN_PROGRESS
  | @as("PENDING") #PENDING
]
type recommendationJobName = string
type recommendationJobDescription = string
type recommendationJobArn = string
type rstudioServerProUserGroup = [
  | @as("R_STUDIO_USER") #R_STUDIO_USER
  | @as("R_STUDIO_ADMIN") #R_STUDIO_ADMIN
]
type rstudioServerProAccessStatus = [@as("DISABLED") #DISABLED | @as("ENABLED") #ENABLED]
@ocaml.doc("<p>A collection of settings that apply to an <code>RSessionGateway</code> app.</p>")
type rsessionAppSettings = {.}
type queryLineageMaxResults = int
type queryLineageMaxDepth = int
type provisioningParameterValue = string
type provisioningParameterKey = string
type provisionedProductStatusMessage = string
type propertyNameHint = string
type projectStatus = [
  | @as("UpdateFailed") #UpdateFailed
  | @as("UpdateCompleted") #UpdateCompleted
  | @as("UpdateInProgress") #UpdateInProgress
  | @as("DeleteCompleted") #DeleteCompleted
  | @as("DeleteFailed") #DeleteFailed
  | @as("DeleteInProgress") #DeleteInProgress
  | @as("CreateFailed") #CreateFailed
  | @as("CreateCompleted") #CreateCompleted
  | @as("CreateInProgress") #CreateInProgress
  | @as("Pending") #Pending
]
type projectSortOrder = [@as("Descending") #Descending | @as("Ascending") #Ascending]
type projectSortBy = [@as("CreationTime") #CreationTime | @as("Name") #Name]
type projectId = string
type projectEntityName = string
type projectArn = string
type profilingStatus = [@as("Disabled") #Disabled | @as("Enabled") #Enabled]
type profilingIntervalInMilliseconds = float
type productionVariantInstanceType = [
  | @as("ml.inf1.24xlarge") #Ml_Inf1_24xlarge
  | @as("ml.inf1.6xlarge") #Ml_Inf1_6xlarge
  | @as("ml.inf1.2xlarge") #Ml_Inf1_2xlarge
  | @as("ml.inf1.xlarge") #Ml_Inf1_Xlarge
  | @as("ml.r5d.24xlarge") #Ml_R5d_24xlarge
  | @as("ml.r5d.12xlarge") #Ml_R5d_12xlarge
  | @as("ml.r5d.4xlarge") #Ml_R5d_4xlarge
  | @as("ml.r5d.2xlarge") #Ml_R5d_2xlarge
  | @as("ml.r5d.xlarge") #Ml_R5d_Xlarge
  | @as("ml.r5d.large") #Ml_R5d_Large
  | @as("ml.r5.24xlarge") #Ml_R5_24xlarge
  | @as("ml.r5.12xlarge") #Ml_R5_12xlarge
  | @as("ml.r5.4xlarge") #Ml_R5_4xlarge
  | @as("ml.r5.2xlarge") #Ml_R5_2xlarge
  | @as("ml.r5.xlarge") #Ml_R5_Xlarge
  | @as("ml.r5.large") #Ml_R5_Large
  | @as("ml.g4dn.16xlarge") #Ml_G4dn_16xlarge
  | @as("ml.g4dn.12xlarge") #Ml_G4dn_12xlarge
  | @as("ml.g4dn.8xlarge") #Ml_G4dn_8xlarge
  | @as("ml.g4dn.4xlarge") #Ml_G4dn_4xlarge
  | @as("ml.g4dn.2xlarge") #Ml_G4dn_2xlarge
  | @as("ml.g4dn.xlarge") #Ml_G4dn_Xlarge
  | @as("ml.c5d.18xlarge") #Ml_C5d_18xlarge
  | @as("ml.c5d.9xlarge") #Ml_C5d_9xlarge
  | @as("ml.c5d.4xlarge") #Ml_C5d_4xlarge
  | @as("ml.c5d.2xlarge") #Ml_C5d_2xlarge
  | @as("ml.c5d.xlarge") #Ml_C5d_Xlarge
  | @as("ml.c5d.large") #Ml_C5d_Large
  | @as("ml.c5.18xlarge") #Ml_C5_18xlarge
  | @as("ml.c5.9xlarge") #Ml_C5_9xlarge
  | @as("ml.c5.4xlarge") #Ml_C5_4xlarge
  | @as("ml.c5.2xlarge") #Ml_C5_2xlarge
  | @as("ml.c5.xlarge") #Ml_C5_Xlarge
  | @as("ml.c5.large") #Ml_C5_Large
  | @as("ml.p3.16xlarge") #Ml_P3_16xlarge
  | @as("ml.p3.8xlarge") #Ml_P3_8xlarge
  | @as("ml.p3.2xlarge") #Ml_P3_2xlarge
  | @as("ml.p2.16xlarge") #Ml_P2_16xlarge
  | @as("ml.p2.8xlarge") #Ml_P2_8xlarge
  | @as("ml.p2.xlarge") #Ml_P2_Xlarge
  | @as("ml.c4.8xlarge") #Ml_C4_8xlarge
  | @as("ml.c4.4xlarge") #Ml_C4_4xlarge
  | @as("ml.c4.2xlarge") #Ml_C4_2xlarge
  | @as("ml.c4.xlarge") #Ml_C4_Xlarge
  | @as("ml.c4.large") #Ml_C4_Large
  | @as("ml.m5d.24xlarge") #Ml_M5d_24xlarge
  | @as("ml.m5d.12xlarge") #Ml_M5d_12xlarge
  | @as("ml.m5d.4xlarge") #Ml_M5d_4xlarge
  | @as("ml.m5d.2xlarge") #Ml_M5d_2xlarge
  | @as("ml.m5d.xlarge") #Ml_M5d_Xlarge
  | @as("ml.m5d.large") #Ml_M5d_Large
  | @as("ml.m5.24xlarge") #Ml_M5_24xlarge
  | @as("ml.m5.12xlarge") #Ml_M5_12xlarge
  | @as("ml.m5.4xlarge") #Ml_M5_4xlarge
  | @as("ml.m5.2xlarge") #Ml_M5_2xlarge
  | @as("ml.m5.xlarge") #Ml_M5_Xlarge
  | @as("ml.m5.large") #Ml_M5_Large
  | @as("ml.m4.16xlarge") #Ml_M4_16xlarge
  | @as("ml.m4.10xlarge") #Ml_M4_10xlarge
  | @as("ml.m4.4xlarge") #Ml_M4_4xlarge
  | @as("ml.m4.2xlarge") #Ml_M4_2xlarge
  | @as("ml.m4.xlarge") #Ml_M4_Xlarge
  | @as("ml.t2.2xlarge") #Ml_T2_2xlarge
  | @as("ml.t2.xlarge") #Ml_T2_Xlarge
  | @as("ml.t2.large") #Ml_T2_Large
  | @as("ml.t2.medium") #Ml_T2_Medium
]
type productionVariantAcceleratorType = [
  | @as("ml.eia2.xlarge") #Ml_Eia2_Xlarge
  | @as("ml.eia2.large") #Ml_Eia2_Large
  | @as("ml.eia2.medium") #Ml_Eia2_Medium
  | @as("ml.eia1.xlarge") #Ml_Eia1_Xlarge
  | @as("ml.eia1.large") #Ml_Eia1_Large
  | @as("ml.eia1.medium") #Ml_Eia1_Medium
]
type productId = string
type processingVolumeSizeInGB = int
type processingS3UploadMode = [@as("EndOfJob") #EndOfJob | @as("Continuous") #Continuous]
type processingS3InputMode = [@as("File") #File | @as("Pipe") #Pipe]
type processingS3DataType = [@as("S3Prefix") #S3Prefix | @as("ManifestFile") #ManifestFile]
type processingS3DataDistributionType = [
  | @as("ShardedByS3Key") #ShardedByS3Key
  | @as("FullyReplicated") #FullyReplicated
]
type processingS3CompressionType = [@as("Gzip") #Gzip | @as("None") #None]
type processingMaxRuntimeInSeconds = int
type processingLocalPath = string
type processingJobStatus = [
  | @as("Stopped") #Stopped
  | @as("Stopping") #Stopping
  | @as("Failed") #Failed
  | @as("Completed") #Completed
  | @as("InProgress") #InProgress
]
type processingJobName = string
type processingJobArn = string
type processingInstanceType = [
  | @as("ml.g4dn.16xlarge") #Ml_G4dn_16xlarge
  | @as("ml.g4dn.12xlarge") #Ml_G4dn_12xlarge
  | @as("ml.g4dn.8xlarge") #Ml_G4dn_8xlarge
  | @as("ml.g4dn.4xlarge") #Ml_G4dn_4xlarge
  | @as("ml.g4dn.2xlarge") #Ml_G4dn_2xlarge
  | @as("ml.g4dn.xlarge") #Ml_G4dn_Xlarge
  | @as("ml.r5.24xlarge") #Ml_R5_24xlarge
  | @as("ml.r5.16xlarge") #Ml_R5_16xlarge
  | @as("ml.r5.12xlarge") #Ml_R5_12xlarge
  | @as("ml.r5.8xlarge") #Ml_R5_8xlarge
  | @as("ml.r5.4xlarge") #Ml_R5_4xlarge
  | @as("ml.r5.2xlarge") #Ml_R5_2xlarge
  | @as("ml.r5.xlarge") #Ml_R5_Xlarge
  | @as("ml.r5.large") #Ml_R5_Large
  | @as("ml.m5.24xlarge") #Ml_M5_24xlarge
  | @as("ml.m5.12xlarge") #Ml_M5_12xlarge
  | @as("ml.m5.4xlarge") #Ml_M5_4xlarge
  | @as("ml.m5.2xlarge") #Ml_M5_2xlarge
  | @as("ml.m5.xlarge") #Ml_M5_Xlarge
  | @as("ml.m5.large") #Ml_M5_Large
  | @as("ml.c5.18xlarge") #Ml_C5_18xlarge
  | @as("ml.c5.9xlarge") #Ml_C5_9xlarge
  | @as("ml.c5.4xlarge") #Ml_C5_4xlarge
  | @as("ml.c5.2xlarge") #Ml_C5_2xlarge
  | @as("ml.c5.xlarge") #Ml_C5_Xlarge
  | @as("ml.p3.16xlarge") #Ml_P3_16xlarge
  | @as("ml.p3.8xlarge") #Ml_P3_8xlarge
  | @as("ml.p3.2xlarge") #Ml_P3_2xlarge
  | @as("ml.p2.16xlarge") #Ml_P2_16xlarge
  | @as("ml.p2.8xlarge") #Ml_P2_8xlarge
  | @as("ml.p2.xlarge") #Ml_P2_Xlarge
  | @as("ml.c4.8xlarge") #Ml_C4_8xlarge
  | @as("ml.c4.4xlarge") #Ml_C4_4xlarge
  | @as("ml.c4.2xlarge") #Ml_C4_2xlarge
  | @as("ml.c4.xlarge") #Ml_C4_Xlarge
  | @as("ml.m4.16xlarge") #Ml_M4_16xlarge
  | @as("ml.m4.10xlarge") #Ml_M4_10xlarge
  | @as("ml.m4.4xlarge") #Ml_M4_4xlarge
  | @as("ml.m4.2xlarge") #Ml_M4_2xlarge
  | @as("ml.m4.xlarge") #Ml_M4_Xlarge
  | @as("ml.t3.2xlarge") #Ml_T3_2xlarge
  | @as("ml.t3.xlarge") #Ml_T3_Xlarge
  | @as("ml.t3.large") #Ml_T3_Large
  | @as("ml.t3.medium") #Ml_T3_Medium
]
type processingInstanceCount = int
type processingEnvironmentValue = string
type processingEnvironmentKey = string
type problemType = [
  | @as("Regression") #Regression
  | @as("MulticlassClassification") #MulticlassClassification
  | @as("BinaryClassification") #BinaryClassification
]
type probabilityThresholdAttribute = float
type presignedDomainUrl = string
type policyString = string
type platformIdentifier = string
type pipelineStatus = [@as("Active") #Active]
type pipelineParameterName = string
type pipelineName = string
type pipelineExecutionStatus = [
  | @as("Succeeded") #Succeeded
  | @as("Failed") #Failed
  | @as("Stopped") #Stopped
  | @as("Stopping") #Stopping
  | @as("Executing") #Executing
]
type pipelineExecutionName = string
type pipelineExecutionFailureReason = string
type pipelineExecutionDescription = string
type pipelineExecutionArn = string
type pipelineDescription = string
type pipelineDefinition = string
type pipelineArn = string
type parameterValue = string
type parameterType = [
  | @as("FreeText") #FreeText
  | @as("Categorical") #Categorical
  | @as("Continuous") #Continuous
  | @as("Integer") #Integer
]
type parameterName = string
type parameterKey = string
type paginationToken = string
type orderKey = [@as("Descending") #Descending | @as("Ascending") #Ascending]
type optionalVolumeSizeInGB = int
type optionalInteger = int
type optionalDouble = float
type operator = [
  | @as("In") #In
  | @as("NotExists") #NotExists
  | @as("Exists") #Exists
  | @as("Contains") #Contains
  | @as("LessThanOrEqualTo") #LessThanOrEqualTo
  | @as("LessThan") #LessThan
  | @as("GreaterThanOrEqualTo") #GreaterThanOrEqualTo
  | @as("GreaterThan") #GreaterThan
  | @as("NotEquals") #NotEquals
  | @as("Equals") #Equals
]
type oidcEndpoint = string
type offlineStoreStatusValue = [
  | @as("Disabled") #Disabled
  | @as("Blocked") #Blocked
  | @as("Active") #Active
]
type objectiveStatusCounter = int
type objectiveStatus = [
  | @as("Failed") #Failed
  | @as("Pending") #Pending
  | @as("Succeeded") #Succeeded
]
type numberOfHumanWorkersPerDataObject = int
type notificationTopicArn = string
type notebookOutputOption = [@as("Disabled") #Disabled | @as("Allowed") #Allowed]
type notebookInstanceVolumeSizeInGB = int
type notebookInstanceUrl = string
type notebookInstanceStatus = [
  | @as("Updating") #Updating
  | @as("Deleting") #Deleting
  | @as("Failed") #Failed
  | @as("Stopped") #Stopped
  | @as("Stopping") #Stopping
  | @as("InService") #InService
  | @as("Pending") #Pending
]
type notebookInstanceSortOrder = [@as("Descending") #Descending | @as("Ascending") #Ascending]
type notebookInstanceSortKey = [
  | @as("Status") #Status
  | @as("CreationTime") #CreationTime
  | @as("Name") #Name
]
type notebookInstanceNameContains = string
type notebookInstanceName = string
type notebookInstanceLifecycleConfigSortOrder = [
  | @as("Descending") #Descending
  | @as("Ascending") #Ascending
]
type notebookInstanceLifecycleConfigSortKey = [
  | @as("LastModifiedTime") #LastModifiedTime
  | @as("CreationTime") #CreationTime
  | @as("Name") #Name
]
type notebookInstanceLifecycleConfigNameContains = string
type notebookInstanceLifecycleConfigName = string
type notebookInstanceLifecycleConfigContent = string
type notebookInstanceLifecycleConfigArn = string
type notebookInstanceArn = string
type notebookInstanceAcceleratorType = [
  | @as("ml.eia2.xlarge") #Ml_Eia2_Xlarge
  | @as("ml.eia2.large") #Ml_Eia2_Large
  | @as("ml.eia2.medium") #Ml_Eia2_Medium
  | @as("ml.eia1.xlarge") #Ml_Eia1_Xlarge
  | @as("ml.eia1.large") #Ml_Eia1_Large
  | @as("ml.eia1.medium") #Ml_Eia1_Medium
]
type nextToken = string
type networkInterfaceId = string
type neoVpcSubnetId = string
type neoVpcSecurityGroupId = string
type nameContains = string
type mountPath = string
type monitoringType = [
  | @as("ModelExplainability") #ModelExplainability
  | @as("ModelBias") #ModelBias
  | @as("ModelQuality") #ModelQuality
  | @as("DataQuality") #DataQuality
]
type monitoringTimeOffsetString = string
type monitoringScheduleSortKey = [
  | @as("Status") #Status
  | @as("CreationTime") #CreationTime
  | @as("Name") #Name
]
type monitoringScheduleName = string
type monitoringScheduleArn = string
type monitoringS3Uri = string
type monitoringProblemType = [
  | @as("Regression") #Regression
  | @as("MulticlassClassification") #MulticlassClassification
  | @as("BinaryClassification") #BinaryClassification
]
type monitoringMaxRuntimeInSeconds = int
type monitoringJobDefinitionSortKey = [@as("CreationTime") #CreationTime | @as("Name") #Name]
type monitoringJobDefinitionName = string
type monitoringJobDefinitionArn = string
type monitoringExecutionSortKey = [
  | @as("Status") #Status
  | @as("ScheduledTime") #ScheduledTime
  | @as("CreationTime") #CreationTime
]
type modelSortKey = [@as("CreationTime") #CreationTime | @as("Name") #Name]
type modelPackageVersion = int
type modelPackageType = [
  | @as("Both") #Both
  | @as("Unversioned") #Unversioned
  | @as("Versioned") #Versioned
]
type modelPackageStatus = [
  | @as("Deleting") #Deleting
  | @as("Failed") #Failed
  | @as("Completed") #Completed
  | @as("InProgress") #InProgress
  | @as("Pending") #Pending
]
type modelPackageSortBy = [@as("CreationTime") #CreationTime | @as("Name") #Name]
type modelPackageGroupStatus = [
  | @as("DeleteFailed") #DeleteFailed
  | @as("Deleting") #Deleting
  | @as("Failed") #Failed
  | @as("Completed") #Completed
  | @as("InProgress") #InProgress
  | @as("Pending") #Pending
]
type modelPackageGroupSortBy = [@as("CreationTime") #CreationTime | @as("Name") #Name]
type modelPackageGroupArn = string
type modelPackageArn = string
type modelNameContains = string
type modelName = string
type modelMetadataFilterType = [
  | @as("FrameworkVersion") #FrameworkVersion
  | @as("Task") #Task
  | @as("Framework") #Framework
  | @as("Domain") #Domain
]
type modelInsightsLocation = string
type modelCacheSetting = [@as("Disabled") #Disabled | @as("Enabled") #Enabled]
type modelArn = string
type modelApprovalStatus = [
  | @as("PendingManualApproval") #PendingManualApproval
  | @as("Rejected") #Rejected
  | @as("Approved") #Approved
]
type metricValue = float
type metricSetSource = [@as("Test") #Test | @as("Validation") #Validation | @as("Train") #Train]
type metricRegex = string
type metricName = string
type metadataPropertyValue = string
type mediaType = string
type maximumRetryAttempts = int
type maximumExecutionTimeoutInSeconds = int
type maxWaitTimeInSeconds = int
type maxRuntimePerTrainingJobInSeconds = int
type maxRuntimeInSeconds = int
type maxResults = int
type maxPercentageOfInputDatasetLabeled = int
type maxPayloadInMB = int
type maxParallelTrainingJobs = int
type maxParallelOfTests = int
type maxParallelExecutionSteps = int
type maxNumberOfTrainingJobs = int
type maxNumberOfTests = int
type maxHumanLabeledObjectCount = int
type maxConcurrentTransforms = int
type maxConcurrentTaskCount = int
type maxConcurrentInvocationsPerInstance = int
type maxCandidates = int
type maxAutoMLJobRuntimeInSeconds = int
type long = float
type listWorkteamsSortByOptions = [@as("CreateDate") #CreateDate | @as("Name") #Name]
type listWorkforcesSortByOptions = [@as("CreateDate") #CreateDate | @as("Name") #Name]
type listTagsMaxResults = int
type listMaxResults = int
type listLabelingJobsForWorkteamSortByOptions = [@as("CreationTime") #CreationTime]
type listInferenceRecommendationsJobsSortBy = [
  | @as("Status") #Status
  | @as("CreationTime") #CreationTime
  | @as("Name") #Name
]
type listEdgePackagingJobsSortBy = [
  | @as("STATUS") #STATUS
  | @as("LAST_MODIFIED_TIME") #LAST_MODIFIED_TIME
  | @as("CREATION_TIME") #CREATION_TIME
  | @as("MODEL_NAME") #MODEL_NAME
  | @as("NAME") #NAME
]
type listDeviceFleetsSortBy = [
  | @as("LAST_MODIFIED_TIME") #LAST_MODIFIED_TIME
  | @as("CREATION_TIME") #CREATION_TIME
  | @as("NAME") #NAME
]
type listCompilationJobsSortBy = [
  | @as("Status") #Status
  | @as("CreationTime") #CreationTime
  | @as("Name") #Name
]
type lineageType = [
  | @as("Action") #Action
  | @as("Context") #Context
  | @as("Artifact") #Artifact
  | @as("TrialComponent") #TrialComponent
]
type lineageGroupNameOrArn = string
type lineageGroupArn = string
type lastModifiedTime = Js.Date.t
type lambdaFunctionArn = string
type labelingJobStatus = [
  | @as("Stopped") #Stopped
  | @as("Stopping") #Stopping
  | @as("Failed") #Failed
  | @as("Completed") #Completed
  | @as("InProgress") #InProgress
  | @as("Initializing") #Initializing
]
type labelingJobName = string
type labelingJobArn = string
type labelingJobAlgorithmSpecificationArn = string
type labelCounter = int
type labelAttributeName = string
type kmsKeyId = string
type key = string
type kernelName = string
type kernelDisplayName = string
type jsonPath = string
type jsonContentType = string
type joinSource = [@as("None") #None | @as("Input") #Input]
type jobReferenceCodeContains = string
type jobReferenceCode = string
type jobDurationInSeconds = int
type iotRoleAlias = string
type invocationsTimeoutInSeconds = int
type invocationsMaxRetries = int
type integerValue = int
type integer_ = int
type instanceType = [
  | @as("ml.r5.24xlarge") #Ml_R5_24xlarge
  | @as("ml.r5.16xlarge") #Ml_R5_16xlarge
  | @as("ml.r5.12xlarge") #Ml_R5_12xlarge
  | @as("ml.r5.8xlarge") #Ml_R5_8xlarge
  | @as("ml.r5.4xlarge") #Ml_R5_4xlarge
  | @as("ml.r5.2xlarge") #Ml_R5_2xlarge
  | @as("ml.r5.xlarge") #Ml_R5_Xlarge
  | @as("ml.r5.large") #Ml_R5_Large
  | @as("ml.g4dn.16xlarge") #Ml_G4dn_16xlarge
  | @as("ml.g4dn.12xlarge") #Ml_G4dn_12xlarge
  | @as("ml.g4dn.8xlarge") #Ml_G4dn_8xlarge
  | @as("ml.g4dn.4xlarge") #Ml_G4dn_4xlarge
  | @as("ml.g4dn.2xlarge") #Ml_G4dn_2xlarge
  | @as("ml.g4dn.xlarge") #Ml_G4dn_Xlarge
  | @as("ml.p3dn.24xlarge") #Ml_P3dn_24xlarge
  | @as("ml.p3.16xlarge") #Ml_P3_16xlarge
  | @as("ml.p3.8xlarge") #Ml_P3_8xlarge
  | @as("ml.p3.2xlarge") #Ml_P3_2xlarge
  | @as("ml.p2.16xlarge") #Ml_P2_16xlarge
  | @as("ml.p2.8xlarge") #Ml_P2_8xlarge
  | @as("ml.p2.xlarge") #Ml_P2_Xlarge
  | @as("ml.c5d.18xlarge") #Ml_C5d_18xlarge
  | @as("ml.c5d.9xlarge") #Ml_C5d_9xlarge
  | @as("ml.c5d.4xlarge") #Ml_C5d_4xlarge
  | @as("ml.c5d.2xlarge") #Ml_C5d_2xlarge
  | @as("ml.c5d.xlarge") #Ml_C5d_Xlarge
  | @as("ml.c5.18xlarge") #Ml_C5_18xlarge
  | @as("ml.c5.9xlarge") #Ml_C5_9xlarge
  | @as("ml.c5.4xlarge") #Ml_C5_4xlarge
  | @as("ml.c5.2xlarge") #Ml_C5_2xlarge
  | @as("ml.c5.xlarge") #Ml_C5_Xlarge
  | @as("ml.c4.8xlarge") #Ml_C4_8xlarge
  | @as("ml.c4.4xlarge") #Ml_C4_4xlarge
  | @as("ml.c4.2xlarge") #Ml_C4_2xlarge
  | @as("ml.c4.xlarge") #Ml_C4_Xlarge
  | @as("ml.m5d.24xlarge") #Ml_M5d_24xlarge
  | @as("ml.m5d.16xlarge") #Ml_M5d_16xlarge
  | @as("ml.m5d.12xlarge") #Ml_M5d_12xlarge
  | @as("ml.m5d.8xlarge") #Ml_M5d_8xlarge
  | @as("ml.m5d.4xlarge") #Ml_M5d_4xlarge
  | @as("ml.m5d.2xlarge") #Ml_M5d_2xlarge
  | @as("ml.m5d.xlarge") #Ml_M5d_Xlarge
  | @as("ml.m5d.large") #Ml_M5d_Large
  | @as("ml.m5.24xlarge") #Ml_M5_24xlarge
  | @as("ml.m5.12xlarge") #Ml_M5_12xlarge
  | @as("ml.m5.4xlarge") #Ml_M5_4xlarge
  | @as("ml.m5.2xlarge") #Ml_M5_2xlarge
  | @as("ml.m5.xlarge") #Ml_M5_Xlarge
  | @as("ml.m4.16xlarge") #Ml_M4_16xlarge
  | @as("ml.m4.10xlarge") #Ml_M4_10xlarge
  | @as("ml.m4.4xlarge") #Ml_M4_4xlarge
  | @as("ml.m4.2xlarge") #Ml_M4_2xlarge
  | @as("ml.m4.xlarge") #Ml_M4_Xlarge
  | @as("ml.t3.2xlarge") #Ml_T3_2xlarge
  | @as("ml.t3.xlarge") #Ml_T3_Xlarge
  | @as("ml.t3.large") #Ml_T3_Large
  | @as("ml.t3.medium") #Ml_T3_Medium
  | @as("ml.t2.2xlarge") #Ml_T2_2xlarge
  | @as("ml.t2.xlarge") #Ml_T2_Xlarge
  | @as("ml.t2.large") #Ml_T2_Large
  | @as("ml.t2.medium") #Ml_T2_Medium
]
type inputMode = [@as("File") #File | @as("Pipe") #Pipe]
type initialTaskCount = int
type initialNumberOfUsers = int
type inferenceSpecificationName = string
type inferenceImage = string
type inferenceExecutionMode = [@as("Direct") #Direct | @as("Serial") #Serial]
type imageVersionStatus = [
  | @as("DELETE_FAILED") #DELETE_FAILED
  | @as("DELETING") #DELETING
  | @as("CREATE_FAILED") #CREATE_FAILED
  | @as("CREATED") #CREATED
  | @as("CREATING") #CREATING
]
type imageVersionSortOrder = [@as("DESCENDING") #DESCENDING | @as("ASCENDING") #ASCENDING]
type imageVersionSortBy = [
  | @as("VERSION") #VERSION
  | @as("LAST_MODIFIED_TIME") #LAST_MODIFIED_TIME
  | @as("CREATION_TIME") #CREATION_TIME
]
type imageVersionNumber = int
type imageVersionArn = string
type imageUri = string
type imageStatus = [
  | @as("DELETE_FAILED") #DELETE_FAILED
  | @as("DELETING") #DELETING
  | @as("UPDATE_FAILED") #UPDATE_FAILED
  | @as("UPDATING") #UPDATING
  | @as("CREATE_FAILED") #CREATE_FAILED
  | @as("CREATED") #CREATED
  | @as("CREATING") #CREATING
]
type imageSortOrder = [@as("DESCENDING") #DESCENDING | @as("ASCENDING") #ASCENDING]
type imageSortBy = [
  | @as("IMAGE_NAME") #IMAGE_NAME
  | @as("LAST_MODIFIED_TIME") #LAST_MODIFIED_TIME
  | @as("CREATION_TIME") #CREATION_TIME
]
type imageNameContains = string
type imageName = string
type imageDisplayName = string
type imageDigest = string
type imageDescription = string
type imageDeleteProperty = string
type imageContainerImage = string
type imageBaseImage = string
type imageArn = string
type idempotencyToken = string
type hyperParameterValue = string
type hyperParameterTuningJobWarmStartType = [
  | @as("TransferLearning") #TransferLearning
  | @as("IdenticalDataAndAlgorithm") #IdenticalDataAndAlgorithm
]
@ocaml.doc("<p>The strategy hyperparameter tuning uses to
            find
            the best combination of hyperparameters for your model. Currently,
            the only
            supported
            value is <code>Bayesian</code>.</p>")
type hyperParameterTuningJobStrategyType = [@as("Random") #Random | @as("Bayesian") #Bayesian]
type hyperParameterTuningJobStatus = [
  | @as("Stopping") #Stopping
  | @as("Stopped") #Stopped
  | @as("Failed") #Failed
  | @as("InProgress") #InProgress
  | @as("Completed") #Completed
]
type hyperParameterTuningJobSortByOptions = [
  | @as("CreationTime") #CreationTime
  | @as("Status") #Status
  | @as("Name") #Name
]
type hyperParameterTuningJobObjectiveType = [@as("Minimize") #Minimize | @as("Maximize") #Maximize]
type hyperParameterTuningJobName = string
type hyperParameterTuningJobArn = string
type hyperParameterTrainingJobDefinitionName = string
type hyperParameterScalingType = [
  | @as("ReverseLogarithmic") #ReverseLogarithmic
  | @as("Logarithmic") #Logarithmic
  | @as("Linear") #Linear
  | @as("Auto") #Auto
]
type hyperParameterKey = string
type humanTaskUiStatus = [@as("Deleting") #Deleting | @as("Active") #Active]
type humanTaskUiName = string
type humanTaskUiArn = string
type group = string
type gitConfigUrl = string
type generateCandidateDefinitionsOnly = bool
type frameworkVersion = string
type framework = [
  | @as("SKLEARN") #SKLEARN
  | @as("DARKNET") #DARKNET
  | @as("TFLITE") #TFLITE
  | @as("XGBOOST") #XGBOOST
  | @as("PYTORCH") #PYTORCH
  | @as("ONNX") #ONNX
  | @as("MXNET") #MXNET
  | @as("KERAS") #KERAS
  | @as("TENSORFLOW") #TENSORFLOW
]
type flowDefinitionTaskTitle = string
type flowDefinitionTaskTimeLimitInSeconds = int
type flowDefinitionTaskKeyword = string
type flowDefinitionTaskDescription = string
type flowDefinitionTaskCount = int
type flowDefinitionTaskAvailabilityLifetimeInSeconds = int
type flowDefinitionStatus = [
  | @as("Deleting") #Deleting
  | @as("Failed") #Failed
  | @as("Active") #Active
  | @as("Initializing") #Initializing
]
type flowDefinitionName = string
type flowDefinitionArn = string
type float_ = float
type filterValue = string
type fileSystemType = [@as("FSxLustre") #FSxLustre | @as("EFS") #EFS]
type fileSystemId = string
type fileSystemAccessMode = [@as("ro") #Ro | @as("rw") #Rw]
type featureType = [
  | @as("String") #String
  | @as("Fractional") #Fractional
  | @as("Integral") #Integral
]
type featureName = string
type featureGroupStatus = [
  | @as("DeleteFailed") #DeleteFailed
  | @as("Deleting") #Deleting
  | @as("CreateFailed") #CreateFailed
  | @as("Created") #Created
  | @as("Creating") #Creating
]
type featureGroupSortOrder = [@as("Descending") #Descending | @as("Ascending") #Ascending]
type featureGroupSortBy = [
  | @as("CreationTime") #CreationTime
  | @as("OfflineStoreStatus") #OfflineStoreStatus
  | @as("FeatureGroupStatus") #FeatureGroupStatus
  | @as("Name") #Name
]
type featureGroupNameContains = string
type featureGroupName = string
type featureGroupMaxResults = int
type featureGroupArn = string
type failureReason = string
type explainabilityLocation = string
type expiresInSeconds = int
type experimentSourceArn = string
type experimentEntityNameOrArn = string
type experimentEntityName = string
type experimentDescription = string
type experimentArn = string
type exitMessage = string
type executionStatus = [
  | @as("Stopped") #Stopped
  | @as("Stopping") #Stopping
  | @as("Failed") #Failed
  | @as("InProgress") #InProgress
  | @as("CompletedWithViolations") #CompletedWithViolations
  | @as("Completed") #Completed
  | @as("Pending") #Pending
]
type environmentValue = string
type environmentKey = string
type entityName = string
type entityDescription = string
type endpointStatus = [
  | @as("Failed") #Failed
  | @as("Deleting") #Deleting
  | @as("InService") #InService
  | @as("RollingBack") #RollingBack
  | @as("SystemUpdating") #SystemUpdating
  | @as("Updating") #Updating
  | @as("Creating") #Creating
  | @as("OutOfService") #OutOfService
]
type endpointSortKey = [
  | @as("Status") #Status
  | @as("CreationTime") #CreationTime
  | @as("Name") #Name
]
type endpointNameContains = string
type endpointName = string
type endpointConfigSortKey = [@as("CreationTime") #CreationTime | @as("Name") #Name]
type endpointConfigNameContains = string
type endpointConfigName = string
type endpointConfigArn = string
type endpointArn = string
type enableIotRoleAlias = bool
type enableCapture = bool
type efsUid = string
type edgeVersion = string
type edgePresetDeploymentType = [@as("GreengrassV2Component") #GreengrassV2Component]
type edgePresetDeploymentStatus = [@as("FAILED") #FAILED | @as("COMPLETED") #COMPLETED]
type edgePresetDeploymentArtifact = string
type edgePackagingJobStatus = [
  | @as("STOPPED") #STOPPED
  | @as("STOPPING") #STOPPING
  | @as("FAILED") #FAILED
  | @as("COMPLETED") #COMPLETED
  | @as("INPROGRESS") #INPROGRESS
  | @as("STARTING") #STARTING
]
type edgePackagingJobArn = string
type doubleParameterValue = float
type domainStatus = [
  | @as("Delete_Failed") #Delete_Failed
  | @as("Update_Failed") #Update_Failed
  | @as("Updating") #Updating
  | @as("Pending") #Pending
  | @as("InService") #InService
  | @as("Failed") #Failed
  | @as("Deleting") #Deleting
]
type domainName = string
type domainId = string
type domainArn = string
type dollars = int
type disassociateNotebookInstanceLifecycleConfig = bool
type disassociateNotebookInstanceAcceleratorTypes = bool
type disassociateDefaultCodeRepository = bool
type disassociateAdditionalCodeRepositories = bool
type disableProfiler = bool
type directoryPath = string
type direction = [
  | @as("Descendants") #Descendants
  | @as("Ascendants") #Ascendants
  | @as("Both") #Both
]
type directInternetAccess = [@as("Disabled") #Disabled | @as("Enabled") #Enabled]
type deviceName = string
type deviceFleetDescription = string
type deviceFleetArn = string
type deviceDescription = string
type deviceArn = string
type detailedModelPackageStatus = [
  | @as("Failed") #Failed
  | @as("Completed") #Completed
  | @as("InProgress") #InProgress
  | @as("NotStarted") #NotStarted
]
type detailedAlgorithmStatus = [
  | @as("Failed") #Failed
  | @as("Completed") #Completed
  | @as("InProgress") #InProgress
  | @as("NotStarted") #NotStarted
]
type destinationS3Uri = string
type description = string
type defaultUid = int
type defaultGid = int
type database = string
type dataInputConfig = string
type dataExplorationNotebookLocation = string
type dataDistributionType = [
  | @as("ShardedByS3Key") #ShardedByS3Key
  | @as("FullyReplicated") #FullyReplicated
]
type customerMetadataValue = string
type customerMetadataKey = string
type csvContentType = string
type creationTime = Js.Date.t
type contextArn = string
type contentType = string
type contentDigest = string
type contentClassifier = [
  | @as("FreeOfAdultContent") #FreeOfAdultContent
  | @as("FreeOfPersonallyIdentifiableInformation") #FreeOfPersonallyIdentifiableInformation
]
type containerMode = [@as("MultiModel") #MultiModel | @as("SingleModel") #SingleModel]
type containerImage = string
type containerHostname = string
type containerEntrypointString = string
type containerArgument = string
type configValue = string
type configKey = string
type conditionOutcome = [@as("False") #False | @as("True") #True]
type compressionType = [@as("Gzip") #Gzip | @as("None") #None]
type compilerOptions = string
type compilationJobStatus = [
  | @as("STOPPED") #STOPPED
  | @as("STOPPING") #STOPPING
  | @as("STARTING") #STARTING
  | @as("FAILED") #FAILED
  | @as("COMPLETED") #COMPLETED
  | @as("INPROGRESS") #INPROGRESS
]
type compilationJobArn = string
type collectionName = string
type cognitoUserPool = string
type cognitoUserGroup = string
type codeRepositorySortOrder = [@as("Descending") #Descending | @as("Ascending") #Ascending]
type codeRepositorySortBy = [
  | @as("LastModifiedTime") #LastModifiedTime
  | @as("CreationTime") #CreationTime
  | @as("Name") #Name
]
type codeRepositoryNameOrUrl = string
type codeRepositoryNameContains = string
type codeRepositoryContains = string
type codeRepositoryArn = string
type clientToken = string
type clientSecret = string
type clientId = string
type cidr = string
type channelName = string
type certifyForMarketplace = bool
type cents = int
type catalog = string
type captureStatus = [@as("Stopped") #Stopped | @as("Started") #Started]
type captureMode = [@as("Output") #Output | @as("Input") #Input]
type capacitySizeValue = int
type capacitySizeType = [
  | @as("CAPACITY_PERCENT") #CAPACITY_PERCENT
  | @as("INSTANCE_COUNT") #INSTANCE_COUNT
]
type candidateStepType = [
  | @as("AWS::SageMaker::ProcessingJob") #AWS_SageMaker_ProcessingJob
  | @as("AWS::SageMaker::TransformJob") #AWS_SageMaker_TransformJob
  | @as("AWS::SageMaker::TrainingJob") #AWS_SageMaker_TrainingJob
]
type candidateStepName = string
type candidateStepArn = string
type candidateStatus = [
  | @as("Stopping") #Stopping
  | @as("Stopped") #Stopped
  | @as("Failed") #Failed
  | @as("InProgress") #InProgress
  | @as("Completed") #Completed
]
type candidateSortBy = [
  | @as("FinalObjectiveMetricValue") #FinalObjectiveMetricValue
  | @as("Status") #Status
  | @as("CreationTime") #CreationTime
]
type candidateName = string
type candidateDefinitionNotebookLocation = string
type callbackToken = string
type bucketName = string
type branch = string
type booleanOperator = [@as("Or") #Or | @as("And") #And]
type boolean_ = bool
type blockedReason = string
type billableTimeInSeconds = int
type batchStrategy = [@as("SingleRecord") #SingleRecord | @as("MultiRecord") #MultiRecord]
type awsManagedHumanLoopRequestSource = [
  | @as("AWS/Textract/AnalyzeDocument/Forms/V1") #AWS_Textract_AnalyzeDocument_Forms_V1
  | @as("AWS/Rekognition/DetectModerationLabels/Image/V3")
  #AWS_Rekognition_DetectModerationLabels_Image_V3
]
type autoMLSortOrder = [@as("Descending") #Descending | @as("Ascending") #Ascending]
type autoMLSortBy = [@as("Status") #Status | @as("CreationTime") #CreationTime | @as("Name") #Name]
type autoMLS3DataType = [@as("S3Prefix") #S3Prefix | @as("ManifestFile") #ManifestFile]
type autoMLNameContains = string
type autoMLMetricEnum = [
  | @as("AUC") #AUC
  | @as("F1macro") #F1macro
  | @as("F1") #F1
  | @as("MSE") #MSE
  | @as("Accuracy") #Accuracy
]
type autoMLMaxResults = int
type autoMLJobStatus = [
  | @as("Stopping") #Stopping
  | @as("Stopped") #Stopped
  | @as("Failed") #Failed
  | @as("InProgress") #InProgress
  | @as("Completed") #Completed
]
type autoMLJobSecondaryStatus = [
  | @as("ModelInsightsError") #ModelInsightsError
  | @as("GeneratingModelInsightsReport") #GeneratingModelInsightsReport
  | @as("ModelDeploymentError") #ModelDeploymentError
  | @as("DeployingModel") #DeployingModel
  | @as("ExplainabilityError") #ExplainabilityError
  | @as("Completed") #Completed
  | @as("GeneratingExplainabilityReport") #GeneratingExplainabilityReport
  | @as("CandidateDefinitionsGenerated") #CandidateDefinitionsGenerated
  | @as("Stopping") #Stopping
  | @as("MaxAutoMLJobRuntimeReached") #MaxAutoMLJobRuntimeReached
  | @as("Stopped") #Stopped
  | @as("Failed") #Failed
  | @as("MaxCandidatesReached") #MaxCandidatesReached
  | @as("ModelTuning") #ModelTuning
  | @as("FeatureEngineering") #FeatureEngineering
  | @as("AnalyzingData") #AnalyzingData
  | @as("Starting") #Starting
]
type autoMLJobObjectiveType = [@as("Minimize") #Minimize | @as("Maximize") #Maximize]
type autoMLJobName = string
type autoMLJobArn = string
type autoMLFailureReason = string
type autoGenerateEndpointName = bool
type authMode = [@as("IAM") #IAM | @as("SSO") #SSO]
type attributeName = string
@ocaml.doc("<p>The name of the workgroup in which the Athena query is being started.</p>")
type athenaWorkGroup = string
@ocaml.doc("<p>The data storage format for Athena query results.</p>")
type athenaResultFormat = [
  | @as("TEXTFILE") #TEXTFILE
  | @as("JSON") #JSON
  | @as("AVRO") #AVRO
  | @as("ORC") #ORC
  | @as("PARQUET") #PARQUET
]
@ocaml.doc("<p>The compression used for Athena query results.</p>")
type athenaResultCompressionType = [@as("ZLIB") #ZLIB | @as("SNAPPY") #SNAPPY | @as("GZIP") #GZIP]
@ocaml.doc("<p>The SQL query statements, to be executed.</p>") type athenaQueryString = string
@ocaml.doc("<p>The name of the database used in the Athena query execution.</p>")
type athenaDatabase = string
@ocaml.doc("<p>The name of the data catalog used in Athena query execution.</p>")
type athenaCatalog = string
type associationEntityArn = string
type associationEdgeType = [
  | @as("Produced") #Produced
  | @as("DerivedFrom") #DerivedFrom
  | @as("AssociatedWith") #AssociatedWith
  | @as("ContributedTo") #ContributedTo
]
type assemblyType = [@as("Line") #Line | @as("None") #None]
type artifactSourceIdType = [
  | @as("Custom") #Custom
  | @as("S3Version") #S3Version
  | @as("S3ETag") #S3ETag
  | @as("MD5Hash") #MD5Hash
]
type artifactDigest = string
type artifactArn = string
type arnOrName = string
type approvalDescription = string
type appType = [
  | @as("RSessionGateway") #RSessionGateway
  | @as("RStudioServerPro") #RStudioServerPro
  | @as("TensorBoard") #TensorBoard
  | @as("KernelGateway") #KernelGateway
  | @as("JupyterServer") #JupyterServer
]
type appStatus = [
  | @as("Pending") #Pending
  | @as("InService") #InService
  | @as("Failed") #Failed
  | @as("Deleting") #Deleting
  | @as("Deleted") #Deleted
]
type appSortKey = [@as("CreationTime") #CreationTime]
type appSecurityGroupManagement = [@as("Customer") #Customer | @as("Service") #Service]
type appNetworkAccessType = [
  | @as("VpcOnly") #VpcOnly
  | @as("PublicInternetOnly") #PublicInternetOnly
]
type appName = string
type appManaged = bool
type appInstanceType = [
  | @as("ml.r5.24xlarge") #Ml_R5_24xlarge
  | @as("ml.r5.16xlarge") #Ml_R5_16xlarge
  | @as("ml.r5.12xlarge") #Ml_R5_12xlarge
  | @as("ml.r5.8xlarge") #Ml_R5_8xlarge
  | @as("ml.r5.4xlarge") #Ml_R5_4xlarge
  | @as("ml.r5.2xlarge") #Ml_R5_2xlarge
  | @as("ml.r5.xlarge") #Ml_R5_Xlarge
  | @as("ml.r5.large") #Ml_R5_Large
  | @as("ml.g4dn.16xlarge") #Ml_G4dn_16xlarge
  | @as("ml.g4dn.12xlarge") #Ml_G4dn_12xlarge
  | @as("ml.g4dn.8xlarge") #Ml_G4dn_8xlarge
  | @as("ml.g4dn.4xlarge") #Ml_G4dn_4xlarge
  | @as("ml.g4dn.2xlarge") #Ml_G4dn_2xlarge
  | @as("ml.g4dn.xlarge") #Ml_G4dn_Xlarge
  | @as("ml.p3dn.24xlarge") #Ml_P3dn_24xlarge
  | @as("ml.p3.16xlarge") #Ml_P3_16xlarge
  | @as("ml.p3.8xlarge") #Ml_P3_8xlarge
  | @as("ml.p3.2xlarge") #Ml_P3_2xlarge
  | @as("ml.c5.24xlarge") #Ml_C5_24xlarge
  | @as("ml.c5.18xlarge") #Ml_C5_18xlarge
  | @as("ml.c5.12xlarge") #Ml_C5_12xlarge
  | @as("ml.c5.9xlarge") #Ml_C5_9xlarge
  | @as("ml.c5.4xlarge") #Ml_C5_4xlarge
  | @as("ml.c5.2xlarge") #Ml_C5_2xlarge
  | @as("ml.c5.xlarge") #Ml_C5_Xlarge
  | @as("ml.c5.large") #Ml_C5_Large
  | @as("ml.m5d.24xlarge") #Ml_M5d_24xlarge
  | @as("ml.m5d.16xlarge") #Ml_M5d_16xlarge
  | @as("ml.m5d.12xlarge") #Ml_M5d_12xlarge
  | @as("ml.m5d.8xlarge") #Ml_M5d_8xlarge
  | @as("ml.m5d.4xlarge") #Ml_M5d_4xlarge
  | @as("ml.m5d.2xlarge") #Ml_M5d_2xlarge
  | @as("ml.m5d.xlarge") #Ml_M5d_Xlarge
  | @as("ml.m5d.large") #Ml_M5d_Large
  | @as("ml.m5.24xlarge") #Ml_M5_24xlarge
  | @as("ml.m5.16xlarge") #Ml_M5_16xlarge
  | @as("ml.m5.12xlarge") #Ml_M5_12xlarge
  | @as("ml.m5.8xlarge") #Ml_M5_8xlarge
  | @as("ml.m5.4xlarge") #Ml_M5_4xlarge
  | @as("ml.m5.2xlarge") #Ml_M5_2xlarge
  | @as("ml.m5.xlarge") #Ml_M5_Xlarge
  | @as("ml.m5.large") #Ml_M5_Large
  | @as("ml.t3.2xlarge") #Ml_T3_2xlarge
  | @as("ml.t3.xlarge") #Ml_T3_Xlarge
  | @as("ml.t3.large") #Ml_T3_Large
  | @as("ml.t3.medium") #Ml_T3_Medium
  | @as("ml.t3.small") #Ml_T3_Small
  | @as("ml.t3.micro") #Ml_T3_Micro
  | @as("system") #System
]
type appImageConfigSortKey = [
  | @as("Name") #Name
  | @as("LastModifiedTime") #LastModifiedTime
  | @as("CreationTime") #CreationTime
]
type appImageConfigName = string
type appImageConfigArn = string
type appArn = string
type algorithmStatus = [
  | @as("Deleting") #Deleting
  | @as("Failed") #Failed
  | @as("Completed") #Completed
  | @as("InProgress") #InProgress
  | @as("Pending") #Pending
]
type algorithmSortBy = [@as("CreationTime") #CreationTime | @as("Name") #Name]
type algorithmImage = string
type algorithmArn = string
type alarmName = string
type actionStatus = [
  | @as("Stopped") #Stopped
  | @as("Stopping") #Stopping
  | @as("Failed") #Failed
  | @as("Completed") #Completed
  | @as("InProgress") #InProgress
  | @as("Unknown") #Unknown
]
type actionArn = string
type accountId = string
type accept = string
type vpcSecurityGroupIds = array<securityGroupId>
@ocaml.doc("<p>A lineage entity connected to the starting entity(ies).</p>")
type vertex = {
  @ocaml.doc("<p>The type of resource of the lineage entity.</p>") @as("LineageType")
  lineageType: option<lineageType>,
  @ocaml.doc("<p>The type of the lineage entity resource. For example: <code>DataSet</code>, <code>Model</code>, <code>Endpoint</code>, 
         etc...</p>")
  @as("Type")
  type_: option<string40>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the lineage entity resource.</p>") @as("Arn")
  arn: option<associationEntityArn>,
}
@ocaml.doc("<p>Specifies a production variant property type for an Endpoint.</p>
        <p>If you are updating an endpoint with the <a>UpdateEndpointInput$RetainAllVariantProperties</a> option set to
                <code>true</code>, the <code>VariantProperty</code> objects listed in <a>UpdateEndpointInput$ExcludeRetainedVariantProperties</a> override the
            existing variant properties of the endpoint.</p>")
type variantProperty = {
  @ocaml.doc("<p>The type of variant property. The supported values are:</p>
        <ul>
            <li>
                <p>
                  <code>DesiredInstanceCount</code>: Overrides the existing variant instance
                    counts using the <a>ProductionVariant$InitialInstanceCount</a> values
                    in the <a>CreateEndpointConfigInput$ProductionVariants</a>.</p>
            </li>
            <li>
                <p>
                  <code>DesiredWeight</code>: Overrides the existing variant weights using the
                        <a>ProductionVariant$InitialVariantWeight</a> values in the <a>CreateEndpointConfigInput$ProductionVariants</a>.</p>
            </li>
            <li>
                <p>
                  <code>DataCaptureConfig</code>: (Not currently supported.)</p>
            </li>
         </ul>")
  @as("VariantPropertyType")
  variantPropertyType: variantPropertyType,
}
@ocaml.doc("<p>The user profile details.</p>")
type userProfileDetails = {
  @ocaml.doc("<p>The last modified time.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<lastModifiedTime>,
  @ocaml.doc("<p>The creation time.</p>") @as("CreationTime") creationTime: option<creationTime>,
  @ocaml.doc("<p>The status.</p>") @as("Status") status: option<userProfileStatus>,
  @ocaml.doc("<p>The user profile name.</p>") @as("UserProfileName")
  userProfileName: option<userProfileName>,
  @ocaml.doc("<p>The domain ID.</p>") @as("DomainId") domainId: option<domainId>,
}
@ocaml.doc("<p>Information about the user who created or modified an experiment, trial, trial
      component, lineage group, or project.</p>")
type userContext = {
  @ocaml.doc("<p>The domain associated with the user.</p>") @as("DomainId")
  domainId: option<string_>,
  @ocaml.doc("<p>The name of the user's profile.</p>") @as("UserProfileName")
  userProfileName: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the user's profile.</p>") @as("UserProfileArn")
  userProfileArn: option<string_>,
}
@ocaml.doc("<p>Container for user interface template information.</p>")
type uiTemplateInfo = {
  @ocaml.doc("<p>The SHA-256 digest of the contents of the template.</p>") @as("ContentSha256")
  contentSha256: option<templateContentSha256>,
  @ocaml.doc("<p>The URL for the user interface template.</p>") @as("Url") url: option<templateUrl>,
}
@ocaml.doc("<p>The Liquid template for the worker user interface.</p>")
type uiTemplate = {
  @ocaml.doc("<p>The content of the Liquid template for the worker user interface.</p>")
  @as("Content")
  content: templateContent,
}
@ocaml.doc("<p>Provided configuration information for the worker UI for a labeling job. Provide
            either <code>HumanTaskUiArn</code> or <code>UiTemplateS3Uri</code>.</p>
        <p>For named entity recognition, 3D point cloud and video frame labeling jobs, use
                <code>HumanTaskUiArn</code>.</p>
        <p>For all other Ground Truth built-in task types and custom task types, use
                <code>UiTemplateS3Uri</code> to specify the location of a worker task template in
            Amazon S3.</p>")
type uiConfig = {
  @ocaml.doc("<p>The ARN of the worker task template used to render the worker UI and tools for
            labeling job tasks.</p>
        <p>Use this parameter when you are creating a labeling job for named entity recognition,
            3D point cloud and video frame labeling jobs. Use your labeling job task type to select
            one of the following ARNs and use it with this parameter when you create a labeling job.
            Replace <code>aws-region</code> with the Amazon Web Services Region you are creating your labeling job
            in. For example, replace <code>aws-region</code> with <code>us-west-1</code> if you
            create a labeling job in US West (N. California).</p>
        <p>
            <b>Named Entity Recognition</b>
         </p>
        <p>Use the following <code>HumanTaskUiArn</code> for named entity recognition labeling
            jobs:</p>
        <p>
            <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/NamedEntityRecognition</code>
         </p>
        
        <p>
            <b>3D Point Cloud HumanTaskUiArns</b>
         </p>
        
        <p>Use this <code>HumanTaskUiArn</code> for 3D point cloud object detection and 3D point
            cloud object detection adjustment labeling jobs. </p>
        <ul>
            <li>
                <p>
                    <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudObjectDetection</code>
                </p>
            </li>
         </ul>
        
        <p> Use this <code>HumanTaskUiArn</code> for 3D point cloud object tracking and 3D point
            cloud object tracking adjustment labeling jobs. </p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudObjectTracking</code>
                </p>
            </li>
         </ul>
        
        <p> Use this <code>HumanTaskUiArn</code> for 3D point cloud semantic segmentation and 3D
            point cloud semantic segmentation adjustment labeling jobs.</p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudSemanticSegmentation</code>
                </p>
            </li>
         </ul>
        
        <p>
            <b>Video Frame HumanTaskUiArns</b>
         </p>
        
        <p>Use this <code>HumanTaskUiArn</code> for video frame object detection and video frame
            object detection adjustment labeling jobs. </p>
        <ul>
            <li>
                <p>
                    <code>arn:aws:sagemaker:region:394669845002:human-task-ui/VideoObjectDetection</code>
                </p>
            </li>
         </ul>
        
        <p> Use this <code>HumanTaskUiArn</code> for video frame object tracking and video frame
            object tracking adjustment labeling jobs. </p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:sagemaker:aws-region:394669845002:human-task-ui/VideoObjectTracking</code>
                </p>
            </li>
         </ul>")
  @as("HumanTaskUiArn")
  humanTaskUiArn: option<humanTaskUiArn>,
  @ocaml.doc("<p>The Amazon S3 bucket location of the UI template, or worker task template. This is the
            template used to render the worker UI and tools for labeling job tasks. For more
            information about the contents of a UI template, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates-step2.html\"> Creating Your Custom
                Labeling Task Template</a>.</p>")
  @as("UiTemplateS3Uri")
  uiTemplateS3Uri: option<s3Uri>,
}
@ocaml.doc("<p>Represents an amount of money in United States dollars.</p>")
type usd = {
  @ocaml.doc("<p>Fractions of a cent, in tenths.</p>") @as("TenthFractionsOfACent")
  tenthFractionsOfACent: option<tenthFractionsOfACent>,
  @ocaml.doc("<p>The fractional portion, in cents, of the amount. </p>") @as("Cents")
  cents: option<cents>,
  @ocaml.doc("<p>The whole number of dollars in the amount.</p>") @as("Dollars")
  dollars: option<dollars>,
}
@ocaml.doc("<p>Metadata for a tuning step.</p>")
type tuningJobStepMetaData = {
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the tuning job that was run by this step execution.</p>"
  )
  @as("Arn")
  arn: option<hyperParameterTuningJobArn>,
}
@ocaml.doc("<p>The job completion criteria.</p>")
type tuningJobCompletionCriteria = {
  @ocaml.doc("<p>The value of the objective metric.</p>") @as("TargetObjectiveMetricValue")
  targetObjectiveMetricValue: targetObjectiveMetricValue,
}
@ocaml.doc("<p>The source of the trial.</p>")
type trialSource = {
  @ocaml.doc("<p>The source job type.</p>") @as("SourceType") sourceType: option<sourceType>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the source.</p>") @as("SourceArn")
  sourceArn: trialSourceArn,
}
@ocaml.doc("<p>The status of the trial component.</p>")
type trialComponentStatus = {
  @ocaml.doc("<p>If the component failed, a message describing why.</p>") @as("Message")
  message: option<trialComponentStatusMessage>,
  @ocaml.doc("<p>The status of the trial component.</p>") @as("PrimaryStatus")
  primaryStatus: option<trialComponentPrimaryStatus>,
}
@ocaml.doc("<p>The Amazon Resource Name (ARN) and job type of the source of a trial component.</p>")
type trialComponentSource = {
  @ocaml.doc("<p>The source job type.</p>") @as("SourceType") sourceType: option<sourceType>,
  @ocaml.doc("<p>The source ARN.</p>") @as("SourceArn") sourceArn: trialComponentSourceArn,
}
@ocaml.doc("<p>The value of a hyperparameter. Only one of <code>NumberValue</code> or
        <code>StringValue</code> can be specified.</p>
         <p>This object is specified in the <a>CreateTrialComponent</a> request.</p>")
type trialComponentParameterValue = {
  @ocaml.doc("<p>The numeric value of a numeric hyperparameter. If you specify a value for this parameter,
      you can't specify the <code>StringValue</code> parameter.</p>")
  @as("NumberValue")
  numberValue: option<doubleParameterValue>,
  @ocaml.doc("<p>The string value of a categorical hyperparameter. If you specify a value for this
      parameter, you can't specify the <code>NumberValue</code> parameter.</p>")
  @as("StringValue")
  stringValue: option<stringParameterValue>,
}
module TrialComponentParameterValue = {
  type t = NumberValue(doubleParameterValue) | StringValue(stringParameterValue)
  exception TrialComponentParameterValueUnspecified
  let classify = value =>
    switch value {
    | {numberValue: Some(x)} => NumberValue(x)
    | {stringValue: Some(x)} => StringValue(x)
    | _ => raise(TrialComponentParameterValueUnspecified)
    }

  let make = value =>
    switch value {
    | NumberValue(x) => {numberValue: Some(x), stringValue: None}
    | StringValue(x) => {stringValue: Some(x), numberValue: None}
    }
}
@ocaml.doc("<p>A summary of the metrics of a trial component.</p>")
type trialComponentMetricSummary = {
  @ocaml.doc("<p>The standard deviation of the metric.</p>") @as("StdDev")
  stdDev: option<optionalDouble>,
  @ocaml.doc("<p>The average value of the metric.</p>") @as("Avg") avg: option<optionalDouble>,
  @ocaml.doc("<p>The number of samples used to generate the metric.</p>") @as("Count")
  count: option<optionalInteger>,
  @ocaml.doc("<p>The most recent value of the metric.</p>") @as("Last")
  last: option<optionalDouble>,
  @ocaml.doc("<p>The minimum value of the metric.</p>") @as("Min") min: option<optionalDouble>,
  @ocaml.doc("<p>The maximum value of the metric.</p>") @as("Max") max: option<optionalDouble>,
  @ocaml.doc("<p>When the metric was last updated.</p>") @as("TimeStamp")
  timeStamp: option<timestamp_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the source.</p>") @as("SourceArn")
  sourceArn: option<trialComponentSourceArn>,
  @ocaml.doc("<p>The name of the metric.</p>") @as("MetricName") metricName: option<metricName>,
}
@ocaml.doc("<p>Represents an input or output artifact of a trial component. You specify
        <code>TrialComponentArtifact</code> as part of the <code>InputArtifacts</code> and
        <code>OutputArtifacts</code> parameters in the <a>CreateTrialComponent</a>
      request.</p>
         <p>Examples of input artifacts are datasets, algorithms, hyperparameters, source code, and
      instance types. Examples of output artifacts are metrics, snapshots, logs, and images.</p>")
type trialComponentArtifact = {
  @ocaml.doc("<p>The location of the artifact.</p>") @as("Value")
  value: trialComponentArtifactValue,
  @ocaml.doc("<p>The media type of the artifact, which indicates the type of data in the artifact file. The
      media type consists of a <i>type</i> and a <i>subtype</i>
      concatenated with a slash (/) character, for example, text/csv, image/jpeg, and s3/uri. The
      type specifies the category of the media. The subtype specifies the kind of data.</p>")
  @as("MediaType")
  mediaType: option<mediaType>,
}
@ocaml.doc("<p>Describes the S3 data source.</p>")
type transformS3DataSource = {
  @ocaml.doc("<p>Depending on the value specified for the <code>S3DataType</code>, identifies either a
            key name prefix or a manifest. For example:</p>
        <ul>
            <li>
                <p> A key name prefix might look like this:
                        <code>s3://bucketname/exampleprefix</code>. </p>
            </li>
            <li>
                <p> A manifest might look like this:
                        <code>s3://bucketname/example.manifest</code>
                </p>
                <p> The manifest is an S3 object which is a JSON file with the following format: </p>
                <p>
                    <code>[ {\"prefix\": \"s3://customer_bucket/some/prefix/\"},</code>
                </p>
                <p>
                    <code>\"relative/path/to/custdata-1\",</code>
                </p>
                <p>
                    <code>\"relative/path/custdata-2\",</code>
                </p>
                <p>
                    <code>...</code>
                </p>
                <p>
                    <code>\"relative/path/custdata-N\"</code>
                </p>
                <p>
                    <code>]</code>
                </p>
                <p> The preceding JSON matches the following <code>S3Uris</code>: </p>
                <p>
                    <code>s3://customer_bucket/some/prefix/relative/path/to/custdata-1</code>
                </p>
                <p>
                    <code>s3://customer_bucket/some/prefix/relative/path/custdata-2</code>
                </p>
                <p>
                    <code>...</code>
                </p>
                <p>
                    <code>s3://customer_bucket/some/prefix/relative/path/custdata-N</code>
                </p>
                <p> The complete set of <code>S3Uris</code> in this manifest constitutes the
                    input data for the channel for this datasource. The object that each
                        <code>S3Uris</code> points to must be readable by the IAM role that Amazon SageMaker
                    uses to perform tasks on your behalf.</p>
            </li>
         </ul>")
  @as("S3Uri")
  s3Uri: s3Uri,
  @ocaml.doc("<p>If you choose <code>S3Prefix</code>, <code>S3Uri</code> identifies a key name prefix.
            Amazon SageMaker uses all objects with the specified key name prefix for batch transform. </p>
        <p>If you choose <code>ManifestFile</code>, <code>S3Uri</code> identifies an object that
            is a manifest file containing a list of object keys that you want Amazon SageMaker to use for batch
            transform. </p>
        <p>The following values are compatible: <code>ManifestFile</code>,
            <code>S3Prefix</code>
         </p>
        <p>The following value is not compatible: <code>AugmentedManifestFile</code>
         </p>")
  @as("S3DataType")
  s3DataType: s3DataType,
}
@ocaml.doc("<p>Describes the resources, including ML instance types and ML instance count, to use for
            transform job.</p>")
type transformResources = {
  @ocaml.doc("<p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt model data on the storage volume
            attached to the ML compute instance(s) that run the batch transform job.</p>
        <note>
            <p>Certain Nitro-based instances include local storage, dependent on the instance
                type. Local storage volumes are encrypted using a hardware module on the instance.
                You can't request a <code>VolumeKmsKeyId</code> when using an instance type with
                local storage.</p>
            <p>For a list of instance types that support local instance storage, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes\">Instance Store Volumes</a>.</p>
            <p>For more information about local instance storage encryption, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html\">SSD
                Instance Store Volumes</a>.</p>
        </note>
            <p>
            The <code>VolumeKmsKeyId</code> can be any of the following formats:</p>
        <ul>
            <li>
                <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
                </p>
            </li>
            <li>
                <p>Key ARN:
                        <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
                </p>
            </li>
            <li>
                <p>Alias name: <code>alias/ExampleAlias</code>
               </p>
            </li>
            <li>
                <p>Alias name ARN:
                        <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
               </p>
            </li>
         </ul>")
  @as("VolumeKmsKeyId")
  volumeKmsKeyId: option<kmsKeyId>,
  @ocaml.doc("<p>The number of
            ML
            compute instances to use in the transform job. For distributed
            transform jobs, specify a value greater than 1. The default value is
            <code>1</code>.</p>")
  @as("InstanceCount")
  instanceCount: transformInstanceCount,
  @ocaml.doc("<p>The ML compute instance type for the transform job. If you are using built-in
            algorithms to
            transform
            moderately sized datasets, we recommend using ml.m4.xlarge or
            <code>ml.m5.large</code>instance types.</p>")
  @as("InstanceType")
  instanceType: transformInstanceType,
}
@ocaml.doc("<p>Describes the results of a transform job.</p>")
type transformOutput = {
  @ocaml.doc("<p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using
            Amazon S3 server-side encryption. The <code>KmsKeyId</code> can be any of the following
            formats: </p>
        <ul>
            <li>
                <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
                </p>
            </li>
            <li>
                <p>Key ARN:
                        <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
                </p>
            </li>
            <li>
                <p>Alias name: <code>alias/ExampleAlias</code>
                </p>
            </li>
            <li>
                <p>Alias name ARN:
                        <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
                </p>
            </li>
         </ul>
        
        
        <p>If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your
            role's account. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\">KMS-Managed Encryption Keys</a> in the
                <i>Amazon Simple Storage Service
                Developer Guide.</i>
         </p>
        <p>The KMS key policy must grant permission to the IAM role that you specify in your
                <a>CreateModel</a> request. For more information, see <a href=\"http://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html\">Using
                    Key Policies in Amazon Web Services KMS</a> in the <i>Amazon Web Services Key Management Service Developer
                Guide</i>.</p>")
  @as("KmsKeyId")
  kmsKeyId: option<kmsKeyId>,
  @ocaml.doc("<p>Defines how to assemble the results of the transform job as a single S3 object. Choose
            a format that is most convenient to you. To concatenate the results in binary format,
            specify <code>None</code>. To add a newline character at the end of every transformed
            record, specify
            <code>Line</code>.</p>")
  @as("AssembleWith")
  assembleWith: option<assemblyType>,
  @ocaml.doc("<p>The MIME type used to specify the output data. Amazon SageMaker uses the MIME type with each http
            call to transfer data from the transform job.</p>")
  @as("Accept")
  accept: option<accept>,
  @ocaml.doc("<p>The Amazon S3 path where you want Amazon SageMaker to store the results of the transform job. For
            example, <code>s3://bucket-name/key-name-prefix</code>.</p>
        <p>For every S3 object used as input for the transform job, batch transform stores the
            transformed data with an .<code>out</code> suffix in a corresponding subfolder in the
            location in the output prefix. For example, for the input data stored at
                <code>s3://bucket-name/input-name-prefix/dataset01/data.csv</code>, batch transform
            stores the transformed data at
                <code>s3://bucket-name/output-name-prefix/input-name-prefix/data.csv.out</code>.
            Batch transform doesn't upload partially processed objects. For an input S3 object that
            contains multiple records, it creates an .<code>out</code> file only if the transform
            job succeeds on the entire file. When the input contains multiple S3 objects, the batch
            transform job processes the listed S3 objects and uploads only the output for
            successfully processed objects. If any object fails in the transform job batch transform
            marks the job as failed to prompt investigation.</p>")
  @as("S3OutputPath")
  s3OutputPath: s3Uri,
}
@ocaml.doc("<p>Provides a
            summary
            of a transform job. Multiple <code>TransformJobSummary</code> objects are returned as a
            list after in response to a <a>ListTransformJobs</a> call.</p>")
type transformJobSummary = {
  @ocaml.doc("<p>If the transform job failed,
            the
            reason it failed.</p>")
  @as("FailureReason")
  failureReason: option<failureReason>,
  @ocaml.doc("<p>The status of the transform job.</p>") @as("TransformJobStatus")
  transformJobStatus: transformJobStatus,
  @ocaml.doc("<p>Indicates when the transform job was last modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>Indicates when the transform
            job
            ends on compute instances. For successful jobs and stopped jobs, this
            is the exact time
            recorded
            after the results are uploaded. For failed jobs, this is when Amazon SageMaker
            detected that the job failed.</p>")
  @as("TransformEndTime")
  transformEndTime: option<timestamp_>,
  @ocaml.doc("<p>A timestamp that shows when the transform Job was created.</p>")
  @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the transform job.</p>") @as("TransformJobArn")
  transformJobArn: transformJobArn,
  @ocaml.doc("<p>The name of the transform job.</p>") @as("TransformJobName")
  transformJobName: transformJobName,
}
@ocaml.doc("<p>Metadata for a transform job step.</p>")
type transformJobStepMetadata = {
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the transform job that was run by this step execution.</p>"
  )
  @as("Arn")
  arn: option<transformJobArn>,
}
type transformInstanceTypes = array<transformInstanceType>
type transformEnvironmentMap = Js.Dict.t<transformEnvironmentValue>
@ocaml.doc("<p>Provides summary information about a training job.</p>")
type trainingJobSummary = {
  @ocaml.doc("<p>The status of the training job.</p>") @as("TrainingJobStatus")
  trainingJobStatus: trainingJobStatus,
  @ocaml.doc("<p> Timestamp when the training job was last modified. </p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>A timestamp that shows when the training job ended. This field is set only if the
            training job has one of the terminal statuses (<code>Completed</code>,
                <code>Failed</code>, or <code>Stopped</code>). </p>")
  @as("TrainingEndTime")
  trainingEndTime: option<timestamp_>,
  @ocaml.doc("<p>A timestamp that shows when the training job was created.</p>") @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the training job.</p>") @as("TrainingJobArn")
  trainingJobArn: trainingJobArn,
  @ocaml.doc("<p>The name of the training job that you want a summary for.</p>")
  @as("TrainingJobName")
  trainingJobName: trainingJobName,
}
@ocaml.doc("<p>Metadata for a training job step.</p>")
type trainingJobStepMetadata = {
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the training job that was run by this step execution.</p>"
  )
  @as("Arn")
  arn: option<trainingJobArn>,
}
@ocaml.doc("<p>The numbers of training jobs launched by a hyperparameter tuning job, categorized by
            status.</p>")
type trainingJobStatusCounters = {
  @ocaml.doc("<p>The number of training jobs launched by a hyperparameter tuning job that were
            manually
            stopped.</p>")
  @as("Stopped")
  stopped: option<trainingJobStatusCounter>,
  @ocaml.doc("<p>The number of training jobs that failed and can't be retried. A failed training job
            can't be retried if it failed because a client error occurred.</p>")
  @as("NonRetryableError")
  nonRetryableError: option<trainingJobStatusCounter>,
  @ocaml.doc("<p>The number of training jobs that failed, but can be retried. A failed training job can
            be retried only if it failed because an internal service error occurred.</p>")
  @as("RetryableError")
  retryableError: option<trainingJobStatusCounter>,
  @ocaml.doc("<p>The number of in-progress training jobs launched by a hyperparameter tuning
            job.</p>")
  @as("InProgress")
  inProgress: option<trainingJobStatusCounter>,
  @ocaml.doc("<p>The number of completed training jobs launched by the hyperparameter tuning
            job.</p>")
  @as("Completed")
  completed: option<trainingJobStatusCounter>,
}
type trainingInstanceTypes = array<trainingInstanceType>
type trainingEnvironmentMap = Js.Dict.t<trainingEnvironmentValue>
@ocaml.doc("<p>Configuration of storage locations for the Debugger TensorBoard output data.</p>")
type tensorBoardOutputConfig = {
  @ocaml.doc("<p>Path to Amazon S3 storage location for TensorBoard output.</p>")
  @as("S3OutputPath")
  s3OutputPath: s3Uri,
  @ocaml.doc("<p>Path to local storage location for tensorBoard output. Defaults to
                <code>/opt/ml/output/tensorboard</code>.</p>")
  @as("LocalPath")
  localPath: option<directoryPath>,
}
type taskKeywords = array<taskKeyword>
@ocaml.doc("<p>Contains information about a target platform that you want your model to run on, such
            as OS, architecture, and accelerators. It is an alternative of
            <code>TargetDevice</code>.</p>")
type targetPlatform = {
  @ocaml.doc("<p>Specifies a target platform accelerator (optional).</p>
        <ul>
            <li>
                <p>
                  <code>NVIDIA</code>: Nvidia graphics processing unit. It also requires
                    <code>gpu-code</code>, <code>trt-ver</code>, <code>cuda-ver</code> compiler
                    options</p>
            </li>
            <li>
                <p>
                  <code>MALI</code>: ARM Mali graphics processor</p>
            </li>
            <li>
                <p>
                  <code>INTEL_GRAPHICS</code>: Integrated Intel graphics</p>
            </li>
         </ul>")
  @as("Accelerator")
  accelerator: option<targetPlatformAccelerator>,
  @ocaml.doc("<p>Specifies a target platform architecture.</p>
        <ul>
            <li>
                <p>
                  <code>X86_64</code>: 64-bit version of the x86 instruction set.</p>
            </li>
            <li>
                <p>
                  <code>X86</code>: 32-bit version of the x86 instruction set.</p>
            </li>
            <li>
                <p>
                  <code>ARM64</code>: ARMv8 64-bit CPU.</p>
            </li>
            <li>
                <p>
                  <code>ARM_EABIHF</code>: ARMv7 32-bit, Hard Float.</p>
            </li>
            <li>
                <p>
                  <code>ARM_EABI</code>: ARMv7 32-bit, Soft Float. Used by Android 32-bit ARM
                    platform.</p>
            </li>
         </ul>")
  @as("Arch")
  arch: targetPlatformArch,
  @ocaml.doc("<p>Specifies a target platform OS.</p>
        <ul>
            <li>
                <p>
                  <code>LINUX</code>: Linux-based operating systems.</p>
            </li>
            <li>
                <p>
                  <code>ANDROID</code>: Android operating systems. Android API level can be
                    specified using the <code>ANDROID_PLATFORM</code> compiler option. For example,
                    <code>\"CompilerOptions\": {'ANDROID_PLATFORM': 28}</code>
               </p>
            </li>
         </ul>")
  @as("Os")
  os: targetPlatformOs,
}
type tagKeyList = array<tagKey>
@ocaml.doc("<p>A tag object that consists of a key and an optional value, used to manage metadata
            for SageMaker Amazon Web Services resources.</p>
        <p>You can add tags to notebook instances, training jobs, hyperparameter tuning jobs,
            batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and
            endpoints. For more information on adding tags to SageMaker resources, see <a>AddTags</a>.</p>
        <p>For more information on adding metadata to your Amazon Web Services resources with tagging, see
            <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
                resources</a>. For advice on best practices for managing Amazon Web Services resources with
            tagging, see <a href=\"https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf\">Tagging
                Best Practices: Implement an Effective Amazon Web Services Resource Tagging Strategy</a>.</p>")
type tag = {
  @ocaml.doc("<p>The tag value.</p>") @as("Value") value: tagValue,
  @ocaml.doc("<p>The tag key. Tag keys must be unique per resource.</p>") @as("Key") key: tagKey,
}
@ocaml.doc("<p>Describes a work team of a vendor that does the a labelling job.</p>")
type subscribedWorkteam = {
  @ocaml.doc("<p>Marketplace product listing ID.</p>") @as("ListingId") listingId: option<string_>,
  @ocaml.doc("<p>The description of the vendor from the Amazon Marketplace.</p>")
  @as("MarketplaceDescription")
  marketplaceDescription: option<string200>,
  @ocaml.doc("<p>The name of the vendor in the Amazon Marketplace.</p>") @as("SellerName")
  sellerName: option<string_>,
  @ocaml.doc("<p>The title of the service provided by the vendor in the Amazon Marketplace.</p>")
  @as("MarketplaceTitle")
  marketplaceTitle: option<string200>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the vendor that you have subscribed.</p>")
  @as("WorkteamArn")
  workteamArn: workteamArn,
}
type subnets = array<subnetId>
@ocaml.doc("<p>Details of the Studio Lifecycle Configuration.</p>")
type studioLifecycleConfigDetails = {
  @ocaml.doc("<p>The App type to which the Lifecycle Configuration is attached.</p>")
  @as("StudioLifecycleConfigAppType")
  studioLifecycleConfigAppType: option<studioLifecycleConfigAppType>,
  @ocaml.doc(
    "<p>This value is equivalent to CreationTime because Studio Lifecycle Configurations are immutable.</p>"
  )
  @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>The creation time of the Studio Lifecycle Configuration.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>The name of the Studio Lifecycle Configuration.</p>")
  @as("StudioLifecycleConfigName")
  studioLifecycleConfigName: option<studioLifecycleConfigName>,
  @ocaml.doc("<p> The Amazon Resource Name (ARN) of the Lifecycle Configuration.</p>")
  @as("StudioLifecycleConfigArn")
  studioLifecycleConfigArn: option<studioLifecycleConfigArn>,
}
@ocaml.doc("<p>Specifies a limit to how long a model training job or model compilation job 
            can run. It also specifies how long a managed spot training
            job has to complete. When the job reaches the time limit, Amazon SageMaker ends the training or
            compilation job. Use this API to cap model training costs.</p>
        <p>To stop a training job, Amazon SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays
            job termination for 120 seconds. Algorithms can use this 120-second window to save the
            model artifacts, so the results of training are not lost. </p>
        <p>The training algorithms provided by Amazon SageMaker automatically save the intermediate results
            of a model training job when possible. This attempt to save artifacts is only a best
            effort case as model might not be in a state from which it can be saved. For example, if
            training has just started, the model might not be ready to save. When saved, this
            intermediate data is a valid model artifact. You can use it to create a model with
                <code>CreateModel</code>.</p>
        <note>
            <p>The Neural Topic Model (NTM) currently does not support saving intermediate model
                artifacts. When training NTMs, make sure that the maximum runtime is sufficient for
                the training job to complete.</p>
        </note>")
type stoppingCondition = {
  @ocaml.doc("<p>The maximum length of time, in seconds, that a managed Spot training job has to
            complete. It is the amount of time spent waiting for Spot capacity plus the amount of
            time the job can run. It must be equal to or greater than
                <code>MaxRuntimeInSeconds</code>. If the job does not complete during this time,
            Amazon SageMaker ends the job.</p>
        <p>When <code>RetryStrategy</code> is specified in the job request,
                <code>MaxWaitTimeInSeconds</code> specifies the maximum time for all of the attempts
            in total, not each individual attempt.</p>")
  @as("MaxWaitTimeInSeconds")
  maxWaitTimeInSeconds: option<maxWaitTimeInSeconds>,
  @ocaml.doc("<p>The maximum length of time, in seconds, that a training or compilation job can run.</p> 
        <p>For compilation jobs, if the job does not complete during this time, you will 
            receive a <code>TimeOut</code> error. We recommend starting with 900 seconds and increase as 
            necessary based on your model.</p>  
        <p>For all other jobs, if the job does not complete during this time, Amazon SageMaker ends the job. When 
            <code>RetryStrategy</code> is specified in the job request,
                <code>MaxRuntimeInSeconds</code> specifies the maximum time for all of the attempts
            in total, not each individual attempt. The default value is 1 day. The maximum value is 28 days.</p>")
  @as("MaxRuntimeInSeconds")
  maxRuntimeInSeconds: option<maxRuntimeInSeconds>,
}
@ocaml.doc("<p>Specifies an algorithm that was used to create the model package. The algorithm must
            be either an algorithm resource in your Amazon SageMaker account or an algorithm in Amazon Web Services Marketplace that you
            are subscribed to.</p>")
type sourceAlgorithm = {
  @ocaml.doc("<p>The name of an algorithm that was used to create the model package. The algorithm must
            be either an algorithm resource in your Amazon SageMaker account or an algorithm in Amazon Web Services Marketplace that you
            are subscribed to.</p>")
  @as("AlgorithmName")
  algorithmName: arnOrName,
  @ocaml.doc("<p>The Amazon S3 path where the model artifacts, which result from model training, are stored.
            This path must point to a single <code>gzip</code> compressed tar archive
                (<code>.tar.gz</code> suffix).</p>
        <note>
            <p>The model artifacts must be in an S3 bucket that is in the same region as the
                algorithm.</p>
        </note>")
  @as("ModelDataUrl")
  modelDataUrl: option<url>,
}
@ocaml.doc("<p>A configuration for a shuffle option for input data in a channel. If you use
                <code>S3Prefix</code> for <code>S3DataType</code>, the results of the S3 key prefix
            matches are shuffled. If you use <code>ManifestFile</code>, the order of the S3 object
            references in the <code>ManifestFile</code> is shuffled. If you use
                <code>AugmentedManifestFile</code>, the order of the JSON lines in the
                <code>AugmentedManifestFile</code> is shuffled. The shuffling order is determined
            using the <code>Seed</code> value.</p>
        <p>For Pipe input mode, when <code>ShuffleConfig</code> is specified shuffling is done at
            the start of every epoch. With large datasets, this ensures that the order of the
            training data is different for each epoch, and it helps reduce bias and possible
            overfitting. In a multi-node training job when <code>ShuffleConfig</code> is combined
            with <code>S3DataDistributionType</code> of <code>ShardedByS3Key</code>, the data is
            shuffled across nodes so that the content sent to a particular node on the first epoch
            might be sent to a different node on the second epoch.</p>")
type shuffleConfig = {
  @ocaml.doc("<p>Determines the shuffling order in <code>ShuffleConfig</code> value.</p>")
  @as("Seed")
  seed: seed,
}
@ocaml.doc("<p>Specifies options for sharing SageMaker Studio notebooks. These settings are
    specified as part of <code>DefaultUserSettings</code> when the <code>CreateDomain</code>
    API is called, and as part of <code>UserSettings</code> when the <code>CreateUserProfile</code>
    API is called. When <code>SharingSettings</code> is not specified, notebook sharing
    isn't allowed.</p>")
type sharingSettings = {
  @ocaml.doc("<p>When <code>NotebookOutputOption</code> is <code>Allowed</code>, the Amazon Web Services Key Management Service (KMS)
         encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.</p>")
  @as("S3KmsKeyId")
  s3KmsKeyId: option<kmsKeyId>,
  @ocaml.doc("<p>When <code>NotebookOutputOption</code> is <code>Allowed</code>, the Amazon S3 bucket used
         to store the shared notebook snapshots.</p>")
  @as("S3OutputPath")
  s3OutputPath: option<s3Uri>,
  @ocaml.doc("<p>Whether to include the notebook cell output when sharing the notebook. The default
         is <code>Disabled</code>.</p>")
  @as("NotebookOutputOption")
  notebookOutputOption: option<notebookOutputOption>,
}
@ocaml.doc("<p>Details of a provisioned service catalog product. For information about service catalog,
            see <a href=\"https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html\">What is Amazon Web Services Service
                Catalog</a>.</p>")
type serviceCatalogProvisionedProductDetails = {
  @ocaml.doc("<p>The current status of the product.</p>
        <ul>
            <li>
                <p>
                  <code>AVAILABLE</code> - Stable state, ready to perform any operation. The most recent operation succeeded and completed.</p>
            </li>
            <li>
                <p>
                  <code>UNDER_CHANGE</code> - Transitive state. Operations performed might not have valid results. Wait for an AVAILABLE status before performing operations.</p>
            </li>
            <li>
                <p>
                  <code>TAINTED</code> - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.</p>
            </li>
            <li>
                <p>
                  <code>ERROR</code> - An unexpected error occurred. The provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack.</p>
            </li>
            <li>
                <p>
                  <code>PLAN_IN_PROGRESS</code> - Transitive state. The plan operations were performed to provision a new product, but resources have not yet been created. After reviewing the list of resources to be created, execute the plan. Wait for an AVAILABLE status before performing operations.</p>
            </li>
         </ul>")
  @as("ProvisionedProductStatusMessage")
  provisionedProductStatusMessage: option<provisionedProductStatusMessage>,
  @ocaml.doc("<p>The ID of the provisioned product.</p>") @as("ProvisionedProductId")
  provisionedProductId: option<serviceCatalogEntityId>,
}
type securityGroupIds = array<securityGroupId>
@ocaml.doc("<p>An array element of <a>DescribeTrainingJobResponse$SecondaryStatusTransitions</a>. It provides
            additional details about a status that the training job has transitioned through. A
            training job can be in one of several states, for example, starting, downloading,
            training, or uploading. Within each state, there are a number of intermediate states.
            For example, within the starting state, Amazon SageMaker could be starting the training job or
            launching the ML instances. These transitional states are referred to as the job's
            secondary
            status.
            </p>
        <p></p>")
type secondaryStatusTransition = {
  @ocaml.doc("<p>A detailed description of the progress within a secondary status.
            </p>
        <p>Amazon SageMaker provides secondary statuses and status messages that apply to each of
            them:</p>
        <dl>
            <dt>Starting</dt>
            <dd>
                    <ul>
                  <li>
                            <p>Starting the training job.</p>
                        </li>
                  <li>
                            <p>Launching requested ML
                                instances.</p>
                        </li>
                  <li>
                            <p>Insufficient
                                capacity error from EC2 while launching instances,
                                retrying!</p>
                        </li>
                  <li>
                            <p>Launched
                                instance was unhealthy, replacing it!</p>
                        </li>
                  <li>
                            <p>Preparing the instances for training.</p>
                        </li>
               </ul>
                </dd>
            <dt>Training</dt>
            <dd>
                    <ul>
                  <li>
                            <p>Downloading the training image.</p>
                        </li>
                  <li>
                            <p>Training
                                image download completed. Training in
                                progress.</p>
                        </li>
               </ul>
                </dd>
         </dl>
        <important>
            <p>Status messages are subject to change. Therefore, we recommend not including them
                in code that programmatically initiates actions. For examples, don't use status
                messages in if statements.</p>
        </important>
        <p>To have an overview of your training job's progress, view
                <code>TrainingJobStatus</code> and <code>SecondaryStatus</code> in <a>DescribeTrainingJob</a>, and <code>StatusMessage</code> together. For
            example, at the start of a training job, you might see the following:</p>
        <ul>
            <li>
                <p>
                  <code>TrainingJobStatus</code> - InProgress</p>
            </li>
            <li>
                <p>
                  <code>SecondaryStatus</code> - Training</p>
            </li>
            <li>
                <p>
                  <code>StatusMessage</code> - Downloading the training image</p>
            </li>
         </ul>")
  @as("StatusMessage")
  statusMessage: option<statusMessage>,
  @ocaml.doc("<p>A timestamp that shows when the training job transitioned out of this secondary status
            state into another secondary status state or when the training job has ended.</p>")
  @as("EndTime")
  endTime: option<timestamp_>,
  @ocaml.doc("<p>A timestamp that shows when the training job transitioned to the current secondary
            status state.</p>")
  @as("StartTime")
  startTime: timestamp_,
  @ocaml.doc("<p>Contains a secondary status information from a training
            job.</p>
        <p>Status might be one of the following secondary statuses:</p>
        <dl>
            <dt>InProgress</dt>
            <dd>
                    <ul>
                  <li>
                            <p>
                        <code>Starting</code>
                                - Starting the training job.</p>
                        </li>
                  <li>
                            <p>
                        <code>Downloading</code> - An optional stage for algorithms that
                                support <code>File</code> training input mode. It indicates that
                                data is being downloaded to the ML storage volumes.</p>
                        </li>
                  <li>
                            <p>
                        <code>Training</code> - Training is in progress.</p>
                        </li>
                  <li>
                            <p>
                        <code>Uploading</code> - Training is complete and the model
                                artifacts are being uploaded to the S3 location.</p>
                        </li>
               </ul>
                </dd>
            <dt>Completed</dt>
            <dd>
                    <ul>
                  <li>
                            <p>
                        <code>Completed</code> - The training job has completed.</p>
                        </li>
               </ul>
                </dd>
            <dt>Failed</dt>
            <dd>
                    <ul>
                  <li>
                            <p>
                        <code>Failed</code> - The training job has failed. The reason for
                                the failure is returned in the <code>FailureReason</code> field of
                                    <code>DescribeTrainingJobResponse</code>.</p>
                        </li>
               </ul>
                </dd>
            <dt>Stopped</dt>
            <dd>
                    <ul>
                  <li>
                            <p>
                        <code>MaxRuntimeExceeded</code> - The job stopped because it
                                exceeded the maximum allowed runtime.</p>
                        </li>
                  <li>
                            <p>
                        <code>Stopped</code> - The training job has stopped.</p>
                        </li>
               </ul>
                </dd>
            <dt>Stopping</dt>
            <dd>
                    <ul>
                  <li>
                            <p>
                        <code>Stopping</code> - Stopping the training job.</p>
                        </li>
               </ul>
                </dd>
         </dl>
        <p>We no longer support the following secondary statuses:</p>
        <ul>
            <li>
                <p>
                    <code>LaunchingMLInstances</code>
                </p>
            </li>
            <li>
                <p>
                    <code>PreparingTrainingStack</code>
                </p>
            </li>
            <li>
                <p>
                    <code>DownloadingTrainingImage</code>
                </p>
            </li>
         </ul>")
  @as("Status")
  status: secondaryStatus,
}
@ocaml.doc("<p>Configuration details about the monitoring schedule.</p>")
type scheduleConfig = {
  @ocaml.doc("<p>A cron expression that describes details about the monitoring schedule.</p>

         <p>Currently the only supported cron expressions are:</p>
         <ul>
            <li>
               <p>If you want to set the job to start every hour, please use the following:</p>
               <p>
                  <code>Hourly: cron(0 * ? * * *)</code>
               </p>
            </li>
            <li>
               <p>If you want to start the job daily:</p>
               <p>
                  <code>cron(0 [00-23] ? * * *)</code>
               </p>
            </li>
         </ul>
         <p>For example, the following are valid cron expressions:</p>
         <ul>
            <li>
               <p>Daily at noon UTC: <code>cron(0 12 ? * * *)</code>
               </p>
            </li>
            <li>
               <p>Daily at midnight UTC: <code>cron(0 0 ? * * *)</code>
               </p>
            </li>
         </ul>

         <p>To support running every 6, 12 hours, the following are also supported:</p>
         <p>
            <code>cron(0 [00-23]/[01-24] ? * * *)</code>
         </p>
         <p>For example, the following are valid cron expressions:</p>
         <ul>
            <li>
               <p>Every 12 hours, starting at 5pm UTC: <code>cron(0 17/12 ? * * *)</code>
               </p>
            </li>
            <li>
               <p>Every two hours starting at midnight: <code>cron(0 0/2 ? * * *)</code>
               </p>
            </li>
         </ul>

         <note>
            <ul>
               <li>
                  <p>Even though the cron expression is set to start at 5PM UTC, note that there
                  could be a delay of 0-20 minutes from the actual requested time to run the
                  execution. </p>
               </li>
               <li>
                  <p>We recommend that if you would like a daily schedule, you do not provide this
                  parameter. Amazon SageMaker will pick a time for running every day.</p>
               </li>
            </ul>
         </note>")
  @as("ScheduleExpression")
  scheduleExpression: scheduleExpression,
}
@ocaml.doc(
  "<p>The Amazon Simple Storage (Amazon S3) location and and security configuration for <code>OfflineStore</code>.</p>"
)
type s3StorageConfig = {
  @ocaml.doc("<p>The S3 path where offline records are written.</p>") @as("ResolvedOutputS3Uri")
  resolvedOutputS3Uri: option<s3Uri>,
  @ocaml.doc("<p>The Amazon Web Services Key Management Service (KMS) key ID of the key used to encrypt any objects
         written into the <code>OfflineStore</code> S3 location.</p>
         <p>The IAM <code>roleARN</code> that is passed as a parameter to
            <code>CreateFeatureGroup</code> must have below permissions to the
         <code>KmsKeyId</code>:</p>
         <ul>
            <li>
               <p>
                  <code>\"kms:GenerateDataKey\"</code>
               </p>
            </li>
         </ul>")
  @as("KmsKeyId")
  kmsKeyId: option<kmsKeyId>,
  @ocaml.doc("<p>The S3 URI, or location in Amazon S3, of <code>OfflineStore</code>.</p>
         <p>S3 URIs have a format similar to the following: <code>s3://example-bucket/prefix/</code>.</p>")
  @as("S3Uri")
  s3Uri: s3Uri,
}
type ruleParameters = Js.Dict.t<configValue>
@ocaml.doc("<p>The retry strategy to use when a training job fails due to an
                <code>InternalServerError</code>. <code>RetryStrategy</code> is specified as part of
            the <code>CreateTrainingJob</code> and <code>CreateHyperParameterTuningJob</code>
            requests. You can add the <code>StoppingCondition</code> parameter to the request to
            limit the training time for the complete job.</p>")
type retryStrategy = {
  @ocaml.doc("<p>The number of times to retry the job. When the job is retried, it's
                <code>SecondaryStatus</code> is changed to <code>STARTING</code>.</p>")
  @as("MaximumRetryAttempts")
  maximumRetryAttempts: maximumRetryAttempts,
}
@ocaml.doc(
  "<p>The retention policy for data stored on an Amazon Elastic File System (EFS) volume.</p>"
)
type retentionPolicy = {
  @ocaml.doc("<p>The default is <code>Retain</code>, which specifies to keep the data stored on the EFS volume.</p>
         <p>Specify <code>Delete</code> to delete the data stored on the EFS volume.</p>")
  @as("HomeEfsFileSystem")
  homeEfsFileSystem: option<retentionType>,
}
type responseMIMETypes = array<responseMIMEType>
@ocaml.doc("<p>Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that
     the version runs on.</p>")
type resourceSpec = {
  @ocaml.doc(
    "<p> The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.</p>"
  )
  @as("LifecycleConfigArn")
  lifecycleConfigArn: option<studioLifecycleConfigArn>,
  @ocaml.doc("<p>The instance type that the image version runs on.</p>") @as("InstanceType")
  instanceType: option<appInstanceType>,
  @ocaml.doc("<p>The ARN of the image version created on the instance.</p>")
  @as("SageMakerImageVersionArn")
  sageMakerImageVersionArn: option<imageVersionArn>,
  @ocaml.doc("<p>The ARN of the SageMaker image that the image version belongs to.</p>")
  @as("SageMakerImageArn")
  sageMakerImageArn: option<imageArn>,
}
@ocaml.doc("<p>Specifies the maximum number of
            training
            jobs and parallel training jobs that a hyperparameter tuning job can
            launch.</p>")
type resourceLimits = {
  @ocaml.doc("<p>The
            maximum
            number of concurrent training jobs that a hyperparameter tuning job can
            launch.</p>")
  @as("MaxParallelTrainingJobs")
  maxParallelTrainingJobs: maxParallelTrainingJobs,
  @ocaml.doc("<p>The
            maximum
            number of training jobs that a hyperparameter tuning job can
            launch.</p>")
  @as("MaxNumberOfTrainingJobs")
  maxNumberOfTrainingJobs: maxNumberOfTrainingJobs,
}
@ocaml.doc("<p>Describes the resources, including ML compute instances and ML storage volumes, to
            use for model training. </p>")
type resourceConfig = {
  @ocaml.doc("<p>The Amazon Web Services KMS key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML
            compute instance(s) that run the training job.</p>
        <note>
            <p>Certain Nitro-based instances include local storage, dependent on the instance
                type. Local storage volumes are encrypted using a hardware module on the instance.
                You can't request a <code>VolumeKmsKeyId</code> when using an instance type with
                local storage.</p>
            <p>For a list of instance types that support local instance storage, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes\">Instance Store Volumes</a>.</p>
            <p>For more information about local instance storage encryption, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html\">SSD
                    Instance Store Volumes</a>.</p>
        </note>
        <p>The <code>VolumeKmsKeyId</code> can be in any of the following formats:</p>
        <ul>
            <li>
                <p>// KMS Key ID</p>
                <p>
                    <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>
                </p>
            </li>
            <li>
                <p>// Amazon Resource Name (ARN) of a KMS Key</p>
                <p>
                    <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>
                </p>
            </li>
         </ul>")
  @as("VolumeKmsKeyId")
  volumeKmsKeyId: option<kmsKeyId>,
  @ocaml.doc("<p>The size of the ML storage volume that you want to provision. </p>
        <p>ML storage volumes store model artifacts and incremental states. Training
            algorithms might also use the ML storage volume for scratch space. If you want to store
            the training data in the ML storage volume, choose <code>File</code> as the
                <code>TrainingInputMode</code> in the algorithm specification. </p>
        <p>You must specify sufficient ML storage for your scenario. </p>
        <note>
            <p> Amazon SageMaker supports only the General Purpose SSD (gp2) ML storage volume type.
            </p>
        </note>
        <note>
            <p>Certain Nitro-based instances include local storage with a fixed total size,
                dependent on the instance type. When using these instances for training, Amazon SageMaker mounts
                the local instance storage instead of Amazon EBS gp2 storage. You can't request a
                    <code>VolumeSizeInGB</code> greater than the total size of the local instance
                storage.</p>
            <p>For a list of instance types that support local instance storage, including the
                total size per instance type, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes\">Instance Store Volumes</a>.</p>
        </note>")
  @as("VolumeSizeInGB")
  volumeSizeInGB: volumeSizeInGB,
  @ocaml.doc("<p>The number of ML compute instances to use. For distributed training, provide a
            value greater than 1. </p>")
  @as("InstanceCount")
  instanceCount: trainingInstanceCount,
  @ocaml.doc("<p>The ML compute instance type. </p>") @as("InstanceType")
  instanceType: trainingInstanceType,
}
@ocaml.doc("<p>Specifies an authentication configuration for the private docker registry where your
            model image is hosted. Specify a value for this property only if you specified
            <code>Vpc</code> as the value for the <code>RepositoryAccessMode</code> field of the
            <code>ImageConfig</code> object that you passed to a call to <code>CreateModel</code>
            and the private Docker registry where the model image is
            hosted requires authentication.</p>")
type repositoryAuthConfig = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of an Amazon Web Services Lambda function that provides credentials to
            authenticate to the private Docker registry where your model image is hosted. For
            information about how to create an Amazon Web Services Lambda function, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html\">Create a Lambda function
                with the console</a> in the <i>Amazon Web Services Lambda Developer
            Guide</i>.</p>")
  @as("RepositoryCredentialsProviderArn")
  repositoryCredentialsProviderArn: repositoryCredentialsProviderArn,
}
@ocaml.doc("<p>A description of an error that occurred while rendering the template.</p>")
type renderingError = {
  @ocaml.doc("<p>A human-readable message describing the error.</p>") @as("Message")
  message: string_,
  @ocaml.doc("<p>A unique identifier for a specific class of errors.</p>") @as("Code")
  code: string_,
}
@ocaml.doc("<p>Contains input values for a task.</p>")
type renderableTask = {
  @ocaml.doc("<p>A JSON object that contains values for the variables defined in the template. It is
            made available to the template under the substitution variable <code>task.input</code>.
            For example, if you define a variable <code>task.input.text</code> in your template, you
            can supply the variable in the JSON object as <code>\"text\": \"sample text\"</code>.</p>")
  @as("Input")
  input: taskInput,
}
@ocaml.doc("<p>Metadata for a register model job step.</p>")
type registerModelStepMetadata = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model package.</p>") @as("Arn")
  arn: option<string256>,
}
@ocaml.doc("<p>Configuration for Redshift Dataset Definition input.</p>")
type redshiftDatasetDefinition = {
  @as("OutputCompression") outputCompression: option<redshiftResultCompressionType>,
  @as("OutputFormat") outputFormat: redshiftResultFormat,
  @ocaml.doc("<p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data from a
            Redshift execution.</p>")
  @as("KmsKeyId")
  kmsKeyId: option<kmsKeyId>,
  @ocaml.doc("<p>The location in Amazon S3 where the Redshift query results are stored.</p>")
  @as("OutputS3Uri")
  outputS3Uri: s3Uri,
  @ocaml.doc(
    "<p>The IAM role attached to your Redshift cluster that Amazon SageMaker uses to generate datasets.</p>"
  )
  @as("ClusterRoleArn")
  clusterRoleArn: roleArn,
  @as("QueryString") queryString: redshiftQueryString,
  @as("DbUser") dbUser: redshiftUserName,
  @as("Database") database: redshiftDatabase,
  @as("ClusterId") clusterId: redshiftClusterId,
}
@ocaml.doc("<p>The metrics of recommendations.</p>")
type recommendationMetrics = {
  @ocaml.doc("<p>The expected model latency at maximum invocation per minute for the instance.</p>")
  @as("ModelLatency")
  modelLatency: integer_,
  @ocaml.doc("<p>The expected maximum number of requests per minute for the instance.</p>")
  @as("MaxInvocations")
  maxInvocations: integer_,
  @ocaml.doc("<p>Defines the cost per inference for the instance .</p>") @as("CostPerInference")
  costPerInference: float_,
  @ocaml.doc("<p>Defines the cost per hour for the instance. </p>") @as("CostPerHour")
  costPerHour: float_,
}
@ocaml.doc("<p>Specifies the maximum number of jobs that can run in parallel 
    and the maximum number of jobs that can run.</p>")
type recommendationJobResourceLimit = {
  @ocaml.doc("<p>Defines the maximum number of parallel load tests.</p>") @as("MaxParallelOfTests")
  maxParallelOfTests: option<maxParallelOfTests>,
  @ocaml.doc("<p>Defines the maximum number of load tests.</p>") @as("MaxNumberOfTests")
  maxNumberOfTests: option<maxNumberOfTests>,
}
type realtimeInferenceInstanceTypes = array<productionVariantInstanceType>
@ocaml.doc(
  "<p>A collection of settings that configure user interaction with the <code>RStudioServerPro</code> app. <code>RStudioServerProAppSettings</code> cannot be updated. The <code>RStudioServerPro</code> app must be deleted and a new one created to make any changes.</p>"
)
type rstudioServerProAppSettings = {
  @ocaml.doc(
    "<p>The level of permissions that the user has within the <code>RStudioServerPro</code> app. This value defaults to `User`. The `Admin` value allows the user access to the RStudio Administrative Dashboard.</p>"
  )
  @as("UserGroup")
  userGroup: option<rstudioServerProUserGroup>,
  @ocaml.doc(
    "<p>Indicates whether the current user has access to the <code>RStudioServerPro</code> app.</p>"
  )
  @as("AccessStatus")
  accessStatus: option<rstudioServerProAccessStatus>,
}
type queryTypes = array<string40>
type queryProperties = Js.Dict.t<string256>
type queryLineageTypes = array<lineageType>
type queryLineageStartArns = array<associationEntityArn>
@ocaml.doc("<p>Container for the metadata for a Quality check step. For more information, see 
         the topic on <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-quality-check\">QualityCheck step</a> in the <i>Amazon SageMaker Developer Guide</i>.
      </p>")
type qualityCheckStepMetadata = {
  @ocaml.doc("<p>This flag indicates if a newly calculated baseline can be accessed through step properties 
         <code>BaselineUsedForDriftCheckConstraints</code> and <code>BaselineUsedForDriftCheckStatistics</code>. 
         If it is set to <code>False</code>, the previous baseline of the configured check type must also be available. 
         These can be accessed through the <code>BaselineUsedForDriftCheckConstraints</code> and <code>
            BaselineUsedForDriftCheckStatistics</code> properties. </p>")
  @as("RegisterNewBaseline")
  registerNewBaseline: option<boolean_>,
  @ocaml.doc("<p>This flag indicates if the drift check against the previous baseline will be skipped or not. 
         If it is set to <code>False</code>, the previous baseline of the configured check type must be available.</p>")
  @as("SkipCheck")
  skipCheck: option<boolean_>,
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the Quality check processing job that was run by this step execution.</p>"
  )
  @as("CheckJobArn")
  checkJobArn: option<string256>,
  @ocaml.doc("<p>The Amazon S3 URI of violation report if violations are detected.</p>")
  @as("ViolationReport")
  violationReport: option<string1024>,
  @ocaml.doc("<p>The model package group name.</p>") @as("ModelPackageGroupName")
  modelPackageGroupName: option<string256>,
  @ocaml.doc("<p>The Amazon S3 URI of the newly calculated baseline constraints file.</p>")
  @as("CalculatedBaselineConstraints")
  calculatedBaselineConstraints: option<string1024>,
  @ocaml.doc("<p>The Amazon S3 URI of the newly calculated baseline statistics file.</p>")
  @as("CalculatedBaselineStatistics")
  calculatedBaselineStatistics: option<string1024>,
  @ocaml.doc("<p>The Amazon S3 URI of the baseline constraints file used for the drift check.</p>")
  @as("BaselineUsedForDriftCheckConstraints")
  baselineUsedForDriftCheckConstraints: option<string1024>,
  @ocaml.doc("<p>The Amazon S3 URI of the baseline statistics file used for the drift check.</p>")
  @as("BaselineUsedForDriftCheckStatistics")
  baselineUsedForDriftCheckStatistics: option<string1024>,
  @ocaml.doc("<p>The type of the Quality check step.</p>") @as("CheckType")
  checkType: option<string256>,
}
@ocaml.doc("<p>A key value pair used when you provision a project as a service catalog product. For
            information, see <a href=\"https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html\">What is Amazon Web Services Service
                Catalog</a>.</p>")
type provisioningParameter = {
  @ocaml.doc("<p>The value of the provisioning parameter.</p>") @as("Value")
  value: option<provisioningParameterValue>,
  @ocaml.doc("<p>The key that identifies a provisioning parameter.</p>") @as("Key")
  key: option<provisioningParameterKey>,
}
@ocaml.doc("<p>A property name returned from a <code>GetSearchSuggestions</code> call that specifies
      a value in the <code>PropertyNameQuery</code> field.</p>")
type propertyNameSuggestion = {
  @ocaml.doc("<p>A suggested property name based on what you entered in the search textbox in the Amazon SageMaker
      console.</p>")
  @as("PropertyName")
  propertyName: option<resourcePropertyName>,
}
@ocaml.doc("<p>Part of the <code>SuggestionQuery</code> type. Specifies a hint for retrieving property
      names that begin with the specified text.</p>")
type propertyNameQuery = {
  @ocaml.doc("<p>Text that begins a property's name.</p>") @as("PropertyNameHint")
  propertyNameHint: propertyNameHint,
}
@ocaml.doc("<p>Information about a project.</p>")
type projectSummary = {
  @ocaml.doc("<p>The status of the project.</p>") @as("ProjectStatus") projectStatus: projectStatus,
  @ocaml.doc("<p>The time that the project was created.</p>") @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc("<p>The ID of the project.</p>") @as("ProjectId") projectId: projectId,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the project.</p>") @as("ProjectArn")
  projectArn: projectArn,
  @ocaml.doc("<p>The description of the project.</p>") @as("ProjectDescription")
  projectDescription: option<entityDescription>,
  @ocaml.doc("<p>The name of the project.</p>") @as("ProjectName") projectName: projectEntityName,
}
type profilingParameters = Js.Dict.t<configValue>
@ocaml.doc("<p>Information about the status of the rule evaluation.</p>")
type profilerRuleEvaluationStatus = {
  @ocaml.doc("<p>Timestamp when the rule evaluation status was last modified.</p>")
  @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>Details from the rule evaluation.</p>") @as("StatusDetails")
  statusDetails: option<statusDetails>,
  @ocaml.doc("<p>Status of the rule evaluation.</p>") @as("RuleEvaluationStatus")
  ruleEvaluationStatus: option<ruleEvaluationStatus>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the rule evaluation job.</p>")
  @as("RuleEvaluationJobArn")
  ruleEvaluationJobArn: option<processingJobArn>,
  @ocaml.doc("<p>The name of the rule configuration.</p>") @as("RuleConfigurationName")
  ruleConfigurationName: option<ruleConfigurationName>,
}
@ocaml.doc("<p>Describes the status of the production variant.</p>")
type productionVariantStatus = {
  @ocaml.doc("<p>The start time of the current status change.</p>") @as("StartTime")
  startTime: option<timestamp_>,
  @ocaml.doc("<p>A message that describes the status of the production variant.</p>")
  @as("StatusMessage")
  statusMessage: option<variantStatusMessage>,
  @ocaml.doc("<p>The endpoint variant status which describes the current deployment stage status or operational status.</p>
        <ul>
            <li>
                <p>
                  <code>Creating</code>: Creating inference resources for the production variant.</p>
            </li>
            <li>
                <p>
                  <code>Deleting</code>: Terminating inference resources for the production variant.</p>
            </li>
            <li>
                <p>
                  <code>Updating</code>: Updating capacity for the production variant.</p>
            </li>
            <li>
                <p>
                  <code>ActivatingTraffic</code>: Turning on traffic for the production variant.</p>
            </li>
            <li>
                <p>
                  <code>Baking</code>: Waiting period to monitor the CloudWatch alarms in the
                automatic rollback configuration.</p>
            </li>
         </ul>")
  @as("Status")
  status: variantStatus,
}
@ocaml.doc("<important>
            <p>Serverless Inference is in preview release for Amazon SageMaker and is subject to change. We do not recommend using this feature in production environments.</p>
         </important>
         <p>Specifies the serverless configuration for an endpoint variant.</p>")
type productionVariantServerlessConfig = {
  @ocaml.doc(
    "<p>The maximum number of concurrent invocations your serverless endpoint can process.</p>"
  )
  @as("MaxConcurrency")
  maxConcurrency: serverlessMaxConcurrency,
  @ocaml.doc(
    "<p>The memory size of your serverless endpoint. Valid values are in 1 GB increments: 1024 MB, 2048 MB, 3072 MB, 4096 MB, 5120 MB, or 6144 MB.</p>"
  )
  @as("MemorySizeInMB")
  memorySizeInMB: serverlessMemorySizeInMB,
}
@ocaml.doc("<p>Specifies configuration for a core dump from the model container when the process
            crashes.</p>")
type productionVariantCoreDumpConfig = {
  @ocaml.doc("<p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the core dump data at rest using
            Amazon S3 server-side encryption. The <code>KmsKeyId</code> can be any of the following
            formats: </p>
        <ul>
            <li>
                <p>// KMS Key ID</p>
                <p>
                    <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>
                </p>
            </li>
            <li>
                <p>// Amazon Resource Name (ARN) of a KMS Key</p>
                <p>
                    <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>
                </p>
            </li>
            <li>
                <p>// KMS Key Alias</p>
                <p>
                    <code>\"alias/ExampleAlias\"</code>
                </p>
            </li>
            <li>
                <p>// Amazon Resource Name (ARN) of a KMS Key Alias</p>
                <p>
                    <code>\"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias\"</code>
                </p>
            </li>
         </ul>
        
        <p>If you use a KMS key ID or an alias of your KMS key, the Amazon SageMaker execution role must
            include permissions to call <code>kms:Encrypt</code>. If you don't provide a KMS key ID,
            Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. Amazon SageMaker uses server-side
            encryption with KMS-managed keys for <code>OutputDataConfig</code>. If you use a bucket
            policy with an <code>s3:PutObject</code> permission that only allows objects with
            server-side encryption, set the condition key of
                <code>s3:x-amz-server-side-encryption</code> to <code>\"aws:kms\"</code>. For more
            information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\">KMS-Managed Encryption
                Keys</a> in the <i>Amazon Simple Storage Service Developer Guide.</i>
         </p>
        <p>The KMS key policy must grant permission to the IAM role that you specify in your
                <code>CreateEndpoint</code> and <code>UpdateEndpoint</code> requests. For more
            information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html\">Using Key Policies in Amazon Web Services
                KMS</a> in the <i>Amazon Web Services Key Management Service Developer Guide</i>.</p>")
  @as("KmsKeyId")
  kmsKeyId: option<kmsKeyId>,
  @ocaml.doc("<p>The Amazon S3 bucket to send the core dump to.</p>") @as("DestinationS3Uri")
  destinationS3Uri: destinationS3Uri,
}
type productListings = array<string_>
@ocaml.doc("<p>Configures conditions under which the processing job should be stopped, such as how long 
            the processing job has been running. After the condition is met, the processing job is stopped.</p>")
type processingStoppingCondition = {
  @ocaml.doc("<p>Specifies the maximum runtime in seconds.</p>") @as("MaxRuntimeInSeconds")
  maxRuntimeInSeconds: processingMaxRuntimeInSeconds,
}
@ocaml.doc(
  "<p>Configuration for uploading output data to Amazon S3 from the processing container.</p>"
)
type processingS3Output = {
  @ocaml.doc("<p>Whether to upload the results of the processing job continuously or after the job
            completes.</p>")
  @as("S3UploadMode")
  s3UploadMode: processingS3UploadMode,
  @ocaml.doc("<p>The local path of a directory where you want Amazon SageMaker to upload its contents to Amazon S3. 
            <code>LocalPath</code> is an absolute path to a directory containing output files. 
            This directory will be created by the platform and exist when your container's 
            entrypoint is invoked.</p>")
  @as("LocalPath")
  localPath: processingLocalPath,
  @ocaml.doc("<p>A URI that identifies the Amazon S3 bucket where you want Amazon SageMaker to save the results of
            a processing job.</p>")
  @as("S3Uri")
  s3Uri: s3Uri,
}
@ocaml.doc(
  "<p>Configuration for downloading input data from Amazon S3 into the processing container.</p>"
)
type processingS3Input = {
  @ocaml.doc("<p>Whether to GZIP-decompress the data in Amazon S3 as it is streamed into the processing 
            container. <code>Gzip</code> can only be used when <code>Pipe</code> mode is 
            specified as the <code>S3InputMode</code>. In <code>Pipe</code> mode, Amazon SageMaker streams input 
            data from the source directly to your container without using the EBS volume.</p>")
  @as("S3CompressionType")
  s3CompressionType: option<processingS3CompressionType>,
  @ocaml.doc("<p>Whether to distribute the data from Amazon S3 to all processing instances with 
            <code>FullyReplicated</code>, or whether the data from Amazon S3 is shared by Amazon S3 key, 
            downloading one shard of data to each processing instance.</p>")
  @as("S3DataDistributionType")
  s3DataDistributionType: option<processingS3DataDistributionType>,
  @ocaml.doc("<p>Whether to use <code>File</code> or <code>Pipe</code> input mode. In File mode, Amazon SageMaker copies the data 
            from the input source onto the local ML storage volume before starting your processing 
            container. This is the most commonly used input mode. In <code>Pipe</code> mode, Amazon SageMaker 
            streams input data from the source directly to your processing container into named 
            pipes without using the ML storage volume.</p>")
  @as("S3InputMode")
  s3InputMode: option<processingS3InputMode>,
  @ocaml.doc("<p>Whether you use an <code>S3Prefix</code> or a <code>ManifestFile</code> for
            the data type. If you choose <code>S3Prefix</code>, <code>S3Uri</code> identifies a key
            name prefix. Amazon SageMaker uses all objects with the specified key name prefix for the processing
            job. If you choose <code>ManifestFile</code>, <code>S3Uri</code> identifies an object
            that is a manifest file containing a list of object keys that you want Amazon SageMaker to use for
            the processing job.</p>")
  @as("S3DataType")
  s3DataType: processingS3DataType,
  @ocaml.doc("<p>The local path in your container where you want Amazon SageMaker to write input data to. 
            <code>LocalPath</code> is an absolute path to the input data and must begin with 
            <code>/opt/ml/processing/</code>. <code>LocalPath</code> is a required 
            parameter when <code>AppManaged</code> is <code>False</code> (default).</p>")
  @as("LocalPath")
  localPath: option<processingLocalPath>,
  @ocaml.doc(
    "<p>The URI of the Amazon S3 prefix Amazon SageMaker downloads data required to run a processing job.</p>"
  )
  @as("S3Uri")
  s3Uri: s3Uri,
}
@ocaml.doc("<p>Summary of information about a processing job.</p>")
type processingJobSummary = {
  @ocaml.doc("<p>An optional string, up to one KB in size, that contains metadata from the processing
            container when the processing job exits.</p>")
  @as("ExitMessage")
  exitMessage: option<exitMessage>,
  @ocaml.doc("<p>A string, up to one KB in size, that contains the reason a processing job failed, if
            it failed.</p>")
  @as("FailureReason")
  failureReason: option<failureReason>,
  @ocaml.doc("<p>The status of the processing job.</p>") @as("ProcessingJobStatus")
  processingJobStatus: processingJobStatus,
  @ocaml.doc("<p>A timestamp that indicates the last time the processing job was modified.</p>")
  @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>The time at which the processing job completed.</p>") @as("ProcessingEndTime")
  processingEndTime: option<timestamp_>,
  @ocaml.doc("<p>The time at which the processing job was created.</p>") @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the processing job..</p>")
  @as("ProcessingJobArn")
  processingJobArn: processingJobArn,
  @ocaml.doc("<p>The name of the processing job.</p>") @as("ProcessingJobName")
  processingJobName: processingJobName,
}
@ocaml.doc("<p>Metadata for a processing job step.</p>")
type processingJobStepMetadata = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the processing job.</p>") @as("Arn")
  arn: option<processingJobArn>,
}
@ocaml.doc("<p>Configuration for processing job outputs in Amazon SageMaker Feature Store.</p>")
type processingFeatureStoreOutput = {
  @ocaml.doc("<p>The name of the Amazon SageMaker FeatureGroup to use as the destination for processing job output. Note that your 
            processing script is responsible for putting records into your Feature Store.</p>")
  @as("FeatureGroupName")
  featureGroupName: featureGroupName,
}
type processingEnvironmentMap = Js.Dict.t<processingEnvironmentValue>
@ocaml.doc("<p>Configuration for the cluster used to run a processing job.</p>")
type processingClusterConfig = {
  @ocaml.doc("<p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the
            storage volume attached to the ML compute instance(s) that run the processing job.
        </p>
        <note>
            <p>Certain Nitro-based instances include local storage, dependent on the instance
                type. Local storage volumes are encrypted using a hardware module on the instance.
                You can't request a <code>VolumeKmsKeyId</code> when using an instance type with
                local storage.</p>
            <p>For a list of instance types that support local instance storage, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes\">Instance Store Volumes</a>.</p>
            <p>For more information about local instance storage encryption, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html\">SSD
                Instance Store Volumes</a>.</p>
        </note>")
  @as("VolumeKmsKeyId")
  volumeKmsKeyId: option<kmsKeyId>,
  @ocaml.doc("<p>The size of the ML storage volume in gigabytes that you want to provision. You must
            specify sufficient ML storage for your scenario.</p>
        <note>
            <p>Certain Nitro-based instances include local storage with a fixed total size,
                dependent on the instance type. When using these instances for processing, Amazon SageMaker mounts
                the local instance storage instead of Amazon EBS gp2 storage. You can't request a
                <code>VolumeSizeInGB</code> greater than the total size of the local instance
                storage.</p>
            <p>For a list of instance types that support local instance storage, including the
                total size per instance type, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes\">Instance Store Volumes</a>.</p>
        </note>")
  @as("VolumeSizeInGB")
  volumeSizeInGB: processingVolumeSizeInGB,
  @ocaml.doc("<p>The ML compute instance type for the processing job.</p>") @as("InstanceType")
  instanceType: processingInstanceType,
  @ocaml.doc("<p>The number of ML compute instances to use in the processing job. For distributed
            processing jobs, specify a value greater than 1. The default value is 1.</p>")
  @as("InstanceCount")
  instanceCount: processingInstanceCount,
}
@ocaml.doc("<p>A summary of a pipeline.</p>")
type pipelineSummary = {
  @ocaml.doc("<p>The last time that a pipeline execution began.</p>") @as("LastExecutionTime")
  lastExecutionTime: option<timestamp_>,
  @ocaml.doc("<p>The time that the pipeline was last modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>The creation time of the pipeline.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) that the pipeline used to execute.</p>")
  @as("RoleArn")
  roleArn: option<roleArn>,
  @ocaml.doc("<p>The description of the pipeline.</p>") @as("PipelineDescription")
  pipelineDescription: option<pipelineDescription>,
  @ocaml.doc("<p>The display name of the pipeline.</p>") @as("PipelineDisplayName")
  pipelineDisplayName: option<pipelineName>,
  @ocaml.doc("<p>The name of the pipeline.</p>") @as("PipelineName")
  pipelineName: option<pipelineName>,
  @ocaml.doc("<p> The Amazon Resource Name (ARN) of the pipeline.</p>") @as("PipelineArn")
  pipelineArn: option<pipelineArn>,
}
@ocaml.doc("<p>Specifies the names of the experiment and trial created by a pipeline.</p>")
type pipelineExperimentConfig = {
  @ocaml.doc("<p>The name of the trial.</p>") @as("TrialName")
  trialName: option<experimentEntityName>,
  @ocaml.doc("<p>The name of the experiment.</p>") @as("ExperimentName")
  experimentName: option<experimentEntityName>,
}
@ocaml.doc("<p>A pipeline execution summary.</p>")
type pipelineExecutionSummary = {
  @ocaml.doc(
    "<p>A message generated by SageMaker Pipelines describing why the pipeline execution failed.</p>"
  )
  @as("PipelineExecutionFailureReason")
  pipelineExecutionFailureReason: option<string3072>,
  @ocaml.doc("<p>The display name of the pipeline execution.</p>")
  @as("PipelineExecutionDisplayName")
  pipelineExecutionDisplayName: option<pipelineExecutionName>,
  @ocaml.doc("<p>The description of the pipeline execution.</p>")
  @as("PipelineExecutionDescription")
  pipelineExecutionDescription: option<pipelineExecutionDescription>,
  @ocaml.doc("<p>The status of the pipeline execution.</p>") @as("PipelineExecutionStatus")
  pipelineExecutionStatus: option<pipelineExecutionStatus>,
  @ocaml.doc("<p>The start time of the pipeline execution.</p>") @as("StartTime")
  startTime: option<timestamp_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline execution.</p>")
  @as("PipelineExecutionArn")
  pipelineExecutionArn: option<pipelineExecutionArn>,
}
@ocaml.doc("<p>The location of the pipeline definition stored in Amazon S3.</p>")
type pipelineDefinitionS3Location = {
  @ocaml.doc("<p>Version Id of the pipeline definition file. If not specified, Amazon SageMaker 
            will retrieve the latest version.</p>")
  @as("VersionId")
  versionId: option<versionId>,
  @ocaml.doc("<p>The object key (or key name) uniquely identifies the 
            object in an S3 bucket. </p>")
  @as("ObjectKey")
  objectKey: key,
  @ocaml.doc("<p>Name of the S3 bucket.</p>") @as("Bucket") bucket: bucketName,
}
@ocaml.doc("<p>Defines the traffic pattern.</p>")
type phase = {
  @ocaml.doc("<p>Specifies how long traffic phase should be.</p>") @as("DurationInSeconds")
  durationInSeconds: option<trafficDurationInSeconds>,
  @ocaml.doc("<p>Specified how many new users to spawn in a minute.</p>") @as("SpawnRate")
  spawnRate: option<spawnRate>,
  @ocaml.doc("<p>Specifies how many concurrent users to start with.</p>")
  @as("InitialNumberOfUsers")
  initialNumberOfUsers: option<initialNumberOfUsers>,
}
@ocaml.doc("<p>A previously completed or stopped hyperparameter tuning job to be used as a starting
            point for a new hyperparameter tuning job.</p>")
type parentHyperParameterTuningJob = {
  @ocaml.doc("<p>The name of the hyperparameter tuning job to be used as a starting point for a new
            hyperparameter tuning job.</p>")
  @as("HyperParameterTuningJobName")
  hyperParameterTuningJobName: option<hyperParameterTuningJobName>,
}
@ocaml.doc("<p>The trial that a trial component is associated with and the experiment the trial is part
      of. A component might not be associated with a trial. A component can be associated with
      multiple trials.</p>")
type parent = {
  @ocaml.doc("<p>The name of the experiment.</p>") @as("ExperimentName")
  experimentName: option<experimentEntityName>,
  @ocaml.doc("<p>The name of the trial.</p>") @as("TrialName")
  trialName: option<experimentEntityName>,
}
type parameterValues = array<parameterValue>
@ocaml.doc("<p>Assigns a value to a named Pipeline parameter.</p>")
type parameter = {
  @ocaml.doc("<p>The literal value for the parameter.</p>") @as("Value") value: string1024,
  @ocaml.doc("<p>The name of the parameter to assign a value to. This 
         parameter name must match a named parameter in the 
         pipeline definition.</p>")
  @as("Name")
  name: pipelineParameterName,
}
@ocaml.doc("<p>Configuration that controls the parallelism of the pipeline. 
            By default, the parallelism configuration specified applies to all 
            executions of the pipeline unless overridden.</p>")
type parallelismConfiguration = {
  @ocaml.doc("<p>The max number of steps that can be executed in parallel. </p>")
  @as("MaxParallelExecutionSteps")
  maxParallelExecutionSteps: maxParallelExecutionSteps,
}
@ocaml.doc("<p>An output parameter of a pipeline step.</p>")
type outputParameter = {
  @ocaml.doc("<p>The value of the output parameter.</p>") @as("Value") value: string1024,
  @ocaml.doc("<p>The name of the output parameter.</p>") @as("Name") name: string256,
}
@ocaml.doc("<p>Provides information about how to store model training results (model
            artifacts).</p>")
type outputDataConfig = {
  @ocaml.doc("<p>Identifies the S3 path where you want Amazon SageMaker to store the model artifacts. For
            example, <code>s3://bucket-name/key-name-prefix</code>. </p>")
  @as("S3OutputPath")
  s3OutputPath: s3Uri,
  @ocaml.doc("<p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using
            Amazon S3 server-side encryption. The <code>KmsKeyId</code> can be any of the following
            formats: </p>
        <ul>
            <li>
                <p>// KMS Key ID</p>
                <p>
                    <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>
                </p>
            </li>
            <li>
                <p>// Amazon Resource Name (ARN) of a KMS Key</p>
                <p>
                    <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>
                </p>
            </li>
            <li>
                <p>// KMS Key Alias</p>
                <p>
                    <code>\"alias/ExampleAlias\"</code>
                </p>
            </li>
            <li>
                <p>// Amazon Resource Name (ARN) of a KMS Key Alias</p>
                <p>
                    <code>\"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias\"</code>
                </p>
            </li>
         </ul>
        
        <p>If you use a KMS key ID or an alias of your KMS key, the Amazon SageMaker execution role must
            include permissions to call <code>kms:Encrypt</code>. If you don't provide a KMS key ID,
            Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. Amazon SageMaker uses server-side
            encryption with KMS-managed keys for <code>OutputDataConfig</code>. If you use a bucket
            policy with an <code>s3:PutObject</code> permission that only allows objects with
            server-side encryption, set the condition key of
                <code>s3:x-amz-server-side-encryption</code> to <code>\"aws:kms\"</code>. For more
            information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html\">KMS-Managed Encryption
                Keys</a> in the <i>Amazon Simple Storage Service Developer Guide.</i>
         </p>
        <p>The KMS key policy must grant permission to the IAM role that you specify in your
                <code>CreateTrainingJob</code>, <code>CreateTransformJob</code>, or
                <code>CreateHyperParameterTuningJob</code> requests. For more information, see
                <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html\">Using
                    Key Policies in Amazon Web Services KMS</a> in the <i>Amazon Web Services Key Management Service Developer
                Guide</i>.</p>")
  @as("KmsKeyId")
  kmsKeyId: option<kmsKeyId>,
}
@ocaml.doc("<p>The security configuration for <code>OnlineStore</code>.</p>")
type onlineStoreSecurityConfig = {
  @ocaml.doc("<p>The ID of the Amazon Web Services Key Management Service (Amazon Web Services KMS) key that SageMaker Feature Store uses
         to encrypt the Amazon S3 objects at rest using Amazon S3 server-side encryption.</p>
         <p>The caller (either IAM user or IAM role) of <code>CreateFeatureGroup</code> must have
         below permissions to the <code>OnlineStore</code>
            <code>KmsKeyId</code>:</p>
         <ul>
            <li>
               <p>
                  <code>\"kms:Encrypt\"</code>
               </p>
            </li>
            <li>
               <p>
                  <code>\"kms:Decrypt\"</code>
               </p>
            </li>
            <li>
               <p>
                  <code>\"kms:DescribeKey\"</code>
               </p>
            </li>
            <li>
               <p>
                  <code>\"kms:CreateGrant\"</code>
               </p>
            </li>
            <li>
               <p>
                  <code>\"kms:RetireGrant\"</code>
               </p>
            </li>
            <li>
               <p>
                  <code>\"kms:ReEncryptFrom\"</code>
               </p>
            </li>
            <li>
               <p>
                  <code>\"kms:ReEncryptTo\"</code>
               </p>
            </li>
            <li>
               <p>
                  <code>\"kms:GenerateDataKey\"</code>
               </p>
            </li>
            <li>
               <p>
                  <code>\"kms:ListAliases\"</code>
               </p>
            </li>
            <li>
               <p>
                  <code>\"kms:ListGrants\"</code>
               </p>
            </li>
            <li>
               <p>
                  <code>\"kms:RevokeGrant\"</code>
               </p>
            </li>
         </ul>
         <p>The caller (either IAM user or IAM role) to all DataPlane operations
            (<code>PutRecord</code>, <code>GetRecord</code>, <code>DeleteRecord</code>) must have
         the following permissions to the <code>KmsKeyId</code>:</p>
         <ul>
            <li>
               <p>
                  <code>\"kms:Decrypt\"</code>
               </p>
            </li>
         </ul>")
  @as("KmsKeyId")
  kmsKeyId: option<kmsKeyId>,
}
@ocaml.doc("<p>Your OIDC IdP workforce configuration.</p>")
type oidcConfigForResponse = {
  @ocaml.doc(
    "<p>The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.</p>"
  )
  @as("JwksUri")
  jwksUri: option<oidcEndpoint>,
  @ocaml.doc("<p>The OIDC IdP logout endpoint used to configure your private workforce.</p>")
  @as("LogoutEndpoint")
  logoutEndpoint: option<oidcEndpoint>,
  @ocaml.doc(
    "<p>The OIDC IdP user information endpoint used to configure your private workforce.</p>"
  )
  @as("UserInfoEndpoint")
  userInfoEndpoint: option<oidcEndpoint>,
  @ocaml.doc("<p>The OIDC IdP token endpoint used to configure your private workforce.</p>")
  @as("TokenEndpoint")
  tokenEndpoint: option<oidcEndpoint>,
  @ocaml.doc("<p>The OIDC IdP authorization endpoint used to configure your private workforce.</p>")
  @as("AuthorizationEndpoint")
  authorizationEndpoint: option<oidcEndpoint>,
  @ocaml.doc("<p>The OIDC IdP issuer used to configure your private workforce.</p>") @as("Issuer")
  issuer: option<oidcEndpoint>,
  @ocaml.doc("<p>The OIDC IdP client ID used to configure your private workforce.</p>")
  @as("ClientId")
  clientId: option<clientId>,
}
@ocaml.doc("<p>Use this parameter to configure your OIDC Identity Provider (IdP).</p>")
type oidcConfig = {
  @ocaml.doc(
    "<p>The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.</p>"
  )
  @as("JwksUri")
  jwksUri: oidcEndpoint,
  @ocaml.doc("<p>The OIDC IdP logout endpoint used to configure your private workforce.</p>")
  @as("LogoutEndpoint")
  logoutEndpoint: oidcEndpoint,
  @ocaml.doc(
    "<p>The OIDC IdP user information endpoint used to configure your private workforce.</p>"
  )
  @as("UserInfoEndpoint")
  userInfoEndpoint: oidcEndpoint,
  @ocaml.doc("<p>The OIDC IdP token endpoint used to configure your private workforce.</p>")
  @as("TokenEndpoint")
  tokenEndpoint: oidcEndpoint,
  @ocaml.doc("<p>The OIDC IdP authorization endpoint used to configure your private workforce.</p>")
  @as("AuthorizationEndpoint")
  authorizationEndpoint: oidcEndpoint,
  @ocaml.doc("<p>The OIDC IdP issuer used to configure your private workforce.</p>") @as("Issuer")
  issuer: oidcEndpoint,
  @ocaml.doc("<p>The OIDC IdP client secret used to configure your private workforce.</p>")
  @as("ClientSecret")
  clientSecret: clientSecret,
  @ocaml.doc("<p>The OIDC IdP client ID used to configure your private workforce.</p>")
  @as("ClientId")
  clientId: clientId,
}
@ocaml.doc("<p>The status of <code>OfflineStore</code>.</p>")
type offlineStoreStatus = {
  @ocaml.doc("<p>The justification for why the OfflineStoreStatus is Blocked (if applicable).</p>")
  @as("BlockedReason")
  blockedReason: option<blockedReason>,
  @ocaml.doc("<p>An <code>OfflineStore</code> status.</p>") @as("Status")
  status: offlineStoreStatusValue,
}
@ocaml.doc("<p>Specifies the number of training jobs that this hyperparameter tuning job launched,
            categorized by the status of their objective metric. The objective metric status shows
            whether the
            final
            objective metric for the training job has been evaluated by the
            tuning job and used in the hyperparameter tuning process.</p>")
type objectiveStatusCounters = {
  @ocaml.doc("<p>The number of training jobs whose final objective metric was not evaluated and used in
            the hyperparameter tuning process. This typically occurs when the training job failed or
            did not emit an objective metric.</p>")
  @as("Failed")
  failed: option<objectiveStatusCounter>,
  @ocaml.doc("<p>The number of training jobs that are in progress and pending evaluation of their final
            objective metric.</p>")
  @as("Pending")
  pending: option<objectiveStatusCounter>,
  @ocaml.doc("<p>The number of training jobs whose final objective metric was evaluated by the
            hyperparameter tuning job and used in the hyperparameter tuning process.</p>")
  @as("Succeeded")
  succeeded: option<objectiveStatusCounter>,
}
@ocaml.doc("<p>Configures Amazon SNS notifications of available or expiring work items for work
            teams.</p>")
type notificationConfiguration = {
  @ocaml.doc("<p>The ARN for the Amazon SNS topic to which notifications should be published.</p>")
  @as("NotificationTopicArn")
  notificationTopicArn: option<notificationTopicArn>,
}
@ocaml.doc("<p>Contains the notebook instance lifecycle configuration script.</p>
        <p>Each lifecycle configuration script has a limit of 16384 characters.</p>
        <p>The value of the <code>$PATH</code> environment variable that is available to both
            scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.</p>
        <p>View CloudWatch Logs for notebook instance lifecycle configurations in log group
                <code>/aws/sagemaker/NotebookInstances</code> in log stream
                <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.</p>
        <p>Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs
            for longer than 5 minutes, it fails and the notebook instance is not created or
            started.</p>
        <p>For information about notebook instance lifestyle configurations, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html\">Step
                2.1: (Optional) Customize a Notebook Instance</a>.</p>")
type notebookInstanceLifecycleHook = {
  @ocaml.doc("<p>A base64-encoded string that contains a shell script for a notebook instance lifecycle
            configuration.</p>")
  @as("Content")
  content: option<notebookInstanceLifecycleConfigContent>,
}
@ocaml.doc("<p>Provides a summary of a notebook instance lifecycle configuration.</p>")
type notebookInstanceLifecycleConfigSummary = {
  @ocaml.doc("<p>A timestamp that tells when the lifecycle configuration was last modified.</p>")
  @as("LastModifiedTime")
  lastModifiedTime: option<lastModifiedTime>,
  @ocaml.doc("<p>A timestamp that tells when the lifecycle configuration was created.</p>")
  @as("CreationTime")
  creationTime: option<creationTime>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the lifecycle configuration.</p>")
  @as("NotebookInstanceLifecycleConfigArn")
  notebookInstanceLifecycleConfigArn: notebookInstanceLifecycleConfigArn,
  @ocaml.doc("<p>The name of the lifecycle configuration.</p>")
  @as("NotebookInstanceLifecycleConfigName")
  notebookInstanceLifecycleConfigName: notebookInstanceLifecycleConfigName,
}
type notebookInstanceAcceleratorTypes = array<notebookInstanceAcceleratorType>
type neoVpcSubnets = array<neoVpcSubnetId>
type neoVpcSecurityGroupIds = array<neoVpcSecurityGroupId>
@ocaml.doc("<p>Specifies additional configuration for hosting multi-model endpoints.</p>")
type multiModelConfig = {
  @ocaml.doc("<p>Whether to cache models for a multi-model endpoint. By default, multi-model endpoints
            cache models so that a model does not have to be loaded into memory each time it is
            invoked. Some use cases do not benefit from model caching. For example, if an endpoint
            hosts a large number of models that are each invoked infrequently, the endpoint might
            perform better if you disable model caching. To disable model caching, set the value of
            this parameter to <code>Disabled</code>.</p>")
  @as("ModelCacheSetting")
  modelCacheSetting: option<modelCacheSetting>,
}
@ocaml.doc("<p>A time limit for how long the monitoring job is allowed to run before stopping.</p>")
type monitoringStoppingCondition = {
  @ocaml.doc("<p>The maximum runtime allowed in seconds.</p>
         <note>
            <p>The <code>MaxRuntimeInSeconds</code> cannot exceed the frequency of the job. For data quality and
            model explainability, this can be up to 3600 seconds for an hourly schedule. For model
            bias and model quality hourly schedules, this can be up to 1800 seconds.</p>
         </note>")
  @as("MaxRuntimeInSeconds")
  maxRuntimeInSeconds: monitoringMaxRuntimeInSeconds,
}
@ocaml.doc("<p>The statistics resource for a monitoring job.</p>")
type monitoringStatisticsResource = {
  @ocaml.doc("<p>The Amazon S3 URI for the statistics resource.</p>") @as("S3Uri")
  s3Uri: option<s3Uri>,
}
@ocaml.doc("<p>Summarizes the monitoring schedule.</p>")
type monitoringScheduleSummary = {
  @ocaml.doc("<p>The type of the monitoring job definition that the schedule is for.</p>")
  @as("MonitoringType")
  monitoringType: option<monitoringType>,
  @ocaml.doc("<p>The name of the monitoring job definition that the schedule is for.</p>")
  @as("MonitoringJobDefinitionName")
  monitoringJobDefinitionName: option<monitoringJobDefinitionName>,
  @ocaml.doc("<p>The name of the endpoint using the monitoring schedule.</p>") @as("EndpointName")
  endpointName: option<endpointName>,
  @ocaml.doc("<p>The status of the monitoring schedule.</p>") @as("MonitoringScheduleStatus")
  monitoringScheduleStatus: scheduleStatus,
  @ocaml.doc("<p>The last time the monitoring schedule was modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: timestamp_,
  @ocaml.doc("<p>The creation time of the monitoring schedule.</p>") @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>")
  @as("MonitoringScheduleArn")
  monitoringScheduleArn: monitoringScheduleArn,
  @ocaml.doc("<p>The name of the monitoring schedule.</p>") @as("MonitoringScheduleName")
  monitoringScheduleName: monitoringScheduleName,
}
@ocaml.doc("<p>Information about where and how you want to store the results of a monitoring
         job.</p>")
type monitoringS3Output = {
  @ocaml.doc("<p>Whether to upload the results of the monitoring job continuously or after the job
         completes.</p>")
  @as("S3UploadMode")
  s3UploadMode: option<processingS3UploadMode>,
  @ocaml.doc("<p>The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a
         monitoring job. LocalPath is an absolute path for the output data.</p>")
  @as("LocalPath")
  localPath: processingLocalPath,
  @ocaml.doc("<p>A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a
         monitoring job.</p>")
  @as("S3Uri")
  s3Uri: monitoringS3Uri,
}
@ocaml.doc("<p>Summary information about a monitoring job.</p>")
type monitoringJobDefinitionSummary = {
  @ocaml.doc("<p>The name of the endpoint that the job monitors.</p>") @as("EndpointName")
  endpointName: endpointName,
  @ocaml.doc("<p>The time that the monitoring job was created.</p>") @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the monitoring job.</p>")
  @as("MonitoringJobDefinitionArn")
  monitoringJobDefinitionArn: monitoringJobDefinitionArn,
  @ocaml.doc("<p>The name of the monitoring job.</p>") @as("MonitoringJobDefinitionName")
  monitoringJobDefinitionName: monitoringJobDefinitionName,
}
@ocaml.doc("<p>The ground truth labels for the dataset used for the monitoring job.</p>")
type monitoringGroundTruthS3Input = {
  @ocaml.doc("<p>The address of the Amazon S3 location of the ground truth labels.</p>")
  @as("S3Uri")
  s3Uri: option<monitoringS3Uri>,
}
@ocaml.doc("<p>Summary of information about the last monitoring job to run.</p>")
type monitoringExecutionSummary = {
  @ocaml.doc("<p>The type of the monitoring job.</p>") @as("MonitoringType")
  monitoringType: option<monitoringType>,
  @ocaml.doc("<p>The name of the monitoring job.</p>") @as("MonitoringJobDefinitionName")
  monitoringJobDefinitionName: option<monitoringJobDefinitionName>,
  @ocaml.doc("<p>Contains the reason a monitoring job failed, if it failed.</p>")
  @as("FailureReason")
  failureReason: option<failureReason>,
  @ocaml.doc("<p>The name of the endpoint used to run the monitoring job.</p>") @as("EndpointName")
  endpointName: option<endpointName>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the monitoring job.</p>") @as("ProcessingJobArn")
  processingJobArn: option<processingJobArn>,
  @ocaml.doc("<p>The status of the monitoring job.</p>") @as("MonitoringExecutionStatus")
  monitoringExecutionStatus: executionStatus,
  @ocaml.doc("<p>A timestamp that indicates the last time the monitoring job was modified.</p>")
  @as("LastModifiedTime")
  lastModifiedTime: timestamp_,
  @ocaml.doc("<p>The time at which the monitoring job was created.</p>") @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc("<p>The time the monitoring job was scheduled.</p>") @as("ScheduledTime")
  scheduledTime: timestamp_,
  @ocaml.doc("<p>The name of the monitoring schedule.</p>") @as("MonitoringScheduleName")
  monitoringScheduleName: monitoringScheduleName,
}
type monitoringEnvironmentMap = Js.Dict.t<processingEnvironmentValue>
type monitoringContainerArguments = array<containerArgument>
@ocaml.doc("<p>The constraints resource for a monitoring job.</p>")
type monitoringConstraintsResource = {
  @ocaml.doc("<p>The Amazon S3 URI for the constraints resource.</p>") @as("S3Uri")
  s3Uri: option<s3Uri>,
}
@ocaml.doc("<p>Configuration for the cluster used to run model monitoring jobs.</p>")
type monitoringClusterConfig = {
  @ocaml.doc("<p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data
         on the storage volume attached to the ML compute instance(s) that run the model monitoring
         job.</p>")
  @as("VolumeKmsKeyId")
  volumeKmsKeyId: option<kmsKeyId>,
  @ocaml.doc("<p>The size of the ML storage volume, in gigabytes, that you want to provision. You must
         specify sufficient ML storage for your scenario.</p>")
  @as("VolumeSizeInGB")
  volumeSizeInGB: processingVolumeSizeInGB,
  @ocaml.doc("<p>The ML compute instance type for the processing job.</p>") @as("InstanceType")
  instanceType: processingInstanceType,
  @ocaml.doc("<p>The number of ML compute instances to use in the model monitoring job. For distributed
         processing jobs, specify a value greater than 1. The default value is 1.</p>")
  @as("InstanceCount")
  instanceCount: processingInstanceCount,
}
@ocaml.doc("<p>Provides summary information about a model.</p>")
type modelSummary = {
  @ocaml.doc("<p>A timestamp that indicates when the model was created.</p>") @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model.</p>") @as("ModelArn")
  modelArn: modelArn,
  @ocaml.doc("<p>The name of the model that you want a summary for.</p>") @as("ModelName")
  modelName: modelName,
}
@ocaml.doc("<p>Metadata for Model steps.</p>")
type modelStepMetadata = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the created model.</p>") @as("Arn")
  arn: option<string256>,
}
@ocaml.doc("<p>Provides summary information about a model package.</p>")
type modelPackageSummary = {
  @ocaml.doc("<p>The approval status of the model. This can be one of the following values.</p>
            <ul>
            <li>
                    <p>
                  <code>APPROVED</code> - The model is approved</p>
                </li>
            <li>
                    <p>
                  <code>REJECTED</code> - The model is rejected.</p>
                </li>
            <li>
                    <p>
                  <code>PENDING_MANUAL_APPROVAL</code> - The model is waiting for manual
                        approval.</p>
                </li>
         </ul>")
  @as("ModelApprovalStatus")
  modelApprovalStatus: option<modelApprovalStatus>,
  @ocaml.doc("<p>The overall status of the model package.</p>") @as("ModelPackageStatus")
  modelPackageStatus: modelPackageStatus,
  @ocaml.doc("<p>A timestamp that shows when the model package was created.</p>")
  @as("CreationTime")
  creationTime: creationTime,
  @ocaml.doc("<p>A brief description of the model package.</p>") @as("ModelPackageDescription")
  modelPackageDescription: option<entityDescription>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model package.</p>") @as("ModelPackageArn")
  modelPackageArn: modelPackageArn,
  @ocaml.doc("<p>If the model package is a versioned model, the version of the model.</p>")
  @as("ModelPackageVersion")
  modelPackageVersion: option<modelPackageVersion>,
  @ocaml.doc("<p>If the model package is a versioned model, the model group that the versioned model
            belongs to.</p>")
  @as("ModelPackageGroupName")
  modelPackageGroupName: option<entityName>,
  @ocaml.doc("<p>The name of the model package.</p>") @as("ModelPackageName")
  modelPackageName: entityName,
}
@ocaml.doc("<p>Represents the overall status of a model package.</p>")
type modelPackageStatusItem = {
  @ocaml.doc("<p>if the overall status is <code>Failed</code>, the reason for the failure.</p>")
  @as("FailureReason")
  failureReason: option<string_>,
  @ocaml.doc("<p>The current status.</p>") @as("Status") status: detailedModelPackageStatus,
  @ocaml.doc("<p>The name of the model package for which the overall status is being reported.</p>")
  @as("Name")
  name: entityName,
}
@ocaml.doc("<p>Summary information about a model group.</p>")
type modelPackageGroupSummary = {
  @ocaml.doc("<p>The status of the model group.</p>") @as("ModelPackageGroupStatus")
  modelPackageGroupStatus: modelPackageGroupStatus,
  @ocaml.doc("<p>The time that the model group was created.</p>") @as("CreationTime")
  creationTime: creationTime,
  @ocaml.doc("<p>A description of the model group.</p>") @as("ModelPackageGroupDescription")
  modelPackageGroupDescription: option<entityDescription>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model group.</p>")
  @as("ModelPackageGroupArn")
  modelPackageGroupArn: modelPackageGroupArn,
  @ocaml.doc("<p>The name of the model group.</p>") @as("ModelPackageGroupName")
  modelPackageGroupName: entityName,
}
type modelPackageArnList = array<modelPackageArn>
@ocaml.doc("<p>A summary of the model metadata.</p>")
type modelMetadataSummary = {
  @ocaml.doc("<p>The framework version of the model.</p>") @as("FrameworkVersion")
  frameworkVersion: string_,
  @ocaml.doc("<p>The name of the model.</p>") @as("Model") model: string_,
  @ocaml.doc("<p>The machine learning task of the model.</p>") @as("Task") task: string_,
  @ocaml.doc("<p>The machine learning framework of the model.</p>") @as("Framework")
  framework: string_,
  @ocaml.doc("<p>The machine learning domain of the model.</p>") @as("Domain") domain: string_,
}
@ocaml.doc("<p>Part of the search expression. You can specify the name and value 
          (domain, task, framework, framework version, task, and model).</p>")
type modelMetadataFilter = {
  @ocaml.doc("<p>The value to filter the model metadata.</p>") @as("Value") value: string256,
  @ocaml.doc("<p>The name of the of the model to filter by.</p>") @as("Name")
  name: modelMetadataFilterType,
}
@ocaml.doc("<p>The model latency threshold.</p>")
type modelLatencyThreshold = {
  @ocaml.doc("<p>The model latency percentile value in milliseconds.</p>")
  @as("ValueInMilliseconds")
  valueInMilliseconds: option<integer_>,
  @ocaml.doc("<p>The model latency percentile threshold.</p>") @as("Percentile")
  percentile: option<string64>,
}
@ocaml.doc("<p>Input object for the model.</p>")
type modelInput = {
  @ocaml.doc("<p>The input configuration object for the model.</p>") @as("DataInputConfig")
  dataInputConfig: dataInputConfig,
}
@ocaml.doc("<p>Provides information to verify the integrity of stored model artifacts. </p>")
type modelDigests = {
  @ocaml.doc("<p>Provides a hash value that uniquely identifies the stored model
            artifacts.</p>")
  @as("ArtifactDigest")
  artifactDigest: option<artifactDigest>,
}
@ocaml.doc("<p>Provides information about the endpoint of the model deployment.</p>")
type modelDeployResult = {
  @ocaml.doc("<p>The name of the endpoint to which the model has been deployed.</p>
         <note>
            <p>If model deployment fails, this field is omitted from the response.</p>
         </note>")
  @as("EndpointName")
  endpointName: option<endpointName>,
}
@ocaml.doc("<p>Specifies how to generate the endpoint name for an automatic one-click Autopilot model
         deployment.</p>")
type modelDeployConfig = {
  @ocaml.doc("<p>Specifies the endpoint name to use for a one-click Autopilot model deployment if the
         endpoint name is not generated automatically.</p>
         <note>
            <p>Specify the <code>EndpointName</code> if and only if you set
               <code>AutoGenerateEndpointName</code> to <code>False</code>; otherwise a 400 error is
            thrown.</p>
         </note>")
  @as("EndpointName")
  endpointName: option<endpointName>,
  @ocaml.doc("<p>Set to <code>True</code> to automatically generate an endpoint name for a one-click
         Autopilot model deployment; set to <code>False</code> otherwise. The default value is
            <code>False</code>.</p>
         <note>
            <p>If you set <code>AutoGenerateEndpointName</code> to <code>True</code>, do not specify
            the <code>EndpointName</code>; otherwise a 400 error is thrown.</p>
         </note>")
  @as("AutoGenerateEndpointName")
  autoGenerateEndpointName: option<autoGenerateEndpointName>,
}
@ocaml.doc("<p>Configures the timeout and maximum number of retries for processing a transform job
            invocation.</p>")
type modelClientConfig = {
  @ocaml.doc("<p>The maximum number of retries when invocation requests are failing.</p>")
  @as("InvocationsMaxRetries")
  invocationsMaxRetries: option<invocationsMaxRetries>,
  @ocaml.doc("<p>The timeout value in seconds for an invocation request.</p>")
  @as("InvocationsTimeoutInSeconds")
  invocationsTimeoutInSeconds: option<invocationsTimeoutInSeconds>,
}
@ocaml.doc("<p>Provides information about the location that is configured for storing model
            artifacts. </p>
        <p>Model artifacts are the output that results from training a model, and typically
            consist of trained parameters, a model definition that describes how to compute
            inferences, and other metadata.</p>")
type modelArtifacts = {
  @ocaml.doc("<p>The path of the S3 object that contains the model artifacts. For example,
                <code>s3://bucket-name/keynameprefix/model.tar.gz</code>.</p>")
  @as("S3ModelArtifacts")
  s3ModelArtifacts: s3Uri,
}
@ocaml.doc("<p></p>")
type metricsSource = {
  @ocaml.doc("<p></p>") @as("S3Uri") s3Uri: s3Uri,
  @ocaml.doc("<p></p>") @as("ContentDigest") contentDigest: option<contentDigest>,
  @ocaml.doc("<p></p>") @as("ContentType") contentType: contentType,
}
@ocaml.doc("<p>Specifies a metric that the training algorithm
            writes
            to <code>stderr</code> or <code>stdout</code>. Amazon SageMakerhyperparameter
            tuning captures
            all
            defined metrics.
            You
            specify one metric that a hyperparameter tuning job uses as its
            objective metric to choose the best training job.</p>")
type metricDefinition = {
  @ocaml.doc("<p>A regular expression that searches the output of a training job and gets the value of
            the metric. For more information about using regular expressions to define metrics, see
                <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics.html\">Defining
                Objective Metrics</a>.</p>")
  @as("Regex")
  regex: metricRegex,
  @ocaml.doc("<p>The name of the metric.</p>") @as("Name") name: metricName,
}
@ocaml.doc("<p>Information about the metric for a candidate produced by an AutoML job.</p>")
type metricDatum = {
  @ocaml.doc("<p>The dataset split from which the AutoML job produced the metric.</p>") @as("Set")
  set: option<metricSetSource>,
  @ocaml.doc("<p>The value of the metric.</p>") @as("Value") value: option<float_>,
  @ocaml.doc("<p>The name of the metric.</p>") @as("MetricName")
  metricName: option<autoMLMetricEnum>,
}
@ocaml.doc(
  "<p>The name, value, and date and time of a metric that was emitted to Amazon CloudWatch.</p>"
)
type metricData = {
  @ocaml.doc("<p>The date and time that the algorithm emitted the metric.</p>") @as("Timestamp")
  timestamp_: option<timestamp_>,
  @ocaml.doc("<p>The value of the metric.</p>") @as("Value") value: option<float_>,
  @ocaml.doc("<p>The name of the metric.</p>") @as("MetricName") metricName: option<metricName>,
}
@ocaml.doc("<p>Metadata properties of the tracking entity, trial, or trial component.</p>")
type metadataProperties = {
  @ocaml.doc("<p>The project ID.</p>") @as("ProjectId") projectId: option<metadataPropertyValue>,
  @ocaml.doc("<p>The entity this entity was generated by.</p>") @as("GeneratedBy")
  generatedBy: option<metadataPropertyValue>,
  @ocaml.doc("<p>The repository.</p>") @as("Repository") repository: option<metadataPropertyValue>,
  @ocaml.doc("<p>The commit ID.</p>") @as("CommitId") commitId: option<metadataPropertyValue>,
}
type listTrialComponentKey256 = array<trialComponentKey256>
type listLineageEntityParameterKey = array<stringParameterValue>
@ocaml.doc("<p>Lists a summary of the properties of a lineage group. A lineage group provides a group of shareable lineage entity 
         resources.</p>")
type lineageGroupSummary = {
  @ocaml.doc("<p>The last modified time of the lineage group summary.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>The creation time of the lineage group summary.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>The display name of the lineage group summary.</p>") @as("DisplayName")
  displayName: option<experimentEntityName>,
  @ocaml.doc("<p>The name or Amazon Resource Name (ARN) of the lineage group.</p>")
  @as("LineageGroupName")
  lineageGroupName: option<experimentEntityName>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the lineage group resource.</p>")
  @as("LineageGroupArn")
  lineageGroupArn: option<lineageGroupArn>,
}
type lineageEntityParameters = Js.Dict.t<stringParameterValue>
type lifecycleConfigArns = array<studioLifecycleConfigArn>
@ocaml.doc("<p>A set of conditions for stopping a labeling job. If any of the conditions are met, the
            job is automatically stopped. You can use these conditions to control the cost of data
            labeling.</p>
        <note>
            <p>Labeling jobs fail after 30 days with an appropriate client error message.</p>
        </note>")
type labelingJobStoppingConditions = {
  @ocaml.doc("<p>The maximum number of input data objects that should be labeled.</p>")
  @as("MaxPercentageOfInputDatasetLabeled")
  maxPercentageOfInputDatasetLabeled: option<maxPercentageOfInputDatasetLabeled>,
  @ocaml.doc("<p>The maximum number of objects that can be labeled by human workers.</p>")
  @as("MaxHumanLabeledObjectCount")
  maxHumanLabeledObjectCount: option<maxHumanLabeledObjectCount>,
}
@ocaml.doc("<p>An Amazon SNS data source used for streaming labeling jobs.</p>")
type labelingJobSnsDataSource = {
  @ocaml.doc("<p>The Amazon SNS input topic Amazon Resource Name (ARN). Specify the ARN of the input topic
      you will use to send new data objects to a streaming labeling job.</p>")
  @as("SnsTopicArn")
  snsTopicArn: snsTopicArn,
}
@ocaml.doc("<p>The Amazon S3 location of the input data objects.</p>")
type labelingJobS3DataSource = {
  @ocaml.doc("<p>The Amazon S3 location of the manifest file that describes the input data objects. </p>
        <p>The input manifest file referenced in <code>ManifestS3Uri</code> must contain one of
            the following keys: <code>source-ref</code> or <code>source</code>. The value of the
            keys are interpreted as follows:</p>
        <ul>
            <li>
                <p>
                  <code>source-ref</code>: The source of the object is the Amazon S3 object
                    specified in the value. Use this value when the object is a binary object, such
                    as an image.</p>
            </li>
            <li>
                <p>
                  <code>source</code>: The source of the object is the value. Use this
                    value when the object is a text value.</p>
            </li>
         </ul>
        <p>If you are a new user of Ground Truth, it is recommended you review <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-input-data-input-manifest.html\">Use an Input Manifest File </a> in the Amazon SageMaker Developer Guide to learn how to
            create an input manifest file.</p>")
  @as("ManifestS3Uri")
  manifestS3Uri: s3Uri,
}
@ocaml.doc("<p>Configure encryption on the storage volume attached to the ML compute instance used to
            run automated data labeling model training and inference. </p>")
type labelingJobResourceConfig = {
  @ocaml.doc("<p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume
            attached to the ML compute instance(s) that run the training and inference jobs used for
            automated data labeling. </p>
        <p>You can only specify a <code>VolumeKmsKeyId</code> when you create a labeling job with
            automated data labeling enabled using the API operation <code>CreateLabelingJob</code>.
            You cannot specify an Amazon Web Services KMS key to encrypt the storage volume used for
            automated data labeling model training and inference when you create a labeling job
            using the console. To learn more, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-security.html\">Output Data and Storage Volume
                Encryption</a>.</p>
        <p>The <code>VolumeKmsKeyId</code> can be any of the following formats:</p>
        <ul>
            <li>
                <p>KMS Key ID</p>
                <p>
                    <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>
                </p>
            </li>
            <li>
                <p>Amazon Resource Name (ARN) of a KMS Key</p>
                <p>
                    <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>
                </p>
            </li>
         </ul>")
  @as("VolumeKmsKeyId")
  volumeKmsKeyId: option<kmsKeyId>,
}
@ocaml.doc("<p>Output configuration information for a labeling job.</p>")
type labelingJobOutputConfig = {
  @ocaml.doc("<p>An Amazon Simple Notification Service (Amazon SNS) output topic ARN. Provide a <code>SnsTopicArn</code> if you want to
            do real time chaining to another streaming job and receive an Amazon SNS notifications each
            time a data object is submitted by a worker.</p>
         <p>If you provide an <code>SnsTopicArn</code> in <code>OutputConfig</code>, when workers
            complete labeling tasks, Ground Truth will send labeling task output data to the SNS output
            topic you specify here. </p>
        <p>To learn more, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-labeling-job.html#sms-streaming-how-it-works-output-data\">Receive Output Data from a Streaming Labeling
                Job</a>. </p>")
  @as("SnsTopicArn")
  snsTopicArn: option<snsTopicArn>,
  @ocaml.doc("<p>The Amazon Web Services Key Management Service ID of the key used to encrypt the output data, if any.</p>
        <p>If you provide your own KMS key ID, you must add the required permissions to your KMS
            key described in <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-security-permission.html#sms-security-kms-permissions\">Encrypt Output Data and Storage Volume with Amazon Web Services KMS</a>.</p>
        <p>If you don't provide a KMS key ID, Amazon SageMaker uses the default Amazon Web Services KMS key for Amazon S3 for your
            role's account to encrypt your output data.</p>
        <p>If you use a bucket policy with an <code>s3:PutObject</code> permission that only
            allows objects with server-side encryption, set the condition key of
                <code>s3:x-amz-server-side-encryption</code> to <code>\"aws:kms\"</code>. For more
            information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\">KMS-Managed Encryption Keys</a> in the <i>Amazon Simple Storage Service Developer
                Guide.</i>
         </p>")
  @as("KmsKeyId")
  kmsKeyId: option<kmsKeyId>,
  @ocaml.doc("<p>The Amazon S3 location to write output data.</p>") @as("S3OutputPath")
  s3OutputPath: s3Uri,
}
@ocaml.doc("<p>Specifies the location of the output produced by the labeling job. </p>")
type labelingJobOutput = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) for the most recent Amazon SageMaker model trained as part of
            automated data labeling. </p>")
  @as("FinalActiveLearningModelArn")
  finalActiveLearningModelArn: option<modelArn>,
  @ocaml.doc("<p>The Amazon S3 bucket location of the manifest file for labeled data. </p>")
  @as("OutputDatasetS3Uri")
  outputDatasetS3Uri: s3Uri,
}
@ocaml.doc("<p>Provides counts for human-labeled tasks in the labeling job.</p>")
type labelCountersForWorkteam = {
  @ocaml.doc("<p>The total number of tasks in the labeling job.</p>") @as("Total")
  total: option<labelCounter>,
  @ocaml.doc("<p>The total number of data objects that need to be labeled by a human worker.</p>")
  @as("PendingHuman")
  pendingHuman: option<labelCounter>,
  @ocaml.doc("<p>The total number of data objects labeled by a human worker.</p>")
  @as("HumanLabeled")
  humanLabeled: option<labelCounter>,
}
@ocaml.doc("<p>Provides a breakdown of the number of objects labeled.</p>")
type labelCounters = {
  @ocaml.doc("<p>The total number of objects not yet labeled.</p>") @as("Unlabeled")
  unlabeled: option<labelCounter>,
  @ocaml.doc("<p>The total number of objects that could not be labeled due to an error.</p>")
  @as("FailedNonRetryableError")
  failedNonRetryableError: option<labelCounter>,
  @ocaml.doc("<p>The total number of objects labeled by automated data labeling.</p>")
  @as("MachineLabeled")
  machineLabeled: option<labelCounter>,
  @ocaml.doc("<p>The total number of objects labeled by a human worker.</p>") @as("HumanLabeled")
  humanLabeled: option<labelCounter>,
  @ocaml.doc("<p>The total number of objects labeled.</p>") @as("TotalLabeled")
  totalLabeled: option<labelCounter>,
}
@ocaml.doc("<p>The specification of a Jupyter kernel.</p>")
type kernelSpec = {
  @ocaml.doc("<p>The display name of the kernel.</p>") @as("DisplayName")
  displayName: option<kernelDisplayName>,
  @ocaml.doc("<p>The name of the Jupyter kernel in the image. This value is case sensitive.</p>")
  @as("Name")
  name: kernelName,
}
type jsonContentTypes = array<jsonContentType>
@ocaml.doc("<p>Defines the possible values for an integer hyperparameter.</p>")
type integerParameterRangeSpecification = {
  @ocaml.doc("<p>The maximum integer value allowed.</p>") @as("MaxValue") maxValue: parameterValue,
  @ocaml.doc("<p>The minimum integer value allowed.</p>") @as("MinValue") minValue: parameterValue,
}
@ocaml.doc("<p>For a hyperparameter of the integer type, specifies the range
            that
            a hyperparameter tuning job searches.</p>")
type integerParameterRange = {
  @ocaml.doc("<p>The scale that hyperparameter tuning uses to search the hyperparameter range. For
            information about choosing a hyperparameter scale, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type\">Hyperparameter Scaling</a>. One of the following values:</p>
        <dl>
            <dt>Auto</dt>
            <dd>
                    <p>Amazon SageMaker hyperparameter tuning chooses the best scale for the
                        hyperparameter.</p>
                </dd>
            <dt>Linear</dt>
            <dd>
                    <p>Hyperparameter tuning searches the values in the hyperparameter range by
                        using a linear scale.</p>
                </dd>
            <dt>Logarithmic</dt>
            <dd>
                    <p>Hyperparameter tuning searches the values in the hyperparameter range by
                        using a logarithmic scale.</p>
                    <p>Logarithmic scaling works only for ranges that have only values greater
                        than 0.</p>
                </dd>
         </dl>")
  @as("ScalingType")
  scalingType: option<hyperParameterScalingType>,
  @ocaml.doc("<p>The maximum
            value
            of the hyperparameter to search.</p>")
  @as("MaxValue")
  maxValue: parameterValue,
  @ocaml.doc("<p>The minimum
            value
            of the hyperparameter to search.</p>")
  @as("MinValue")
  minValue: parameterValue,
  @ocaml.doc("<p>The name of the hyperparameter to search.</p>") @as("Name") name: parameterKey,
}
type inputModes = array<trainingInputMode>
@ocaml.doc("<p>Contains information about the location of input model artifacts, the name and
            shape
            of the expected data inputs, and the framework in which the model was trained.</p>")
type inputConfig = {
  @ocaml.doc("<p>Specifies the framework version to use. This API field is only supported for the PyTorch and TensorFlow frameworks.</p>
        <p>For information about framework versions supported for cloud targets and edge devices, see 
            <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/neo-supported-cloud.html\">Cloud Supported Instance Types and Frameworks</a> and 
            <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/neo-supported-devices-edge-frameworks.html\">Edge Supported Frameworks</a>.</p>")
  @as("FrameworkVersion")
  frameworkVersion: option<frameworkVersion>,
  @ocaml.doc("<p>Identifies the framework in which the model was trained. For example:
            TENSORFLOW.</p>")
  @as("Framework")
  framework: framework,
  @ocaml.doc("<p>Specifies the name and shape of the expected data inputs for your trained model with a
            JSON dictionary form. The data inputs are <a>InputConfig$Framework</a>
            specific. </p>
        <ul>
            <li>
                <p>
                  <code>TensorFlow</code>: You must specify the name and shape (NHWC format) of
                    the expected data inputs using a dictionary format for your trained model. The
                    dictionary formats required for the console and CLI are different.</p>
                <ul>
                  <li>
                        <p>Examples for one input:</p>
                        <ul>
                        <li>
                                <p>If using the console,
                                    <code>{\"input\":[1,1024,1024,3]}</code>
                           </p>
                            </li>
                        <li>
                                <p>If using the CLI,
                                    <code>{\\\"input\\\":[1,1024,1024,3]}</code>
                           </p>
                            </li>
                     </ul>
                    </li>
                  <li>
                        <p>Examples for two inputs:</p>
                        <ul>
                        <li>
                                <p>If using the console, <code>{\"data1\": [1,28,28,1],
                                        \"data2\":[1,28,28,1]}</code>
                           </p>
                            </li>
                        <li>
                                <p>If using the CLI, <code>{\\\"data1\\\": [1,28,28,1],
                                        \\\"data2\\\":[1,28,28,1]}</code>
                           </p>
                            </li>
                     </ul>
                    </li>
               </ul>
            </li>
            <li>
                <p>
                  <code>KERAS</code>: You must specify the name and shape (NCHW format) of
                    expected data inputs using a dictionary format for your trained model. Note that
                    while Keras model artifacts should be uploaded in NHWC (channel-last) format,
                        <code>DataInputConfig</code> should be specified in NCHW (channel-first)
                    format. The dictionary formats required for the console and CLI are
                    different.</p>
                <ul>
                  <li>
                        <p>Examples for one input:</p>
                        <ul>
                        <li>
                                <p>If using the console,
                                    <code>{\"input_1\":[1,3,224,224]}</code>
                           </p>
                            </li>
                        <li>
                                <p>If using the CLI,
                                    <code>{\\\"input_1\\\":[1,3,224,224]}</code>
                           </p>
                            </li>
                     </ul>
                    </li>
                  <li>
                        <p>Examples for two inputs:</p>
                        <ul>
                        <li>
                                <p>If using the console, <code>{\"input_1\": [1,3,224,224],
                                        \"input_2\":[1,3,224,224]} </code>
                           </p>
                            </li>
                        <li>
                                <p>If using the CLI, <code>{\\\"input_1\\\": [1,3,224,224],
                                        \\\"input_2\\\":[1,3,224,224]}</code>
                           </p>
                            </li>
                     </ul>
                    </li>
               </ul>
            </li>
            <li>
                <p>
                  <code>MXNET/ONNX/DARKNET</code>: You must specify the name and shape (NCHW format) of
                    the expected data inputs in order using a dictionary format for your trained
                    model. The dictionary formats required for the console and CLI are
                    different.</p>
                <ul>
                  <li>
                        <p>Examples for one input:</p>
                        <ul>
                        <li>
                                <p>If using the console,
                                    <code>{\"data\":[1,3,1024,1024]}</code>
                           </p>
                            </li>
                        <li>
                                <p>If using the CLI,
                                    <code>{\\\"data\\\":[1,3,1024,1024]}</code>
                           </p>
                            </li>
                     </ul>
                    </li>
                  <li>
                        <p>Examples for two inputs:</p>
                        <ul>
                        <li>
                                <p>If using the console, <code>{\"var1\": [1,1,28,28],
                                        \"var2\":[1,1,28,28]} </code>
                           </p>
                            </li>
                        <li>
                                <p>If using the CLI, <code>{\\\"var1\\\": [1,1,28,28],
                                        \\\"var2\\\":[1,1,28,28]}</code>
                           </p>
                            </li>
                     </ul>
                    </li>
               </ul>
            </li>
            <li>
                <p>
                  <code>PyTorch</code>: You can either specify the name and shape (NCHW format)
                    of expected data inputs in order using a dictionary format for your trained
                    model or you can specify the shape only using a list format. The dictionary
                    formats required for the console and CLI are different. The list formats for the
                    console and CLI are the same.</p>
                <ul>
                  <li>
                        <p>Examples for one input in dictionary format:</p>
                        <ul>
                        <li>
                                <p>If using the console,
                                    <code>{\"input0\":[1,3,224,224]}</code>
                           </p>
                            </li>
                        <li>
                                <p>If using the CLI,
                                    <code>{\\\"input0\\\":[1,3,224,224]}</code>
                           </p>
                            </li>
                     </ul>
                    </li>
                  <li>
                        <p>Example for one input in list format:
                            <code>[[1,3,224,224]]</code>
                     </p>
                    </li>
                  <li>
                        <p>Examples for two inputs in dictionary format:</p>
                        <ul>
                        <li>
                                <p>If using the console, <code>{\"input0\":[1,3,224,224],
                                        \"input1\":[1,3,224,224]}</code>
                           </p>
                            </li>
                        <li>
                                <p>If using the CLI, <code>{\\\"input0\\\":[1,3,224,224],
                                        \\\"input1\\\":[1,3,224,224]} </code>
                           </p>
                            </li>
                     </ul>
                    </li>
                  <li>
                        <p>Example for two inputs in list format: <code>[[1,3,224,224],
                                [1,3,224,224]]</code>
                     </p>
                    </li>
               </ul>
            </li>
            <li>
                <p>
                  <code>XGBOOST</code>: input data name and shape are not needed.</p>
            </li>
         </ul>
        <p>
            <code>DataInputConfig</code> supports the following parameters for <code>CoreML</code>
            <a>OutputConfig$TargetDevice</a> (ML Model format):</p>
        <ul>
            <li>
                <p>
                  <code>shape</code>: Input shape, for example <code>{\"input_1\": {\"shape\": [1,224,224,3]}}</code>.
                    In addition to static input shapes, CoreML converter supports Flexible input shapes:</p>
                <ul>
                  <li>
                        <p>Range Dimension. You can use the Range Dimension feature if you know the input shape
                            will be within some specific interval in that dimension,
                            for example: <code>{\"input_1\": {\"shape\": [\"1..10\", 224, 224, 3]}}</code>
                     </p>
                    </li>
                  <li>
                        <p>Enumerated shapes. Sometimes, the models are trained to work only on a select
                            set of inputs. You can enumerate all supported input shapes,
                            for example: <code>{\"input_1\": {\"shape\": [[1, 224, 224, 3], [1, 160, 160, 3]]}}</code>
                     </p>
                    </li>
               </ul>
            </li>
            <li>
                <p>
                  <code>default_shape</code>: Default input shape. You can set a default shape during
                    conversion for both Range Dimension and Enumerated Shapes. For example
                    <code>{\"input_1\": {\"shape\": [\"1..10\", 224, 224, 3], \"default_shape\": [1, 224, 224, 3]}}</code>
               </p>
            </li>
            <li>
                <p>
                  <code>type</code>: Input type. Allowed values: <code>Image</code> and <code>Tensor</code>.
                    By default, the converter generates an ML Model with inputs of type Tensor (MultiArray).
                    User can set input type to be Image. Image input type requires additional input parameters
                    such as <code>bias</code> and <code>scale</code>.</p>
            </li>
            <li>
                <p>
                  <code>bias</code>: If the input type is an Image, you need to provide the bias vector.</p>
            </li>
            <li>
                <p>
                  <code>scale</code>: If the input type is an Image, you need to provide a scale factor.</p>
            </li>
         </ul>
        <p>CoreML <code>ClassifierConfig</code> parameters can be specified using
            <a>OutputConfig$CompilerOptions</a>. CoreML converter supports Tensorflow and PyTorch models.
            CoreML conversion examples:</p>
        <ul>
            <li>
                <p>Tensor type input:</p>
                <ul>
                  <li>
                        <p>
                        <code>\"DataInputConfig\": {\"input_1\": {\"shape\": [[1,224,224,3], [1,160,160,3]], \"default_shape\":
                            [1,224,224,3]}}</code>
                     </p>
                    </li>
               </ul>
            </li>
            <li>
                <p>Tensor type input without input name (PyTorch):</p>
                <ul>
                  <li>
                        <p>
                        <code>\"DataInputConfig\": [{\"shape\": [[1,3,224,224], [1,3,160,160]], \"default_shape\":
                            [1,3,224,224]}]</code>
                     </p>
                    </li>
               </ul>
            </li>
            <li>
                <p>Image type input:</p>
                <ul>
                  <li>
                        <p>
                        <code>\"DataInputConfig\": {\"input_1\": {\"shape\": [[1,224,224,3], [1,160,160,3]], \"default_shape\":
                            [1,224,224,3], \"type\": \"Image\", \"bias\": [-1,-1,-1], \"scale\": 0.007843137255}}</code>
                     </p>
                    </li>
                  <li>
                        <p>
                        <code>\"CompilerOptions\": {\"class_labels\": \"imagenet_labels_1000.txt\"}</code>
                     </p>
                    </li>
               </ul>
            </li>
            <li>
                <p>Image type input without input name (PyTorch):</p>
                <ul>
                  <li>
                        <p>
                        <code>\"DataInputConfig\": [{\"shape\": [[1,3,224,224], [1,3,160,160]], \"default_shape\":
                            [1,3,224,224], \"type\": \"Image\", \"bias\": [-1,-1,-1], \"scale\": 0.007843137255}]</code>
                     </p>
                    </li>
                  <li>
                        <p>
                        <code>\"CompilerOptions\": {\"class_labels\": \"imagenet_labels_1000.txt\"}</code>
                     </p>
                    </li>
               </ul>
            </li>
         </ul>
        <p>Depending on the model format, <code>DataInputConfig</code> requires the following parameters for 
            <code>ml_eia2</code> 
            <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker-Type-OutputConfig-TargetDevice\">OutputConfig:TargetDevice</a>.</p>
        <ul>
            <li>
               <p>For TensorFlow models saved in the SavedModel format, specify the input names 
                from <code>signature_def_key</code> and the input model shapes for <code>DataInputConfig</code>.  
                Specify the <code>signature_def_key</code> in 
                <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker-Type-OutputConfig-CompilerOptions\">
                     <code>OutputConfig:CompilerOptions</code>
                  </a> if 
                the model does not use TensorFlow's default signature def key. For example:</p>
                <ul>
                  <li>
                        <p>
                        <code>\"DataInputConfig\": {\"inputs\": [1, 224, 224, 3]}</code>
                     </p>
                    </li>
                  <li>
                        <p>
                        <code>\"CompilerOptions\": {\"signature_def_key\": \"serving_custom\"}</code>
                     </p> 
                    </li>
               </ul>
            </li>
            <li>
               <p>For TensorFlow models saved as a frozen graph, specify the input tensor names and shapes  
                in <code>DataInputConfig</code> and the output tensor names for <code>output_names</code> in 
                <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker-Type-OutputConfig-CompilerOptions\">
                     <code>OutputConfig:CompilerOptions</code>
                  </a>.
                For example:</p>
                <ul>
                  <li>
                     <p>
                        <code>\"DataInputConfig\": {\"input_tensor:0\": [1, 224, 224, 3]}</code>
                     </p>
                  </li>
                  <li>
                     <p>
                        <code>\"CompilerOptions\": {\"output_names\": [\"output_tensor:0\"]}</code>
                     </p>
                  </li>
               </ul>
            </li>
         </ul>")
  @as("DataInputConfig")
  dataInputConfig: dataInputConfig,
  @ocaml.doc("<p>The S3 path where the model artifacts, which result from model training, are stored.
            This path must point to a single gzip compressed tar archive (.tar.gz suffix).</p>")
  @as("S3Uri")
  s3Uri: s3Uri,
}
@ocaml.doc("<p>A structure that contains a list of recommendation jobs.</p>")
type inferenceRecommendationsJob = {
  @ocaml.doc("<p>If the job fails, provides information why the job failed.</p>")
  @as("FailureReason")
  failureReason: option<failureReason>,
  @ocaml.doc("<p>A timestamp that shows when the job was last modified.</p>")
  @as("LastModifiedTime")
  lastModifiedTime: lastModifiedTime,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker 
    to perform tasks on your behalf.</p>")
  @as("RoleArn")
  roleArn: roleArn,
  @ocaml.doc("<p>A timestamp that shows when the job completed.</p>") @as("CompletionTime")
  completionTime: option<timestamp_>,
  @ocaml.doc("<p>A timestamp that shows when the job was created.</p>") @as("CreationTime")
  creationTime: creationTime,
  @ocaml.doc("<p>The status of the job.</p>") @as("Status") status: recommendationJobStatus,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the recommendation job.</p>") @as("JobArn")
  jobArn: recommendationJobArn,
  @ocaml.doc("<p>The recommendation job type.</p>") @as("JobType") jobType: recommendationJobType,
  @ocaml.doc("<p>The job description.</p>") @as("JobDescription")
  jobDescription: recommendationJobDescription,
  @ocaml.doc("<p>The name of the job.</p>") @as("JobName") jobName: recommendationJobName,
}
@ocaml.doc("<p>Specifies details about how containers in a multi-container endpoint are run.</p>")
type inferenceExecutionConfig = {
  @ocaml.doc("<p>How containers in a multi-container are run. The following values are valid.</p>
        <ul>
            <li>
                <p>
                  <code>SERIAL</code> - Containers run as a serial pipeline.</p>
            </li>
            <li>
                <p>
                  <code>DIRECT</code> - Only the individual container that you specify is
                    run.</p>
            </li>
         </ul>")
  @as("Mode")
  mode: inferenceExecutionMode,
}
@ocaml.doc("<p>A version of a SageMaker <code>Image</code>. A version represents an existing container
        image.</p>")
type imageVersion = {
  @ocaml.doc("<p>The version number.</p>") @as("Version") version: imageVersionNumber,
  @ocaml.doc("<p>When the version was last modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: timestamp_,
  @ocaml.doc("<p>The status of the version.</p>") @as("ImageVersionStatus")
  imageVersionStatus: imageVersionStatus,
  @ocaml.doc("<p>The ARN of the version.</p>") @as("ImageVersionArn")
  imageVersionArn: imageVersionArn,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the image the version is based on.</p>")
  @as("ImageArn")
  imageArn: imageArn,
  @ocaml.doc("<p>When a create or delete operation fails, the reason for the failure.</p>")
  @as("FailureReason")
  failureReason: option<failureReason>,
  @ocaml.doc("<p>When the version was created.</p>") @as("CreationTime") creationTime: timestamp_,
}
type imageDeletePropertyList = array<imageDeleteProperty>
@ocaml.doc("<p>A SageMaker image. A SageMaker image represents a set of container images that are derived from
        a common base container image. Each of these container images is represented by a SageMaker
        <code>ImageVersion</code>.</p>")
type image = {
  @ocaml.doc("<p>When the image was last modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: timestamp_,
  @ocaml.doc("<p>The status of the image.</p>") @as("ImageStatus") imageStatus: imageStatus,
  @ocaml.doc("<p>The name of the image.</p>") @as("ImageName") imageName: imageName,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the image.</p>") @as("ImageArn")
  imageArn: imageArn,
  @ocaml.doc("<p>When a create, update, or delete operation fails, the reason for the failure.</p>")
  @as("FailureReason")
  failureReason: option<failureReason>,
  @ocaml.doc("<p>The name of the image as displayed.</p>") @as("DisplayName")
  displayName: option<imageDisplayName>,
  @ocaml.doc("<p>The description of the image.</p>") @as("Description")
  description: option<imageDescription>,
  @ocaml.doc("<p>When the image was created.</p>") @as("CreationTime") creationTime: timestamp_,
}
type hyperParameters = Js.Dict.t<hyperParameterValue>
@ocaml.doc("<p>Defines the objective metric for a hyperparameter tuning job.
            Hyperparameter
            tuning uses the value of this metric to evaluate the training jobs it launches, and
            returns the training job that results in either the highest or lowest value for this
            metric, depending on the value you specify for the <code>Type</code>
            parameter.</p>")
type hyperParameterTuningJobObjective = {
  @ocaml.doc("<p>The
            name of the metric to use for the objective metric.</p>")
  @as("MetricName")
  metricName: metricName,
  @ocaml.doc("<p>Whether to
            minimize
            or maximize the objective metric.</p>")
  @as("Type")
  type_: hyperParameterTuningJobObjectiveType,
}
@ocaml.doc("<p>Container for human task user interface information.</p>")
type humanTaskUiSummary = {
  @ocaml.doc("<p>A timestamp when SageMaker created the human task user interface.</p>")
  @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the human task user interface.</p>")
  @as("HumanTaskUiArn")
  humanTaskUiArn: humanTaskUiArn,
  @ocaml.doc("<p>The name of the human task user interface.</p>") @as("HumanTaskUiName")
  humanTaskUiName: humanTaskUiName,
}
@ocaml.doc("<p>Container for configuring the source of human task requests.</p>")
type humanLoopRequestSource = {
  @ocaml.doc("<p>Specifies whether Amazon Rekognition or Amazon Textract are used as the integration source. 
      The default field settings and JSON parsing rules are different based on the integration source. Valid values:</p>")
  @as("AwsManagedHumanLoopRequestSource")
  awsManagedHumanLoopRequestSource: awsManagedHumanLoopRequestSource,
}
@ocaml.doc("<p>Defines under what conditions SageMaker creates a human loop. Used within . See  for the required
         format of activation conditions.</p>")
type humanLoopActivationConditionsConfig = {
  @ocaml.doc("<p>JSON expressing use-case specific conditions declaratively. If any condition is matched, atomic tasks are created against the configured work team. 
         The set of conditions is different for Rekognition and Textract. For more information about how to structure the JSON, see 
         <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-human-fallback-conditions-json-schema.html\">JSON Schema for Human Loop Activation Conditions in Amazon Augmented AI</a> 
         in the <i>Amazon SageMaker Developer Guide</i>.</p>")
  @as("HumanLoopActivationConditions")
  humanLoopActivationConditions: synthesizedJsonHumanLoopActivationConditions,
}
type hookParameters = Js.Dict.t<configValue>
type groups = array<group>
@ocaml.doc("<p>Specifies configuration details for a Git repository when the repository is
            updated.</p>")
type gitConfigForUpdate = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that contains the
            credentials used to access the git repository. The secret must have a staging label of
                <code>AWSCURRENT</code> and must be in the following format:</p>
        <p>
            <code>{\"username\": <i>UserName</i>, \"password\":
                    <i>Password</i>}</code>
        </p>")
  @as("SecretArn")
  secretArn: option<secretArn>,
}
@ocaml.doc(
  "<p>Specifies configuration details for a Git repository in your Amazon Web Services account.</p>"
)
type gitConfig = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that contains the
            credentials used to access the git repository. The secret must have a staging label of
                <code>AWSCURRENT</code> and must be in the following format:</p>
        <p>
            <code>{\"username\": <i>UserName</i>, \"password\":
                    <i>Password</i>}</code>
        </p>")
  @as("SecretArn")
  secretArn: option<secretArn>,
  @ocaml.doc("<p>The default branch for the Git repository.</p>") @as("Branch")
  branch: option<branch>,
  @ocaml.doc("<p>The URL where the Git repository is located.</p>") @as("RepositoryUrl")
  repositoryUrl: gitConfigUrl,
}
type flowDefinitionTaskKeywords = array<flowDefinitionTaskKeyword>
@ocaml.doc("<p>Contains summary information about the flow definition.</p>")
type flowDefinitionSummary = {
  @ocaml.doc(
    "<p>The reason why the flow definition creation failed. A failure reason is returned only when the flow definition status is <code>Failed</code>.</p>"
  )
  @as("FailureReason")
  failureReason: option<failureReason>,
  @ocaml.doc("<p>The timestamp when SageMaker created the flow definition.</p>") @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc("<p>The status of the flow definition. Valid values:</p>") @as("FlowDefinitionStatus")
  flowDefinitionStatus: flowDefinitionStatus,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the flow definition.</p>")
  @as("FlowDefinitionArn")
  flowDefinitionArn: flowDefinitionArn,
  @ocaml.doc("<p>The name of the flow definition.</p>") @as("FlowDefinitionName")
  flowDefinitionName: flowDefinitionName,
}
@ocaml.doc("<p>Contains information about where human output will be stored.</p>")
type flowDefinitionOutputConfig = {
  @ocaml.doc("<p>The Amazon Key Management Service (KMS) key ID for server-side encryption.</p>")
  @as("KmsKeyId")
  kmsKeyId: option<kmsKeyId>,
  @ocaml.doc("<p>The Amazon S3 path where the object containing human output will be made available.</p>
         <p>To learn more about the format of Amazon A2I output data, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-output-data.html\">Amazon A2I
            Output Data</a>.</p>")
  @as("S3OutputPath")
  s3OutputPath: s3Uri,
}
@ocaml.doc("<p>Shows the final value for the
            objective
            metric for a training job that was launched by a hyperparameter
            tuning job. You define the objective metric in the
                <code>HyperParameterTuningJobObjective</code> parameter of <a>HyperParameterTuningJobConfig</a>.</p>")
type finalHyperParameterTuningJobObjectiveMetric = {
  @ocaml.doc("<p>The value of the objective metric.</p>") @as("Value") value: metricValue,
  @ocaml.doc("<p>The name of the
            objective
            metric.</p>")
  @as("MetricName")
  metricName: metricName,
  @ocaml.doc("<p>Whether to
            minimize
            or maximize the objective metric. Valid values are Minimize and
            Maximize.</p>")
  @as("Type")
  type_: option<hyperParameterTuningJobObjectiveType>,
}
@ocaml.doc("<p>The best candidate result from an AutoML training job.</p>")
type finalAutoMLJobObjectiveMetric = {
  @ocaml.doc("<p>The value of the metric with the best result.</p>") @as("Value")
  value: metricValue,
  @ocaml.doc("<p>The name of the metric with the best result. For a description of the possible objective
         metrics, see <a>AutoMLJobObjective$MetricName</a>.</p>")
  @as("MetricName")
  metricName: autoMLMetricEnum,
  @ocaml.doc("<p>The type of metric with the best result.</p>") @as("Type")
  type_: option<autoMLJobObjectiveType>,
}
@ocaml.doc("<p>A conditional statement for a search expression that includes a resource property, a
      Boolean operator, and a value. Resources that match the statement are returned in the
      results from the <a>Search</a> API.</p>
    
         <p>If you specify a <code>Value</code>, but not an <code>Operator</code>, Amazon SageMaker uses the
      equals operator.</p>
         <p>In search, there are several property types:</p>
         <dl>
            <dt>Metrics</dt>
            <dd>
               <p>To define a metric filter, enter a value using the form
            <code>\"Metrics.<name>\"</code>, where <code><name></code> is
            a metric name. For example, the following filter searches for training jobs
            with an <code>\"accuracy\"</code> metric greater than
            <code>\"0.9\"</code>:</p>
               <p>
                  <code>{</code>
               </p>
               <p>
                  <code>\"Name\": \"Metrics.accuracy\",</code>
               </p>
               <p>
                  <code>\"Operator\": \"GreaterThan\",</code>
               </p>
               <p>
                  <code>\"Value\": \"0.9\"</code>
               </p>
               <p>
                  <code>}</code>
               </p>
            </dd>
            <dt>HyperParameters</dt>
            <dd>
               <p>To define a hyperparameter filter, enter a value with the form
            <code>\"HyperParameters.<name>\"</code>. Decimal hyperparameter
            values are treated as a decimal in a comparison if the specified
            <code>Value</code> is also a decimal value. If the specified
            <code>Value</code> is an integer, the decimal hyperparameter values are
            treated as integers. For example, the following filter is satisfied by
            training jobs with a <code>\"learning_rate\"</code> hyperparameter that is
            less than <code>\"0.5\"</code>:</p>
               <p>
                  <code> {</code>
               </p>
               <p>
                  <code> \"Name\": \"HyperParameters.learning_rate\",</code>
               </p>
               <p>
                  <code> \"Operator\": \"LessThan\",</code>
               </p>
               <p>
                  <code> \"Value\": \"0.5\"</code>
               </p>
               <p>
                  <code> }</code>
               </p>
            </dd>
            <dt>Tags</dt>
            <dd>
               <p>To define a tag filter, enter a value with the form
            <code>Tags.<key></code>.</p>
            </dd>
         </dl>")
type filter = {
  @ocaml.doc("<p>A value used with <code>Name</code> and <code>Operator</code> to determine which
        resources satisfy the filter's condition. For numerical properties, <code>Value</code>
        must be an integer or floating-point decimal. For timestamp properties,
        <code>Value</code> must be an ISO 8601 date-time string of the following format:
        <code>YYYY-mm-dd'T'HH:MM:SS</code>.</p>")
  @as("Value")
  value: option<filterValue>,
  @ocaml.doc("<p>A Boolean binary operator that is used to evaluate the filter. The operator field
      contains one of the following values:</p>
         <dl>
            <dt>Equals</dt>
            <dd>
               <p>The value of <code>Name</code> equals <code>Value</code>.</p>
            </dd>
            <dt>NotEquals</dt>
            <dd>
               <p>The value of <code>Name</code> doesn't equal <code>Value</code>.</p>
            </dd>
            <dt>Exists</dt>
            <dd>
               <p>The <code>Name</code> property exists.</p>
            </dd>
            <dt>NotExists</dt>
            <dd>
               <p>The <code>Name</code> property does not exist.</p>
            </dd>
            <dt>GreaterThan</dt>
            <dd>
               <p>The value of <code>Name</code> is greater than <code>Value</code>.
            Not supported for text properties.</p>
            </dd>
            <dt>GreaterThanOrEqualTo</dt>
            <dd>
               <p>The value of <code>Name</code> is greater than or equal to <code>Value</code>.
            Not supported for text properties.</p>
            </dd>
            <dt>LessThan</dt>
            <dd>
               <p>The value of <code>Name</code> is less than <code>Value</code>.
            Not supported for text properties.</p>
            </dd>
            <dt>LessThanOrEqualTo</dt>
            <dd>
               <p>The value of <code>Name</code> is less than or equal to <code>Value</code>.
            Not supported for text properties.</p>
            </dd>
            <dt>In</dt>
            <dd>
               <p>The value of <code>Name</code> is one of the comma delimited strings in
            <code>Value</code>. Only supported for text properties.</p>
            </dd>
            <dt>Contains</dt>
            <dd>
               <p>The value of <code>Name</code> contains the string <code>Value</code>.
            Only supported for text properties.</p>
               <p>A <code>SearchExpression</code> can include the <code>Contains</code> operator
            multiple times when the value of <code>Name</code> is one of the following:</p>
               <ul>
                  <li>
                     <p>
                        <code>Experiment.DisplayName</code>
                     </p>
                  </li>
                  <li>
                     <p>
                        <code>Experiment.ExperimentName</code>
                     </p>
                  </li>
                  <li>
                     <p>
                        <code>Experiment.Tags</code>
                     </p>
                  </li>
                  <li>
                     <p>
                        <code>Trial.DisplayName</code>
                     </p>
                  </li>
                  <li>
                     <p>
                        <code>Trial.TrialName</code>
                     </p>
                  </li>
                  <li>
                     <p>
                        <code>Trial.Tags</code>
                     </p>
                  </li>
                  <li>
                     <p>
                        <code>TrialComponent.DisplayName</code>
                     </p>
                  </li>
                  <li>
                     <p>
                        <code>TrialComponent.TrialComponentName</code>
                     </p>
                  </li>
                  <li>
                     <p>
                        <code>TrialComponent.Tags</code>
                     </p>
                  </li>
                  <li>
                     <p>
                        <code>TrialComponent.InputArtifacts</code>
                     </p>
                  </li>
                  <li>
                     <p>
                        <code>TrialComponent.OutputArtifacts</code>
                     </p>
                  </li>
               </ul>
               <p>A <code>SearchExpression</code> can include only one <code>Contains</code> operator
            for all other values of <code>Name</code>. In these cases, if you include multiple
            <code>Contains</code> operators in the <code>SearchExpression</code>, the result is
            the following error message: \"<code>'CONTAINS' operator usage limit of 1
            exceeded.</code>\"</p>
            </dd>
         </dl>")
  @as("Operator")
  operator: option<operator>,
  @ocaml.doc("<p>A resource property name. For example, <code>TrainingJobName</code>. For
      valid property names, see <a>SearchRecord</a>.
      You must specify a valid property for the resource.</p>")
  @as("Name")
  name: resourcePropertyName,
}
@ocaml.doc("<p>Specifies a file system data source for a channel.</p>")
type fileSystemDataSource = {
  @ocaml.doc("<p>The full path to the directory to associate with the channel.</p>")
  @as("DirectoryPath")
  directoryPath: directoryPath,
  @ocaml.doc("<p>The file system type. </p>") @as("FileSystemType") fileSystemType: fileSystemType,
  @ocaml.doc("<p>The access mode of the mount of the directory associated with the channel. A directory
            can be mounted either in <code>ro</code> (read-only) or <code>rw</code> (read-write)
            mode.</p>")
  @as("FileSystemAccessMode")
  fileSystemAccessMode: fileSystemAccessMode,
  @ocaml.doc("<p>The file system id.</p>") @as("FileSystemId") fileSystemId: fileSystemId,
}
@ocaml.doc(
  "<p>The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.</p>"
)
type fileSystemConfig = {
  @ocaml.doc(
    "<p>The default POSIX group ID (GID). If not specified, defaults to <code>100</code>.</p>"
  )
  @as("DefaultGid")
  defaultGid: option<defaultGid>,
  @ocaml.doc(
    "<p>The default POSIX user ID (UID). If not specified, defaults to <code>1000</code>.</p>"
  )
  @as("DefaultUid")
  defaultUid: option<defaultUid>,
  @ocaml.doc("<p>The path within the image to mount the user's EFS home directory. The directory
        should be empty. If not specified, defaults to <i>/home/sagemaker-user</i>.</p>")
  @as("MountPath")
  mountPath: option<mountPath>,
}
@ocaml.doc("<p>Contains details regarding the file source.</p>")
type fileSource = {
  @ocaml.doc("<p>The Amazon S3 URI for the file source.</p>") @as("S3Uri") s3Uri: s3Uri,
  @ocaml.doc("<p>The digest of the file source.</p>") @as("ContentDigest")
  contentDigest: option<contentDigest>,
  @ocaml.doc("<p>The type of content stored in the file source.</p>") @as("ContentType")
  contentType: option<contentType>,
}
@ocaml.doc("<p>A list of features. You must include <code>FeatureName</code> and
            <code>FeatureType</code>. Valid feature <code>FeatureType</code>s are
            <code>Integral</code>, <code>Fractional</code> and <code>String</code>. </p>")
type featureDefinition = {
  @ocaml.doc(
    "<p>The value type of a feature. Valid values are Integral, Fractional, or String.</p>"
  )
  @as("FeatureType")
  featureType: option<featureType>,
  @ocaml.doc("<p>The name of a feature. The type must be a string. <code>FeatureName</code> cannot be any
         of the following: <code>is_deleted</code>, <code>write_time</code>,
            <code>api_invocation_time</code>.</p>")
  @as("FeatureName")
  featureName: option<featureName>,
}
@ocaml.doc("<p>The container for the metadata for Fail step.</p>")
type failStepMetadata = {
  @ocaml.doc("<p>A message that you define and then is processed and rendered by 
         the Fail step when the error occurs.</p>")
  @as("ErrorMessage")
  errorMessage: option<string3072>,
}
@ocaml.doc("<p>The source of the experiment.</p>")
type experimentSource = {
  @ocaml.doc("<p>The source type.</p>") @as("SourceType") sourceType: option<sourceType>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the source.</p>") @as("SourceArn")
  sourceArn: experimentSourceArn,
}
@ocaml.doc("<p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when
      you call the following APIs:</p>
         <ul>
            <li>
               <p>
                  <a>CreateProcessingJob</a>
               </p>
            </li>
            <li>
               <p>
                  <a>CreateTrainingJob</a>
               </p>
            </li>
            <li>
               <p>
                  <a>CreateTransformJob</a>
               </p>
            </li>
         </ul>")
type experimentConfig = {
  @ocaml.doc("<p>The display name for the trial component. If this key isn't specified, the display name is
      the trial component name.</p>")
  @as("TrialComponentDisplayName")
  trialComponentDisplayName: option<experimentEntityName>,
  @ocaml.doc("<p>The name of an existing trial to associate the trial component with. If not specified, a
      new trial is created.</p>")
  @as("TrialName")
  trialName: option<experimentEntityName>,
  @ocaml.doc("<p>The name of an existing experiment to associate the trial component with.</p>")
  @as("ExperimentName")
  experimentName: option<experimentEntityName>,
}
@ocaml.doc(
  "<p>A list of environment parameters suggested by the Amazon SageMaker Inference Recommender.</p>"
)
type environmentParameter = {
  @ocaml.doc("<p>The value suggested by the Amazon SageMaker Inference Recommender.</p>")
  @as("Value")
  value: string_,
  @ocaml.doc("<p>The value type suggested by the Amazon SageMaker Inference Recommender.</p>")
  @as("ValueType")
  valueType: string_,
  @ocaml.doc("<p>The environment key suggested by the Amazon SageMaker Inference Recommender.</p>")
  @as("Key")
  key: string_,
}
type environmentMap = Js.Dict.t<environmentValue>
@ocaml.doc("<p>Provides summary information for an endpoint.</p>")
type endpointSummary = {
  @ocaml.doc("<p>The status of the endpoint.</p>
        <ul>
            <li>
                <p>
                  <code>OutOfService</code>: Endpoint is not available to take incoming
                    requests.</p>
            </li>
            <li>
                <p>
                  <code>Creating</code>: <a>CreateEndpoint</a> is executing.</p>
            </li>
            <li>
                <p>
                  <code>Updating</code>: <a>UpdateEndpoint</a> or <a>UpdateEndpointWeightsAndCapacities</a> is executing.</p>
            </li>
            <li>
                <p>
                  <code>SystemUpdating</code>: Endpoint is undergoing maintenance and cannot be
                    updated or deleted or re-scaled until it has completed. This maintenance
                    operation does not change any customer-specified values such as VPC config, KMS
                    encryption, model, instance type, or instance count.</p>
            </li>
            <li>
                <p>
                  <code>RollingBack</code>: Endpoint fails to scale up or down or change its
                    variant weight and is in the process of rolling back to its previous
                    configuration. Once the rollback completes, endpoint returns to an
                        <code>InService</code> status. This transitional status only applies to an
                    endpoint that has autoscaling enabled and is undergoing variant weight or
                    capacity changes as part of an <a>UpdateEndpointWeightsAndCapacities</a> call or when the <a>UpdateEndpointWeightsAndCapacities</a> operation is called
                    explicitly.</p>
            </li>
            <li>
                <p>
                  <code>InService</code>: Endpoint is available to process incoming
                    requests.</p>
            </li>
            <li>
                <p>
                  <code>Deleting</code>: <a>DeleteEndpoint</a> is executing.</p>
            </li>
            <li>
                <p>
                  <code>Failed</code>: Endpoint could not be created, updated, or re-scaled. Use
                        <a>DescribeEndpointOutput$FailureReason</a> for information about
                    the failure. <a>DeleteEndpoint</a> is the only operation that can be
                    performed on a failed endpoint.</p>
            </li>
         </ul>
        <p>To get a list of endpoints with a specified status, use the <a>ListEndpointsInput$StatusEquals</a> filter.</p>")
  @as("EndpointStatus")
  endpointStatus: endpointStatus,
  @ocaml.doc("<p>A timestamp that shows when the endpoint was last modified.</p>")
  @as("LastModifiedTime")
  lastModifiedTime: timestamp_,
  @ocaml.doc("<p>A timestamp that shows when the endpoint was created.</p>") @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the endpoint.</p>") @as("EndpointArn")
  endpointArn: endpointArn,
  @ocaml.doc("<p>The name of the endpoint.</p>") @as("EndpointName") endpointName: endpointName,
}
@ocaml.doc(
  "<p>The endpoint configuration made by Inference Recommender during a recommendation job.</p>"
)
type endpointOutputConfiguration = {
  @ocaml.doc("<p>The number of instances recommended to launch initially.</p>")
  @as("InitialInstanceCount")
  initialInstanceCount: integer_,
  @ocaml.doc("<p>The instance type recommended by Amazon SageMaker Inference Recommender.</p>")
  @as("InstanceType")
  instanceType: productionVariantInstanceType,
  @ocaml.doc(
    "<p>The name of the production variant (deployed model) made during a recommendation job.</p>"
  )
  @as("VariantName")
  variantName: string_,
  @ocaml.doc("<p>The name of the endpoint made during a recommendation job.</p>")
  @as("EndpointName")
  endpointName: string_,
}
@ocaml.doc("<p>Input object for the endpoint</p>")
type endpointInput = {
  @ocaml.doc("<p>If specified, monitoring jobs substract this time from the end time. For information
         about using offsets for scheduling monitoring jobs, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html\">Schedule Model
            Quality Monitoring Jobs</a>.</p>")
  @as("EndTimeOffset")
  endTimeOffset: option<monitoringTimeOffsetString>,
  @ocaml.doc("<p>If specified, monitoring jobs substract this time from the start time. For information
         about using offsets for scheduling monitoring jobs, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html\">Schedule Model
            Quality Monitoring Jobs</a>.</p>")
  @as("StartTimeOffset")
  startTimeOffset: option<monitoringTimeOffsetString>,
  @ocaml.doc("<p>The threshold for the class probability to be evaluated as a positive result.</p>")
  @as("ProbabilityThresholdAttribute")
  probabilityThresholdAttribute: option<probabilityThresholdAttribute>,
  @ocaml.doc(
    "<p>In a classification problem, the attribute that represents the class probability.</p>"
  )
  @as("ProbabilityAttribute")
  probabilityAttribute: option<string_>,
  @ocaml.doc("<p>The attribute of the input data that represents the ground truth label.</p>")
  @as("InferenceAttribute")
  inferenceAttribute: option<string_>,
  @ocaml.doc("<p>The attributes of the input data that are the input features.</p>")
  @as("FeaturesAttribute")
  featuresAttribute: option<string_>,
  @ocaml.doc("<p>Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key.
         Defaults to <code>FullyReplicated</code>
         </p>")
  @as("S3DataDistributionType")
  s3DataDistributionType: option<processingS3DataDistributionType>,
  @ocaml.doc("<p>Whether the <code>Pipe</code> or <code>File</code> is used as the input mode for
         transferring data for the monitoring job. <code>Pipe</code> mode is recommended for large
         datasets. <code>File</code> mode is useful for small files that fit in memory. Defaults to
            <code>File</code>.</p>")
  @as("S3InputMode")
  s3InputMode: option<processingS3InputMode>,
  @ocaml.doc("<p>Path to the filesystem where the endpoint data is available to the container.</p>")
  @as("LocalPath")
  localPath: processingLocalPath,
  @ocaml.doc("<p>An endpoint in customer's account which has enabled <code>DataCaptureConfig</code>
         enabled.</p>")
  @as("EndpointName")
  endpointName: endpointName,
}
@ocaml.doc("<p>Provides summary information for an endpoint configuration.</p>")
type endpointConfigSummary = {
  @ocaml.doc("<p>A timestamp that shows when the endpoint configuration was created.</p>")
  @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the endpoint configuration.</p>")
  @as("EndpointConfigArn")
  endpointConfigArn: endpointConfigArn,
  @ocaml.doc("<p>The name of the endpoint configuration.</p>") @as("EndpointConfigName")
  endpointConfigName: endpointConfigName,
}
@ocaml.doc("<p>The output of a SageMaker Edge Manager deployable resource.</p>")
type edgePresetDeploymentOutput = {
  @ocaml.doc("<p>Returns a message describing the status of the deployed resource.</p>")
  @as("StatusMessage")
  statusMessage: option<string_>,
  @ocaml.doc("<p>The status of the deployable resource.</p>") @as("Status")
  status: option<edgePresetDeploymentStatus>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the generated deployable resource.</p>")
  @as("Artifact")
  artifact: option<edgePresetDeploymentArtifact>,
  @ocaml.doc("<p>The deployment type created by SageMaker Edge Manager. Currently only 
     supports Amazon Web Services IoT Greengrass Version 2 components.</p>")
  @as("Type")
  type_: edgePresetDeploymentType,
}
@ocaml.doc("<p>Summary of edge packaging job.</p>")
type edgePackagingJobSummary = {
  @ocaml.doc("<p>The timestamp of when the edge packaging job was last updated.</p>")
  @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>The timestamp of when the job was created.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>The version of the model.</p>") @as("ModelVersion")
  modelVersion: option<edgeVersion>,
  @ocaml.doc("<p>The name of the model.</p>") @as("ModelName") modelName: option<entityName>,
  @ocaml.doc("<p>The name of the SageMaker Neo compilation job.</p>") @as("CompilationJobName")
  compilationJobName: option<entityName>,
  @ocaml.doc("<p>The status of the edge packaging job.</p>") @as("EdgePackagingJobStatus")
  edgePackagingJobStatus: edgePackagingJobStatus,
  @ocaml.doc("<p>The name of the edge packaging job.</p>") @as("EdgePackagingJobName")
  edgePackagingJobName: entityName,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the edge packaging job.</p>")
  @as("EdgePackagingJobArn")
  edgePackagingJobArn: edgePackagingJobArn,
}
@ocaml.doc("<p>The output configuration.</p>")
type edgeOutputConfig = {
  @ocaml.doc("<p>The configuration used to create deployment artifacts. 
      Specify configuration options with a JSON string. The available configuration options for each type are:</p>
         <ul>
            <li>
               <p>
                  <code>ComponentName</code> (optional) - Name of the GreenGrass V2 component. If not specified,
     the default name generated consists of \"SagemakerEdgeManager\" and the name of your SageMaker Edge Manager
     packaging job.</p>
            </li>
            <li>
               <p>
                  <code>ComponentDescription</code> (optional) - Description of the component.</p>
            </li>
            <li>
               <p>
                  <code>ComponentVersion</code> (optional) - The version of the component.</p>
               <note>
                  <p>Amazon Web Services IoT Greengrass uses semantic versions for components. Semantic versions follow a<i>
       major.minor.patch</i> number system. For example, version 1.0.0 represents the first
        major release for a component. For more information, see the <a href=\"https://semver.org/\">semantic version specification</a>.</p>
               </note>
            </li>
            <li>
               <p>
                  <code>PlatformOS</code> (optional) - The name of the operating system for the platform.
     Supported platforms include Windows and Linux.</p>
            </li>
            <li>
               <p>
                  <code>PlatformArchitecture</code> (optional) - The processor architecture for the platform. </p>
               <p>Supported architectures Windows include: Windows32_x86, Windows64_x64.</p>
               <p>Supported architectures for Linux include: Linux x86_64, Linux ARMV8.</p>
            </li>
         </ul>")
  @as("PresetDeploymentConfig")
  presetDeploymentConfig: option<string_>,
  @ocaml.doc("<p>The deployment type SageMaker Edge Manager will create. 
      Currently only supports Amazon Web Services IoT Greengrass Version 2 components.</p>")
  @as("PresetDeploymentType")
  presetDeploymentType: option<edgePresetDeploymentType>,
  @ocaml.doc("<p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume after compilation job. 
     If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account.</p>")
  @as("KmsKeyId")
  kmsKeyId: option<kmsKeyId>,
  @ocaml.doc("<p>The Amazon Simple Storage (S3) bucker URI.</p>") @as("S3OutputLocation")
  s3OutputLocation: s3Uri,
}
@ocaml.doc("<p>Summary of model on edge device.</p>")
type edgeModelSummary = {
  @ocaml.doc("<p>The version model.</p>") @as("ModelVersion") modelVersion: edgeVersion,
  @ocaml.doc("<p>The name of the model.</p>") @as("ModelName") modelName: entityName,
}
@ocaml.doc("<p>Status of edge devices with this model.</p>")
type edgeModelStat = {
  @ocaml.doc("<p>The number of devices with this model version and are producing sample data.</p>")
  @as("SamplingDeviceCount")
  samplingDeviceCount: long,
  @ocaml.doc(
    "<p>The number of devices that have this model version, a heart beat, and are currently running.</p>"
  )
  @as("ActiveDeviceCount")
  activeDeviceCount: long,
  @ocaml.doc("<p>The number of devices that have this model version and have a heart beat. </p>")
  @as("ConnectedDeviceCount")
  connectedDeviceCount: long,
  @ocaml.doc(
    "<p>The number of devices that have this model version and do not have a heart beat.</p>"
  )
  @as("OfflineDeviceCount")
  offlineDeviceCount: long,
  @ocaml.doc("<p>The model version.</p>") @as("ModelVersion") modelVersion: edgeVersion,
  @ocaml.doc("<p>The name of the model.</p>") @as("ModelName") modelName: entityName,
}
@ocaml.doc("<p>The model on the edge device.</p>")
type edgeModel = {
  @ocaml.doc("<p>The timestamp of the last inference that was made.</p>") @as("LatestInference")
  latestInference: option<timestamp_>,
  @ocaml.doc("<p>The timestamp of the last data sample taken.</p>") @as("LatestSampleTime")
  latestSampleTime: option<timestamp_>,
  @ocaml.doc("<p>The model version.</p>") @as("ModelVersion") modelVersion: edgeVersion,
  @ocaml.doc("<p>The name of the model.</p>") @as("ModelName") modelName: entityName,
}
@ocaml.doc("<p>A directed edge connecting two lineage entities.</p>")
type edge = {
  @ocaml.doc("<p>The type of the Association(Edge) between the source and destination. For example <code>ContributedTo</code>, 
         <code>Produced</code>, or <code>DerivedFrom</code>.</p>")
  @as("AssociationType")
  associationType: option<associationEdgeType>,
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the destination lineage entity of the directed edge.</p>"
  )
  @as("DestinationArn")
  destinationArn: option<associationEntityArn>,
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the source lineage entity of the directed edge.</p>"
  )
  @as("SourceArn")
  sourceArn: option<associationEntityArn>,
}
@ocaml.doc("<p>The configurations and outcomes of an Amazon EMR step execution.</p>")
type emrstepMetadata = {
  @ocaml.doc("<p>The path to the log file where the cluster step's failure root cause 
            is recorded.</p>")
  @as("LogFilePath")
  logFilePath: option<string1024>,
  @ocaml.doc("<p>The name of the EMR cluster step.</p>") @as("StepName")
  stepName: option<string256>,
  @ocaml.doc("<p>The identifier of the EMR cluster step.</p>") @as("StepId")
  stepId: option<string256>,
  @ocaml.doc("<p>The identifier of the EMR cluster.</p>") @as("ClusterId")
  clusterId: option<string256>,
}
type domainSecurityGroupIds = array<securityGroupId>
@ocaml.doc("<p>The domain's details.</p>")
type domainDetails = {
  @ocaml.doc("<p>The domain's URL.</p>") @as("Url") url: option<string1024>,
  @ocaml.doc("<p>The last modified time.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<lastModifiedTime>,
  @ocaml.doc("<p>The creation time.</p>") @as("CreationTime") creationTime: option<creationTime>,
  @ocaml.doc("<p>The status.</p>") @as("Status") status: option<domainStatus>,
  @ocaml.doc("<p>The domain name.</p>") @as("DomainName") domainName: option<domainName>,
  @ocaml.doc("<p>The domain ID.</p>") @as("DomainId") domainId: option<domainId>,
  @ocaml.doc("<p>The domain's Amazon Resource Name (ARN).</p>") @as("DomainArn")
  domainArn: option<domainArn>,
}
@ocaml.doc("<p>Status of devices.</p>")
type deviceStats = {
  @ocaml.doc("<p>The number of registered devices.</p>") @as("RegisteredDeviceCount")
  registeredDeviceCount: long,
  @ocaml.doc("<p>The number of devices connected with a heartbeat.</p>") @as("ConnectedDeviceCount")
  connectedDeviceCount: long,
}
type deviceNames = array<deviceName>
@ocaml.doc("<p>Summary of the device fleet.</p>")
type deviceFleetSummary = {
  @ocaml.doc("<p>Timestamp of when the device fleet was last updated.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>Timestamp of when the device fleet was created.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>Name of the device fleet.</p>") @as("DeviceFleetName") deviceFleetName: entityName,
  @ocaml.doc("<p>Amazon Resource Name (ARN) of the device fleet.</p>") @as("DeviceFleetArn")
  deviceFleetArn: deviceFleetArn,
}
@ocaml.doc("<p>Information of a particular device.</p>")
type device = {
  @ocaml.doc("<p>Amazon Web Services Internet of Things (IoT) object name.</p>") @as("IotThingName")
  iotThingName: option<thingName>,
  @ocaml.doc("<p>Description of the device.</p>") @as("Description")
  description: option<deviceDescription>,
  @ocaml.doc("<p>The name of the device.</p>") @as("DeviceName") deviceName: deviceName,
}
@ocaml.doc("<p>Specifies weight and capacity values for a production variant.</p>")
type desiredWeightAndCapacity = {
  @ocaml.doc("<p>The variant's capacity.</p>") @as("DesiredInstanceCount")
  desiredInstanceCount: option<taskCount>,
  @ocaml.doc("<p>The variant's weight.</p>") @as("DesiredWeight")
  desiredWeight: option<variantWeight>,
  @ocaml.doc("<p>The name of the
            variant
            to update.</p>")
  @as("VariantName")
  variantName: variantName,
}
@ocaml.doc("<p>Gets the Amazon EC2 Container Registry path of the docker image of the model that is hosted in this <a>ProductionVariant</a>.</p>
        <p>If you used the <code>registry/repository[:tag]</code> form to specify the image path
            of the primary container when you created the model hosted in this
                <code>ProductionVariant</code>, the path resolves to a path of the form
                <code>registry/repository[@digest]</code>. A digest is a hash value that identifies
            a specific version of an image. For information about Amazon ECR paths, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html\">Pulling an Image</a> in the <i>Amazon ECR User Guide</i>.</p>")
type deployedImage = {
  @ocaml.doc("<p>The date and time when the image path for the model resolved to the
                <code>ResolvedImage</code>
         </p>")
  @as("ResolutionTime")
  resolutionTime: option<timestamp_>,
  @ocaml.doc("<p>The specific digest path of the image hosted in this
            <code>ProductionVariant</code>.</p>")
  @as("ResolvedImage")
  resolvedImage: option<containerImage>,
  @ocaml.doc("<p>The image path you specified when you created the model.</p>")
  @as("SpecifiedImage")
  specifiedImage: option<containerImage>,
}
@ocaml.doc("<p>Information about the status of the rule evaluation.</p>")
type debugRuleEvaluationStatus = {
  @ocaml.doc("<p>Timestamp when the rule evaluation status was last modified.</p>")
  @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>Details from the rule evaluation.</p>") @as("StatusDetails")
  statusDetails: option<statusDetails>,
  @ocaml.doc("<p>Status of the rule evaluation.</p>") @as("RuleEvaluationStatus")
  ruleEvaluationStatus: option<ruleEvaluationStatus>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the rule evaluation job.</p>")
  @as("RuleEvaluationJobArn")
  ruleEvaluationJobArn: option<processingJobArn>,
  @ocaml.doc("<p>The name of the rule configuration.</p>") @as("RuleConfigurationName")
  ruleConfigurationName: option<ruleConfigurationName>,
}
@ocaml.doc("<p>The data structure used to specify the data to be used for inference in a batch
            transform job and to associate the data that is relevant to the prediction results in
            the output. The input filter provided allows you to exclude input data that is not
            needed for inference in a batch transform job. The output filter provided allows you to
            include input data relevant to interpreting the predictions in the output from the job.
            For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html\">Associate Prediction
                Results with their Corresponding Input Records</a>.</p>")
type dataProcessing = {
  @ocaml.doc("<p>Specifies the source of the data to join with the transformed data. The valid values
            are <code>None</code> and <code>Input</code>. The default value is <code>None</code>,
            which specifies not to join the input with the transformed data. If you want the batch
            transform job to join the original input data with the transformed data, set
                <code>JoinSource</code> to <code>Input</code>. You can specify
                <code>OutputFilter</code> as an additional filter to select a portion of the joined
            dataset and store it in the output file.</p>
        <p>For JSON or JSONLines objects, such as a JSON array, SageMaker adds the transformed data to
            the input JSON object in an attribute called <code>SageMakerOutput</code>. The joined
            result for JSON must be a key-value pair object. If the input is not a key-value pair
            object, SageMaker creates a new JSON file. In the new JSON file, and the input data is stored
            under the <code>SageMakerInput</code> key and the results are stored in
                <code>SageMakerOutput</code>.</p>
        <p>For CSV data, SageMaker takes each row as a JSON array and joins the transformed data with
            the input by appending each transformed row to the end of the input. The joined data has
            the original input data followed by the transformed data and the output is a CSV
            file.</p>
        <p>For information on how joining in applied, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#batch-transform-data-processing-workflow\">Workflow for Associating Inferences with Input Records</a>.</p>")
  @as("JoinSource")
  joinSource: option<joinSource>,
  @ocaml.doc("<p>A <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#data-processing-operators\">JSONPath</a> expression used to select a portion of the joined dataset to save
            in the output file for a batch transform job. If you want Amazon SageMaker to store the entire input
            dataset in the output file, leave the default value, <code>$</code>. If you specify
            indexes that aren't within the dimension size of the joined dataset, you get an
            error.</p>
        <p>Examples: <code>\"$\"</code>, <code>\"$[0,5:]\"</code>,
                <code>\"$['id','SageMakerOutput']\"</code>
         </p>")
  @as("OutputFilter")
  outputFilter: option<jsonPath>,
  @ocaml.doc("<p>A <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#data-processing-operators\">JSONPath</a> expression used to select a portion of the input data to pass to
            the algorithm. Use the <code>InputFilter</code> parameter to exclude fields, such as an
            ID column, from the input. If you want Amazon SageMaker to pass the entire input dataset to the
            algorithm, accept the default value <code>$</code>.</p>
        <p>Examples: <code>\"$\"</code>, <code>\"$[1:]\"</code>, <code>\"$.features\"</code>
         </p>")
  @as("InputFilter")
  inputFilter: option<jsonPath>,
}
@ocaml.doc("<p>The meta data of the Glue table which serves as data catalog for the
            <code>OfflineStore</code>. </p>")
type dataCatalogConfig = {
  @ocaml.doc("<p>The name of the Glue table database.</p>") @as("Database") database: database,
  @ocaml.doc("<p>The name of the Glue table catalog.</p>") @as("Catalog") catalog: catalog,
  @ocaml.doc("<p>The name of the Glue table.</p>") @as("TableName") tableName: tableName,
}
@ocaml.doc("<p></p>")
type dataCaptureConfigSummary = {
  @ocaml.doc("<p></p>") @as("KmsKeyId") kmsKeyId: kmsKeyId,
  @ocaml.doc("<p></p>") @as("DestinationS3Uri") destinationS3Uri: destinationS3Uri,
  @ocaml.doc("<p></p>") @as("CurrentSamplingPercentage")
  currentSamplingPercentage: samplingPercentage,
  @ocaml.doc("<p></p>") @as("CaptureStatus") captureStatus: captureStatus,
  @ocaml.doc("<p></p>") @as("EnableCapture") enableCapture: enableCapture,
}
type customerMetadataMap = Js.Dict.t<customerMetadataValue>
type customerMetadataKeyList = array<customerMetadataKey>
@ocaml.doc("<p>A custom SageMaker image. For more information, see
       <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html\">Bring your own SageMaker image</a>.</p>")
type customImage = {
  @ocaml.doc("<p>The name of the AppImageConfig.</p>") @as("AppImageConfigName")
  appImageConfigName: appImageConfigName,
  @ocaml.doc("<p>The version number of the CustomImage.</p>") @as("ImageVersionNumber")
  imageVersionNumber: option<imageVersionNumber>,
  @ocaml.doc("<p>The name of the CustomImage. Must be unique to your account.</p>") @as("ImageName")
  imageName: imageName,
}
type csvContentTypes = array<csvContentType>
@ocaml.doc("<p>Defines the possible values for a continuous hyperparameter.</p>")
type continuousParameterRangeSpecification = {
  @ocaml.doc("<p>The maximum floating-point value allowed.</p>") @as("MaxValue")
  maxValue: parameterValue,
  @ocaml.doc("<p>The minimum floating-point value allowed.</p>") @as("MinValue")
  minValue: parameterValue,
}
@ocaml.doc("<p>A list of continuous hyperparameters to tune.</p>")
type continuousParameterRange = {
  @ocaml.doc("<p>The scale that hyperparameter tuning uses to search the hyperparameter range. For
            information about choosing a hyperparameter scale, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type\">Hyperparameter Scaling</a>. One of the following values:</p>
        <dl>
            <dt>Auto</dt>
            <dd>
                    <p>Amazon SageMaker hyperparameter tuning chooses the best scale for the
                        hyperparameter.</p>
                </dd>
            <dt>Linear</dt>
            <dd>
                    <p>Hyperparameter tuning searches the values in the hyperparameter range by
                        using a linear scale.</p>
                </dd>
            <dt>Logarithmic</dt>
            <dd>
                    <p>Hyperparameter tuning searches the values in the hyperparameter range by
                        using a logarithmic scale.</p>
                    <p>Logarithmic scaling works only for ranges that have only values greater
                        than 0.</p>
                </dd>
            <dt>ReverseLogarithmic</dt>
            <dd>
                    <p>Hyperparameter tuning searches the values in the hyperparameter range by
                        using a reverse logarithmic scale.</p>
                    <p>Reverse logarithmic scaling works only for ranges that are entirely within
                        the range 0<=x<1.0.</p>
                </dd>
         </dl>")
  @as("ScalingType")
  scalingType: option<hyperParameterScalingType>,
  @ocaml.doc("<p>The maximum value for the hyperparameter. The tuning job uses floating-point values
            between <code>MinValue</code> value and this value for tuning.</p>")
  @as("MaxValue")
  maxValue: parameterValue,
  @ocaml.doc("<p>The minimum value for the hyperparameter.
            The
            tuning job uses floating-point values between this value and <code>MaxValue</code>for
            tuning.</p>")
  @as("MinValue")
  minValue: parameterValue,
  @ocaml.doc("<p>The name of the continuous hyperparameter to tune.</p>") @as("Name")
  name: parameterKey,
}
@ocaml.doc("<p>A structure describing the source of a context.</p>")
type contextSource = {
  @ocaml.doc("<p>The ID of the source.</p>") @as("SourceId") sourceId: option<string256>,
  @ocaml.doc("<p>The type of the source.</p>") @as("SourceType") sourceType: option<string256>,
  @ocaml.doc("<p>The URI of the source.</p>") @as("SourceUri") sourceUri: string2048,
}
type contentTypes = array<contentType>
type contentClassifiers = array<contentClassifier>
type containerEntrypoint = array<containerEntrypointString>
type containerArguments = array<containerArgument>
@ocaml.doc("<p>Metadata for a Condition step.</p>")
type conditionStepMetadata = {
  @ocaml.doc("<p>The outcome of the Condition step evaluation.</p>") @as("Outcome")
  outcome: option<conditionOutcome>,
}
type compressionTypes = array<compressionType>
@ocaml.doc("<p>A summary of a model compilation job.</p>")
type compilationJobSummary = {
  @ocaml.doc("<p>The status of the model compilation job.</p>") @as("CompilationJobStatus")
  compilationJobStatus: compilationJobStatus,
  @ocaml.doc("<p>The time when the model compilation job was last modified.</p>")
  @as("LastModifiedTime")
  lastModifiedTime: option<lastModifiedTime>,
  @ocaml.doc("<p>The type of accelerator that the model will run on after the compilation job has
            completed.</p>")
  @as("CompilationTargetPlatformAccelerator")
  compilationTargetPlatformAccelerator: option<targetPlatformAccelerator>,
  @ocaml.doc("<p>The type of architecture that the model will run on after the compilation job has
            completed.</p>")
  @as("CompilationTargetPlatformArch")
  compilationTargetPlatformArch: option<targetPlatformArch>,
  @ocaml.doc("<p>The type of OS that the model will run on after the compilation job has
            completed.</p>")
  @as("CompilationTargetPlatformOs")
  compilationTargetPlatformOs: option<targetPlatformOs>,
  @ocaml.doc("<p>The type of device that the model will run on after the compilation job has
            completed.</p>")
  @as("CompilationTargetDevice")
  compilationTargetDevice: option<targetDevice>,
  @ocaml.doc("<p>The time when the model compilation job completed.</p>") @as("CompilationEndTime")
  compilationEndTime: option<timestamp_>,
  @ocaml.doc("<p>The time when the model compilation job started.</p>") @as("CompilationStartTime")
  compilationStartTime: option<timestamp_>,
  @ocaml.doc("<p>The time when the model compilation job was created.</p>") @as("CreationTime")
  creationTime: creationTime,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model compilation job.</p>")
  @as("CompilationJobArn")
  compilationJobArn: compilationJobArn,
  @ocaml.doc("<p>The name of the model compilation job that you want a summary for.</p>")
  @as("CompilationJobName")
  compilationJobName: entityName,
}
type collectionParameters = Js.Dict.t<configValue>
@ocaml.doc("<p>Identifies a Amazon Cognito user group. A user group can be used in on or more work
            teams.</p>")
type cognitoMemberDefinition = {
  @ocaml.doc("<p>An identifier for an application client. You must create the app client ID using
            Amazon Cognito.</p>")
  @as("ClientId")
  clientId: clientId,
  @ocaml.doc("<p>An identifier for a user group.</p>") @as("UserGroup") userGroup: cognitoUserGroup,
  @ocaml.doc("<p>An identifier for a user pool. The user pool must be in the same region as the service
            that you are calling.</p>")
  @as("UserPool")
  userPool: cognitoUserPool,
}
@ocaml.doc("<p>Use this parameter to configure your Amazon Cognito workforce. 
      A single Cognito workforce is created using and corresponds to a single
      <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html\">
      Amazon Cognito user pool</a>.</p>")
type cognitoConfig = {
  @ocaml.doc("<p>The client ID for your Amazon Cognito user pool.</p>") @as("ClientId")
  clientId: clientId,
  @ocaml.doc("<p>A <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html\">
      user pool</a> is a user directory in Amazon Cognito. 
      With a user pool, your users can sign in to your web or mobile app through Amazon Cognito. 
      Your users can also sign in through social identity providers like 
      Google, Facebook, Amazon, or Apple, and through SAML identity providers.</p>")
  @as("UserPool")
  userPool: cognitoUserPool,
}
@ocaml.doc("<p>The container for the metadata for the ClarifyCheck step. For more information, 
         see the topic on <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-clarify-check\">ClarifyCheck step</a> in the <i>Amazon SageMaker Developer Guide</i>.
      </p>")
type clarifyCheckStepMetadata = {
  @ocaml.doc("<p>This flag indicates if a newly calculated baseline can be accessed through step properties 
         <code>BaselineUsedForDriftCheckConstraints</code> and <code>BaselineUsedForDriftCheckStatistics</code>. 
         If it is set to <code>False</code>, the previous baseline of the configured check type must also be available. 
         These can be accessed through the <code>BaselineUsedForDriftCheckConstraints</code> property. </p>")
  @as("RegisterNewBaseline")
  registerNewBaseline: option<boolean_>,
  @ocaml.doc("<p>This flag indicates if the drift check against the previous baseline will be skipped or not. 
         If it is set to <code>False</code>, the previous baseline of the configured check type must be available.</p>")
  @as("SkipCheck")
  skipCheck: option<boolean_>,
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the check processing job that was run by this step's execution.</p>"
  )
  @as("CheckJobArn")
  checkJobArn: option<string256>,
  @ocaml.doc("<p>The Amazon S3 URI of the violation report if violations are detected.</p>")
  @as("ViolationReport")
  violationReport: option<string1024>,
  @ocaml.doc("<p>The model package group name.</p>") @as("ModelPackageGroupName")
  modelPackageGroupName: option<string256>,
  @ocaml.doc("<p>The Amazon S3 URI of the newly calculated baseline constraints file.</p>")
  @as("CalculatedBaselineConstraints")
  calculatedBaselineConstraints: option<string1024>,
  @ocaml.doc(
    "<p>The Amazon S3 URI of baseline constraints file to be used for the drift check.</p>"
  )
  @as("BaselineUsedForDriftCheckConstraints")
  baselineUsedForDriftCheckConstraints: option<string1024>,
  @ocaml.doc("<p>The type of the Clarify Check step</p>") @as("CheckType")
  checkType: option<string256>,
}
type cidrs = array<cidr>
@ocaml.doc("<p>Contains information about the output location for managed spot training checkpoint
            data. </p>")
type checkpointConfig = {
  @ocaml.doc("<p>(Optional) The local directory where checkpoints are written. The default directory is
                <code>/opt/ml/checkpoints/</code>. </p>")
  @as("LocalPath")
  localPath: option<directoryPath>,
  @ocaml.doc("<p>Identifies the S3 path where you want Amazon SageMaker to store checkpoints. For example,
                <code>s3://bucket-name/key-name-prefix</code>.</p>")
  @as("S3Uri")
  s3Uri: s3Uri,
}
type categoricalParameterRangeValues = array<string128>
@ocaml.doc("<p></p>")
type captureOption = {@ocaml.doc("<p></p>") @as("CaptureMode") captureMode: captureMode}
@ocaml.doc("<p>Specifies the endpoint capacity to activate for production.</p>")
type capacitySize = {
  @ocaml.doc(
    "<p>Defines the capacity size, either as a number of instances or a capacity percentage.</p>"
  )
  @as("Value")
  value: capacitySizeValue,
  @ocaml.doc("<p>Specifies the endpoint capacity type.</p>
        <ul>
            <li>
               <p>
                  <code>INSTANCE_COUNT</code>: The endpoint activates based on
                the number of instances.</p>
            </li>
            <li>
               <p>
                  <code>CAPACITY_PERCENT</code>: The endpoint activates based on
            the specified percentage of capacity.</p>
            </li>
         </ul>")
  @as("Type")
  type_: capacitySizeType,
}
@ocaml.doc("<p>The location of artifacts for an AutoML candidate job.</p>")
type candidateArtifactLocations = {
  @ocaml.doc("<p>The Amazon S3 prefix to the model insight artifacts generated for the AutoML
         candidate.</p>")
  @as("ModelInsights")
  modelInsights: option<modelInsightsLocation>,
  @ocaml.doc("<p>The Amazon S3 prefix to the explainability artifacts generated for the AutoML
         candidate.</p>")
  @as("Explainability")
  explainability: explainabilityLocation,
}
@ocaml.doc("<p>Details on the cache hit of a pipeline execution step.</p>")
type cacheHitResult = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline execution.</p>")
  @as("SourcePipelineExecutionArn")
  sourcePipelineExecutionArn: option<pipelineExecutionArn>,
}
@ocaml.doc("<p>The error code and error description associated with the resource.</p>")
type batchDescribeModelPackageError = {
  @ocaml.doc("<p></p>") @as("ErrorResponse") errorResponse: string_,
  @ocaml.doc("<p></p>") @as("ErrorCode") errorCode: string_,
}
@ocaml.doc("<p>The Amazon S3 data source.</p>")
type autoMLS3DataSource = {
  @ocaml.doc("<p>The URL to the Amazon S3 data source.</p>") @as("S3Uri") s3Uri: s3Uri,
  @ocaml.doc("<p>The data type.</p>") @as("S3DataType") s3DataType: autoMLS3DataType,
}
@ocaml.doc("<p>The reason for a partial failure of an AutoML job.</p>")
type autoMLPartialFailureReason = {
  @ocaml.doc("<p>The message containing the reason for a partial failure of an AutoML job.</p>")
  @as("PartialFailureMessage")
  partialFailureMessage: option<autoMLFailureReason>,
}
@ocaml.doc("<p>The output data configuration.</p>")
type autoMLOutputDataConfig = {
  @ocaml.doc("<p>The Amazon S3 output path. Must be 128 characters or less.</p>")
  @as("S3OutputPath")
  s3OutputPath: s3Uri,
  @ocaml.doc("<p>The Amazon Web Services KMS encryption key ID.</p>") @as("KmsKeyId")
  kmsKeyId: option<kmsKeyId>,
}
@ocaml.doc("<p>Specifies a metric to minimize or maximize as the objective of a job.</p>")
type autoMLJobObjective = {
  @ocaml.doc("<p>The name of the objective metric used to measure the predictive quality of a machine
         learning system. This metric is optimized during training to provide the best estimate for
         model parameter values from data.</p>
         <p>Here are the options:</p>
         <ul>
            <li>
               <p>
                  <code>MSE</code>: The mean squared error (MSE) is the average of the squared
               differences between the predicted and actual values. It is used for regression. MSE
               values are always positive: the better a model is at predicting the actual values,
               the smaller the MSE value is. When the data contains outliers, they tend to dominate
               the MSE, which might cause subpar prediction performance.</p>
            </li>
            <li>
               <p>
                  <code>Accuracy</code>: The ratio of the number of correctly classified items to
               the total number of (correctly and incorrectly) classified items. It is used for
               binary and multiclass classification. It measures how close the predicted class
               values are to the actual values. Accuracy values vary between zero and one: one
               indicates perfect accuracy and zero indicates perfect inaccuracy.</p>
            </li>
            <li>
               <p>
                  <code>F1</code>: The F1 score is the harmonic mean of the precision and recall. It
               is used for binary classification into classes traditionally referred to as positive
               and negative. Predictions are said to be true when they match their actual (correct)
               class and false when they do not. Precision is the ratio of the true positive
               predictions to all positive predictions (including the false positives) in a data set
               and measures the quality of the prediction when it predicts the positive class.
               Recall (or sensitivity) is the ratio of the true positive predictions to all actual
               positive instances and measures how completely a model predicts the actual class
               members in a data set. The standard F1 score weighs precision and recall equally. But
               which metric is paramount typically depends on specific aspects of a problem. F1
               scores vary between zero and one: one indicates the best possible performance and
               zero the worst.</p>
            </li>
            <li>
               <p>
                  <code>AUC</code>: The area under the curve (AUC) metric is used to compare and
               evaluate binary classification by algorithms such as logistic regression that return
               probabilities. A threshold is needed to map the probabilities into classifications.
               The relevant curve is the receiver operating characteristic curve that plots the true
               positive rate (TPR) of predictions (or recall) against the false positive rate (FPR)
               as a function of the threshold value, above which a prediction is considered
               positive. Increasing the threshold results in fewer false positives but more false
               negatives. AUC is the area under this receiver operating characteristic curve and so
               provides an aggregated measure of the model performance across all possible
               classification thresholds. The AUC score can also be interpreted as the probability
               that a randomly selected positive data point is more likely to be predicted positive
               than a randomly selected negative example. AUC scores vary between zero and one: a
               score of one indicates perfect accuracy and a score of one half indicates that the
               prediction is not better than a random classifier. Values under one half predict less
               accurately than a random predictor. But such consistently bad predictors can simply
               be inverted to obtain better than random predictors.</p>
            </li>
            <li>
               <p>
                  <code>F1macro</code>: The F1macro score applies F1 scoring to multiclass
               classification. In this context, you have multiple classes to predict. You just
               calculate the precision and recall for each class as you did for the positive class
               in binary classification. Then, use these values to calculate the F1 score for each
               class and average them to obtain the F1macro score. F1macro scores vary between zero
               and one: one indicates the best possible performance and zero the worst.</p>
            </li>
         </ul>
         <p>If you do not specify a metric explicitly, the default behavior is to automatically
         use:</p>
         <ul>
            <li>
               <p>
                  <code>MSE</code>: for regression.</p>
            </li>
            <li>
               <p>
                  <code>F1</code>: for binary classification</p>
            </li>
            <li>
               <p>
                  <code>Accuracy</code>: for multiclass classification.</p>
            </li>
         </ul>")
  @as("MetricName")
  metricName: autoMLMetricEnum,
}
@ocaml.doc("<p>How long a job is allowed to run, or how many candidates a job is allowed to
         generate.</p>")
type autoMLJobCompletionCriteria = {
  @ocaml.doc("<p>The maximum runtime, in seconds, an AutoML job has to complete.</p>
         <p>If an AutoML job exceeds the maximum runtime, the job is stopped automatically and its
         processing is ended gracefully. The AutoML job identifies the best model whose training was
         completed and marks it as the best-performing model. Any unfinished steps of the job, such
         as automatic one-click Autopilot model deployment, will not be completed. </p>")
  @as("MaxAutoMLJobRuntimeInSeconds")
  maxAutoMLJobRuntimeInSeconds: option<maxAutoMLJobRuntimeInSeconds>,
  @ocaml.doc("<p>The maximum time, in seconds, that each training job is allowed to run as part of a
         hyperparameter tuning job. For more information, see the  used by the  action.</p>")
  @as("MaxRuntimePerTrainingJobInSeconds")
  maxRuntimePerTrainingJobInSeconds: option<maxRuntimePerTrainingJobInSeconds>,
  @ocaml.doc("<p>The maximum number of times a training job is allowed to run.</p>")
  @as("MaxCandidates")
  maxCandidates: option<maxCandidates>,
}
@ocaml.doc("<p>The artifacts that are generated during an AutoML job.</p>")
type autoMLJobArtifacts = {
  @ocaml.doc("<p>The URL of the notebook location.</p>") @as("DataExplorationNotebookLocation")
  dataExplorationNotebookLocation: option<dataExplorationNotebookLocation>,
  @ocaml.doc("<p>The URL of the notebook location.</p>") @as("CandidateDefinitionNotebookLocation")
  candidateDefinitionNotebookLocation: option<candidateDefinitionNotebookLocation>,
}
@ocaml.doc("<p>Information about the steps for a candidate and what step it is working on.</p>")
type autoMLCandidateStep = {
  @ocaml.doc("<p>The name for the candidate's step.</p>") @as("CandidateStepName")
  candidateStepName: candidateStepName,
  @ocaml.doc("<p>The ARN for the candidate's step.</p>") @as("CandidateStepArn")
  candidateStepArn: candidateStepArn,
  @ocaml.doc("<p>Whether the candidate is at the transform, training, or processing step.</p>")
  @as("CandidateStepType")
  candidateStepType: candidateStepType,
}
type attributeNames = array<attributeName>
@ocaml.doc("<p>Configuration for Athena Dataset Definition input.</p>")
type athenaDatasetDefinition = {
  @as("OutputCompression") outputCompression: option<athenaResultCompressionType>,
  @as("OutputFormat") outputFormat: athenaResultFormat,
  @ocaml.doc("<p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data generated from
            an Athena query execution.</p>")
  @as("KmsKeyId")
  kmsKeyId: option<kmsKeyId>,
  @ocaml.doc("<p>The location in Amazon S3 where Athena query results are stored.</p>")
  @as("OutputS3Uri")
  outputS3Uri: s3Uri,
  @as("WorkGroup") workGroup: option<athenaWorkGroup>,
  @as("QueryString") queryString: athenaQueryString,
  @as("Database") database: athenaDatabase,
  @as("Catalog") catalog: athenaCatalog,
}
@ocaml.doc(
  "<p>Specifies the configuration for notifications of inference results for asynchronous inference.</p>"
)
type asyncInferenceNotificationConfig = {
  @ocaml.doc("<p>Amazon SNS topic to post a notification to when inference fails. 
            If no topic is provided, no notification is sent on failure.</p>")
  @as("ErrorTopic")
  errorTopic: option<snsTopicArn>,
  @ocaml.doc("<p>Amazon SNS topic to post a notification to when inference completes successfully. 
            If no topic is provided, no notification is sent on success.</p>")
  @as("SuccessTopic")
  successTopic: option<snsTopicArn>,
}
@ocaml.doc("<p>Configures the behavior of the client used by Amazon SageMaker to interact with the 
            model container during asynchronous inference.</p>")
type asyncInferenceClientConfig = {
  @ocaml.doc("<p>The maximum number of concurrent requests sent by the SageMaker client to the 
            model container. If no value is provided, Amazon SageMaker will choose an optimal value for you.</p>")
  @as("MaxConcurrentInvocationsPerInstance")
  maxConcurrentInvocationsPerInstance: option<maxConcurrentInvocationsPerInstance>,
}
@ocaml.doc("<p>The ID and ID type of an artifact source.</p>")
type artifactSourceType = {
  @ocaml.doc("<p>The ID.</p>") @as("Value") value: string256,
  @ocaml.doc("<p>The type of ID.</p>") @as("SourceIdType") sourceIdType: artifactSourceIdType,
}
@ocaml.doc("<p>Details about an Amazon SageMaker app.</p>")
type appDetails = {
  @ocaml.doc("<p>The creation time.</p>") @as("CreationTime") creationTime: option<creationTime>,
  @ocaml.doc("<p>The status.</p>") @as("Status") status: option<appStatus>,
  @ocaml.doc("<p>The name of the app.</p>") @as("AppName") appName: option<appName>,
  @ocaml.doc("<p>The type of app.</p>") @as("AppType") appType: option<appType>,
  @ocaml.doc("<p>The user profile name.</p>") @as("UserProfileName")
  userProfileName: option<userProfileName>,
  @ocaml.doc("<p>The domain ID.</p>") @as("DomainId") domainId: option<domainId>,
}
@ocaml.doc("<p>Configures how labels are consolidated across human workers and processes output data.
         </p>")
type annotationConsolidationConfig = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of a Lambda function implements the logic for <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-annotation-consolidation.html\">annotation consolidation</a> and to process output data.</p>
        <p>This parameter is required for all labeling jobs. For <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html\">built-in task types</a>, use one
            of the following Amazon SageMaker Ground Truth Lambda function ARNs for
                <code>AnnotationConsolidationLambdaArn</code>. For custom labeling workflows, see
                <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates-step3.html#sms-custom-templates-step3-postlambda\">Post-annotation Lambda</a>. </p>

        <p>
            <b>Bounding box</b> - Finds the most similar boxes from
            different workers based on the Jaccard index of the boxes.</p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-BoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-BoundingBox</code>
                </p>
            </li>
         </ul>
        <p>
            <b>Image classification</b> - Uses a variant of the
            Expectation Maximization approach to estimate the true class of an image based on
            annotations from individual workers.</p>
        <ul>
            <li>
                <p>
                    <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-ImageMultiClass</code>
                </p>
            </li>
         </ul>
        <p>
            <b>Multi-label image classification</b> - Uses a variant of
            the Expectation Maximization approach to estimate the true classes of an image based on
            annotations from individual workers.</p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-ImageMultiClassMultiLabel</code>
               </p>
            </li>
         </ul>
        <p>
            <b>Semantic segmentation</b> - Treats each pixel in an image
            as a multi-class classification and treats pixel annotations from workers as \"votes\" for
            the correct label.</p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-SemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-SemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-SemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-SemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-SemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-SemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-SemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-SemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-SemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-SemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-SemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-SemanticSegmentation</code>
               </p>
            </li>
         </ul>
        <p>
            <b>Text classification</b> - Uses a variant of the
            Expectation Maximization approach to estimate the true class of text based on
            annotations from individual workers.</p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-TextMultiClass</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-TextMultiClass</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-TextMultiClass</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-TextMultiClass</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-TextMultiClass</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-TextMultiClass</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-TextMultiClass</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-TextMultiClass</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-TextMultiClass</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-TextMultiClass</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-TextMultiClass</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-TextMultiClass</code>
               </p>
            </li>
         </ul>
        <p>
            <b>Multi-label text classification</b> - Uses a variant of
            the Expectation Maximization approach to estimate the true classes of text based on
            annotations from individual workers.</p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-TextMultiClassMultiLabel</code>
               </p>
            </li>
         </ul>
        <p>
            <b>Named entity recognition</b> - Groups similar selections
            and calculates aggregate boundaries, resolving to most-assigned label.</p>
        <ul>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-NamedEntityRecognition</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-NamedEntityRecognition</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-NamedEntityRecognition</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-NamedEntityRecognition</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-NamedEntityRecognition</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-NamedEntityRecognition</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-NamedEntityRecognition</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-NamedEntityRecognition</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-NamedEntityRecognition</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-NamedEntityRecognition</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-NamedEntityRecognition</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-NamedEntityRecognition</code>
               </p>
            </li>
         </ul>
        
        
        
        
        
        <p>
            <b>Video Classification</b> - Use this task type when you need workers to classify videos using
            predefined labels that you specify. Workers are shown videos and are asked to choose one
            label for each video.</p>
        <ul>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoMultiClass</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoMultiClass</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoMultiClass</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoMultiClass</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoMultiClass</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoMultiClass</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoMultiClass</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoMultiClass</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoMultiClass</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoMultiClass</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoMultiClass</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoMultiClass</code>
               </p>
            </li>
         </ul>
        <p>
            <b>Video Frame Object Detection</b> - Use this task type to
            have workers identify and locate objects in a sequence of video frames (images extracted
            from a video) using bounding boxes. For example, you can use this task to ask workers to
            identify and localize various objects in a series of video frames, such as cars, bikes,
            and pedestrians.</p>
        <ul>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoObjectDetection</code>
               </p>
            </li>
         </ul>
        <p>
            <b>Video Frame Object Tracking</b> - Use this task type to
            have workers track the movement of objects in a sequence of video frames (images
            extracted from a video) using bounding boxes. For example, you can use this task to ask
            workers to track the movement of objects, such as cars, bikes, and pedestrians. </p>
        <ul>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoObjectTracking</code>
               </p>
            </li>
         </ul>
        
        
        <p>
            <b>3D Point Cloud Object Detection</b> - Use this task type
            when you want workers to classify objects in a 3D point cloud by drawing 3D cuboids
            around objects. For example, you can use this task type to ask workers to identify
            different types of objects in a point cloud, such as cars, bikes, and
            pedestrians.</p>
        <ul>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudObjectDetection</code>
               </p>
            </li>
         </ul>
        <p>
            <b>3D Point Cloud Object Tracking</b> - Use this task type
            when you want workers to draw 3D cuboids around objects that appear in a sequence of 3D
            point cloud frames. For example, you can use this task type to ask workers to track the
            movement of vehicles across multiple point cloud frames. </p>
        <ul>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudObjectTracking</code>
               </p>
            </li>
         </ul>
        <p>
            <b>3D Point Cloud Semantic Segmentation</b> - Use this task
            type when you want workers to create a point-level semantic segmentation masks by
            painting objects in a 3D point cloud using different colors where each color is assigned
            to one of the classes you specify.</p>
        <ul>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
         </ul>
        
        

        <p>
            <b>Use the following ARNs for Label Verification and Adjustment Jobs</b>
         </p>
        <p>Use label verification and adjustment jobs to review and adjust labels. To learn more,
            see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html\">Verify and Adjust Labels </a>.</p>
        
        <p>
            <b>Semantic Segmentation Adjustment</b> - Treats each pixel
            in an image as a multi-class classification and treats pixel adjusted annotations from
            workers as \"votes\" for the correct label.</p>
        <ul>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentSemanticSegmentation</code>
               </p>
            </li>
         </ul>
        
        <p>
            <b>Semantic Segmentation Verification</b> - Uses a variant
            of the Expectation Maximization approach to estimate the true class of verification
            judgment for semantic segmentation labels based on annotations from individual
            workers.</p>
        <ul>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VerificationSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VerificationSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VerificationSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VerificationSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VerificationSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VerificationSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VerificationSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VerificationSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VerificationSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VerificationSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VerificationSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VerificationSemanticSegmentation</code>
               </p>
            </li>
         </ul>
        
        <p>
            <b>Bounding Box Adjustment</b> - Finds the most similar
            boxes from different workers based on the Jaccard index of the adjusted
            annotations.</p>
        <ul>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentBoundingBox</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentBoundingBox</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentBoundingBox</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentBoundingBox</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentBoundingBox</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentBoundingBox</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentBoundingBox</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentBoundingBox</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentBoundingBox</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentBoundingBox</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentBoundingBox</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentBoundingBox</code>
               </p>
            </li>
         </ul>
        <p>
            <b>Bounding Box Verification</b> - Uses a variant of the
            Expectation Maximization approach to estimate the true class of verification judgement
            for bounding box labels based on annotations from individual workers.</p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-VerificationBoundingBox</code>
               </p>
            </li>
         </ul>
        
        
        
        <p>
            <b>Video Frame Object Detection Adjustment</b> - 
            Use this task type when you want workers to adjust bounding boxes that workers have added 
            to video frames to classify and localize objects in a sequence of video frames.</p>

        <ul>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentVideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentVideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentVideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentVideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentVideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentVideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentVideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentVideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentVideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentVideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentVideoObjectDetection</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentVideoObjectDetection</code>
               </p>
            </li>
         </ul>
        <p>
            <b>Video Frame Object Tracking Adjustment</b> - 
            Use this task type when you want workers to adjust bounding boxes that workers have added 
            to video frames to track object movement across a sequence of video frames.</p>
        <ul>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentVideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentVideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentVideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentVideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentVideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentVideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentVideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentVideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentVideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentVideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentVideoObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentVideoObjectTracking</code>
               </p>
            </li>
         </ul>
        
        
        
        <p>
            <b>3D Point Cloud Object Detection Adjustment</b> - Use this
            task type when you want workers to adjust 3D cuboids around objects in a 3D point cloud. </p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
         </ul>
        <p>
            <b>3D Point Cloud Object Tracking Adjustment</b> - Use this
            task type when you want workers to adjust 3D cuboids around objects that appear in a
            sequence of 3D point cloud frames.</p>
        <ul>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
         </ul>
        <p>
            <b>3D Point Cloud Semantic Segmentation Adjustment</b> - Use this task
            type when you want workers to adjust a point-level semantic segmentation masks using a paint tool.</p>
        <ul>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
               <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
         </ul>")
  @as("AnnotationConsolidationLambdaArn")
  annotationConsolidationLambdaArn: lambdaFunctionArn,
}
@ocaml.doc("<p>Provides summary information about an algorithm.</p>")
type algorithmSummary = {
  @ocaml.doc("<p>The overall status of the algorithm.</p>") @as("AlgorithmStatus")
  algorithmStatus: algorithmStatus,
  @ocaml.doc("<p>A timestamp that shows when the algorithm was created.</p>") @as("CreationTime")
  creationTime: creationTime,
  @ocaml.doc("<p>A brief description of the algorithm.</p>") @as("AlgorithmDescription")
  algorithmDescription: option<entityDescription>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the algorithm.</p>") @as("AlgorithmArn")
  algorithmArn: algorithmArn,
  @ocaml.doc("<p>The name of the algorithm that is described by the summary.</p>")
  @as("AlgorithmName")
  algorithmName: entityName,
}
@ocaml.doc("<p>Represents the overall status of an algorithm.</p>")
type algorithmStatusItem = {
  @ocaml.doc("<p>if the overall status is <code>Failed</code>, the reason for the failure.</p>")
  @as("FailureReason")
  failureReason: option<string_>,
  @ocaml.doc("<p>The current status.</p>") @as("Status") status: detailedAlgorithmStatus,
  @ocaml.doc("<p>The name of the algorithm for which the overall status is being reported.</p>")
  @as("Name")
  name: entityName,
}
@ocaml.doc("<p>An Amazon CloudWatch alarm configured to monitor metrics on an endpoint.</p>")
type alarm = {
  @ocaml.doc("<p>The name of a CloudWatch alarm in your account.</p>") @as("AlarmName")
  alarmName: option<alarmName>,
}
@ocaml.doc("<p>Edge Manager agent version.</p>")
type agentVersion = {
  @ocaml.doc("<p>The number of Edge Manager agents.</p>") @as("AgentCount") agentCount: long,
  @ocaml.doc("<p>Version of the agent.</p>") @as("Version") version: edgeVersion,
}
type additionalCodeRepositoryNamesOrUrls = array<codeRepositoryNameOrUrl>
@ocaml.doc("<p>A structure describing the source of an action.</p>")
type actionSource = {
  @ocaml.doc("<p>The ID of the source.</p>") @as("SourceId") sourceId: option<string256>,
  @ocaml.doc("<p>The type of the source.</p>") @as("SourceType") sourceType: option<string256>,
  @ocaml.doc("<p>The URI of the source.</p>") @as("SourceUri") sourceUri: string2048,
}
@ocaml.doc("<p>Specifies a VPC that your training jobs and hosted models have access to. Control
            access to and from your training and model containers by configuring the VPC. For more
            information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html\">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html\">Protect Training Jobs
                by Using an Amazon Virtual Private Cloud</a>. </p>")
type vpcConfig = {
  @ocaml.doc("<p>The ID of the subnets in the VPC to which you want to connect your training job or
            model. For information about the availability of specific instance types, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/instance-types-az.html\">Supported
                Instance Types and Availability Zones</a>.</p>")
  @as("Subnets")
  subnets: subnets,
  @ocaml.doc("<p>The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for
            the VPC that is specified in the <code>Subnets</code> field.</p>")
  @as("SecurityGroupIds")
  securityGroupIds: vpcSecurityGroupIds,
}
type vertices = array<vertex>
type variantPropertyList = array<variantProperty>
type userProfileList = array<userProfileDetails>
@ocaml.doc("<p>A summary of the properties of a trial. To get the complete set of properties, call the
        <a>DescribeTrial</a> API and provide the <code>TrialName</code>.</p>")
type trialSummary = {
  @ocaml.doc("<p>When the trial was last modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>When the trial was created.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @as("TrialSource") trialSource: option<trialSource>,
  @ocaml.doc("<p>The name of the trial as displayed. If <code>DisplayName</code> isn't specified,
        <code>TrialName</code> is displayed.</p>")
  @as("DisplayName")
  displayName: option<experimentEntityName>,
  @ocaml.doc("<p>The name of the trial.</p>") @as("TrialName")
  trialName: option<experimentEntityName>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the trial.</p>") @as("TrialArn")
  trialArn: option<trialArn>,
}
@ocaml.doc("<p>A summary of the properties of a trial component. To get all the properties, call the
        <a>DescribeTrialComponent</a> API and provide the
      <code>TrialComponentName</code>.</p>")
type trialComponentSummary = {
  @ocaml.doc("<p>Who last modified the component.</p>") @as("LastModifiedBy")
  lastModifiedBy: option<userContext>,
  @ocaml.doc("<p>When the component was last modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>Who created the trial component.</p>") @as("CreatedBy")
  createdBy: option<userContext>,
  @ocaml.doc("<p>When the component was created.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>When the component ended.</p>") @as("EndTime") endTime: option<timestamp_>,
  @ocaml.doc("<p>When the component started.</p>") @as("StartTime") startTime: option<timestamp_>,
  @ocaml.doc("<p>The status of the component. States include:</p>
         <ul>
            <li>
               <p>InProgress</p>
            </li>
            <li>
               <p>Completed</p>
            </li>
            <li>
               <p>Failed</p>
            </li>
         </ul>")
  @as("Status")
  status: option<trialComponentStatus>,
  @as("TrialComponentSource") trialComponentSource: option<trialComponentSource>,
  @ocaml.doc("<p>The name of the component as displayed. If <code>DisplayName</code> isn't specified,
        <code>TrialComponentName</code> is displayed.</p>")
  @as("DisplayName")
  displayName: option<experimentEntityName>,
  @ocaml.doc("<p>The ARN of the trial component.</p>") @as("TrialComponentArn")
  trialComponentArn: option<trialComponentArn>,
  @ocaml.doc("<p>The name of the trial component.</p>") @as("TrialComponentName")
  trialComponentName: option<experimentEntityName>,
}
@ocaml.doc("<p>A short summary of a trial component.</p>")
type trialComponentSimpleSummary = {
  @as("CreatedBy") createdBy: option<userContext>,
  @ocaml.doc("<p>When the component was created.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @as("TrialComponentSource") trialComponentSource: option<trialComponentSource>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the trial component.</p>")
  @as("TrialComponentArn")
  trialComponentArn: option<trialComponentArn>,
  @ocaml.doc("<p>The name of the trial component.</p>") @as("TrialComponentName")
  trialComponentName: option<experimentEntityName>,
}
type trialComponentParameters = Js.Dict.t<trialComponentParameterValue>
type trialComponentMetricSummaries = array<trialComponentMetricSummary>
type trialComponentArtifacts = Js.Dict.t<trialComponentArtifact>
type transformJobSummaries = array<transformJobSummary>
@ocaml.doc("<p>Describes the location of the channel data.</p>")
type transformDataSource = {
  @ocaml.doc("<p>The S3 location of the data source that is associated with a channel.</p>")
  @as("S3DataSource")
  s3DataSource: transformS3DataSource,
}
type trainingJobSummaries = array<trainingJobSummary>
@ocaml.doc("<p>Defines the traffic routing strategy during an endpoint deployment to shift traffic from the
            old fleet to the new fleet.</p>")
type trafficRoutingConfig = {
  @ocaml.doc("<p>Batch size for each step to turn on traffic on the new endpoint fleet. <code>Value</code> must be
            10-50% of the variant's total instance count.</p>")
  @as("LinearStepSize")
  linearStepSize: option<capacitySize>,
  @ocaml.doc("<p>Batch size for the first step to turn on traffic on the new endpoint fleet. <code>Value</code> must be less than
        or equal to 50% of the variant's total instance count.</p>")
  @as("CanarySize")
  canarySize: option<capacitySize>,
  @ocaml.doc("<p>The waiting time (in seconds) between incremental steps to turn on traffic on the
            new endpoint fleet.</p>")
  @as("WaitIntervalInSeconds")
  waitIntervalInSeconds: waitIntervalInSeconds,
  @ocaml.doc("<p>Traffic routing strategy type.</p>
        <ul>
            <li>
               <p>
                  <code>ALL_AT_ONCE</code>: Endpoint traffic shifts to the new fleet
                in a single step.
            </p>
            </li>
            <li>
               <p>
                  <code>CANARY</code>: Endpoint traffic shifts to the new fleet
                in two steps. The first step is the canary, which is a small portion of the traffic. The
                second step is the remainder of the traffic.
            </p>
            </li>
            <li>
               <p>
                  <code>LINEAR</code>: Endpoint traffic shifts to the new fleet in
                n steps of a configurable size.
            </p>
            </li>
         </ul>")
  @as("Type")
  type_: trafficRoutingConfigType,
}
@ocaml.doc("<p>The TensorBoard app settings.</p>")
type tensorBoardAppSettings = {
  @ocaml.doc(
    "<p>The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.</p>"
  )
  @as("DefaultResourceSpec")
  defaultResourceSpec: option<resourceSpec>,
}
type tagList_ = array<tag>
@ocaml.doc("<p>Specified in the <a>GetSearchSuggestions</a> request.
      Limits the property names that are included in the response.</p>")
type suggestionQuery = {
  @ocaml.doc("<p>Defines a property name hint. Only property
      names that begin with the specified hint are included in the response.</p>")
  @as("PropertyNameQuery")
  propertyNameQuery: option<propertyNameQuery>,
}
type subscribedWorkteams = array<subscribedWorkteam>
type studioLifecycleConfigsList = array<studioLifecycleConfigDetails>
@ocaml.doc("<p>A list of IP address ranges (<a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\">CIDRs</a>). Used to create an allow
            list of IP addresses for a private workforce. Workers will only be able to login to their worker portal from an 
            IP address within this range. By default, a workforce isn't restricted to specific IP addresses.</p>")
type sourceIpConfig = {
  @ocaml.doc("<p>A list of one to ten <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\">Classless Inter-Domain Routing</a> (CIDR) values.</p>
        <p>Maximum: Ten CIDR values</p>
        <note>
            <p>The following Length Constraints apply to individual CIDR values in
                the CIDR value list.</p>
        </note>")
  @as("Cidrs")
  cidrs: cidrs,
}
type sourceAlgorithmList = array<sourceAlgorithm>
type secondaryStatusTransitions = array<secondaryStatusTransition>
@ocaml.doc("<p>Describes the S3 data source.</p>")
type s3DataSource = {
  @ocaml.doc("<p>A list of one or more attribute names to use that are found in a specified augmented
            manifest file.</p>")
  @as("AttributeNames")
  attributeNames: option<attributeNames>,
  @ocaml.doc("<p>If you want Amazon SageMaker to replicate the entire dataset on each ML compute instance that
            is launched for model training, specify <code>FullyReplicated</code>. </p>
        <p>If you want Amazon SageMaker to replicate a subset of data on each ML compute instance that is
            launched for model training, specify <code>ShardedByS3Key</code>. If there are
                <i>n</i> ML compute instances launched for a training job, each
            instance gets approximately 1/<i>n</i> of the number of S3 objects. In
            this case, model training on each machine uses only the subset of training data. </p>
        <p>Don't choose more ML compute instances for training than available S3 objects. If
            you do, some nodes won't get any data and you will pay for nodes that aren't getting any
            training data. This applies in both File and Pipe modes. Keep this in mind when
            developing algorithms. </p>
        <p>In distributed training, where you use multiple ML compute EC2 instances, you might
            choose <code>ShardedByS3Key</code>. If the algorithm requires copying training data to
            the ML storage volume (when <code>TrainingInputMode</code> is set to <code>File</code>),
            this copies 1/<i>n</i> of the number of objects. </p>")
  @as("S3DataDistributionType")
  s3DataDistributionType: option<s3DataDistribution>,
  @ocaml.doc("<p>Depending on the value specified for the <code>S3DataType</code>, identifies either
            a key name prefix or a manifest. For example: </p>
        <ul>
            <li>
                <p> A key name prefix might look like this:
                        <code>s3://bucketname/exampleprefix</code>
               </p>
            </li>
            <li>
                <p> A manifest might look like this:
                        <code>s3://bucketname/example.manifest</code>
                </p>
                <p> A manifest is an S3 object which is a JSON file consisting of an array of
                    elements. The first element is a prefix which is followed by one or more
                    suffixes. SageMaker appends the suffix elements to the prefix to get a full set
                    of <code>S3Uri</code>. Note that the prefix must be a valid non-empty
                        <code>S3Uri</code> that precludes users from specifying a manifest whose
                    individual <code>S3Uri</code> is sourced from different S3 buckets.</p>
                <p> The following code example shows a valid manifest format: </p>
                <p>
                    <code>[ {\"prefix\": \"s3://customer_bucket/some/prefix/\"},</code>
                </p>
                <p>
                    <code> \"relative/path/to/custdata-1\",</code>
                </p>
                <p>
                    <code> \"relative/path/custdata-2\",</code>
                </p>
                <p>
                    <code> ...</code>
                </p>
                <p>
                    <code> \"relative/path/custdata-N\"</code>
                </p>
                <p>
                    <code>]</code>
                </p>
                <p> This JSON is equivalent to the following <code>S3Uri</code>
                    list:</p>
                <p>
                    <code>s3://customer_bucket/some/prefix/relative/path/to/custdata-1</code>
                </p>
                <p>
                    <code>s3://customer_bucket/some/prefix/relative/path/custdata-2</code>
                </p>
                <p>
                    <code>...</code>
                </p>
                <p>
                    <code>s3://customer_bucket/some/prefix/relative/path/custdata-N</code>
                </p>
                <p>The complete set of <code>S3Uri</code> in this manifest is the input data
                    for the channel for this data source. The object that each <code>S3Uri</code>
                    points to must be readable by the IAM role that Amazon SageMaker uses to perform tasks on
                    your behalf. </p>
            </li>
         </ul>")
  @as("S3Uri")
  s3Uri: s3Uri,
  @ocaml.doc("<p>If you choose <code>S3Prefix</code>, <code>S3Uri</code> identifies a key name prefix.
            Amazon SageMaker uses all objects that match the specified key name prefix for model training. </p>
        <p>If you choose <code>ManifestFile</code>, <code>S3Uri</code> identifies an object that
            is a manifest file containing a list of object keys that you want Amazon SageMaker to use for model
            training. </p>
        <p>If you choose <code>AugmentedManifestFile</code>, S3Uri identifies an object that is
            an augmented manifest file in JSON lines format. This file contains the data you want to
            use for model training. <code>AugmentedManifestFile</code> can only be used if the
            Channel's input mode is <code>Pipe</code>.</p>")
  @as("S3DataType")
  s3DataType: s3DataType,
}
@ocaml.doc("<p>The resolved attributes.</p>")
type resolvedAttributes = {
  @as("CompletionCriteria") completionCriteria: option<autoMLJobCompletionCriteria>,
  @ocaml.doc("<p>The problem type.</p>") @as("ProblemType") problemType: option<problemType>,
  @as("AutoMLJobObjective") autoMLJobObjective: option<autoMLJobObjective>,
}
type renderingErrorList = array<renderingError>
@ocaml.doc(
  "<p>A collection of settings that update the current configuration for the <code>RStudioServerPro</code> Domain-level app.</p>"
)
type rstudioServerProDomainSettingsForUpdate = {
  @as("DefaultResourceSpec") defaultResourceSpec: option<resourceSpec>,
  @ocaml.doc("<p>The execution role for the <code>RStudioServerPro</code> Domain-level app.</p>")
  @as("DomainExecutionRoleArn")
  domainExecutionRoleArn: roleArn,
}
@ocaml.doc(
  "<p>A collection of settings that configure the <code>RStudioServerPro</code> Domain-level app.</p>"
)
type rstudioServerProDomainSettings = {
  @as("DefaultResourceSpec") defaultResourceSpec: option<resourceSpec>,
  @ocaml.doc("<p>A URL pointing to an RStudio Package Manager server.</p>")
  @as("RStudioPackageManagerUrl")
  rstudioPackageManagerUrl: option<string_>,
  @ocaml.doc("<p>A URL pointing to an RStudio Connect server.</p>") @as("RStudioConnectUrl")
  rstudioConnectUrl: option<string_>,
  @ocaml.doc(
    "<p>The ARN of the execution role for the <code>RStudioServerPro</code> Domain-level app.</p>"
  )
  @as("DomainExecutionRoleArn")
  domainExecutionRoleArn: roleArn,
}
@ocaml.doc("<p>A set of filters to narrow the set of lineage entities connected to the <code>StartArn</code>(s) returned by the 
      <code>QueryLineage</code> API action.</p>")
type queryFilters = {
  @ocaml.doc("<p>Filter the lineage entities connected to the <code>StartArn</code>(s) by a set if property key value pairs. 
         If multiple pairs are provided, an entity will be included in the results if it matches any of the provided pairs.</p>")
  @as("Properties")
  properties: option<queryProperties>,
  @ocaml.doc(
    "<p>Filter the lineage entities connected to the <code>StartArn</code>(s) after the last modified date.</p>"
  )
  @as("ModifiedAfter")
  modifiedAfter: option<timestamp_>,
  @ocaml.doc(
    "<p>Filter the lineage entities connected to the <code>StartArn</code>(s) before the last modified date.</p>"
  )
  @as("ModifiedBefore")
  modifiedBefore: option<timestamp_>,
  @ocaml.doc(
    "<p>Filter the lineage entities connected to the <code>StartArn</code>(s) after the create date.</p>"
  )
  @as("CreatedAfter")
  createdAfter: option<timestamp_>,
  @ocaml.doc(
    "<p>Filter the lineage entities connected to the <code>StartArn</code>(s) by created date.</p>"
  )
  @as("CreatedBefore")
  createdBefore: option<timestamp_>,
  @ocaml.doc(
    "<p>Filter the lineage entities connected to the <code>StartArn</code>(s) by the type of the lineage entity.</p>"
  )
  @as("LineageTypes")
  lineageTypes: option<queryLineageTypes>,
  @ocaml.doc("<p>Filter the lineage entities connected to the <code>StartArn</code> by type. For example: <code>DataSet</code>, 
         <code>Model</code>, <code>Endpoint</code>, or <code>ModelDeployment</code>.</p>")
  @as("Types")
  types: option<queryTypes>,
}
@ocaml.doc("<p>Defines the amount of money paid to an Amazon Mechanical Turk worker for each task performed. </p>
        <p>Use one of the following prices for bounding box tasks. Prices are in US dollars and
            should be based on the complexity of the task; the longer it takes in your initial
            testing, the more you should offer.</p>
        <ul>
            <li>
                <p>0.036</p>
            </li>
            <li>
                <p>0.048</p>
            </li>
            <li>
                <p>0.060</p>
            </li>
            <li>
                <p>0.072</p>
            </li>
            <li>
                <p>0.120</p>
            </li>
            <li>
                <p>0.240</p>
            </li>
            <li>
                <p>0.360</p>
            </li>
            <li>
                <p>0.480</p>
            </li>
            <li>
                <p>0.600</p>
            </li>
            <li>
                <p>0.720</p>
            </li>
            <li>
                <p>0.840</p>
            </li>
            <li>
                <p>0.960</p>
            </li>
            <li>
                <p>1.080</p>
            </li>
            <li>
                <p>1.200</p>
            </li>
         </ul>
        <p>Use one of the following prices for image classification, text classification, and
            custom tasks. Prices are in US dollars.</p>
        <ul>
            <li>
                <p>0.012</p>
            </li>
            <li>
                <p>0.024</p>
            </li>
            <li>
                <p>0.036</p>
            </li>
            <li>
                <p>0.048</p>
            </li>
            <li>
                <p>0.060</p>
            </li>
            <li>
                <p>0.072</p>
            </li>
            <li>
                <p>0.120</p>
            </li>
            <li>
                <p>0.240</p>
            </li>
            <li>
                <p>0.360</p>
            </li>
            <li>
                <p>0.480</p>
            </li>
            <li>
                <p>0.600</p>
            </li>
            <li>
                <p>0.720</p>
            </li>
            <li>
                <p>0.840</p>
            </li>
            <li>
                <p>0.960</p>
            </li>
            <li>
                <p>1.080</p>
            </li>
            <li>
                <p>1.200</p>
            </li>
         </ul>
        <p>Use one of the following prices for semantic segmentation tasks. Prices are in US
            dollars.</p>
        <ul>
            <li>
                <p>0.840</p>
            </li>
            <li>
                <p>0.960</p>
            </li>
            <li>
                <p>1.080</p>
            </li>
            <li>
                <p>1.200</p>
            </li>
         </ul>
        <p>Use one of the following prices for Textract AnalyzeDocument Important Form Key Amazon
            Augmented AI review tasks. Prices are in US dollars.</p>
        <ul>
            <li>
                <p>2.400 </p>
            </li>
            <li>
                <p>2.280 </p>
            </li>
            <li>
                <p>2.160 </p>
            </li>
            <li>
                <p>2.040 </p>
            </li>
            <li>
                <p>1.920 </p>
            </li>
            <li>
                <p>1.800 </p>
            </li>
            <li>
                <p>1.680 </p>
            </li>
            <li>
                <p>1.560 </p>
            </li>
            <li>
                <p>1.440 </p>
            </li>
            <li>
                <p>1.320 </p>
            </li>
            <li>
                <p>1.200 </p>
            </li>
            <li>
                <p>1.080 </p>
            </li>
            <li>
                <p>0.960 </p>
            </li>
            <li>
                <p>0.840 </p>
            </li>
            <li>
                <p>0.720 </p>
            </li>
            <li>
                <p>0.600 </p>
            </li>
            <li>
                <p>0.480 </p>
            </li>
            <li>
                <p>0.360 </p>
            </li>
            <li>
                <p>0.240 </p>
            </li>
            <li>
                <p>0.120 </p>
            </li>
            <li>
                <p>0.072 </p>
            </li>
            <li>
                <p>0.060 </p>
            </li>
            <li>
                <p>0.048 </p>
            </li>
            <li>
                <p>0.036 </p>
            </li>
            <li>
                <p>0.024 </p>
            </li>
            <li>
                <p>0.012 </p>
            </li>
         </ul>
        <p>Use one of the following prices for Rekognition DetectModerationLabels Amazon
            Augmented AI review tasks. Prices are in US dollars.</p>
        <ul>
            <li>
                <p>1.200 </p>
            </li>
            <li>
                <p>1.080 </p>
            </li>
            <li>
                <p>0.960 </p>
            </li>
            <li>
                <p>0.840 </p>
            </li>
            <li>
                <p>0.720 </p>
            </li>
            <li>
                <p>0.600 </p>
            </li>
            <li>
                <p>0.480 </p>
            </li>
            <li>
                <p>0.360 </p>
            </li>
            <li>
                <p>0.240 </p>
            </li>
            <li>
                <p>0.120 </p>
            </li>
            <li>
                <p>0.072 </p>
            </li>
            <li>
                <p>0.060 </p>
            </li>
            <li>
                <p>0.048 </p>
            </li>
            <li>
                <p>0.036 </p>
            </li>
            <li>
                <p>0.024 </p>
            </li>
            <li>
                <p>0.012 </p>
            </li>
         </ul>
        <p>Use one of the following prices for Amazon Augmented AI custom human review tasks.
            Prices are in US dollars.</p>
        <ul>
            <li>
                <p>1.200 </p>
            </li>
            <li>
                <p>1.080 </p>
            </li>
            <li>
                <p>0.960 </p>
            </li>
            <li>
                <p>0.840 </p>
            </li>
            <li>
                <p>0.720 </p>
            </li>
            <li>
                <p>0.600 </p>
            </li>
            <li>
                <p>0.480 </p>
            </li>
            <li>
                <p>0.360 </p>
            </li>
            <li>
                <p>0.240 </p>
            </li>
            <li>
                <p>0.120 </p>
            </li>
            <li>
                <p>0.072 </p>
            </li>
            <li>
                <p>0.060 </p>
            </li>
            <li>
                <p>0.048 </p>
            </li>
            <li>
                <p>0.036 </p>
            </li>
            <li>
                <p>0.024 </p>
            </li>
            <li>
                <p>0.012 </p>
            </li>
         </ul>")
type publicWorkforceTaskPrice = {
  @ocaml.doc(
    "<p>Defines the amount of money paid to an Amazon Mechanical Turk worker in United States dollars.</p>"
  )
  @as("AmountInUsd")
  amountInUsd: option<usd>,
}
type provisioningParameters = array<provisioningParameter>
type propertyNameSuggestionList = array<propertyNameSuggestion>
type projectSummaryList = array<projectSummary>
type profilerRuleEvaluationStatuses = array<profilerRuleEvaluationStatus>
@ocaml.doc("<p>Configuration information for profiling rules.</p>")
type profilerRuleConfiguration = {
  @ocaml.doc("<p>Runtime configuration for rule container.</p>") @as("RuleParameters")
  ruleParameters: option<ruleParameters>,
  @ocaml.doc(
    "<p>The size, in GB, of the ML storage volume attached to the processing instance.</p>"
  )
  @as("VolumeSizeInGB")
  volumeSizeInGB: option<optionalVolumeSizeInGB>,
  @ocaml.doc(
    "<p>The instance type to deploy a Debugger custom rule for profiling a training job.</p>"
  )
  @as("InstanceType")
  instanceType: option<processingInstanceType>,
  @ocaml.doc("<p>The Amazon Elastic Container (ECR) Image for the managed rule evaluation.</p>")
  @as("RuleEvaluatorImage")
  ruleEvaluatorImage: algorithmImage,
  @ocaml.doc("<p>Path to Amazon S3 storage location for rules.</p>") @as("S3OutputPath")
  s3OutputPath: option<s3Uri>,
  @ocaml.doc(
    "<p>Path to local storage location for output of rules. Defaults to <code>/opt/ml/processing/output/rule/</code>. </p>"
  )
  @as("LocalPath")
  localPath: option<directoryPath>,
  @ocaml.doc(
    "<p>The name of the rule configuration. It must be unique relative to other rule configuration names.</p>"
  )
  @as("RuleConfigurationName")
  ruleConfigurationName: ruleConfigurationName,
}
@ocaml.doc("<p>Configuration information for updating the Debugger profile parameters, system and framework metrics configurations, and
            storage paths.</p>")
type profilerConfigForUpdate = {
  @ocaml.doc("<p>To disable Debugger monitoring and profiling, set to <code>True</code>.</p>")
  @as("DisableProfiler")
  disableProfiler: option<disableProfiler>,
  @ocaml.doc("<p>Configuration information for capturing framework metrics. Available key strings for different profiling options are
            <code>DetailedProfilingConfig</code>, <code>PythonProfilingConfig</code>, and <code>DataLoaderProfilingConfig</code>.
            The following codes are configuration structures for the <code>ProfilingParameters</code> parameter. To learn more about
            how to configure the <code>ProfilingParameters</code> parameter, 
            see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html\">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.
        </p>")
  @as("ProfilingParameters")
  profilingParameters: option<profilingParameters>,
  @ocaml.doc("<p>A time interval for capturing system metrics in milliseconds. Available values are
            100, 200, 500, 1000 (1 second), 5000 (5 seconds), and 60000 (1 minute) milliseconds. The default value is 500 milliseconds.</p>")
  @as("ProfilingIntervalInMilliseconds")
  profilingIntervalInMilliseconds: option<profilingIntervalInMilliseconds>,
  @ocaml.doc("<p>Path to Amazon S3 storage location for system and framework metrics.</p>")
  @as("S3OutputPath")
  s3OutputPath: option<s3Uri>,
}
@ocaml.doc("<p>Configuration information for Debugger system monitoring, framework profiling, and
            storage paths.</p>")
type profilerConfig = {
  @ocaml.doc("<p>Configuration information for capturing framework metrics. Available key strings for different profiling options are
            <code>DetailedProfilingConfig</code>, <code>PythonProfilingConfig</code>, and <code>DataLoaderProfilingConfig</code>.
            The following codes are configuration structures for the <code>ProfilingParameters</code> parameter. To learn more about
            how to configure the <code>ProfilingParameters</code> parameter, 
            see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html\">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.
        </p>")
  @as("ProfilingParameters")
  profilingParameters: option<profilingParameters>,
  @ocaml.doc("<p>A time interval for capturing system metrics in milliseconds. Available values are
            100, 200, 500, 1000 (1 second), 5000 (5 seconds), and 60000 (1 minute) milliseconds. The default value is 500 milliseconds.</p>")
  @as("ProfilingIntervalInMilliseconds")
  profilingIntervalInMilliseconds: option<profilingIntervalInMilliseconds>,
  @ocaml.doc("<p>Path to Amazon S3 storage location for system and framework metrics.</p>")
  @as("S3OutputPath")
  s3OutputPath: s3Uri,
}
type productionVariantStatusList = array<productionVariantStatus>
@ocaml.doc("<p>Identifies a model that you want to host and the resources chosen to deploy for
            hosting it. If you are deploying multiple models, tell Amazon SageMaker how to distribute traffic
            among the models by specifying variant weights. </p>")
type productionVariant = {
  @ocaml.doc("<p>The serverless configuration for an endpoint. Specifies a serverless endpoint configuration instead of an instance-based endpoint configuration.</p>
         <note>
            <p>Serverless Inference is in preview release for Amazon SageMaker and is subject to change. We do not recommend using this feature in production environments.</p>
         </note>")
  @as("ServerlessConfig")
  serverlessConfig: option<productionVariantServerlessConfig>,
  @ocaml.doc("<p>Specifies configuration for a core dump from the model container when the process
            crashes.</p>")
  @as("CoreDumpConfig")
  coreDumpConfig: option<productionVariantCoreDumpConfig>,
  @ocaml.doc("<p>The size of the Elastic Inference (EI) instance to use for the production variant. EI
            instances provide on-demand GPU computing for inference. For more information, see
                <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html\">Using Elastic
                Inference in Amazon SageMaker</a>.</p>")
  @as("AcceleratorType")
  acceleratorType: option<productionVariantAcceleratorType>,
  @ocaml.doc("<p>Determines initial traffic distribution among all of the models that you specify in
            the endpoint configuration. The traffic to a production variant is determined by the
            ratio of the <code>VariantWeight</code> to the sum of all <code>VariantWeight</code>
            values across all ProductionVariants. If unspecified, it defaults to 1.0.
            </p>")
  @as("InitialVariantWeight")
  initialVariantWeight: option<variantWeight>,
  @ocaml.doc("<p>The ML compute instance type.</p>") @as("InstanceType")
  instanceType: option<productionVariantInstanceType>,
  @ocaml.doc("<p>Number of instances to launch initially.</p>") @as("InitialInstanceCount")
  initialInstanceCount: option<initialTaskCount>,
  @ocaml.doc("<p>The name of the model that you want to host. This is the name that you specified
            when creating the model.</p>")
  @as("ModelName")
  modelName: modelName,
  @ocaml.doc("<p>The name of the production variant.</p>") @as("VariantName")
  variantName: variantName,
}
@ocaml.doc("<p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a
            processing job. In distributed training, you specify more than one instance.</p>")
type processingResources = {
  @ocaml.doc("<p>The configuration for the resources in a cluster used to run the processing
            job.</p>")
  @as("ClusterConfig")
  clusterConfig: processingClusterConfig,
}
@ocaml.doc("<p>Describes the results of a processing job. The processing output must specify exactly one of
            either <code>S3Output</code> or <code>FeatureStoreOutput</code> types.</p>")
type processingOutput = {
  @ocaml.doc("<p>When <code>True</code>, output operations such as data upload are managed natively by the
            processing job application. When <code>False</code> (default), output operations are managed by
            Amazon SageMaker.</p>")
  @as("AppManaged")
  appManaged: option<appManaged>,
  @ocaml.doc("<p>Configuration for processing job outputs in Amazon SageMaker Feature Store. This processing output
            type is only supported when <code>AppManaged</code> is specified. </p>")
  @as("FeatureStoreOutput")
  featureStoreOutput: option<processingFeatureStoreOutput>,
  @ocaml.doc("<p>Configuration for processing job outputs in Amazon S3.</p>") @as("S3Output")
  s3Output: option<processingS3Output>,
  @ocaml.doc("<p>The name for the processing job output.</p>") @as("OutputName")
  outputName: string_,
}
type processingJobSummaries = array<processingJobSummary>
type pipelineSummaryList = array<pipelineSummary>
type pipelineExecutionSummaryList = array<pipelineExecutionSummary>
type phases = array<phase>
type parents = array<parent>
type parentHyperParameterTuningJobs = array<parentHyperParameterTuningJob>
type parameterList = array<parameter>
type outputParameterList = array<outputParameter>
@ocaml.doc("<p>Contains information about the output location for the compiled model and the target
            device that the model runs on. <code>TargetDevice</code> and <code>TargetPlatform</code>
            are mutually exclusive, so you need to choose one between the two to specify your target
            device or platform. If you cannot find your device you want to use from the
                <code>TargetDevice</code> list, use <code>TargetPlatform</code> to describe the
            platform of your edge device and <code>CompilerOptions</code> if there are specific
            settings that are required or recommended to use for particular TargetPlatform.</p>")
type outputConfig = {
  @ocaml.doc("<p>The Amazon Web Services Key Management Service key (Amazon Web Services KMS) that Amazon SageMaker uses to encrypt your output models with Amazon S3 server-side encryption
        after compilation job. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account.
        For more information, see
        <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html\">KMS-Managed Encryption
                Keys</a> in the <i>Amazon Simple Storage Service Developer Guide.</i>
        </p>    
	        <p>The KmsKeyId can be any of the following formats: </p>
        <ul>
            <li>
                <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
               </p>
            </li>
            <li>
                <p>Key ARN:
                        <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
               </p>
            </li>
            <li>
                <p>Alias name: <code>alias/ExampleAlias</code>
               </p>
            </li>
            <li>
                <p>Alias name ARN:
                        <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
               </p>
            </li>
         </ul>")
  @as("KmsKeyId")
  kmsKeyId: option<kmsKeyId>,
  @ocaml.doc("<p>Specifies additional parameters for compiler options in JSON format. The compiler
            options are <code>TargetPlatform</code> specific. It is required for NVIDIA accelerators
            and highly recommended for CPU compilations. For any other cases, it is optional to
            specify <code>CompilerOptions.</code>
         </p>
        <ul>
            <li>
                <p>
                  <code>DTYPE</code>: Specifies the data type for the input. When compiling for
                    <code>ml_*</code> (except for <code>ml_inf</code>) instances using PyTorch
                    framework, provide the data type (dtype) of the model's input.
                        <code>\"float32\"</code> is used if <code>\"DTYPE\"</code> is not specified.
                    Options for data type are:</p>
                <ul>
                  <li>
                     <p>float32: Use either <code>\"float\"</code> or <code>\"float32\"</code>.</p>
                  </li>
                  <li>
                     <p>int64: Use either <code>\"int64\"</code> or <code>\"long\"</code>.</p>
                  </li>
               </ul>
                <p> For example, <code>{\"dtype\" : \"float32\"}</code>.</p>
            </li>
            <li>
                <p>
                  <code>CPU</code>: Compilation for CPU supports the following compiler
                    options.</p>
                <ul>
                  <li>
                        <p>
                        <code>mcpu</code>: CPU micro-architecture. For example, <code>{'mcpu':
                                'skylake-avx512'}</code>
                     </p>
                    </li>
                  <li>
                        <p>
                        <code>mattr</code>: CPU flags. For example, <code>{'mattr': ['+neon',
                                '+vfpv4']}</code>
                     </p>
                    </li>
               </ul>
            </li>
            <li>
                <p>
                  <code>ARM</code>: Details of ARM CPU compilations.</p>
                <ul>
                  <li>
                        <p>
                        <code>NEON</code>: NEON is an implementation of the Advanced SIMD
                            extension used in ARMv7 processors.</p>
                        <p>For example, add <code>{'mattr': ['+neon']}</code> to the compiler
                            options if compiling for ARM 32-bit platform with the NEON
                            support.</p>
                    </li>
               </ul>
            </li>
            <li>
                <p>
                  <code>NVIDIA</code>: Compilation for NVIDIA GPU supports the following
                    compiler options.</p>
                <ul>
                  <li>
                        <p>
                        <code>gpu_code</code>: Specifies the targeted architecture.</p>
                    </li>
                  <li>
                        <p>
                        <code>trt-ver</code>: Specifies the TensorRT versions in x.y.z.
                            format.</p>
                    </li>
                  <li>
                        <p>
                        <code>cuda-ver</code>: Specifies the CUDA version in x.y
                            format.</p>
                    </li>
               </ul>
                <p>For example, <code>{'gpu-code': 'sm_72', 'trt-ver': '6.0.1', 'cuda-ver':
                        '10.1'}</code>
               </p>
            </li>
            <li>
                <p>
                  <code>ANDROID</code>: Compilation for the Android OS supports the following
                    compiler options:</p>
                <ul>
                  <li>
                        <p>
                        <code>ANDROID_PLATFORM</code>: Specifies the Android API levels.
                            Available levels range from 21 to 29. For example,
                                <code>{'ANDROID_PLATFORM': 28}</code>.</p>
                    </li>
                  <li>
                        <p>
                        <code>mattr</code>: Add <code>{'mattr': ['+neon']}</code> to compiler
                            options if compiling for ARM 32-bit platform with NEON support.</p>
                    </li>
               </ul>
            </li>
            <li>
                <p>
                    <code>INFERENTIA</code>: Compilation for target ml_inf1 uses compiler options
                    passed in as a JSON string. For example,
                    <code>\"CompilerOptions\": \"\\\"--verbose 1 --num-neuroncores 2 -O2\\\"\"</code>.
                </p>
                <p>For information about supported compiler options, see
                    <a href=\"https://github.com/aws/aws-neuron-sdk/blob/master/docs/neuron-cc/command-line-reference.md\">
                        Neuron Compiler CLI</a>.
                </p>
            </li>
            <li>
                <p>
                  <code>CoreML</code>: Compilation for the CoreML <a>OutputConfig$TargetDevice</a>
                    supports the following compiler options:</p>
                <ul>
                  <li>
                        <p>
                        <code>class_labels</code>: Specifies the classification labels file
                            name inside input tar.gz file. For example,
                                <code>{\"class_labels\": \"imagenet_labels_1000.txt\"}</code>.
                            Labels inside the txt file should be separated by newlines.</p>
                    </li>
               </ul>
            </li>
            <li>
                <p>
                  <code>EIA</code>: Compilation for the Elastic Inference Accelerator supports the following 
                    compiler options:</p>
                <ul>
                  <li>
                     <p>
                        <code>precision_mode</code>: Specifies the precision of compiled artifacts. Supported values
                        are <code>\"FP16\"</code> and <code>\"FP32\"</code>. Default is
                        <code>\"FP32\"</code>.</p>
                  </li>
                  <li>
                     <p>
                        <code>signature_def_key</code>: Specifies the signature to use for models in SavedModel
                        format. Defaults is TensorFlow's default signature def key.</p>
                  </li>
                  <li>
                     <p>
                        <code>output_names</code>: Specifies a list of output tensor names for 
                        models in FrozenGraph format. Set at most one API field, either: <code>signature_def_key</code> or <code>output_names</code>.</p>
                  </li>
               </ul>
                <p>For example: 
                    <code>{\"precision_mode\": \"FP32\",  \"output_names\": [\"output:0\"]}</code>
               </p>
            </li>
         </ul>")
  @as("CompilerOptions")
  compilerOptions: option<compilerOptions>,
  @ocaml.doc("<p>Contains information about a target platform that you want your model to run on, such
            as OS, architecture, and accelerators. It is an alternative of
            <code>TargetDevice</code>.</p>
        <p>The following examples show how to configure the <code>TargetPlatform</code> and
                <code>CompilerOptions</code> JSON strings for popular target platforms: </p>
        <ul>
            <li>
                <p>Raspberry Pi 3 Model B+</p>
                <p>
                  <code>\"TargetPlatform\": {\"Os\": \"LINUX\", \"Arch\": \"ARM_EABIHF\"},</code>
               </p>
                <p>
                  <code> \"CompilerOptions\": {'mattr': ['+neon']}</code>
               </p>
            </li>
            <li>
                <p>Jetson TX2</p>
                <p>
                  <code>\"TargetPlatform\": {\"Os\": \"LINUX\", \"Arch\": \"ARM64\", \"Accelerator\":
                        \"NVIDIA\"},</code>
               </p>
                <p>
                  <code> \"CompilerOptions\": {'gpu-code': 'sm_62', 'trt-ver': '6.0.1',
                        'cuda-ver': '10.0'}</code>
               </p>
            </li>
            <li>
                <p>EC2 m5.2xlarge instance OS</p>
                <p>
                  <code>\"TargetPlatform\": {\"Os\": \"LINUX\", \"Arch\": \"X86_64\", \"Accelerator\":
                        \"NVIDIA\"},</code>
               </p>
                <p>
                  <code> \"CompilerOptions\": {'mcpu': 'skylake-avx512'}</code>
               </p>
            </li>
            <li>
                <p>RK3399</p>
                <p>
                  <code>\"TargetPlatform\": {\"Os\": \"LINUX\", \"Arch\": \"ARM64\", \"Accelerator\":
                        \"MALI\"}</code>
               </p>
            </li>
            <li>
                <p>ARMv7 phone (CPU)</p>
                <p>
                  <code>\"TargetPlatform\": {\"Os\": \"ANDROID\", \"Arch\": \"ARM_EABI\"},</code>
               </p>
                <p>
                  <code> \"CompilerOptions\": {'ANDROID_PLATFORM': 25, 'mattr':
                    ['+neon']}</code>
               </p>
            </li>
            <li>
                <p>ARMv8 phone (CPU)</p>
                <p>
                  <code>\"TargetPlatform\": {\"Os\": \"ANDROID\", \"Arch\": \"ARM64\"},</code>
               </p>
                <p>
                  <code> \"CompilerOptions\": {'ANDROID_PLATFORM': 29}</code>
               </p>
            </li>
         </ul>")
  @as("TargetPlatform")
  targetPlatform: option<targetPlatform>,
  @ocaml.doc("<p>Identifies the target device or the machine learning instance that you want to run
            your model on after the compilation has completed. Alternatively, you can specify OS,
            architecture, and accelerator using <a>TargetPlatform</a> fields. It can be
            used instead of <code>TargetPlatform</code>.</p>")
  @as("TargetDevice")
  targetDevice: option<targetDevice>,
  @ocaml.doc("<p>Identifies the S3 bucket where you want Amazon SageMaker to store the model artifacts. For
            example, <code>s3://bucket-name/key-name-prefix</code>.</p>")
  @as("S3OutputLocation")
  s3OutputLocation: s3Uri,
}
@ocaml.doc("<p>Use this to specify the Amazon Web Services Key Management Service (KMS) Key ID, or
            <code>KMSKeyId</code>, for at rest data encryption. You can turn
            <code>OnlineStore</code> on or off by specifying the <code>EnableOnlineStore</code> flag
         at General Assembly; the default value is <code>False</code>.</p>")
type onlineStoreConfig = {
  @ocaml.doc("<p>Turn <code>OnlineStore</code> off by specifying <code>False</code> 
      for the <code>EnableOnlineStore</code> flag. Turn <code>OnlineStore</code> 
      on by specifying <code>True</code> 
      for the <code>EnableOnlineStore</code> flag. </p>
         <p>The default value is <code>False</code>.</p>")
  @as("EnableOnlineStore")
  enableOnlineStore: option<boolean_>,
  @ocaml.doc("<p>Use to specify KMS Key ID (<code>KMSKeyId</code>) for at-rest encryption of your
            <code>OnlineStore</code>.</p>")
  @as("SecurityConfig")
  securityConfig: option<onlineStoreSecurityConfig>,
}
@ocaml.doc("<p>A list of user groups that exist in your OIDC Identity Provider (IdP). 
            One to ten groups can be used to create a single private work team. 
            When you add a user group to the list of <code>Groups</code>, you can add that user group to one or more
            private work teams. If you add a user group to a private work team, all workers in that user group 
            are added to the work team.</p>")
type oidcMemberDefinition = {
  @ocaml.doc("<p>A list of comma seperated strings that identifies
            user groups in your OIDC IdP. Each user group is
            made up of a group of private workers.</p>")
  @as("Groups")
  groups: groups,
}
@ocaml.doc("<p>The configuration of an <code>OfflineStore</code>.</p>
         <p>Provide an <code>OfflineStoreConfig</code> in a request to
            <code>CreateFeatureGroup</code> to create an <code>OfflineStore</code>.</p>
         <p>To encrypt an <code>OfflineStore</code> using at rest data encryption, specify Amazon Web Services Key
         Management Service (KMS) key ID, or <code>KMSKeyId</code>, in
         <code>S3StorageConfig</code>.</p>")
type offlineStoreConfig = {
  @ocaml.doc("<p>The meta data of the Glue table that is autogenerated when an <code>OfflineStore</code>
         is created. </p>")
  @as("DataCatalogConfig")
  dataCatalogConfig: option<dataCatalogConfig>,
  @ocaml.doc("<p>Set to <code>True</code> to disable the automatic creation of an Amazon Web Services Glue table when
       configuring an <code>OfflineStore</code>.</p>")
  @as("DisableGlueTableCreation")
  disableGlueTableCreation: option<boolean_>,
  @ocaml.doc("<p>The Amazon Simple Storage (Amazon S3) location of <code>OfflineStore</code>.</p>")
  @as("S3StorageConfig")
  s3StorageConfig: s3StorageConfig,
}
@ocaml.doc("<p>Provides summary information for an Amazon SageMaker notebook instance.</p>")
type notebookInstanceSummary = {
  @ocaml.doc("<p>An array of up to three Git repositories associated with the notebook instance. These
            can be either the names of Git repositories stored as resources in your account, or the
            URL of Git repositories in <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html\">Amazon Web Services CodeCommit</a> or in any
            other Git repository. These repositories are cloned at the same level as the default
            repository of your notebook instance. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html\">Associating Git
                Repositories with Amazon SageMaker Notebook Instances</a>.</p>")
  @as("AdditionalCodeRepositories")
  additionalCodeRepositories: option<additionalCodeRepositoryNamesOrUrls>,
  @ocaml.doc("<p>The Git repository associated with the notebook instance as its default code
            repository. This can be either the name of a Git repository stored as a resource in your
            account, or the URL of a Git repository in <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html\">Amazon Web Services CodeCommit</a> or in any
            other Git repository. When you open a notebook instance, it opens in the directory that
            contains this repository. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html\">Associating Git Repositories with Amazon SageMaker
                Notebook Instances</a>.</p>")
  @as("DefaultCodeRepository")
  defaultCodeRepository: option<codeRepositoryNameOrUrl>,
  @ocaml.doc("<p>The name of a notebook instance lifecycle configuration associated with this notebook
            instance.</p>
        <p>For information about notebook instance lifestyle configurations, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html\">Step
                2.1: (Optional) Customize a Notebook Instance</a>.</p>")
  @as("NotebookInstanceLifecycleConfigName")
  notebookInstanceLifecycleConfigName: option<notebookInstanceLifecycleConfigName>,
  @ocaml.doc("<p>A timestamp that shows when the notebook instance was last modified.</p>")
  @as("LastModifiedTime")
  lastModifiedTime: option<lastModifiedTime>,
  @ocaml.doc("<p>A timestamp that shows when the notebook instance was created.</p>")
  @as("CreationTime")
  creationTime: option<creationTime>,
  @ocaml.doc("<p>The type of ML compute instance that the notebook instance is running on.</p>")
  @as("InstanceType")
  instanceType: option<instanceType>,
  @ocaml.doc("<p>The
            URL that you use to connect to the Jupyter instance running in your notebook instance.
            </p>")
  @as("Url")
  url: option<notebookInstanceUrl>,
  @ocaml.doc("<p>The status of the notebook instance.</p>") @as("NotebookInstanceStatus")
  notebookInstanceStatus: option<notebookInstanceStatus>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the notebook instance.</p>")
  @as("NotebookInstanceArn")
  notebookInstanceArn: notebookInstanceArn,
  @ocaml.doc("<p>The name of the notebook instance that you want a summary for.</p>")
  @as("NotebookInstanceName")
  notebookInstanceName: notebookInstanceName,
}
type notebookInstanceLifecycleConfigSummaryList = array<notebookInstanceLifecycleConfigSummary>
type notebookInstanceLifecycleConfigList = array<notebookInstanceLifecycleHook>
@ocaml.doc("<p>The <a>VpcConfig</a> configuration object that specifies the VPC that you 
            want the compilation jobs to connect to. For more information on 
            controlling access to your Amazon S3 buckets used for compilation job, see 
            <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html\">Give Amazon SageMaker Compilation Jobs Access to Resources in Your Amazon VPC</a>.</p>")
type neoVpcConfig = {
  @ocaml.doc("<p>The ID of the subnets in the VPC that you want to connect the 
            compilation job to for accessing the model in Amazon S3.</p>")
  @as("Subnets")
  subnets: neoVpcSubnets,
  @ocaml.doc("<p>The VPC security group IDs. IDs have the form of <code>sg-xxxxxxxx</code>. 
            Specify the security groups for the VPC that is specified in the <code>Subnets</code> field.</p>")
  @as("SecurityGroupIds")
  securityGroupIds: neoVpcSecurityGroupIds,
}
type monitoringScheduleSummaryList = array<monitoringScheduleSummary>
@ocaml.doc("<p>Identifies the resources to deploy for a monitoring job.</p>")
type monitoringResources = {
  @ocaml.doc("<p>The configuration for the cluster resources used to run the processing job.</p>")
  @as("ClusterConfig")
  clusterConfig: monitoringClusterConfig,
}
@ocaml.doc("<p>The output object for a monitoring job.</p>")
type monitoringOutput = {
  @ocaml.doc(
    "<p>The Amazon S3 storage location where the results of a monitoring job are saved.</p>"
  )
  @as("S3Output")
  s3Output: monitoringS3Output,
}
type monitoringJobDefinitionSummaryList = array<monitoringJobDefinitionSummary>
@ocaml.doc("<p>The inputs for a monitoring job.</p>")
type monitoringInput = {
  @ocaml.doc("<p>The endpoint for a monitoring job.</p>") @as("EndpointInput")
  endpointInput: endpointInput,
}
type monitoringExecutionSummaryList = array<monitoringExecutionSummary>
@ocaml.doc("<p>Configuration for monitoring constraints and monitoring statistics. These baseline
         resources are compared against the results of the current job from the series of jobs
         scheduled to collect data periodically.</p>")
type monitoringBaselineConfig = {
  @ocaml.doc("<p>The baseline statistics file in Amazon S3 that the current monitoring job should be
         validated against.</p>")
  @as("StatisticsResource")
  statisticsResource: option<monitoringStatisticsResource>,
  @ocaml.doc("<p>The baseline constraint file in Amazon S3 that the current monitoring job should
         validated against.</p>")
  @as("ConstraintsResource")
  constraintsResource: option<monitoringConstraintsResource>,
  @ocaml.doc("<p>The name of the job that performs baselining for the monitoring job.</p>")
  @as("BaseliningJobName")
  baseliningJobName: option<processingJobName>,
}
@ocaml.doc("<p>Container image configuration object for the monitoring job.</p>")
type monitoringAppSpecification = {
  @ocaml.doc("<p>An Amazon S3 URI to a script that is called after analysis has been performed.
         Applicable only for the built-in (first party) containers.</p>")
  @as("PostAnalyticsProcessorSourceUri")
  postAnalyticsProcessorSourceUri: option<s3Uri>,
  @ocaml.doc("<p>An Amazon S3 URI to a script that is called per row prior to running analysis. It can
         base64 decode the payload and convert it into a flatted json so that the built-in container
         can use the converted data. Applicable only for the built-in (first party)
         containers.</p>")
  @as("RecordPreprocessorSourceUri")
  recordPreprocessorSourceUri: option<s3Uri>,
  @ocaml.doc("<p>An array of arguments for the container used to run the monitoring job.</p>")
  @as("ContainerArguments")
  containerArguments: option<monitoringContainerArguments>,
  @ocaml.doc("<p>Specifies the entrypoint for a container used to run the monitoring job.</p>")
  @as("ContainerEntrypoint")
  containerEntrypoint: option<containerEntrypoint>,
  @ocaml.doc("<p>The container image to be run by the monitoring job.</p>") @as("ImageUri")
  imageUri: imageUri,
}
type modelSummaryList = array<modelSummary>
@ocaml.doc("<p>The input for the model quality monitoring job. Currently endponts are supported for
         input for model quality monitoring jobs.</p>")
type modelQualityJobInput = {
  @ocaml.doc("<p>The ground truth label provided for the model.</p>") @as("GroundTruthS3Input")
  groundTruthS3Input: monitoringGroundTruthS3Input,
  @as("EndpointInput") endpointInput: endpointInput,
}
@ocaml.doc("<p>Configuration for monitoring constraints and monitoring statistics. These baseline
         resources are compared against the results of the current job from the series of jobs
         scheduled to collect data periodically.</p>")
type modelQualityBaselineConfig = {
  @as("ConstraintsResource") constraintsResource: option<monitoringConstraintsResource>,
  @ocaml.doc("<p>The name of the job that performs baselining for the monitoring job.</p>")
  @as("BaseliningJobName")
  baseliningJobName: option<processingJobName>,
}
@ocaml.doc("<p>Container image configuration object for the monitoring job.</p>")
type modelQualityAppSpecification = {
  @ocaml.doc("<p>Sets the environment variables in the container that the monitoring job runs.</p>")
  @as("Environment")
  environment: option<monitoringEnvironmentMap>,
  @ocaml.doc(
    "<p>The machine learning problem type of the model that the monitoring job monitors.</p>"
  )
  @as("ProblemType")
  problemType: option<monitoringProblemType>,
  @ocaml.doc("<p>An Amazon S3 URI to a script that is called after analysis has been performed.
         Applicable only for the built-in (first party) containers.</p>")
  @as("PostAnalyticsProcessorSourceUri")
  postAnalyticsProcessorSourceUri: option<s3Uri>,
  @ocaml.doc("<p>An Amazon S3 URI to a script that is called per row prior to running analysis. It can
         base64 decode the payload and convert it into a flatted json so that the built-in container
         can use the converted data. Applicable only for the built-in (first party)
         containers.</p>")
  @as("RecordPreprocessorSourceUri")
  recordPreprocessorSourceUri: option<s3Uri>,
  @ocaml.doc("<p>An array of arguments for the container used to run the monitoring job.</p>")
  @as("ContainerArguments")
  containerArguments: option<monitoringContainerArguments>,
  @ocaml.doc("<p>Specifies the entrypoint for a container that the monitoring job runs.</p>")
  @as("ContainerEntrypoint")
  containerEntrypoint: option<containerEntrypoint>,
  @ocaml.doc("<p>The address of the container image that the monitoring job runs.</p>")
  @as("ImageUri")
  imageUri: imageUri,
}
@ocaml.doc("<p>Model quality statistics and constraints.</p>")
type modelQuality = {
  @ocaml.doc("<p>Model quality constraints.</p>") @as("Constraints")
  constraints: option<metricsSource>,
  @ocaml.doc("<p>Model quality statistics.</p>") @as("Statistics")
  statistics: option<metricsSource>,
}
type modelPackageSummaryList = array<modelPackageSummary>
type modelPackageStatusItemList = array<modelPackageStatusItem>
type modelPackageGroupSummaryList = array<modelPackageGroupSummary>
@ocaml.doc("<p>Describes the Docker container for the model package.</p>")
type modelPackageContainerDefinition = {
  @ocaml.doc("<p>The name of a pre-trained machine learning benchmarked by 
           Amazon SageMaker Inference Recommender model that matches your model. 
           You can find a list of benchmarked models by calling <code>ListModelMetadata</code>.</p>")
  @as("NearestModelName")
  nearestModelName: option<string_>,
  @ocaml.doc("<p>The framework version of the Model Package Container Image.</p>")
  @as("FrameworkVersion")
  frameworkVersion: option<frameworkVersion>,
  @ocaml.doc("<p>The machine learning framework of the model package container image.</p>")
  @as("Framework")
  framework: option<string_>,
  @ocaml.doc("<p>A structure with Model Input details.</p>") @as("ModelInput")
  modelInput: option<modelInput>,
  @ocaml.doc("<p>The environment variables to set in the Docker container. Each key and value in the
            <code>Environment</code> string to string map can have length of up to 1024. We
            support up to 16 entries in the map.</p>")
  @as("Environment")
  environment: option<environmentMap>,
  @ocaml.doc("<p>The Amazon Web Services Marketplace product ID of the model package.</p>")
  @as("ProductId")
  productId: option<productId>,
  @ocaml.doc("<p>The Amazon S3 path where the model artifacts, which result from model training, are stored.
            This path must point to a single <code>gzip</code> compressed tar archive
                (<code>.tar.gz</code> suffix).</p>
        <note>
            <p>The model artifacts must be in an S3 bucket that is in the same region as the
                model package.</p>
        </note>")
  @as("ModelDataUrl")
  modelDataUrl: option<url>,
  @ocaml.doc("<p>An MD5 hash of the training algorithm that identifies the Docker image used for
            training.</p>")
  @as("ImageDigest")
  imageDigest: option<imageDigest>,
  @ocaml.doc("<p>The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.</p>
        <p>If you are using your own custom algorithm instead of an algorithm provided by Amazon SageMaker,
            the inference code must meet Amazon SageMaker requirements. Amazon SageMaker supports both
                <code>registry/repository[:tag]</code> and <code>registry/repository[@digest]</code>
            image path formats. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html\">Using Your Own Algorithms with Amazon
                SageMaker</a>.</p>")
  @as("Image")
  image: containerImage,
  @ocaml.doc("<p>The DNS host name for the Docker container.</p>") @as("ContainerHostname")
  containerHostname: option<containerHostname>,
}
type modelMetadataSummaries = array<modelMetadataSummary>
type modelMetadataFilters = array<modelMetadataFilter>
type modelLatencyThresholds = array<modelLatencyThreshold>
@ocaml.doc("<p>Inputs for the model explainability job.</p>")
type modelExplainabilityJobInput = {@as("EndpointInput") endpointInput: endpointInput}
@ocaml.doc("<p>The configuration for a baseline model explainability job.</p>")
type modelExplainabilityBaselineConfig = {
  @as("ConstraintsResource") constraintsResource: option<monitoringConstraintsResource>,
  @ocaml.doc("<p>The name of the baseline model explainability job.</p>") @as("BaseliningJobName")
  baseliningJobName: option<processingJobName>,
}
@ocaml.doc("<p>Docker container image configuration object for the model explainability job.</p>")
type modelExplainabilityAppSpecification = {
  @ocaml.doc("<p>Sets the environment variables in the Docker container.</p>") @as("Environment")
  environment: option<monitoringEnvironmentMap>,
  @ocaml.doc("<p>JSON formatted S3 file that defines explainability parameters. For more information on
         this JSON configuration file, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/json-model-explainability-parameter-config.html\">Configure model
            explainability parameters</a>.</p>")
  @as("ConfigUri")
  configUri: s3Uri,
  @ocaml.doc("<p>The container image to be run by the model explainability job.</p>")
  @as("ImageUri")
  imageUri: imageUri,
}
@ocaml.doc("<p>Data quality constraints and statistics for a model.</p>")
type modelDataQuality = {
  @ocaml.doc("<p>Data quality constraints for a model.</p>") @as("Constraints")
  constraints: option<metricsSource>,
  @ocaml.doc("<p>Data quality statistics for a model.</p>") @as("Statistics")
  statistics: option<metricsSource>,
}
@ocaml.doc("<p>Inputs for the model bias job.</p>")
type modelBiasJobInput = {
  @ocaml.doc("<p>Location of ground truth labels to use in model bias job.</p>")
  @as("GroundTruthS3Input")
  groundTruthS3Input: monitoringGroundTruthS3Input,
  @as("EndpointInput") endpointInput: endpointInput,
}
@ocaml.doc("<p>The configuration for a baseline model bias job.</p>")
type modelBiasBaselineConfig = {
  @as("ConstraintsResource") constraintsResource: option<monitoringConstraintsResource>,
  @ocaml.doc("<p>The name of the baseline model bias job.</p>") @as("BaseliningJobName")
  baseliningJobName: option<processingJobName>,
}
@ocaml.doc("<p>Docker container image configuration object for the model bias job.</p>")
type modelBiasAppSpecification = {
  @ocaml.doc("<p>Sets the environment variables in the Docker container.</p>") @as("Environment")
  environment: option<monitoringEnvironmentMap>,
  @ocaml.doc("<p>JSON formatted S3 file that defines bias parameters. For more information on this JSON
         configuration file, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/json-bias-parameter-config.html\">Configure bias
         parameters</a>.</p>")
  @as("ConfigUri")
  configUri: s3Uri,
  @ocaml.doc("<p>The container image to be run by the model bias job.</p>") @as("ImageUri")
  imageUri: imageUri,
}
type metricDefinitionList = array<metricDefinition>
type metricDataList = array<metricDatum>
type lineageGroupSummaries = array<lineageGroupSummary>
@ocaml.doc("<p>Provides summary information for a work team.</p>")
type labelingJobForWorkteamSummary = {
  @ocaml.doc("<p>The configured number of workers per data object.</p>")
  @as("NumberOfHumanWorkersPerDataObject")
  numberOfHumanWorkersPerDataObject: option<numberOfHumanWorkersPerDataObject>,
  @ocaml.doc("<p>Provides information about the progress of a labeling job.</p>")
  @as("LabelCounters")
  labelCounters: option<labelCountersForWorkteam>,
  @ocaml.doc("<p>The date and time that the labeling job was created.</p>") @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc(
    "<p>The Amazon Web Services account ID of the account used to start the labeling job.</p>"
  )
  @as("WorkRequesterAccountId")
  workRequesterAccountId: accountId,
  @ocaml.doc("<p>A unique identifier for a labeling job. You can use this to refer to a specific
            labeling job.</p>")
  @as("JobReferenceCode")
  jobReferenceCode: jobReferenceCode,
  @ocaml.doc("<p>The name of the labeling job that the work team is assigned to.</p>")
  @as("LabelingJobName")
  labelingJobName: option<labelingJobName>,
}
@ocaml.doc("<p>Provides information about the location of input data.</p>
        
         <p>You must specify at least one of the following: <code>S3DataSource</code> or <code>SnsDataSource</code>.</p>
         <p>Use <code>SnsDataSource</code> to specify an SNS input topic
    for a streaming labeling job. If you do not specify 
    and SNS input topic ARN, Ground Truth will create a one-time labeling job.</p>
         <p>Use <code>S3DataSource</code> to specify an input 
    manifest file for both streaming and one-time labeling jobs.
    Adding an <code>S3DataSource</code> is optional if you use <code>SnsDataSource</code> to create a streaming labeling job.</p>")
type labelingJobDataSource = {
  @ocaml.doc(
    "<p>An Amazon SNS data source used for streaming labeling jobs. To learn more, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-labeling-job.html#sms-streaming-how-it-works-send-data\">Send Data to a Streaming Labeling Job</a>. </p>"
  )
  @as("SnsDataSource")
  snsDataSource: option<labelingJobSnsDataSource>,
  @ocaml.doc("<p>The Amazon S3 location of the input data objects.</p>") @as("S3DataSource")
  s3DataSource: option<labelingJobS3DataSource>,
}
@ocaml.doc("<p>Attributes of the data specified by the customer. Use these to describe the data to be
            labeled.</p>")
type labelingJobDataAttributes = {
  @ocaml.doc("<p>Declares that your content is free of personally identifiable information or adult
            content. Amazon SageMaker may restrict the Amazon Mechanical Turk workers that can view your task
            based on this information.</p>")
  @as("ContentClassifiers")
  contentClassifiers: option<contentClassifiers>,
}
@ocaml.doc("<p>Provides configuration information for auto-labeling of your data objects. A
                <code>LabelingJobAlgorithmsConfig</code> object must be supplied in order to use
            auto-labeling.</p>")
type labelingJobAlgorithmsConfig = {
  @ocaml.doc("<p>Provides configuration information for a labeling job.</p>")
  @as("LabelingJobResourceConfig")
  labelingJobResourceConfig: option<labelingJobResourceConfig>,
  @ocaml.doc("<p>At the end of an auto-label job Ground Truth sends the Amazon Resource Name (ARN) of the final
            model used for auto-labeling. You can use this model as the starting point for
            subsequent similar jobs by providing the ARN of the model here. </p>")
  @as("InitialActiveLearningModelArn")
  initialActiveLearningModelArn: option<modelArn>,
  @ocaml.doc("<p>Specifies the Amazon Resource Name (ARN) of the algorithm used for auto-labeling. You
            must select one of the following ARNs:</p>
        <ul>
            <li>
                <p>
                    <i>Image classification</i>
                </p>
                <p>
                    <code>arn:aws:sagemaker:<i>region</i>:027400017018:labeling-job-algorithm-specification/image-classification</code>
                </p>
            </li>
            <li>
                <p>
                    <i>Text classification</i>
                </p>
                <p>
                    <code>arn:aws:sagemaker:<i>region</i>:027400017018:labeling-job-algorithm-specification/text-classification</code>
                </p>
            </li>
            <li>
                <p>
                    <i>Object detection</i>
                </p>
                <p>
                    <code>arn:aws:sagemaker:<i>region</i>:027400017018:labeling-job-algorithm-specification/object-detection</code>
                </p>
            </li>
            <li>
                <p>
                    <i>Semantic Segmentation</i>
                </p>
                <p>
                    <code>arn:aws:sagemaker:<i>region</i>:027400017018:labeling-job-algorithm-specification/semantic-segmentation</code>
                </p>
            </li>
         </ul>")
  @as("LabelingJobAlgorithmSpecificationArn")
  labelingJobAlgorithmSpecificationArn: labelingJobAlgorithmSpecificationArn,
}
type kernelSpecs = array<kernelSpec>
@ocaml.doc("<p>The JupyterServer app settings.</p>")
type jupyterServerAppSettings = {
  @ocaml.doc(
    "<p> The Amazon Resource Name (ARN) of the Lifecycle Configurations attached to the JupyterServerApp.</p>"
  )
  @as("LifecycleConfigArns")
  lifecycleConfigArns: option<lifecycleConfigArns>,
  @ocaml.doc(
    "<p>The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterServer app.</p>"
  )
  @as("DefaultResourceSpec")
  defaultResourceSpec: option<resourceSpec>,
}
type integerParameterRanges = array<integerParameterRange>
type inferenceRecommendationsJobs = array<inferenceRecommendationsJob>
type images = array<image>
type imageVersions = array<imageVersion>
@ocaml.doc("<p>Specifies whether the model container is in Amazon ECR or a private Docker registry
            accessible from your Amazon Virtual Private Cloud (VPC).</p>")
type imageConfig = {
  @ocaml.doc("<p>(Optional) Specifies an authentication configuration for the private docker registry
            where your model image is hosted. Specify a value for this property only if you
            specified <code>Vpc</code> as the value for the <code>RepositoryAccessMode</code> field,
            and the private Docker registry where the model image is hosted requires
            authentication.</p>")
  @as("RepositoryAuthConfig")
  repositoryAuthConfig: option<repositoryAuthConfig>,
  @ocaml.doc("<p>Set this to one of the following values:</p>
        <ul>
            <li>
                <p>
                  <code>Platform</code> - The model image is hosted in Amazon ECR.</p>
            </li>
            <li>
                <p>
                  <code>Vpc</code> - The model image is hosted in a private Docker registry in
                    your VPC.</p>
            </li>
         </ul>")
  @as("RepositoryAccessMode")
  repositoryAccessMode: repositoryAccessMode,
}
@ocaml.doc("<p>Provides summary information about a hyperparameter tuning job.</p>")
type hyperParameterTuningJobSummary = {
  @ocaml.doc("<p>The <a>ResourceLimits</a> object that specifies the maximum number of
            training jobs and parallel training jobs allowed for this tuning job.</p>")
  @as("ResourceLimits")
  resourceLimits: option<resourceLimits>,
  @ocaml.doc("<p>The <a>ObjectiveStatusCounters</a> object that specifies the numbers of
            training jobs, categorized by objective metric status, that this tuning job
            launched.</p>")
  @as("ObjectiveStatusCounters")
  objectiveStatusCounters: objectiveStatusCounters,
  @ocaml.doc("<p>The <a>TrainingJobStatusCounters</a> object that specifies the numbers of
            training jobs, categorized by status, that this tuning job launched.</p>")
  @as("TrainingJobStatusCounters")
  trainingJobStatusCounters: trainingJobStatusCounters,
  @ocaml.doc("<p>The date and time that the tuning job was
            modified.</p>")
  @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>The date and time that the tuning job ended.</p>")
  @as("HyperParameterTuningEndTime")
  hyperParameterTuningEndTime: option<timestamp_>,
  @ocaml.doc("<p>The date and time that the tuning job was created.</p>") @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc("<p>Specifies the search strategy hyperparameter tuning uses to choose which
            hyperparameters to
            use
            for each iteration. Currently, the only valid value is
            Bayesian.</p>")
  @as("Strategy")
  strategy: hyperParameterTuningJobStrategyType,
  @ocaml.doc("<p>The status of the
            tuning
            job.</p>")
  @as("HyperParameterTuningJobStatus")
  hyperParameterTuningJobStatus: hyperParameterTuningJobStatus,
  @ocaml.doc("<p>The
            Amazon
            Resource Name (ARN) of the tuning job.</p>")
  @as("HyperParameterTuningJobArn")
  hyperParameterTuningJobArn: hyperParameterTuningJobArn,
  @ocaml.doc("<p>The name of the tuning job.</p>") @as("HyperParameterTuningJobName")
  hyperParameterTuningJobName: hyperParameterTuningJobName,
}
type hyperParameterTuningJobObjectives = array<hyperParameterTuningJobObjective>
@ocaml.doc("<p>Specifies
            summary information about a training job.</p>")
type hyperParameterTrainingJobSummary = {
  @ocaml.doc("<p>The status of the objective metric for the training job:</p>
        <ul>
            <li>
                <p>Succeeded: The
                    final
                    objective metric for the training job was evaluated by the
                    hyperparameter tuning job and
                    used
                    in the hyperparameter tuning process.</p>
            </li>
         </ul>
        <ul>
            <li>
                <p>Pending: The training job is in progress and evaluation of its final objective
                    metric is pending.</p>
            </li>
         </ul>
        <ul>
            <li>
                <p>Failed:
                    The final objective metric for the training job was not evaluated, and was not
                    used in the hyperparameter tuning process. This typically occurs when the
                    training job failed or did not emit an objective
                    metric.</p>
            </li>
         </ul>")
  @as("ObjectiveStatus")
  objectiveStatus: option<objectiveStatus>,
  @ocaml.doc("<p>The <a>FinalHyperParameterTuningJobObjectiveMetric</a> object that
            specifies the
            value
            of the
            objective
            metric of the tuning job that launched this training job.</p>")
  @as("FinalHyperParameterTuningJobObjectiveMetric")
  finalHyperParameterTuningJobObjectiveMetric: option<finalHyperParameterTuningJobObjectiveMetric>,
  @ocaml.doc("<p>The
            reason that the training job failed.
        </p>")
  @as("FailureReason")
  failureReason: option<failureReason>,
  @ocaml.doc("<p>A
            list of the hyperparameters for which you specified ranges to
            search.</p>")
  @as("TunedHyperParameters")
  tunedHyperParameters: hyperParameters,
  @ocaml.doc("<p>The
            status
            of the training job.</p>")
  @as("TrainingJobStatus")
  trainingJobStatus: trainingJobStatus,
  @ocaml.doc("<p>Specifies the time when the training job ends on training instances. You are billed
            for the time interval between the value of <code>TrainingStartTime</code> and this time.
            For successful jobs and stopped jobs, this is the time after model artifacts are
            uploaded. For failed jobs, this is the time when Amazon SageMaker detects a job failure.</p>")
  @as("TrainingEndTime")
  trainingEndTime: option<timestamp_>,
  @ocaml.doc("<p>The date and time that the training job started.</p>") @as("TrainingStartTime")
  trainingStartTime: option<timestamp_>,
  @ocaml.doc("<p>The date and time that the training job was created.</p>") @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc("<p>The HyperParameter tuning job that launched the training job.</p>")
  @as("TuningJobName")
  tuningJobName: option<hyperParameterTuningJobName>,
  @ocaml.doc("<p>The
            Amazon
            Resource Name (ARN) of the training job.</p>")
  @as("TrainingJobArn")
  trainingJobArn: trainingJobArn,
  @ocaml.doc("<p>The name of the training job.</p>") @as("TrainingJobName")
  trainingJobName: trainingJobName,
  @ocaml.doc("<p>The training job definition name.</p>") @as("TrainingJobDefinitionName")
  trainingJobDefinitionName: option<hyperParameterTrainingJobDefinitionName>,
}
type humanTaskUiSummaries = array<humanTaskUiSummary>
@ocaml.doc(
  "<p>Provides information about how and under what conditions SageMaker creates a human loop. If <code>HumanLoopActivationConfig</code> is not given, then all requests go to humans.</p>"
)
type humanLoopActivationConfig = {
  @ocaml.doc("<p>Container structure for defining under what conditions SageMaker creates a human
         loop.</p>")
  @as("HumanLoopActivationConditionsConfig")
  humanLoopActivationConditionsConfig: humanLoopActivationConditionsConfig,
}
type flowDefinitionSummaries = array<flowDefinitionSummary>
type finalMetricDataList = array<metricData>
type filterList = array<filter>
@ocaml.doc("<p>The name, Arn, <code>CreationTime</code>, <code>FeatureGroup</code> values,
            <code>LastUpdatedTime</code> and <code>EnableOnlineStorage</code> status of a
            <code>FeatureGroup</code>.</p>")
type featureGroupSummary = {
  @ocaml.doc("<p>Notifies you if replicating data into the <code>OfflineStore</code> has failed. Returns
         either: <code>Active</code> or <code>Blocked</code>.</p>")
  @as("OfflineStoreStatus")
  offlineStoreStatus: option<offlineStoreStatus>,
  @ocaml.doc("<p>The status of a FeatureGroup. The status can be any of the following:
            <code>Creating</code>, <code>Created</code>, <code>CreateFail</code>,
            <code>Deleting</code> or <code>DetailFail</code>. </p>")
  @as("FeatureGroupStatus")
  featureGroupStatus: option<featureGroupStatus>,
  @ocaml.doc(
    "<p>A timestamp indicating the time of creation time of the <code>FeatureGroup</code>.</p>"
  )
  @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc("<p>Unique identifier for the <code>FeatureGroup</code>.</p>") @as("FeatureGroupArn")
  featureGroupArn: featureGroupArn,
  @ocaml.doc("<p>The name of <code>FeatureGroup</code>.</p>") @as("FeatureGroupName")
  featureGroupName: featureGroupName,
}
type featureDefinitions = array<featureDefinition>
@ocaml.doc("<p>Contains explainability metrics for a model.</p>")
type explainability = {
  @ocaml.doc("<p>The explainability report for a model.</p>") @as("Report")
  report: option<metricsSource>,
}
@ocaml.doc("<p>A summary of the properties of an experiment. To get the complete set of properties, call
      the <a>DescribeExperiment</a> API and provide the
      <code>ExperimentName</code>.</p>")
type experimentSummary = {
  @ocaml.doc("<p>When the experiment was last modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>When the experiment was created.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @as("ExperimentSource") experimentSource: option<experimentSource>,
  @ocaml.doc("<p>The name of the experiment as displayed. If <code>DisplayName</code> isn't specified,
        <code>ExperimentName</code> is displayed.</p>")
  @as("DisplayName")
  displayName: option<experimentEntityName>,
  @ocaml.doc("<p>The name of the experiment.</p>") @as("ExperimentName")
  experimentName: option<experimentEntityName>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the experiment.</p>") @as("ExperimentArn")
  experimentArn: option<experimentArn>,
}
type environmentParameters = array<environmentParameter>
type endpointSummaryList = array<endpointSummary>
type endpointConfigSummaryList = array<endpointConfigSummary>
type edges = array<edge>
type edgePackagingJobSummaries = array<edgePackagingJobSummary>
type edgeModels = array<edgeModel>
type edgeModelSummaries = array<edgeModelSummary>
type edgeModelStats = array<edgeModelStat>
@ocaml.doc("<p>Represents the drift check model quality baselines that can be used when the model monitor is set using 
         the model package. </p>")
type driftCheckModelQuality = {
  @as("Constraints") constraints: option<metricsSource>,
  @as("Statistics") statistics: option<metricsSource>,
}
@ocaml.doc("<p>Represents the drift check data quality baselines that can be used when the model monitor is set using 
         the model package. </p>")
type driftCheckModelDataQuality = {
  @as("Constraints") constraints: option<metricsSource>,
  @as("Statistics") statistics: option<metricsSource>,
}
@ocaml.doc("<p>Represents the drift check explainability baselines that can be used when the model monitor is set 
         using the model package. </p>")
type driftCheckExplainability = {
  @ocaml.doc("<p>The explainability config file for the model.</p>") @as("ConfigFile")
  configFile: option<fileSource>,
  @as("Constraints") constraints: option<metricsSource>,
}
@ocaml.doc("<p>Represents the drift check bias baselines that can be used when the model monitor is set using the 
         model package.</p>")
type driftCheckBias = {
  @as("PostTrainingConstraints") postTrainingConstraints: option<metricsSource>,
  @as("PreTrainingConstraints") preTrainingConstraints: option<metricsSource>,
  @ocaml.doc("<p>The bias config file for a model.</p>") @as("ConfigFile")
  configFile: option<fileSource>,
}
type domainList = array<domainDetails>
type devices = array<device>
type deviceFleetSummaries = array<deviceFleetSummary>
type desiredWeightAndCapacityList = array<desiredWeightAndCapacity>
type deployedImages = array<deployedImage>
type debugRuleEvaluationStatuses = array<debugRuleEvaluationStatus>
@ocaml.doc("<p>Configuration information for SageMaker Debugger rules for debugging. To learn more about
            how to configure the <code>DebugRuleConfiguration</code> parameter, 
            see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html\">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.</p>")
type debugRuleConfiguration = {
  @ocaml.doc("<p>Runtime configuration for rule container.</p>") @as("RuleParameters")
  ruleParameters: option<ruleParameters>,
  @ocaml.doc(
    "<p>The size, in GB, of the ML storage volume attached to the processing instance.</p>"
  )
  @as("VolumeSizeInGB")
  volumeSizeInGB: option<optionalVolumeSizeInGB>,
  @ocaml.doc(
    "<p>The instance type to deploy a Debugger custom rule for debugging a training job.</p>"
  )
  @as("InstanceType")
  instanceType: option<processingInstanceType>,
  @ocaml.doc("<p>The Amazon Elastic Container (ECR) Image for the managed rule evaluation.</p>")
  @as("RuleEvaluatorImage")
  ruleEvaluatorImage: algorithmImage,
  @ocaml.doc("<p>Path to Amazon S3 storage location for rules.</p>") @as("S3OutputPath")
  s3OutputPath: option<s3Uri>,
  @ocaml.doc("<p>Path to local storage location for output of rules. Defaults to
                <code>/opt/ml/processing/output/rule/</code>.</p>")
  @as("LocalPath")
  localPath: option<directoryPath>,
  @ocaml.doc("<p>The name of the rule configuration. It must be unique relative to other rule
            configuration names.</p>")
  @as("RuleConfigurationName")
  ruleConfigurationName: ruleConfigurationName,
}
@ocaml.doc("<p>Configuration for Dataset Definition inputs. The Dataset Definition input must specify
            exactly one of either <code>AthenaDatasetDefinition</code> or <code>RedshiftDatasetDefinition</code>
            types.</p>")
type datasetDefinition = {
  @ocaml.doc("<p>Whether to use <code>File</code> or <code>Pipe</code> input mode. In <code>File</code> (default) mode,
            Amazon SageMaker copies the data from the input source onto the local Amazon Elastic Block Store
            (Amazon EBS) volumes before starting your training algorithm. This is the most commonly used
            input mode. In <code>Pipe</code> mode, Amazon SageMaker streams input data from the source directly to your
            algorithm without using the EBS volume.</p>")
  @as("InputMode")
  inputMode: option<inputMode>,
  @ocaml.doc("<p>Whether the generated dataset is <code>FullyReplicated</code> or
            <code>ShardedByS3Key</code> (default).</p>")
  @as("DataDistributionType")
  dataDistributionType: option<dataDistributionType>,
  @ocaml.doc("<p>The local path where you want Amazon SageMaker to download the Dataset Definition inputs to run a
            processing job. <code>LocalPath</code> is an absolute path to the input data. This is a required
            parameter when <code>AppManaged</code> is <code>False</code> (default).</p>")
  @as("LocalPath")
  localPath: option<processingLocalPath>,
  @as("RedshiftDatasetDefinition") redshiftDatasetDefinition: option<redshiftDatasetDefinition>,
  @as("AthenaDatasetDefinition") athenaDatasetDefinition: option<athenaDatasetDefinition>,
}
@ocaml.doc("<p>The input for the data quality monitoring job. Currently endpoints are supported for
         input.</p>")
type dataQualityJobInput = {@as("EndpointInput") endpointInput: endpointInput}
@ocaml.doc("<p>Configuration for monitoring constraints and monitoring statistics. These baseline
         resources are compared against the results of the current job from the series of jobs
         scheduled to collect data periodically.</p>")
type dataQualityBaselineConfig = {
  @as("StatisticsResource") statisticsResource: option<monitoringStatisticsResource>,
  @as("ConstraintsResource") constraintsResource: option<monitoringConstraintsResource>,
  @ocaml.doc(
    "<p>The name of the job that performs baselining for the data quality monitoring job.</p>"
  )
  @as("BaseliningJobName")
  baseliningJobName: option<processingJobName>,
}
@ocaml.doc("<p>Information about the container that a data quality monitoring job runs.</p>")
type dataQualityAppSpecification = {
  @ocaml.doc("<p>Sets the environment variables in the container that the monitoring job runs.</p>")
  @as("Environment")
  environment: option<monitoringEnvironmentMap>,
  @ocaml.doc("<p>An Amazon S3 URI to a script that is called after analysis has been performed.
         Applicable only for the built-in (first party) containers.</p>")
  @as("PostAnalyticsProcessorSourceUri")
  postAnalyticsProcessorSourceUri: option<s3Uri>,
  @ocaml.doc("<p>An Amazon S3 URI to a script that is called per row prior to running analysis. It can
         base64 decode the payload and convert it into a flatted json so that the built-in container
         can use the converted data. Applicable only for the built-in (first party)
         containers.</p>")
  @as("RecordPreprocessorSourceUri")
  recordPreprocessorSourceUri: option<s3Uri>,
  @ocaml.doc("<p>The arguments to send to the container that the monitoring job runs.</p>")
  @as("ContainerArguments")
  containerArguments: option<monitoringContainerArguments>,
  @ocaml.doc("<p>The entrypoint for a container used to run a monitoring job.</p>")
  @as("ContainerEntrypoint")
  containerEntrypoint: option<containerEntrypoint>,
  @ocaml.doc("<p>The container image that the data quality monitoring job runs.</p>")
  @as("ImageUri")
  imageUri: imageUri,
}
type customImages = array<customImage>
type continuousParameterRanges = array<continuousParameterRange>
@ocaml.doc("<p>Lists a summary of the properties of a context. A context provides a logical grouping
        of other entities.</p>")
type contextSummary = {
  @ocaml.doc("<p>When the context was last modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>When the context was created.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>The type of the context.</p>") @as("ContextType") contextType: option<string256>,
  @ocaml.doc("<p>The source of the context.</p>") @as("Source") source: option<contextSource>,
  @ocaml.doc("<p>The name of the context.</p>") @as("ContextName")
  contextName: option<experimentEntityName>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the context.</p>") @as("ContextArn")
  contextArn: option<contextArn>,
}
type compilationJobSummaries = array<compilationJobSummary>
@ocaml.doc("<p>Configuration information for the Debugger output tensor collections.</p>")
type collectionConfiguration = {
  @ocaml.doc("<p>Parameter values for the tensor collection. The allowed parameters are
                <code>\"name\"</code>, <code>\"include_regex\"</code>, <code>\"reduction_config\"</code>,
                <code>\"save_config\"</code>, <code>\"tensor_names\"</code>, and
                <code>\"save_histogram\"</code>.</p>")
  @as("CollectionParameters")
  collectionParameters: option<collectionParameters>,
  @ocaml.doc(
    "<p>The name of the tensor collection. The name must be unique relative to other rule configuration names.</p>"
  )
  @as("CollectionName")
  collectionName: option<collectionName>,
}
@ocaml.doc("<p>Specifies summary information about a Git repository.</p>")
type codeRepositorySummary = {
  @ocaml.doc("<p>Configuration details for the Git repository, including the URL where it is located
            and the ARN of the Amazon Web Services Secrets Manager secret that contains the credentials used to
            access the repository.</p>")
  @as("GitConfig")
  gitConfig: option<gitConfig>,
  @ocaml.doc("<p>The date and time that the Git repository was last modified.</p>")
  @as("LastModifiedTime")
  lastModifiedTime: lastModifiedTime,
  @ocaml.doc("<p>The date and time that the Git repository was created.</p>") @as("CreationTime")
  creationTime: creationTime,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Git repository.</p>")
  @as("CodeRepositoryArn")
  codeRepositoryArn: codeRepositoryArn,
  @ocaml.doc("<p>The name of the Git repository.</p>") @as("CodeRepositoryName")
  codeRepositoryName: entityName,
}
@ocaml.doc("<p>Defines a named input source, called a channel, to be used by an algorithm.</p>")
type channelSpecification = {
  @ocaml.doc("<p>The allowed input mode, either FILE or PIPE.</p>
        <p>In FILE mode, Amazon SageMaker copies the data from the input source onto the local
            Amazon Elastic Block Store (Amazon EBS) volumes before starting your training algorithm.
            This is the most commonly used input mode.</p>
        <p>In PIPE mode, Amazon SageMaker streams input data from the source directly to your
            algorithm without using the EBS volume.</p>")
  @as("SupportedInputModes")
  supportedInputModes: inputModes,
  @ocaml.doc("<p>The allowed compression types, if data compression is used.</p>")
  @as("SupportedCompressionTypes")
  supportedCompressionTypes: option<compressionTypes>,
  @ocaml.doc("<p>The supported MIME types for the data.</p>") @as("SupportedContentTypes")
  supportedContentTypes: contentTypes,
  @ocaml.doc("<p>Indicates whether the channel is required by the algorithm.</p>") @as("IsRequired")
  isRequired: option<boolean_>,
  @ocaml.doc("<p>A brief description of the channel.</p>") @as("Description")
  description: option<entityDescription>,
  @ocaml.doc("<p>The name of the channel.</p>") @as("Name") name: channelName,
}
@ocaml.doc("<p>Defines the possible values for a categorical hyperparameter.</p>")
type categoricalParameterRangeSpecification = {
  @ocaml.doc("<p>The allowed categories for the hyperparameter.</p>") @as("Values")
  values: parameterValues,
}
@ocaml.doc("<p>A list of categorical hyperparameters to tune.</p>")
type categoricalParameterRange = {
  @ocaml.doc("<p>A list of the categories
            for
            the hyperparameter.</p>")
  @as("Values")
  values: parameterValues,
  @ocaml.doc("<p>The name of the categorical hyperparameter to tune.</p>") @as("Name")
  name: parameterKey,
}
@ocaml.doc("<p>Environment parameters you want to benchmark your load test against.</p>")
type categoricalParameter = {
  @ocaml.doc("<p>The list of values you can pass.</p>") @as("Value")
  value: categoricalParameterRangeValues,
  @ocaml.doc("<p>The Name of the environment variable.</p>") @as("Name") name: string64,
}
type captureOptionList = array<captureOption>
@ocaml.doc("<p></p>")
type captureContentTypeHeader = {
  @ocaml.doc("<p></p>") @as("JsonContentTypes") jsonContentTypes: option<jsonContentTypes>,
  @ocaml.doc("<p></p>") @as("CsvContentTypes") csvContentTypes: option<csvContentTypes>,
}
type candidateSteps = array<autoMLCandidateStep>
@ocaml.doc("<p>Contains bias metrics for a model.</p>")
type bias = {
  @as("PostTrainingReport") postTrainingReport: option<metricsSource>,
  @as("PreTrainingReport") preTrainingReport: option<metricsSource>,
  @ocaml.doc("<p>The bias report for a model</p>") @as("Report") report: option<metricsSource>,
}
type batchDescribeModelPackageErrorMap = Js.Dict.t<batchDescribeModelPackageError>
type autoMLPartialFailureReasons = array<autoMLPartialFailureReason>
@ocaml.doc("<p>The data source for the Autopilot job.</p>")
type autoMLDataSource = {
  @ocaml.doc("<p>The Amazon S3 location of the input data.</p>
         <note>
            <p>The input data must be in CSV format and contain at least 500 rows.</p>
         </note>")
  @as("S3DataSource")
  s3DataSource: autoMLS3DataSource,
}
@ocaml.doc("<p>A list of container definitions that describe the different containers that make up an
         AutoML candidate. For more information, see .</p>")
type autoMLContainerDefinition = {
  @ocaml.doc(
    "<p>The environment variables to set in the container. For more information, see .</p>"
  )
  @as("Environment")
  environment: option<environmentMap>,
  @ocaml.doc("<p>The location of the model artifacts. For more information, see .</p>")
  @as("ModelDataUrl")
  modelDataUrl: url,
  @ocaml.doc("<p>The Amazon Elastic Container Registry (Amazon ECR) path of the container. For more
         information, see .</p>")
  @as("Image")
  image: containerImage,
}
@ocaml.doc("<p>Specifies the configuration for asynchronous inference invocation outputs.</p>")
type asyncInferenceOutputConfig = {
  @ocaml.doc(
    "<p>Specifies the configuration for notifications of inference results for asynchronous inference.</p>"
  )
  @as("NotificationConfig")
  notificationConfig: option<asyncInferenceNotificationConfig>,
  @ocaml.doc("<p>The Amazon S3 location to upload inference responses to.</p>") @as("S3OutputPath")
  s3OutputPath: destinationS3Uri,
  @ocaml.doc("<p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that
            Amazon SageMaker uses to encrypt the asynchronous inference output in Amazon S3.</p>
        <p></p>")
  @as("KmsKeyId")
  kmsKeyId: option<kmsKeyId>,
}
@ocaml.doc("<p>Lists a summary of the properties of an association. An association is an entity that
        links other lineage or experiment entities. An example would be an association between a
        training job and a model.</p>")
type associationSummary = {
  @as("CreatedBy") createdBy: option<userContext>,
  @ocaml.doc("<p>When the association was created.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>The name of the destination.</p>") @as("DestinationName")
  destinationName: option<experimentEntityName>,
  @ocaml.doc("<p>The name of the source.</p>") @as("SourceName")
  sourceName: option<experimentEntityName>,
  @ocaml.doc("<p>The type of the association.</p>") @as("AssociationType")
  associationType: option<associationEdgeType>,
  @ocaml.doc("<p>The destination type.</p>") @as("DestinationType")
  destinationType: option<string256>,
  @ocaml.doc("<p>The source type.</p>") @as("SourceType") sourceType: option<string256>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the destination.</p>") @as("DestinationArn")
  destinationArn: option<associationEntityArn>,
  @ocaml.doc("<p>The ARN of the source.</p>") @as("SourceArn")
  sourceArn: option<associationEntityArn>,
}
type artifactSourceTypes = array<artifactSourceType>
@ocaml.doc("<p>Configuration to run a processing job in a specified container image.</p>")
type appSpecification = {
  @ocaml.doc("<p>The arguments for a container used to run a processing job.</p>")
  @as("ContainerArguments")
  containerArguments: option<containerArguments>,
  @ocaml.doc("<p>The entrypoint for a container used to run a processing job.</p>")
  @as("ContainerEntrypoint")
  containerEntrypoint: option<containerEntrypoint>,
  @ocaml.doc("<p>The container image to be run by the processing job.</p>") @as("ImageUri")
  imageUri: imageUri,
}
type appList = array<appDetails>
type algorithmSummaryList = array<algorithmSummary>
type algorithmStatusItemList = array<algorithmStatusItem>
type alarmList = array<alarm>
type agentVersions = array<agentVersion>
@ocaml.doc("<p>Lists the properties of an <i>action</i>. An action represents an action
        or activity. Some examples are a workflow step and a model deployment. Generally, an
        action involves at least one input artifact or output artifact.</p>")
type actionSummary = {
  @ocaml.doc("<p>When the action was last modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>When the action was created.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>The status of the action.</p>") @as("Status") status: option<actionStatus>,
  @ocaml.doc("<p>The type of the action.</p>") @as("ActionType") actionType: option<string64>,
  @ocaml.doc("<p>The source of the action.</p>") @as("Source") source: option<actionSource>,
  @ocaml.doc("<p>The name of the action.</p>") @as("ActionName")
  actionName: option<experimentEntityName>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the action.</p>") @as("ActionArn")
  actionArn: option<actionArn>,
}
@ocaml.doc("<p>A single private workforce, which is automatically created when you create your first
            private work team. You can create one private work force in each Amazon Web Services Region. By default,
            any workforce-related API operation used in a specific region will apply to the
            workforce created in that region. To learn how to create a private workforce, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html\">Create a Private Workforce</a>.</p>")
type workforce = {
  @ocaml.doc("<p>The date that the workforce is created.</p>") @as("CreateDate")
  createDate: option<timestamp_>,
  @ocaml.doc("<p>The configuration of an OIDC Identity Provider (IdP) private workforce.</p>")
  @as("OidcConfig")
  oidcConfig: option<oidcConfigForResponse>,
  @ocaml.doc("<p>The configuration of an Amazon Cognito workforce. 
      A single Cognito workforce is created using and corresponds to a single
      <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html\">
      Amazon Cognito user pool</a>.</p>")
  @as("CognitoConfig")
  cognitoConfig: option<cognitoConfig>,
  @ocaml.doc("<p>The subdomain for your OIDC Identity Provider.</p>") @as("SubDomain")
  subDomain: option<string_>,
  @ocaml.doc("<p>A list of one to ten IP address ranges (<a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\">CIDRs</a>) to be added to the
            workforce allow list. By default, a workforce isn't restricted to specific IP addresses.</p>")
  @as("SourceIpConfig")
  sourceIpConfig: option<sourceIpConfig>,
  @ocaml.doc("<p>The most recent date that  was used to
            successfully add one or more IP address ranges (<a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\">CIDRs</a>) to a private workforce's
            allow list.</p>")
  @as("LastUpdatedDate")
  lastUpdatedDate: option<timestamp_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the private workforce.</p>") @as("WorkforceArn")
  workforceArn: workforceArn,
  @ocaml.doc("<p>The name of the private workforce.</p>") @as("WorkforceName")
  workforceName: workforceName,
}
type trialSummaries = array<trialSummary>
type trialComponentSummaries = array<trialComponentSummary>
type trialComponentSimpleSummaries = array<trialComponentSimpleSummary>
@ocaml.doc("<p>Describes the input source of a transform job and the way the transform job consumes
            it.</p>")
type transformInput = {
  @ocaml.doc("<p>The method to use to split the transform job's data files into smaller batches.
            Splitting is necessary when the total size of each object is too large to fit in a
            single request. You can also use data splitting to improve performance by processing
            multiple concurrent mini-batches. The default value for <code>SplitType</code> is
                <code>None</code>, which indicates that input data files are not split, and request
            payloads contain the entire contents of an input object. Set the value of this parameter
            to <code>Line</code> to split records on a newline character boundary.
                <code>SplitType</code> also supports a number of record-oriented binary data
            formats. Currently, the supported record formats are:</p>
        <ul>
            <li>
                <p>RecordIO</p>
            </li>
            <li>
                <p>TFRecord</p>
            </li>
         </ul>
        <p>When splitting is enabled, the size of a mini-batch depends on the values of the
                <code>BatchStrategy</code> and <code>MaxPayloadInMB</code> parameters. When the
            value of <code>BatchStrategy</code> is <code>MultiRecord</code>, Amazon SageMaker sends the maximum
            number of records in each request, up to the <code>MaxPayloadInMB</code> limit. If the
            value of <code>BatchStrategy</code> is <code>SingleRecord</code>, Amazon SageMaker sends individual
            records in each request.</p>
        <note>
            <p>Some data formats represent a record as a binary payload wrapped with extra
                padding bytes. When splitting is applied to a binary data format, padding is removed
                if the value of <code>BatchStrategy</code> is set to <code>SingleRecord</code>.
                Padding is not removed if the value of <code>BatchStrategy</code> is set to
                    <code>MultiRecord</code>.</p>
            <p>For more information about <code>RecordIO</code>, see <a href=\"https://mxnet.apache.org/api/faq/recordio\">Create a Dataset Using
                    RecordIO</a> in the MXNet documentation. For more information about
                    <code>TFRecord</code>, see <a href=\"https://www.tensorflow.org/guide/data#consuming_tfrecord_data\">Consuming TFRecord data</a> in the TensorFlow documentation.</p>
        </note>")
  @as("SplitType")
  splitType: option<splitType>,
  @ocaml.doc("<p>If your transform data
            is
            compressed, specify the compression type. Amazon SageMaker automatically
            decompresses the data for the transform job accordingly. The default value is
                <code>None</code>.</p>")
  @as("CompressionType")
  compressionType: option<compressionType>,
  @ocaml.doc("<p>The multipurpose internet mail extension
            (MIME)
            type of the data. Amazon SageMaker uses the MIME type with each http call to
            transfer data to the transform job.</p>")
  @as("ContentType")
  contentType: option<contentType>,
  @ocaml.doc("<p>Describes the location of
            the
            channel data, which is, the S3 location of the input data that the
            model can consume.</p>")
  @as("DataSource")
  dataSource: transformDataSource,
}
@ocaml.doc("<p>Defines the traffic pattern of the load test.</p>")
type trafficPattern = {
  @ocaml.doc("<p>Defines the phases traffic specification.</p>") @as("Phases")
  phases: option<phases>,
  @ocaml.doc("<p>Defines the traffic patterns.</p>") @as("TrafficType")
  trafficType: option<trafficType>,
}
@ocaml.doc("<p>A list of algorithms that were used to create a model package.</p>")
type sourceAlgorithmSpecification = {
  @ocaml.doc("<p>A list of the algorithms that were used to create a model package.</p>")
  @as("SourceAlgorithms")
  sourceAlgorithms: sourceAlgorithmList,
}
@ocaml.doc("<p>Details that you specify to provision a service catalog product. 
            For information about service catalog, see <a href=\"https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html\">What is Amazon Web Services Service Catalog</a>.
        </p>")
type serviceCatalogProvisioningUpdateDetails = {
  @ocaml.doc("<p>A list of key value pairs that you specify when you provision a product.</p>")
  @as("ProvisioningParameters")
  provisioningParameters: option<provisioningParameters>,
  @ocaml.doc("<p>The ID of the provisioning artifact.</p>") @as("ProvisioningArtifactId")
  provisioningArtifactId: option<serviceCatalogEntityId>,
}
@ocaml.doc("<p>Details that you specify to provision a service catalog product. For information about
            service catalog, see <a href=\"https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html\">What is Amazon Web Services Service
                Catalog</a>.</p>")
type serviceCatalogProvisioningDetails = {
  @ocaml.doc("<p>A list of key value pairs that you specify when you provision a product.</p>")
  @as("ProvisioningParameters")
  provisioningParameters: option<provisioningParameters>,
  @ocaml.doc(
    "<p>The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. </p>"
  )
  @as("PathId")
  pathId: option<serviceCatalogEntityId>,
  @ocaml.doc("<p>The ID of the provisioning artifact.</p>") @as("ProvisioningArtifactId")
  provisioningArtifactId: option<serviceCatalogEntityId>,
  @ocaml.doc("<p>The ID of the product to provision.</p>") @as("ProductId")
  productId: serviceCatalogEntityId,
}
@ocaml.doc("<p>Specifies conditions for stopping a job. When a job reaches a 
           stopping condition limit, SageMaker ends the job.</p>")
type recommendationJobStoppingConditions = {
  @ocaml.doc("<p>The interval of time taken by a model to respond as viewed from SageMaker. 
          The interval includes the local communication time taken to send the request 
          and to fetch the response from the container of a model and the time taken to 
          complete the inference in the container.</p>")
  @as("ModelLatencyThresholds")
  modelLatencyThresholds: option<modelLatencyThresholds>,
  @ocaml.doc("<p>The maximum number of requests per minute expected for the endpoint.</p>")
  @as("MaxInvocations")
  maxInvocations: option<integer_>,
}
type profilerRuleConfigurations = array<profilerRuleConfiguration>
@ocaml.doc("<p>Describes weight and capacities for a production variant associated with an
            endpoint. If you sent a request to the <code>UpdateEndpointWeightsAndCapacities</code>
            API and the endpoint status is <code>Updating</code>, you get different desired and
            current values. </p>")
type productionVariantSummary = {
  @ocaml.doc("<p>The serverless configuration requested for the endpoint update.</p>
         <note>
            <p>Serverless Inference is in preview release for Amazon SageMaker and is subject to change. We do not recommend using this feature in production environments.</p>
         </note>")
  @as("DesiredServerlessConfig")
  desiredServerlessConfig: option<productionVariantServerlessConfig>,
  @ocaml.doc("<p>The serverless configuration for the endpoint.</p>
         <note>
            <p>Serverless Inference is in preview release for Amazon SageMaker and is subject to change. We do not recommend using this feature in production environments.</p>
         </note>")
  @as("CurrentServerlessConfig")
  currentServerlessConfig: option<productionVariantServerlessConfig>,
  @ocaml.doc(
    "<p>The endpoint variant status which describes the current deployment stage status or operational status.</p>"
  )
  @as("VariantStatus")
  variantStatus: option<productionVariantStatusList>,
  @ocaml.doc("<p>The number of instances requested in the
                <code>UpdateEndpointWeightsAndCapacities</code> request. </p>")
  @as("DesiredInstanceCount")
  desiredInstanceCount: option<taskCount>,
  @ocaml.doc("<p>The number of instances associated with the variant.</p>")
  @as("CurrentInstanceCount")
  currentInstanceCount: option<taskCount>,
  @ocaml.doc("<p>The requested weight, as specified in the
                <code>UpdateEndpointWeightsAndCapacities</code> request. </p>")
  @as("DesiredWeight")
  desiredWeight: option<variantWeight>,
  @ocaml.doc("<p>The weight associated with the variant.</p>") @as("CurrentWeight")
  currentWeight: option<variantWeight>,
  @ocaml.doc("<p>An array of <code>DeployedImage</code> objects that specify the Amazon EC2 Container Registry paths of the
            inference images deployed on instances of this <code>ProductionVariant</code>.</p>")
  @as("DeployedImages")
  deployedImages: option<deployedImages>,
  @ocaml.doc("<p>The name of the variant.</p>") @as("VariantName") variantName: variantName,
}
type productionVariantList = array<productionVariant>
type processingOutputs = array<processingOutput>
@ocaml.doc("<p>The inputs for a processing job. The processing input must specify exactly one of either
            <code>S3Input</code> or <code>DatasetDefinition</code> types.</p>")
type processingInput = {
  @ocaml.doc("<p>Configuration for a Dataset Definition input. </p>") @as("DatasetDefinition")
  datasetDefinition: option<datasetDefinition>,
  @ocaml.doc(
    "<p>Configuration for downloading input data from Amazon S3 into the processing container.</p>"
  )
  @as("S3Input")
  s3Input: option<processingS3Input>,
  @ocaml.doc("<p>When <code>True</code>, input operations such as data download are managed natively by the
            processing job application. When <code>False</code> (default), input operations are managed by Amazon SageMaker.</p>")
  @as("AppManaged")
  appManaged: option<appManaged>,
  @ocaml.doc("<p>The name for the processing job input.</p>") @as("InputName") inputName: string_,
}
@ocaml.doc("<p>An execution of a pipeline.</p>")
type pipelineExecution = {
  @ocaml.doc("<p>Contains a list of pipeline parameters. This list can be empty. </p>")
  @as("PipelineParameters")
  pipelineParameters: option<parameterList>,
  @ocaml.doc("<p>The parallelism configuration applied to the pipeline execution.</p>")
  @as("ParallelismConfiguration")
  parallelismConfiguration: option<parallelismConfiguration>,
  @as("LastModifiedBy") lastModifiedBy: option<userContext>,
  @as("CreatedBy") createdBy: option<userContext>,
  @ocaml.doc("<p>The time that the pipeline execution was last modified.</p>")
  @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>The creation time of the pipeline execution.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>If the execution failed, a message describing why.</p>") @as("FailureReason")
  failureReason: option<pipelineExecutionFailureReason>,
  @as("PipelineExperimentConfig") pipelineExperimentConfig: option<pipelineExperimentConfig>,
  @ocaml.doc("<p>The description of the pipeline execution.</p>")
  @as("PipelineExecutionDescription")
  pipelineExecutionDescription: option<pipelineExecutionDescription>,
  @ocaml.doc("<p>The status of the pipeline status.</p>") @as("PipelineExecutionStatus")
  pipelineExecutionStatus: option<pipelineExecutionStatus>,
  @ocaml.doc("<p>The display name of the pipeline execution.</p>")
  @as("PipelineExecutionDisplayName")
  pipelineExecutionDisplayName: option<pipelineExecutionName>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline execution.</p>")
  @as("PipelineExecutionArn")
  pipelineExecutionArn: option<pipelineExecutionArn>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline that was executed.</p>")
  @as("PipelineArn")
  pipelineArn: option<pipelineArn>,
}
@ocaml.doc("<p>A SageMaker Model Building Pipeline instance.</p>")
type pipeline = {
  @ocaml.doc("<p>A list of tags that apply to the pipeline.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The parallelism configuration applied to the pipeline.</p>")
  @as("ParallelismConfiguration")
  parallelismConfiguration: option<parallelismConfiguration>,
  @as("LastModifiedBy") lastModifiedBy: option<userContext>,
  @as("CreatedBy") createdBy: option<userContext>,
  @ocaml.doc("<p>The time when the pipeline was last run.</p>") @as("LastRunTime")
  lastRunTime: option<timestamp_>,
  @ocaml.doc("<p>The time that the pipeline was last modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>The creation time of the pipeline.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>The status of the pipeline.</p>") @as("PipelineStatus")
  pipelineStatus: option<pipelineStatus>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the role that created the pipeline.</p>")
  @as("RoleArn")
  roleArn: option<roleArn>,
  @ocaml.doc("<p>The description of the pipeline.</p>") @as("PipelineDescription")
  pipelineDescription: option<pipelineDescription>,
  @ocaml.doc("<p>The display name of the pipeline.</p>") @as("PipelineDisplayName")
  pipelineDisplayName: option<pipelineName>,
  @ocaml.doc("<p>The name of the pipeline.</p>") @as("PipelineName")
  pipelineName: option<pipelineName>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline.</p>") @as("PipelineArn")
  pipelineArn: option<pipelineArn>,
}
@ocaml.doc("<p>The production variant summary for a deployment when an endpoint is
            creating or updating with the <code>
               <a>CreateEndpoint</a>
            </code>
            or <code>
               <a>UpdateEndpoint</a>
            </code> operations.
            Describes the <code>VariantStatus </code>, weight and capacity for a production
            variant associated with an endpoint.
           </p>")
type pendingProductionVariantSummary = {
  @ocaml.doc("<p>The serverless configuration requested for this deployment, as specified in the endpoint configuration for the endpoint.</p>
         <note>
            <p>Serverless Inference is in preview release for Amazon SageMaker and is subject to change. We do not recommend using this feature in production environments.</p>
         </note>")
  @as("DesiredServerlessConfig")
  desiredServerlessConfig: option<productionVariantServerlessConfig>,
  @ocaml.doc("<p>The serverless configuration for the endpoint.</p>
         <note>
            <p>Serverless Inference is in preview release for Amazon SageMaker and is subject to change. We do not recommend using this feature in production environments.</p>
         </note>")
  @as("CurrentServerlessConfig")
  currentServerlessConfig: option<productionVariantServerlessConfig>,
  @ocaml.doc(
    "<p>The endpoint variant status which describes the current deployment stage status or operational status.</p>"
  )
  @as("VariantStatus")
  variantStatus: option<productionVariantStatusList>,
  @ocaml.doc("<p>The size of the Elastic Inference (EI) instance to use for the production variant. EI
            instances provide on-demand GPU computing for inference. For more information, see
            <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html\">Using Elastic
                Inference in Amazon SageMaker</a>.</p>")
  @as("AcceleratorType")
  acceleratorType: option<productionVariantAcceleratorType>,
  @ocaml.doc("<p>The type of instances associated with the variant.</p>") @as("InstanceType")
  instanceType: option<productionVariantInstanceType>,
  @ocaml.doc("<p>The number of instances requested in this deployment, as specified in the endpoint configuration
            for the endpoint. The value is taken from the request to the <code>
               <a>CreateEndpointConfig</a>
            </code> operation.</p>")
  @as("DesiredInstanceCount")
  desiredInstanceCount: option<taskCount>,
  @ocaml.doc("<p>The number of instances associated with the variant.</p>")
  @as("CurrentInstanceCount")
  currentInstanceCount: option<taskCount>,
  @ocaml.doc("<p>The requested weight for the variant in this deployment, as specified in the endpoint configuration
            for the endpoint. The value is taken from the request to the <code>
               <a>CreateEndpointConfig</a>
            </code> operation.</p>")
  @as("DesiredWeight")
  desiredWeight: option<variantWeight>,
  @ocaml.doc("<p>The weight associated with the variant.</p>") @as("CurrentWeight")
  currentWeight: option<variantWeight>,
  @ocaml.doc("<p>An array of <code>DeployedImage</code> objects that specify the Amazon EC2
            Container Registry paths of the inference images deployed on instances of this
            <code>ProductionVariant</code>.</p>")
  @as("DeployedImages")
  deployedImages: option<deployedImages>,
  @ocaml.doc("<p>The name of the variant.</p>") @as("VariantName") variantName: variantName,
}
@ocaml.doc("<p>Defines the possible values for categorical, continuous, and integer hyperparameters
            to be used by an algorithm.</p>")
type parameterRange = {
  @ocaml.doc("<p>A <code>CategoricalParameterRangeSpecification</code> object that defines the possible
            values for a categorical hyperparameter.</p>")
  @as("CategoricalParameterRangeSpecification")
  categoricalParameterRangeSpecification: option<categoricalParameterRangeSpecification>,
  @ocaml.doc("<p>A <code>ContinuousParameterRangeSpecification</code> object that defines the possible
            values for a continuous hyperparameter.</p>")
  @as("ContinuousParameterRangeSpecification")
  continuousParameterRangeSpecification: option<continuousParameterRangeSpecification>,
  @ocaml.doc("<p>A <code>IntegerParameterRangeSpecification</code> object that defines the possible
            values for an integer hyperparameter.</p>")
  @as("IntegerParameterRangeSpecification")
  integerParameterRangeSpecification: option<integerParameterRangeSpecification>,
}
type notebookInstanceSummaryList = array<notebookInstanceSummary>
@ocaml.doc("<p>Networking options for a job, such as network traffic encryption between containers,
         whether to allow inbound and outbound network calls to and from containers, and the VPC
         subnets and security groups to use for VPC-enabled jobs.</p>")
type networkConfig = {
  @as("VpcConfig") vpcConfig: option<vpcConfig>,
  @ocaml.doc("<p>Whether to allow inbound and outbound network calls to and from the containers used for
         the processing job.</p>")
  @as("EnableNetworkIsolation")
  enableNetworkIsolation: option<boolean_>,
  @ocaml.doc("<p>Whether to encrypt all communications between distributed processing jobs. Choose
            <code>True</code> to encrypt communications. Encryption provides greater security for distributed
            processing jobs, but the processing might take longer.</p>")
  @as("EnableInterContainerTrafficEncryption")
  enableInterContainerTrafficEncryption: option<boolean_>,
}
@ocaml.doc("<p>A list of nested <a>Filter</a> objects. A resource must satisfy the conditions
      of all filters to be included in the results returned from the <a>Search</a> API.</p>
         <p>For example, to filter on a training job's <code>InputDataConfig</code> property with a
      specific channel name and <code>S3Uri</code> prefix, define the following filters:</p>
         <ul>
            <li>
               <p>
                  <code>'{Name:\"InputDataConfig.ChannelName\", \"Operator\":\"Equals\", \"Value\":\"train\"}',</code>
               </p>
            </li>
            <li>
               <p>
                  <code>'{Name:\"InputDataConfig.DataSource.S3DataSource.S3Uri\", \"Operator\":\"Contains\",
            \"Value\":\"mybucket/catdata\"}'</code>
               </p>
            </li>
         </ul>")
type nestedFilters = {
  @ocaml.doc("<p>A list of filters. Each filter acts on a property. Filters must contain at least one
      <code>Filters</code> value. For example, a <code>NestedFilters</code> call might
      include a filter on the <code>PropertyName</code> parameter of the
      <code>InputDataConfig</code> property:
      <code>InputDataConfig.DataSource.S3DataSource.S3Uri</code>.</p>")
  @as("Filters")
  filters: filterList,
  @ocaml.doc("<p>The name of the property to use in the nested filters. The value must match a listed property name,
      such as <code>InputDataConfig</code>.</p>")
  @as("NestedPropertyName")
  nestedPropertyName: resourcePropertyName,
}
type monitoringOutputs = array<monitoringOutput>
@ocaml.doc("<p>The networking configuration for the monitoring job.</p>")
type monitoringNetworkConfig = {
  @as("VpcConfig") vpcConfig: option<vpcConfig>,
  @ocaml.doc("<p>Whether to allow inbound and outbound network calls to and from the containers used for
         the monitoring job.</p>")
  @as("EnableNetworkIsolation")
  enableNetworkIsolation: option<boolean_>,
  @ocaml.doc("<p>Whether to encrypt all communications between the instances used for the monitoring
         jobs. Choose <code>True</code> to encrypt communications. Encryption provides greater
         security for distributed jobs, but the processing might take longer.</p>")
  @as("EnableInterContainerTrafficEncryption")
  enableInterContainerTrafficEncryption: option<boolean_>,
}
type monitoringInputs = array<monitoringInput>
@ocaml.doc("<p>Specifies the validation and image scan statuses of the model package.</p>")
type modelPackageStatusDetails = {
  @ocaml.doc("<p>The status of the scan of the Docker image container for the model package.</p>")
  @as("ImageScanStatuses")
  imageScanStatuses: option<modelPackageStatusItemList>,
  @ocaml.doc("<p>The validation status of the model package.</p>") @as("ValidationStatuses")
  validationStatuses: modelPackageStatusItemList,
}
@ocaml.doc("<p>A group of versioned models in the model registry.</p>")
type modelPackageGroup = {
  @ocaml.doc("<p>A list of the tags associated with the model group. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
            resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>")
  @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The status of the model group. This can be one of the following values.</p>
        <ul>
            <li>
                <p>
                  <code>PENDING</code> - The model group is pending being created.</p>
            </li>
            <li>
                <p>
                  <code>IN_PROGRESS</code> - The model group is in the process of being
                    created.</p>
            </li>
            <li>
                <p>
                  <code>COMPLETED</code> - The model group was successfully created.</p>
            </li>
            <li>
                <p>
                  <code>FAILED</code> - The model group failed.</p>
            </li>
            <li>
                <p>
                  <code>DELETING</code> - The model group is in the process of being deleted.</p>
            </li>
            <li>
                <p>
                  <code>DELETE_FAILED</code> - SageMaker failed to delete the model group.</p>
            </li>
         </ul>")
  @as("ModelPackageGroupStatus")
  modelPackageGroupStatus: option<modelPackageGroupStatus>,
  @as("CreatedBy") createdBy: option<userContext>,
  @ocaml.doc("<p>The time that the model group was created.</p>") @as("CreationTime")
  creationTime: option<creationTime>,
  @ocaml.doc("<p>The description for the model group.</p>") @as("ModelPackageGroupDescription")
  modelPackageGroupDescription: option<entityDescription>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model group.</p>")
  @as("ModelPackageGroupArn")
  modelPackageGroupArn: option<modelPackageGroupArn>,
  @ocaml.doc("<p>The name of the model group.</p>") @as("ModelPackageGroupName")
  modelPackageGroupName: option<entityName>,
}
type modelPackageContainerDefinitionList = array<modelPackageContainerDefinition>
@ocaml.doc("<p>Contains metrics captured from a model.</p>")
type modelMetrics = {
  @ocaml.doc("<p>Metrics that help explain a model.</p>") @as("Explainability")
  explainability: option<explainability>,
  @ocaml.doc("<p>Metrics that measure bais in a model.</p>") @as("Bias") bias: option<bias>,
  @ocaml.doc("<p>Metrics that measure the quality of the input data for a model.</p>")
  @as("ModelDataQuality")
  modelDataQuality: option<modelDataQuality>,
  @ocaml.doc("<p>Metrics that measure the quality of a model.</p>") @as("ModelQuality")
  modelQuality: option<modelQuality>,
}
@ocaml.doc("<p>One or more filters that searches for the specified resource or resources in 
          a search. All resource objects that satisfy the expression's condition are 
          included in the search results</p>")
type modelMetadataSearchExpression = {
  @ocaml.doc("<p>A list of filter objects.</p>") @as("Filters")
  filters: option<modelMetadataFilters>,
}
@ocaml.doc(
  "<p>Defines the model configuration. Includes the specification name and environment parameters.</p>"
)
type modelConfiguration = {
  @ocaml.doc(
    "<p>Defines the environment parameters that includes key, value types, and values.</p>"
  )
  @as("EnvironmentParameters")
  environmentParameters: option<environmentParameters>,
  @ocaml.doc("<p>The inference specification name in the model package version.</p>")
  @as("InferenceSpecificationName")
  inferenceSpecificationName: option<inferenceSpecificationName>,
}
@ocaml.doc(
  "<p>Defines an Amazon Cognito or your own OIDC IdP user group that is part of a work team.</p>"
)
type memberDefinition = {
  @ocaml.doc("<p>A list user groups that exist in your OIDC Identity Provider (IdP). 
            One to ten groups can be used to create a single private work team. 
            When you add a user group to the list of <code>Groups</code>, you can add that user group to one or more
            private work teams. If you add a user group to a private work team, all workers in that user group 
            are added to the work team.</p>")
  @as("OidcMemberDefinition")
  oidcMemberDefinition: option<oidcMemberDefinition>,
  @ocaml.doc("<p>The Amazon Cognito user group that is part of the work team.</p>")
  @as("CognitoMemberDefinition")
  cognitoMemberDefinition: option<cognitoMemberDefinition>,
}
@ocaml.doc("<p>Metadata for a Lambda step.</p>")
type lambdaStepMetadata = {
  @ocaml.doc("<p>A list of the output parameters of the Lambda step.</p>") @as("OutputParameters")
  outputParameters: option<outputParameterList>,
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the Lambda function that was run by this step execution.</p>"
  )
  @as("Arn")
  arn: option<string256>,
}
@ocaml.doc("<p>Input configuration information for a labeling job.</p>")
type labelingJobInputConfig = {
  @ocaml.doc("<p>Attributes of the data specified by the customer.</p>") @as("DataAttributes")
  dataAttributes: option<labelingJobDataAttributes>,
  @ocaml.doc("<p>The location of the input data.</p>") @as("DataSource")
  dataSource: labelingJobDataSource,
}
type labelingJobForWorkteamSummaryList = array<labelingJobForWorkteamSummary>
@ocaml.doc("<p>The configuration for the file system and kernels in a SageMaker image running as a
        KernelGateway app.</p>")
type kernelGatewayImageConfig = {
  @ocaml.doc(
    "<p>The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.</p>"
  )
  @as("FileSystemConfig")
  fileSystemConfig: option<fileSystemConfig>,
  @ocaml.doc("<p>The specification of the Jupyter kernels in the image.</p>") @as("KernelSpecs")
  kernelSpecs: kernelSpecs,
}
@ocaml.doc("<p>The KernelGateway app settings.</p>")
type kernelGatewayAppSettings = {
  @ocaml.doc(
    "<p> The Amazon Resource Name (ARN) of the Lifecycle Configurations attached to the the user profile or domain.</p>"
  )
  @as("LifecycleConfigArns")
  lifecycleConfigArns: option<lifecycleConfigArns>,
  @ocaml.doc(
    "<p>A list of custom SageMaker images that are configured to run as a KernelGateway app.</p>"
  )
  @as("CustomImages")
  customImages: option<customImages>,
  @ocaml.doc(
    "<p>The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.</p>"
  )
  @as("DefaultResourceSpec")
  defaultResourceSpec: option<resourceSpec>,
}
@ocaml.doc("<p>Specifies the configuration for a hyperparameter tuning job that uses one or more
            previous hyperparameter tuning jobs as a starting point. The results of previous tuning
            jobs are used to inform which combinations of hyperparameters to search over in the new
            tuning job.</p>
        <p>All training jobs launched by the new hyperparameter tuning job are evaluated by using
            the objective metric, and the training job that performs the best is compared to the
            best training jobs from the parent tuning jobs. From these, the training job that
            performs the best as measured by the objective metric is returned as the overall best
            training job.</p>
        <note>
            <p>All training jobs launched by parent hyperparameter tuning jobs and the new
                hyperparameter tuning jobs count against the limit of training jobs for the tuning
                job.</p>
        </note>")
type hyperParameterTuningJobWarmStartConfig = {
  @ocaml.doc("<p>Specifies one of the following:</p>
        <dl>
            <dt>IDENTICAL_DATA_AND_ALGORITHM</dt>
            <dd>
                    <p>The new hyperparameter tuning job uses the same input data and training
                        image as the parent tuning jobs. You can change the hyperparameter ranges to
                        search and the maximum number of training jobs that the hyperparameter
                        tuning job launches. You cannot use a new version of the training algorithm,
                        unless the changes in the new version do not affect the algorithm itself.
                        For example, changes that improve logging or adding support for a different
                        data format are allowed. You can also change hyperparameters from tunable to
                        static, and from static to tunable, but the total number of static plus
                        tunable hyperparameters must remain the same as it is in all parent jobs.
                        The objective metric for the new tuning job must be the same as for all
                        parent jobs.</p>
                </dd>
            <dt>TRANSFER_LEARNING</dt>
            <dd>
                    <p>The new hyperparameter tuning job can include input data, hyperparameter
                        ranges, maximum number of concurrent training jobs, and maximum number of
                        training jobs that are different than those of its parent hyperparameter
                        tuning jobs. The training image can also be a different version from the
                        version used in the parent hyperparameter tuning job. You can also change
                        hyperparameters from tunable to static, and from static to tunable, but the
                        total number of static plus tunable hyperparameters must remain the same as
                        it is in all parent jobs. The objective metric for the new tuning job must
                        be the same as for all parent jobs.</p>
                </dd>
         </dl>")
  @as("WarmStartType")
  warmStartType: hyperParameterTuningJobWarmStartType,
  @ocaml.doc("<p>An array of hyperparameter tuning jobs that are used as the starting point for the new
            hyperparameter tuning job. For more information about warm starting a hyperparameter
            tuning job, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-warm-start.html\">Using a Previous
                Hyperparameter Tuning Job as a Starting Point</a>.</p>
        <p>Hyperparameter tuning jobs created before October 1, 2018 cannot be used as parent
            jobs for warm start tuning jobs.</p>")
  @as("ParentHyperParameterTuningJobs")
  parentHyperParameterTuningJobs: parentHyperParameterTuningJobs,
}
type hyperParameterTuningJobSummaries = array<hyperParameterTuningJobSummary>
type hyperParameterTrainingJobSummaries = array<hyperParameterTrainingJobSummary>
@ocaml.doc("<p>Specifies
            which
            training algorithm to use for training jobs that a hyperparameter
            tuning job launches and the metrics to monitor.</p>")
type hyperParameterAlgorithmSpecification = {
  @ocaml.doc("<p>An array of <a>MetricDefinition</a> objects that specify the
            metrics
            that the algorithm emits.</p>")
  @as("MetricDefinitions")
  metricDefinitions: option<metricDefinitionList>,
  @ocaml.doc("<p>The name of the resource algorithm to use for the hyperparameter tuning job. If you
            specify a value for this parameter, do not specify a value for
                <code>TrainingImage</code>.</p>")
  @as("AlgorithmName")
  algorithmName: option<arnOrName>,
  @as("TrainingInputMode") trainingInputMode: trainingInputMode,
  @ocaml.doc("<p> The registry path of the Docker image that contains the training algorithm. For
            information about Docker registry paths for built-in algorithms, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html\">Algorithms
                Provided by Amazon SageMaker: Common Parameters</a>. Amazon SageMaker supports both
                <code>registry/repository[:tag]</code> and <code>registry/repository[@digest]</code>
            image path formats. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html\">Using Your Own Algorithms with Amazon
                SageMaker</a>.</p>")
  @as("TrainingImage")
  trainingImage: option<algorithmImage>,
}
@ocaml.doc("<p>Information required for human workers to complete a labeling task.</p>")
type humanTaskConfig = {
  @ocaml.doc(
    "<p>The price that you pay for each task performed by an Amazon Mechanical Turk worker.</p>"
  )
  @as("PublicWorkforceTaskPrice")
  publicWorkforceTaskPrice: option<publicWorkforceTaskPrice>,
  @ocaml.doc("<p>Configures how labels are consolidated across human workers.</p>")
  @as("AnnotationConsolidationConfig")
  annotationConsolidationConfig: annotationConsolidationConfig,
  @ocaml.doc("<p>Defines the maximum number of data objects that can be labeled by human workers at the
            same time. Also referred to as batch size. Each object may have more than one worker at one time.
            The default value is 1000 objects.</p>")
  @as("MaxConcurrentTaskCount")
  maxConcurrentTaskCount: option<maxConcurrentTaskCount>,
  @ocaml.doc("<p>The length of time that a task remains available for labeling by human workers. The
            default and maximum values for this parameter depend on the type of workforce you
            use.</p>
        <ul>
            <li>
                <p>If you choose the Amazon Mechanical Turk workforce, the maximum is 12 hours (43,200 seconds).
                    The default is 6 hours (21,600 seconds).</p>
            </li>
            <li>
                <p>If you choose a private or vendor workforce, the default value is 30 days (2592,000 seconds) for non-AL mode. For most users, the maximum is also 30 days.</p>
            </li>
         </ul>")
  @as("TaskAvailabilityLifetimeInSeconds")
  taskAvailabilityLifetimeInSeconds: option<taskAvailabilityLifetimeInSeconds>,
  @ocaml.doc("<p>The amount of time that a worker has to complete a task. </p>
        <p>If you create a custom labeling job, the maximum value for this parameter is 8 hours
            (28,800 seconds).</p>
        <p>If you create a labeling job using a <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html\">built-in task type</a> the maximum
            for this parameter depends on the task type you use:</p>
        <ul>
            <li>
                <p>For <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-label-images.html\">image</a> and 
                    <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-label-text.html\">text</a> labeling jobs,
                    the maximum is 8 hours (28,800 seconds).</p>
            </li>
            <li>
                <p>For <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud.html\">3D point cloud</a> and <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-video.html\">video frame</a> labeling jobs, the maximum is 30 days (2952,000 seconds) for non-AL mode. For most users, the maximum is also 30 days.</p>
            </li>
         </ul>")
  @as("TaskTimeLimitInSeconds")
  taskTimeLimitInSeconds: taskTimeLimitInSeconds,
  @ocaml.doc("<p>The number of human workers that will label an object. </p>")
  @as("NumberOfHumanWorkersPerDataObject")
  numberOfHumanWorkersPerDataObject: numberOfHumanWorkersPerDataObject,
  @ocaml.doc("<p>A description of the task for your human workers.</p>") @as("TaskDescription")
  taskDescription: taskDescription,
  @ocaml.doc("<p>A title for the task for your human workers.</p>") @as("TaskTitle")
  taskTitle: taskTitle,
  @ocaml.doc("<p>Keywords used to describe the task so that workers on Amazon Mechanical Turk can
            discover the task.</p>")
  @as("TaskKeywords")
  taskKeywords: option<taskKeywords>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of a Lambda function that is run before a data object
            is sent to a human worker. Use this function to provide input to a custom labeling
            job.</p>
        <p>For <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html\">built-in
                task types</a>, use one of the following Amazon SageMaker Ground Truth Lambda function ARNs for
                <code>PreHumanTaskLambdaArn</code>. For custom labeling workflows, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates-step3.html#sms-custom-templates-step3-prelambda\">Pre-annotation Lambda</a>. </p>
    
            

         <p>
            <b>Bounding box</b> - Finds the most similar boxes from
                    different workers based on the Jaccard index of the boxes.</p>
        <ul>
            <li>
                <p>
                    <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-BoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-BoundingBox</code>
                </p>
            </li>
         </ul>
            

          <p>
            <b>Image classification</b> - Uses a variant of the Expectation
                    Maximization approach to estimate the true class of an image based on
                    annotations from individual workers.</p>

        <ul>
            <li>
                <p>
                    <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-ImageMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-ImageMultiClass</code>
                </p>
            </li>
         </ul>
            
            <p>
            <b>Multi-label image classification</b> - Uses a variant of the Expectation
                    Maximization approach to estimate the true classes of an image based on
                    annotations from individual workers.</p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-ImageMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-ImageMultiClassMultiLabel</code>
               </p>
            </li>
         </ul>
            
            <p>
            <b>Semantic segmentation</b> - Treats each pixel in an image as
                    a multi-class classification and treats pixel annotations from workers as
                    \"votes\" for the correct label.</p>
        <ul>
            <li>
                <p>
                    <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-SemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-SemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-SemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-SemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-SemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-SemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-SemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-SemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-SemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-SemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-SemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-SemanticSegmentation</code>
                </p>
            </li>
         </ul>
            
            <p>
            <b>Text classification</b> - Uses a variant of the Expectation
                    Maximization approach to estimate the true class of text based on annotations
                    from individual workers.</p>
            <ul>
            <li>
                <p>
                    <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-TextMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-TextMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-TextMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-TextMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-TextMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-TextMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-TextMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-TextMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-TextMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-TextMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-TextMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-TextMultiClass</code>
                </p>
            </li>
         </ul>
            
            <p>
            <b>Multi-label text classification</b> - Uses a variant of the
                    Expectation Maximization approach to estimate the true classes of text based on
                    annotations from individual workers.</p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-TextMultiClassMultiLabel</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-TextMultiClassMultiLabel</code>
               </p>
            </li>
         </ul>
            
            <p>
            <b>Named entity recognition</b> - Groups similar selections and
                    calculates aggregate boundaries, resolving to most-assigned label.</p>
        <ul>
            <li>
                <p>
                    <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-NamedEntityRecognition</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-NamedEntityRecognition</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-NamedEntityRecognition</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-NamedEntityRecognition</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-NamedEntityRecognition</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-NamedEntityRecognition</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-NamedEntityRecognition</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-NamedEntityRecognition</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-NamedEntityRecognition</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-NamedEntityRecognition</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-NamedEntityRecognition</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-NamedEntityRecognition</code>
                </p>
            </li>
         </ul>
        
        
        
        
        <p>
            <b>Video Classification</b> - Use this task type when you need workers to classify videos using
            predefined labels that you specify. Workers are shown videos and are asked to choose one
            label for each video.</p>
        
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoMultiClass</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoMultiClass</code>
                </p>
            </li>
         </ul>
        
        <p>
            <b>Video Frame Object Detection</b> - Use this task type to
            have workers identify and locate objects in a sequence of video frames (images extracted
            from a video) using bounding boxes. For example, you can use this task to ask workers to
            identify and localize various objects in a series of video frames, such as cars, bikes,
            and pedestrians.</p>
        
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoObjectDetection</code>
                </p>
            </li>
         </ul>
        
        <p>
            <b>Video Frame Object Tracking</b> - Use this task type to
            have workers track the movement of objects in a sequence of video frames (images
            extracted from a video) using bounding boxes. For example, you can use this task to ask
            workers to track the movement of objects, such as cars, bikes, and pedestrians. </p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoObjectTracking</code>
                </p>
            </li>
         </ul>
        
        
        

        <p>
            <b>3D Point Cloud Modalities</b>
         </p>
        <p>Use the following pre-annotation lambdas for 3D point cloud labeling modality tasks.
            See <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud-task-types.html\">3D Point Cloud Task types
            </a> to learn more. </p>

        
        <p>
            <b>3D Point Cloud Object Detection</b> - 
        Use this task type when you want workers to classify objects in a 3D point cloud by 
        drawing 3D cuboids around objects. For example, you can use this task type to ask workers 
        to identify different types of objects in a point cloud, such as cars, bikes, and pedestrians.</p>
                <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudObjectDetection</code>
                </p>
            </li>
         </ul>
        
        <p>
            <b>3D Point Cloud Object Tracking</b> - 
        Use this task type when you want workers to draw 3D cuboids around objects
        that appear in a sequence of 3D point cloud frames. 
        For example, you can use this task type to ask workers to track 
        the movement of vehicles across multiple point cloud frames.
        </p>
                <ul>
            <li>
                <p>
                    <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudObjectTracking</code>
                </p>
            </li>
         </ul>
        
        
        
        <p>
            <b>3D Point Cloud Semantic Segmentation</b> - 
            Use this task type when you want workers to create a point-level semantic segmentation masks by 
            painting objects in a 3D point cloud using different colors where each color is assigned to one of 
            the classes you specify.</p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudSemanticSegmentation</code>
                </p>
            </li>
         </ul>
        
        <p>
            <b>Use the following ARNs for Label Verification and Adjustment Jobs</b>
         </p>
        <p>Use label verification and adjustment jobs to review and adjust labels. To learn more,
            see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html\">Verify and Adjust Labels </a>.</p>
            
            <p>
            <b>Bounding box verification</b> - Uses a variant of the
                Expectation Maximization approach to estimate the true class of verification
                judgement for bounding box labels based on annotations from individual
                workers.</p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VerificationBoundingBox</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VerificationBoundingBox</code>
               </p>
            </li>
         </ul>
            
            <p>
            <b>Bounding box adjustment</b> - Finds the most similar boxes
                    from different workers based on the Jaccard index of the adjusted
                    annotations.</p>
        <ul>
            <li>
                <p>
                    <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentBoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentBoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentBoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentBoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentBoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentBoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentBoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentBoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentBoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentBoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentBoundingBox</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentBoundingBox</code>
                </p>
            </li>
         </ul>
            
            <p>
            <b>Semantic segmentation verification</b> - Uses a variant of
                    the Expectation Maximization approach to estimate the true class of verification
                    judgment for semantic segmentation labels based on annotations from individual
                    workers.</p>
        <ul>
            <li>
                <p>
                    <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-VerificationSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-VerificationSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-VerificationSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-VerificationSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-VerificationSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-VerificationSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-VerificationSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VerificationSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VerificationSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-VerificationSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VerificationSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VerificationSemanticSegmentation</code>
                </p>
            </li>
         </ul>
            
            <p>
            <b>Semantic segmentation adjustment</b> - Treats each pixel in
                    an image as a multi-class classification and treats pixel adjusted annotations
                    from workers as \"votes\" for the correct label.</p>
        <ul>
            <li>
                <p>
                    <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentSemanticSegmentation</code>
                </p>
            </li>
            <li>
                <p>
                    <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentSemanticSegmentation</code>
                </p>
            </li>
         </ul>
        
        
        
        
        <p>
            <b>Video Frame Object Detection Adjustment</b> - 
            Use this task type when you want workers to adjust bounding boxes that workers have added 
            to video frames to classify and localize objects in a sequence of video frames.</p>
        
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentVideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentVideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentVideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentVideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentVideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentVideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentVideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentVideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentVideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentVideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentVideoObjectDetection</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentVideoObjectDetection</code>
                </p>
            </li>
         </ul>
        
        <p>
            <b>Video Frame Object Tracking Adjustment</b> - 
            Use this task type when you want workers to adjust bounding boxes that workers have added 
            to video frames to track object movement across a sequence of video frames.</p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentVideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentVideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentVideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentVideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentVideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentVideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentVideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentVideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentVideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentVideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentVideoObjectTracking</code>
                </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentVideoObjectTracking</code>
                </p>
            </li>
         </ul>
        
        
        
      
        <p>
            <b>3D point cloud object detection adjustment</b> - Adjust
            3D cuboids in a point cloud frame. </p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudObjectDetection</code>
               </p>
            </li>
         </ul>
        
        <p>
            <b>3D point cloud object tracking adjustment</b> - Adjust 3D
            cuboids across a sequence of point cloud frames. </p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudObjectTracking</code>
               </p>
            </li>
         </ul>
        
        <p>
            <b>3D point cloud semantic segmentation adjustment</b> -
            Adjust semantic segmentation masks in a 3D point cloud. </p>
        <ul>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
            <li>
                <p>
                  <code>arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudSemanticSegmentation</code>
               </p>
            </li>
         </ul>")
  @as("PreHumanTaskLambdaArn")
  preHumanTaskLambdaArn: lambdaFunctionArn,
  @ocaml.doc("<p>Information about the user interface that workers use to complete the labeling
            task.</p>")
  @as("UiConfig")
  uiConfig: uiConfig,
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the work team assigned to complete the tasks.</p>"
  )
  @as("WorkteamArn")
  workteamArn: workteamArn,
}
@ocaml.doc("<p>Describes the work to be performed by human workers.</p>")
type humanLoopConfig = {
  @as("PublicWorkforceTaskPrice") publicWorkforceTaskPrice: option<publicWorkforceTaskPrice>,
  @ocaml.doc("<p>Keywords used to describe the task so that workers can discover the task.</p>")
  @as("TaskKeywords")
  taskKeywords: option<flowDefinitionTaskKeywords>,
  @ocaml.doc("<p>The amount of time that a worker has to complete a task. The default value is 3,600
         seconds (1 hour).</p>")
  @as("TaskTimeLimitInSeconds")
  taskTimeLimitInSeconds: option<flowDefinitionTaskTimeLimitInSeconds>,
  @ocaml.doc("<p>The length of time that a task remains available for review by human workers.</p>")
  @as("TaskAvailabilityLifetimeInSeconds")
  taskAvailabilityLifetimeInSeconds: option<flowDefinitionTaskAvailabilityLifetimeInSeconds>,
  @ocaml.doc("<p>The number of distinct workers who will perform the same task on each object.
      For example, if <code>TaskCount</code> is set to <code>3</code> for an image classification 
      labeling job, three workers will classify each input image. 
      Increasing <code>TaskCount</code> can improve label accuracy.</p>")
  @as("TaskCount")
  taskCount: flowDefinitionTaskCount,
  @ocaml.doc("<p>A description for the human worker task.</p>") @as("TaskDescription")
  taskDescription: flowDefinitionTaskDescription,
  @ocaml.doc("<p>A title for the human worker task.</p>") @as("TaskTitle")
  taskTitle: flowDefinitionTaskTitle,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the human task user interface.</p>
         <p>You can use standard HTML and Crowd HTML Elements to create a custom worker task
         template. You use this template to create a human task UI.</p>
         <p>To learn how to create a custom HTML template, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-custom-templates.html\">Create Custom Worker
            Task Template</a>.</p>
         <p>To learn how to create a human task UI, which is a worker task template that can be used
         in a flow definition, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-worker-template-console.html\">Create and Delete a Worker Task Templates</a>.</p>")
  @as("HumanTaskUiArn")
  humanTaskUiArn: humanTaskUiArn,
  @ocaml.doc("<p>Amazon Resource Name (ARN) of a team of workers. To learn more about the types of
         workforces and work teams you can create and use with Amazon A2I, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-management.html\">Create
            and Manage Workforces</a>.</p>")
  @as("WorkteamArn")
  workteamArn: workteamArn,
}
type featureGroupSummaries = array<featureGroupSummary>
@ocaml.doc("<p>Amazon SageMaker Feature Store stores features in a collection called Feature Group. 
         A Feature Group can be visualized as a table which has rows, 
         with a unique identifier for each row where each column in the table is a feature. 
         In principle, a Feature Group is composed of features and values per features.</p>")
type featureGroup = {
  @ocaml.doc("<p>Tags used to define a <code>FeatureGroup</code>.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>A free form description of a <code>FeatureGroup</code>.</p>") @as("Description")
  description: option<description>,
  @ocaml.doc("<p>The reason that the <code>FeatureGroup</code> failed to 
         be replicated in the <code>OfflineStore</code>. This is 
         failure may be due to a failure to create a <code>FeatureGroup</code> in
         or delete a <code>FeatureGroup</code> from the <code>OfflineStore</code>.</p>")
  @as("FailureReason")
  failureReason: option<failureReason>,
  @as("OfflineStoreStatus") offlineStoreStatus: option<offlineStoreStatus>,
  @ocaml.doc("<p>A <code>FeatureGroup</code> status.</p>") @as("FeatureGroupStatus")
  featureGroupStatus: option<featureGroupStatus>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the IAM execution role used to create the feature
         group.</p>")
  @as("RoleArn")
  roleArn: option<roleArn>,
  @as("OfflineStoreConfig") offlineStoreConfig: option<offlineStoreConfig>,
  @as("OnlineStoreConfig") onlineStoreConfig: option<onlineStoreConfig>,
  @ocaml.doc("<p>The time a <code>FeatureGroup</code> was created.</p>") @as("CreationTime")
  creationTime: option<creationTime>,
  @ocaml.doc("<p>A list of <code>Feature</code>s. Each <code>Feature</code> must include a
            <code>FeatureName</code> and a <code>FeatureType</code>. </p>
         <p>Valid <code>FeatureType</code>s are <code>Integral</code>, <code>Fractional</code> and
            <code>String</code>. </p>
         <p>
            <code>FeatureName</code>s cannot be any of the following: <code>is_deleted</code>,
            <code>write_time</code>, <code>api_invocation_time</code>.</p>
         <p>You can create up to 2,500 <code>FeatureDefinition</code>s per
         <code>FeatureGroup</code>.</p>")
  @as("FeatureDefinitions")
  featureDefinitions: option<featureDefinitions>,
  @ocaml.doc("<p>The name of the feature that stores the <code>EventTime</code> of a Record in a
         <code>FeatureGroup</code>.</p>
         <p>A <code>EventTime</code> is point in time when a new event
         occurs that corresponds to the creation or update of a <code>Record</code> in
         <code>FeatureGroup</code>. All <code>Records</code> in the <code>FeatureGroup</code>
         must have a corresponding <code>EventTime</code>.</p>")
  @as("EventTimeFeatureName")
  eventTimeFeatureName: option<featureName>,
  @ocaml.doc("<p>The name of the <code>Feature</code> whose value uniquely identifies a
      <code>Record</code> defined in the <code>FeatureGroup</code> 
            <code>FeatureDefinitions</code>.</p>")
  @as("RecordIdentifierFeatureName")
  recordIdentifierFeatureName: option<featureName>,
  @ocaml.doc("<p>The name of the <code>FeatureGroup</code>.</p>") @as("FeatureGroupName")
  featureGroupName: option<featureGroupName>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of a <code>FeatureGroup</code>.</p>")
  @as("FeatureGroupArn")
  featureGroupArn: option<featureGroupArn>,
}
type experimentSummaries = array<experimentSummary>
@ocaml.doc("<p>The properties of an experiment as returned by the <a>Search</a> API.</p>")
type experiment = {
  @ocaml.doc(
    "<p>The list of tags that are associated with the experiment. You can use <a>Search</a> API to search on the tags.</p>"
  )
  @as("Tags")
  tags: option<tagList_>,
  @as("LastModifiedBy") lastModifiedBy: option<userContext>,
  @ocaml.doc("<p>When the experiment was last modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>Who created the experiment.</p>") @as("CreatedBy") createdBy: option<userContext>,
  @ocaml.doc("<p>When the experiment was created.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>The description of the experiment.</p>") @as("Description")
  description: option<experimentDescription>,
  @as("Source") source: option<experimentSource>,
  @ocaml.doc("<p>The name of the experiment as displayed. If <code>DisplayName</code> isn't specified,
        <code>ExperimentName</code> is displayed.</p>")
  @as("DisplayName")
  displayName: option<experimentEntityName>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the experiment.</p>") @as("ExperimentArn")
  experimentArn: option<experimentArn>,
  @ocaml.doc("<p>The name of the experiment.</p>") @as("ExperimentName")
  experimentName: option<experimentEntityName>,
}
@ocaml.doc("<p>Represents the drift check baselines that can be used when the model monitor is set using the model 
         package. </p>")
type driftCheckBaselines = {
  @ocaml.doc("<p>Represents the drift check model data quality baselines that can be used when the model monitor is set 
         using the model package.</p>")
  @as("ModelDataQuality")
  modelDataQuality: option<driftCheckModelDataQuality>,
  @ocaml.doc("<p>Represents the drift check model quality baselines that can be used when the model monitor is set using 
         the model package.</p>")
  @as("ModelQuality")
  modelQuality: option<driftCheckModelQuality>,
  @ocaml.doc("<p>Represents the drift check explainability baselines that can be used when the model monitor is set using 
         the model package. </p>")
  @as("Explainability")
  explainability: option<driftCheckExplainability>,
  @ocaml.doc("<p>Represents the drift check bias baselines that can be used when the model monitor is set using the model 
         package. </p>")
  @as("Bias")
  bias: option<driftCheckBias>,
}
@ocaml.doc("<p>A collection of <code>Domain</code> configuration settings to update.</p>")
type domainSettingsForUpdate = {
  @ocaml.doc(
    "<p>A collection of <code>RStudioServerPro</code> Domain-level app settings to update.</p>"
  )
  @as("RStudioServerProDomainSettingsForUpdate")
  rstudioServerProDomainSettingsForUpdate: option<rstudioServerProDomainSettingsForUpdate>,
}
@ocaml.doc(
  "<p>A collection of settings that apply to the <code>SageMaker Domain</code>. These settings are specified through the <code>CreateDomain</code> API call.</p>"
)
type domainSettings = {
  @ocaml.doc(
    "<p>A collection of settings that configure the <code>RStudioServerPro</code> Domain-level app.</p>"
  )
  @as("RStudioServerProDomainSettings")
  rstudioServerProDomainSettings: option<rstudioServerProDomainSettings>,
  @ocaml.doc(
    "<p>The security groups for the Amazon Virtual Private Cloud that the <code>Domain</code> uses for communication between Domain-level apps and user apps.</p>"
  )
  @as("SecurityGroupIds")
  securityGroupIds: option<domainSecurityGroupIds>,
}
@ocaml.doc("<p>Summary of the device.</p>")
type deviceSummary = {
  @ocaml.doc("<p>Edge Manager agent version.</p>") @as("AgentVersion")
  agentVersion: option<edgeVersion>,
  @ocaml.doc("<p>Models on the device.</p>") @as("Models") models: option<edgeModelSummaries>,
  @ocaml.doc("<p>The last heartbeat received from the device.</p>") @as("LatestHeartbeat")
  latestHeartbeat: option<timestamp_>,
  @ocaml.doc("<p>The timestamp of the last registration or de-reregistration.</p>")
  @as("RegistrationTime")
  registrationTime: option<timestamp_>,
  @ocaml.doc(
    "<p>The Amazon Web Services Internet of Things (IoT) object thing name associated with the device..</p>"
  )
  @as("IotThingName")
  iotThingName: option<thingName>,
  @ocaml.doc("<p>The name of the fleet the device belongs to.</p>") @as("DeviceFleetName")
  deviceFleetName: option<entityName>,
  @ocaml.doc("<p>A description of the device.</p>") @as("Description")
  description: option<deviceDescription>,
  @ocaml.doc("<p>Amazon Resource Name (ARN) of the device.</p>") @as("DeviceArn")
  deviceArn: deviceArn,
  @ocaml.doc("<p>The unique identifier of the device.</p>") @as("DeviceName")
  deviceName: entityName,
}
type debugRuleConfigurations = array<debugRuleConfiguration>
@ocaml.doc("<p>Describes the location of the channel data.</p>")
type dataSource = {
  @ocaml.doc("<p>The file system that is associated with a channel.</p>")
  @as("FileSystemDataSource")
  fileSystemDataSource: option<fileSystemDataSource>,
  @ocaml.doc("<p>The S3 location of the data source that is associated with a channel.</p>")
  @as("S3DataSource")
  s3DataSource: option<s3DataSource>,
}
@ocaml.doc("<p></p>")
type dataCaptureConfig = {
  @ocaml.doc("<p></p>") @as("CaptureContentTypeHeader")
  captureContentTypeHeader: option<captureContentTypeHeader>,
  @ocaml.doc("<p></p>") @as("CaptureOptions") captureOptions: captureOptionList,
  @ocaml.doc("<p></p>") @as("KmsKeyId") kmsKeyId: option<kmsKeyId>,
  @ocaml.doc("<p></p>") @as("DestinationS3Uri") destinationS3Uri: destinationS3Uri,
  @ocaml.doc("<p></p>") @as("InitialSamplingPercentage")
  initialSamplingPercentage: samplingPercentage,
  @ocaml.doc("<p></p>") @as("EnableCapture") enableCapture: option<enableCapture>,
}
type contextSummaries = array<contextSummary>
@ocaml.doc("<p>Describes the container, as part of model definition.</p>")
type containerDefinition = {
  @ocaml.doc("<p>Specifies additional configuration for multi-model endpoints.</p>")
  @as("MultiModelConfig")
  multiModelConfig: option<multiModelConfig>,
  @ocaml.doc("<p>The inference specification name in the model package version.</p>")
  @as("InferenceSpecificationName")
  inferenceSpecificationName: option<inferenceSpecificationName>,
  @ocaml.doc("<p>The name or Amazon Resource Name (ARN) of the model package to use to create the
            model.</p>")
  @as("ModelPackageName")
  modelPackageName: option<versionedArnOrName>,
  @ocaml.doc("<p>The environment variables to set in the Docker container. Each key and value in the
                <code>Environment</code> string to string map can have length of up to 1024. We
            support up to 16 entries in the map. </p>")
  @as("Environment")
  environment: option<environmentMap>,
  @ocaml.doc("<p>The S3 path where the model artifacts, which result from model training, are stored.
            This path must point to a single gzip compressed tar archive (.tar.gz suffix). The S3
            path is required for Amazon SageMaker built-in algorithms, but not if you use your own algorithms.
            For more information on built-in algorithms, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html\">Common
                Parameters</a>. </p>
        <note>
            <p>The model artifacts must be in an S3 bucket that is in the same region as the
                model or endpoint you are creating.</p>
        </note>
        <p>If you provide a value for this parameter, Amazon SageMaker uses Amazon Web Services Security Token Service to
            download model artifacts from the S3 path you provide. Amazon Web Services STS is activated in your
            IAM user account by default. If you previously deactivated Amazon Web Services STS for a region, you
            need to reactivate Amazon Web Services STS for that region. For more information, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html\">Activating and
                Deactivating Amazon Web Services STS in an Amazon Web Services Region</a> in the <i>Amazon Web Services Identity and Access Management User
                Guide</i>.</p>
        <important>
            <p>If you use a built-in algorithm to create a model, Amazon SageMaker requires that you provide
                a S3 path to the model artifacts in <code>ModelDataUrl</code>.</p>
        </important>")
  @as("ModelDataUrl")
  modelDataUrl: option<url>,
  @ocaml.doc("<p>Whether the container hosts a single model or multiple models.</p>") @as("Mode")
  mode: option<containerMode>,
  @ocaml.doc("<p>Specifies whether the model container is in Amazon ECR or a private Docker registry
            accessible from your Amazon Virtual Private Cloud (VPC). For information about storing containers in a
            private Docker registry, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html\">Use a
                Private Docker Registry for Real-Time Inference Containers</a>
        </p>")
  @as("ImageConfig")
  imageConfig: option<imageConfig>,
  @ocaml.doc("<p>The path where inference code is stored. This can be either in Amazon EC2 Container Registry or in a
            Docker registry that is accessible from the same VPC that you configure for your
            endpoint. If you are using your own custom algorithm instead of an algorithm provided by
            Amazon SageMaker, the inference code must meet Amazon SageMaker requirements. Amazon SageMaker supports both
                <code>registry/repository[:tag]</code> and <code>registry/repository[@digest]</code>
            image path formats. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html\">Using Your Own Algorithms with Amazon
                SageMaker</a>
        </p>")
  @as("Image")
  image: option<containerImage>,
  @ocaml.doc("<p>This parameter is ignored for models that contain only a
            <code>PrimaryContainer</code>.</p>
        <p>When a <code>ContainerDefinition</code> is part of an inference pipeline, the value of
            the parameter uniquely identifies the container for the purposes of logging and metrics.
            For information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-logs-metrics.html\">Use Logs and Metrics
                to Monitor an Inference Pipeline</a>. If you don't specify a value for this
            parameter for a <code>ContainerDefinition</code> that is part of an inference pipeline,
            a unique name is automatically assigned based on the position of the
                <code>ContainerDefinition</code> in the pipeline. If you specify a value for the
                <code>ContainerHostName</code> for any <code>ContainerDefinition</code> that is part
            of an inference pipeline, you must specify a value for the
                <code>ContainerHostName</code> parameter of every <code>ContainerDefinition</code>
            in that pipeline.</p>")
  @as("ContainerHostname")
  containerHostname: option<containerHostname>,
}
type collectionConfigurations = array<collectionConfiguration>
type codeRepositorySummaryList = array<codeRepositorySummary>
type channelSpecifications = array<channelSpecification>
type categoricalParameters = array<categoricalParameter>
type categoricalParameterRanges = array<categoricalParameterRange>
@ocaml.doc("<p>The properties of an AutoML candidate job.</p>")
type candidateProperties = {
  @ocaml.doc("<p>Information about the candidate metrics for an AutoML job.</p>")
  @as("CandidateMetrics")
  candidateMetrics: option<metricDataList>,
  @ocaml.doc("<p>The Amazon S3 prefix to the artifacts generated for an AutoML candidate.</p>")
  @as("CandidateArtifactLocations")
  candidateArtifactLocations: option<candidateArtifactLocations>,
}
@ocaml.doc("<p>Metadata about a callback step.</p>")
type callbackStepMetadata = {
  @ocaml.doc("<p>A list of the output parameters of the callback step.</p>") @as("OutputParameters")
  outputParameters: option<outputParameterList>,
  @ocaml.doc(
    "<p>The URL of the Amazon Simple Queue Service (Amazon SQS) queue used by the callback step.</p>"
  )
  @as("SqsQueueUrl")
  sqsQueueUrl: option<string256>,
  @ocaml.doc("<p>The pipeline generated token from the Amazon SQS queue.</p>") @as("CallbackToken")
  callbackToken: option<callbackToken>,
}
@ocaml.doc("<p>Update policy for a blue/green deployment. If this update policy is specified, SageMaker
            creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips
            traffic to the new fleet according to the specified traffic routing configuration. Only
            one update policy should be used in the deployment configuration. If no update policy is
            specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting
            by default.</p>")
type blueGreenUpdatePolicy = {
  @ocaml.doc("<p>Maximum execution timeout for the deployment. Note that the timeout value should be larger
        than the total waiting time specified in <code>TerminationWaitInSeconds</code> and <code>WaitIntervalInSeconds</code>.</p>")
  @as("MaximumExecutionTimeoutInSeconds")
  maximumExecutionTimeoutInSeconds: option<maximumExecutionTimeoutInSeconds>,
  @ocaml.doc("<p>Additional waiting time in seconds after the completion of an endpoint deployment
            before terminating the old endpoint fleet. Default is 0.</p>")
  @as("TerminationWaitInSeconds")
  terminationWaitInSeconds: option<terminationWaitInSeconds>,
  @ocaml.doc("<p>Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet
            during an endpoint deployment.</p>")
  @as("TrafficRoutingConfiguration")
  trafficRoutingConfiguration: trafficRoutingConfig,
}
@ocaml.doc(
  "<p>Automatic rollback configuration for handling endpoint deployment failures and recovery.</p>"
)
type autoRollbackConfig = {
  @ocaml.doc("<p>List of CloudWatch alarms in your account that are configured to monitor metrics on an endpoint.
            If any alarms are tripped during a deployment, SageMaker rolls back the deployment.</p>")
  @as("Alarms")
  alarms: option<alarmList>,
}
@ocaml.doc("<p>Security options.</p>")
type autoMLSecurityConfig = {
  @ocaml.doc("<p>The VPC configuration.</p>") @as("VpcConfig") vpcConfig: option<vpcConfig>,
  @ocaml.doc("<p>Whether to use traffic encryption between the container layers.</p>")
  @as("EnableInterContainerTrafficEncryption")
  enableInterContainerTrafficEncryption: option<boolean_>,
  @ocaml.doc("<p>The key used to encrypt stored data.</p>") @as("VolumeKmsKeyId")
  volumeKmsKeyId: option<kmsKeyId>,
}
@ocaml.doc("<p>Provides a summary about an AutoML job.</p>")
type autoMLJobSummary = {
  @ocaml.doc("<p>The list of reasons for partial failures within an AutoML job.</p>")
  @as("PartialFailureReasons")
  partialFailureReasons: option<autoMLPartialFailureReasons>,
  @ocaml.doc("<p>The failure reason of an AutoML job.</p>") @as("FailureReason")
  failureReason: option<autoMLFailureReason>,
  @ocaml.doc("<p>When the AutoML job was last modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: timestamp_,
  @ocaml.doc("<p>The end time of an AutoML job.</p>") @as("EndTime") endTime: option<timestamp_>,
  @ocaml.doc("<p>When the AutoML job was created.</p>") @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc("<p>The secondary status of the AutoML job.</p>") @as("AutoMLJobSecondaryStatus")
  autoMLJobSecondaryStatus: autoMLJobSecondaryStatus,
  @ocaml.doc("<p>The status of the AutoML job.</p>") @as("AutoMLJobStatus")
  autoMLJobStatus: autoMLJobStatus,
  @ocaml.doc("<p>The ARN of the AutoML job.</p>") @as("AutoMLJobArn") autoMLJobArn: autoMLJobArn,
  @ocaml.doc("<p>The name of the AutoML job you are requesting.</p>") @as("AutoMLJobName")
  autoMLJobName: autoMLJobName,
}
type autoMLContainerDefinitions = array<autoMLContainerDefinition>
@ocaml.doc("<p>A channel is a named input source that training algorithms can consume. For more
         information, see .</p>")
type autoMLChannel = {
  @ocaml.doc("<p>The content type of the data from the input source. You can use
         <code>text/csv;header=present</code> or <code>x-application/vnd.amazon+parquet</code>.
         The default value is <code>text/csv;header=present</code>.</p>")
  @as("ContentType")
  contentType: option<contentType>,
  @ocaml.doc("<p>The name of the target variable in supervised learning, usually represented by
         'y'.</p>")
  @as("TargetAttributeName")
  targetAttributeName: targetAttributeName,
  @ocaml.doc("<p>You can use <code>Gzip</code> or <code>None</code>. The default value is
            <code>None</code>.</p>")
  @as("CompressionType")
  compressionType: option<compressionType>,
  @ocaml.doc("<p>The data source for an AutoML channel.</p>") @as("DataSource")
  dataSource: autoMLDataSource,
}
@ocaml.doc("<p>Specifies configuration for how an endpoint performs asynchronous inference.</p>")
type asyncInferenceConfig = {
  @ocaml.doc("<p>Specifies the configuration for asynchronous inference invocation outputs.</p>")
  @as("OutputConfig")
  outputConfig: asyncInferenceOutputConfig,
  @ocaml.doc("<p>Configures the behavior of the client used by Amazon SageMaker to interact 
            with the model container during asynchronous inference.</p>")
  @as("ClientConfig")
  clientConfig: option<asyncInferenceClientConfig>,
}
type associationSummaries = array<associationSummary>
@ocaml.doc("<p>A structure describing the source of an artifact.</p>")
type artifactSource = {
  @ocaml.doc("<p>A list of source types.</p>") @as("SourceTypes")
  sourceTypes: option<artifactSourceTypes>,
  @ocaml.doc("<p>The URI of the source.</p>") @as("SourceUri") sourceUri: string2048,
}
@ocaml.doc("<p>Specifies the validation and image scan statuses of the algorithm.</p>")
type algorithmStatusDetails = {
  @ocaml.doc("<p>The status of the scan of the algorithm's Docker image container.</p>")
  @as("ImageScanStatuses")
  imageScanStatuses: option<algorithmStatusItemList>,
  @ocaml.doc("<p>The status of algorithm validation.</p>") @as("ValidationStatuses")
  validationStatuses: option<algorithmStatusItemList>,
}
@ocaml.doc("<p>Specifies the training algorithm to use in a <a>CreateTrainingJob</a>
            request.</p>
        <p>For more information about algorithms provided by Amazon SageMaker, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html\">Algorithms</a>. For
            information about using your own algorithms, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html\">Using Your Own Algorithms with Amazon
                SageMaker</a>. </p>")
type algorithmSpecification = {
  @ocaml.doc("<p>To generate and save time-series metrics during training, set to <code>true</code>.
            The default is <code>false</code> and time-series metrics aren't generated except in the
            following cases:</p>
        <ul>
            <li>
                <p>You use one of the Amazon SageMaker built-in algorithms</p>
            </li>
            <li>
                <p>You use one of the following <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/pre-built-containers-frameworks-deep-learning.html\">Prebuilt Amazon SageMaker Docker Images</a>:</p>
                <ul>
                  <li>
                        <p>Tensorflow (version >= 1.15)</p>
                    </li>
                  <li>
                        <p>MXNet (version >= 1.6)</p>
                    </li>
                  <li>
                        <p>PyTorch (version >= 1.3)</p>
                    </li>
               </ul>
            </li>
            <li>
                <p>You specify at least one <a>MetricDefinition</a>
               </p>
            </li>
         </ul>")
  @as("EnableSageMakerMetricsTimeSeries")
  enableSageMakerMetricsTimeSeries: option<boolean_>,
  @ocaml.doc("<p>A list of metric definition objects. Each object specifies the metric name and regular
            expressions used to parse algorithm logs. Amazon SageMaker publishes each metric to Amazon CloudWatch.</p>")
  @as("MetricDefinitions")
  metricDefinitions: option<metricDefinitionList>,
  @as("TrainingInputMode") trainingInputMode: trainingInputMode,
  @ocaml.doc("<p>The name of the algorithm resource to use for the training job. This must be an
            algorithm resource that you created or subscribe to on Amazon Web Services Marketplace. If you specify a value for
            this parameter, you can't specify a value for <code>TrainingImage</code>.</p>")
  @as("AlgorithmName")
  algorithmName: option<arnOrName>,
  @ocaml.doc("<p>The registry path of the Docker image
             that contains the training algorithm.
            For information about docker registry paths for built-in algorithms, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html\">Algorithms
                Provided by Amazon SageMaker: Common Parameters</a>. Amazon SageMaker supports both
                <code>registry/repository[:tag]</code> and <code>registry/repository[@digest]</code>
            image path formats. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html\">Using Your Own Algorithms with Amazon
                SageMaker</a>.</p>")
  @as("TrainingImage")
  trainingImage: option<algorithmImage>,
}
type actionSummaries = array<actionSummary>
type workforces = array<workforce>
@ocaml.doc("<p>A collection of settings that apply to users of Amazon SageMaker Studio. These settings are
      specified when the <code>CreateUserProfile</code> API is called, and as <code>DefaultUserSettings</code>
      when the <code>CreateDomain</code> API is called.</p>
         <p>
            <code>SecurityGroups</code> is aggregated when specified in both calls. For all other
     settings in <code>UserSettings</code>, the values specified in <code>CreateUserProfile</code>
     take precedence over those specified in <code>CreateDomain</code>.</p>")
type userSettings = {
  @ocaml.doc("<p>A collection of settings that configure the <code>RSessionGateway</code> app.</p>")
  @as("RSessionAppSettings")
  rsessionAppSettings: option<rsessionAppSettings>,
  @ocaml.doc(
    "<p>A collection of settings that configure user interaction with the <code>RStudioServerPro</code> app.</p>"
  )
  @as("RStudioServerProAppSettings")
  rstudioServerProAppSettings: option<rstudioServerProAppSettings>,
  @ocaml.doc("<p>The TensorBoard app settings.</p>") @as("TensorBoardAppSettings")
  tensorBoardAppSettings: option<tensorBoardAppSettings>,
  @ocaml.doc("<p>The kernel gateway app settings.</p>") @as("KernelGatewayAppSettings")
  kernelGatewayAppSettings: option<kernelGatewayAppSettings>,
  @ocaml.doc("<p>The Jupyter server's app settings.</p>") @as("JupyterServerAppSettings")
  jupyterServerAppSettings: option<jupyterServerAppSettings>,
  @ocaml.doc("<p>Specifies options for sharing SageMaker Studio notebooks.</p>")
  @as("SharingSettings")
  sharingSettings: option<sharingSettings>,
  @ocaml.doc("<p>The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.</p>
         <p>Optional when the <code>CreateDomain.AppNetworkAccessType</code> parameter is set to
         <code>PublicInternetOnly</code>.</p>
         <p>Required when the <code>CreateDomain.AppNetworkAccessType</code> parameter is set to
         <code>VpcOnly</code>.</p>
         <p>Amazon SageMaker adds a security group to allow NFS traffic from SageMaker Studio. Therefore, the
         number of security groups that you can specify is one less than the maximum number shown.</p>")
  @as("SecurityGroups")
  securityGroups: option<securityGroupIds>,
  @ocaml.doc("<p>The execution role for the user.</p>") @as("ExecutionRole")
  executionRole: option<roleArn>,
}
@ocaml.doc("<p>The properties of a trial as returned by the <a>Search</a> API.</p>")
type trial = {
  @ocaml.doc("<p>A list of the components associated with the trial. For each component, a summary of the
      component's properties is included.</p>")
  @as("TrialComponentSummaries")
  trialComponentSummaries: option<trialComponentSimpleSummaries>,
  @ocaml.doc("<p>The list of tags that are associated with the trial. You can use <a>Search</a>
      API to search on the tags.</p>")
  @as("Tags")
  tags: option<tagList_>,
  @as("MetadataProperties") metadataProperties: option<metadataProperties>,
  @as("LastModifiedBy") lastModifiedBy: option<userContext>,
  @ocaml.doc("<p>Who last modified the trial.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>Who created the trial.</p>") @as("CreatedBy") createdBy: option<userContext>,
  @ocaml.doc("<p>When the trial was created.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @as("Source") source: option<trialSource>,
  @ocaml.doc("<p>The name of the experiment the trial is part of.</p>") @as("ExperimentName")
  experimentName: option<experimentEntityName>,
  @ocaml.doc("<p>The name of the trial as displayed. If <code>DisplayName</code> isn't specified,
        <code>TrialName</code> is displayed.</p>")
  @as("DisplayName")
  displayName: option<experimentEntityName>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the trial.</p>") @as("TrialArn")
  trialArn: option<trialArn>,
  @ocaml.doc("<p>The name of the trial.</p>") @as("TrialName")
  trialName: option<experimentEntityName>,
}
@ocaml.doc("<p>Defines the input needed to run a transform job using the inference specification
            specified in the algorithm.</p>")
type transformJobDefinition = {
  @ocaml.doc("<p>Identifies the ML compute instances for the transform job.</p>")
  @as("TransformResources")
  transformResources: transformResources,
  @ocaml.doc("<p>Identifies the Amazon S3 location where you want Amazon SageMaker to save the results
            from the transform job.</p>")
  @as("TransformOutput")
  transformOutput: transformOutput,
  @ocaml.doc("<p>A description of the input source and the way the transform job consumes it.</p>")
  @as("TransformInput")
  transformInput: transformInput,
  @ocaml.doc("<p>The environment variables to set in the Docker container. We support up to 16 key and
            values entries in the map.</p>")
  @as("Environment")
  environment: option<transformEnvironmentMap>,
  @ocaml.doc("<p>A string that determines the number of records included in a single mini-batch.</p>
        <p>
            <code>SingleRecord</code> means only one record is used per mini-batch.
                <code>MultiRecord</code> means a mini-batch is set to contain as many records that
            can fit within the <code>MaxPayloadInMB</code> limit.</p>")
  @as("BatchStrategy")
  batchStrategy: option<batchStrategy>,
  @ocaml.doc("<p>The maximum payload size allowed, in MB. A payload is the data portion of a record
            (without metadata).</p>")
  @as("MaxPayloadInMB")
  maxPayloadInMB: option<maxPayloadInMB>,
  @ocaml.doc("<p>The maximum number of parallel requests that can be sent to each instance in a
            transform job. The default value is 1.</p>")
  @as("MaxConcurrentTransforms")
  maxConcurrentTransforms: option<maxConcurrentTransforms>,
}
@ocaml.doc("<p>A batch transform job. For information about SageMaker batch transform, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html\">Use Batch
        Transform</a>.</p>")
type transformJob = {
  @ocaml.doc("<p>A list of tags associated with the transform job.</p>") @as("Tags")
  tags: option<tagList_>,
  @as("ExperimentConfig") experimentConfig: option<experimentConfig>,
  @as("DataProcessing") dataProcessing: option<dataProcessing>,
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the AutoML job that created the transform job.</p>"
  )
  @as("AutoMLJobArn")
  autoMLJobArn: option<autoMLJobArn>,
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the  labeling job that created the transform job.</p>"
  )
  @as("LabelingJobArn")
  labelingJobArn: option<labelingJobArn>,
  @ocaml.doc("<p>Indicates when the transform job has been completed, or has stopped or failed. You are
      billed for the time interval between this time and the value of
        <code>TransformStartTime</code>.</p>")
  @as("TransformEndTime")
  transformEndTime: option<timestamp_>,
  @ocaml.doc("<p>Indicates when the transform job starts on ML instances. You are billed for the time
      interval between this time and the value of <code>TransformEndTime</code>.</p>")
  @as("TransformStartTime")
  transformStartTime: option<timestamp_>,
  @ocaml.doc("<p>A timestamp that shows when the transform Job was created.</p>")
  @as("CreationTime")
  creationTime: option<timestamp_>,
  @as("TransformResources") transformResources: option<transformResources>,
  @as("TransformOutput") transformOutput: option<transformOutput>,
  @as("TransformInput") transformInput: option<transformInput>,
  @ocaml.doc("<p>The environment variables to set in the Docker container. We support up to 16 key and
      values entries in the map.</p>")
  @as("Environment")
  environment: option<transformEnvironmentMap>,
  @ocaml.doc("<p>Specifies the number of records to include in a mini-batch for an HTTP inference request.
      A record is a single unit of input data that inference can be made on. For example, a single
      line in a CSV file is a record.</p>")
  @as("BatchStrategy")
  batchStrategy: option<batchStrategy>,
  @ocaml.doc("<p>The maximum allowed size of the payload, in MB. A payload is the data portion of a record
      (without metadata). The value in <code>MaxPayloadInMB</code> must be greater than, or equal
      to, the size of a single record. To estimate the size of a record in MB, divide the size of
      your dataset by the number of records. To ensure that the records fit within the maximum
      payload size, we recommend using a slightly larger value. The default value is 6 MB. For cases
      where the payload might be arbitrarily large and is transmitted using HTTP chunked encoding,
      set the value to 0. This feature works only in supported algorithms. Currently, SageMaker built-in
      algorithms do not support HTTP chunked encoding.</p>")
  @as("MaxPayloadInMB")
  maxPayloadInMB: option<maxPayloadInMB>,
  @as("ModelClientConfig") modelClientConfig: option<modelClientConfig>,
  @ocaml.doc("<p>The maximum number of parallel requests that can be sent to each instance in a transform
      job. If <code>MaxConcurrentTransforms</code> is set to 0 or left unset, SageMaker checks the
      optional execution-parameters to determine the settings for your chosen algorithm. If the
      execution-parameters endpoint is not enabled, the default value is 1. For built-in algorithms,
      you don't need to set a value for <code>MaxConcurrentTransforms</code>.</p>")
  @as("MaxConcurrentTransforms")
  maxConcurrentTransforms: option<maxConcurrentTransforms>,
  @ocaml.doc("<p>The name of the model associated with the transform job.</p>") @as("ModelName")
  modelName: option<modelName>,
  @ocaml.doc("<p>If the transform job failed, the reason it failed.</p>") @as("FailureReason")
  failureReason: option<failureReason>,
  @ocaml.doc("<p>The status of the transform job.</p>
         <p>Transform job statuses are:</p>
         <ul>
            <li>
               <p>
                  <code>InProgress</code> - The job is in progress.</p>
            </li>
            <li>
               <p>
                  <code>Completed</code> - The job has completed.</p>
            </li>
            <li>
               <p>
                  <code>Failed</code> - The transform job has failed. To see the reason for the failure,
          see the <code>FailureReason</code> field in the response to a
            <code>DescribeTransformJob</code> call.</p>
            </li>
            <li>
               <p>
                  <code>Stopping</code> - The transform job is stopping.</p>
            </li>
            <li>
               <p>
                  <code>Stopped</code> - The transform job has stopped.</p>
            </li>
         </ul>")
  @as("TransformJobStatus")
  transformJobStatus: option<transformJobStatus>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the transform job.</p>") @as("TransformJobArn")
  transformJobArn: option<transformJobArn>,
  @ocaml.doc("<p>The name of the transform job.</p>") @as("TransformJobName")
  transformJobName: option<transformJobName>,
}
@ocaml.doc("<p>The properties of a project as returned by the Search API.</p>")
type project = {
  @as("LastModifiedBy") lastModifiedBy: option<userContext>,
  @ocaml.doc("<p>A timestamp container for when the project was last modified.</p>")
  @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
            different ways, for example, by purpose, owner, or environment. For more information,
            see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
                Resources</a>.</p>")
  @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>A timestamp specifying when the project was created.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>Who created the project.</p>") @as("CreatedBy") createdBy: option<userContext>,
  @ocaml.doc("<p>The status of the project.</p>") @as("ProjectStatus")
  projectStatus: option<projectStatus>,
  @as("ServiceCatalogProvisionedProductDetails")
  serviceCatalogProvisionedProductDetails: option<serviceCatalogProvisionedProductDetails>,
  @as("ServiceCatalogProvisioningDetails")
  serviceCatalogProvisioningDetails: option<serviceCatalogProvisioningDetails>,
  @ocaml.doc("<p>The description of the project.</p>") @as("ProjectDescription")
  projectDescription: option<entityDescription>,
  @ocaml.doc("<p>The ID of the project.</p>") @as("ProjectId") projectId: option<projectId>,
  @ocaml.doc("<p>The name of the project.</p>") @as("ProjectName")
  projectName: option<projectEntityName>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the project.</p>") @as("ProjectArn")
  projectArn: option<projectArn>,
}
type productionVariantSummaryList = array<productionVariantSummary>
@ocaml.doc("<p>Configuration for uploading output from the processing container.</p>")
type processingOutputConfig = {
  @ocaml.doc("<p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the processing
            job output. <code>KmsKeyId</code> can be an ID of a KMS key, ARN of a KMS key, alias of
            a KMS key, or alias of a KMS key. The <code>KmsKeyId</code> is applied to all
            outputs.</p>")
  @as("KmsKeyId")
  kmsKeyId: option<kmsKeyId>,
  @ocaml.doc(
    "<p>An array of outputs configuring the data to upload from the processing container.</p>"
  )
  @as("Outputs")
  outputs: processingOutputs,
}
type processingInputs = array<processingInput>
@ocaml.doc("<p>Metadata for a step execution.</p>")
type pipelineExecutionStepMetadata = {
  @ocaml.doc("<p>The configurations and outcomes of a Fail step execution.</p>") @as("Fail")
  fail: option<failStepMetadata>,
  @ocaml.doc("<p>The configurations and outcomes of an EMR step execution.</p>") @as("EMR")
  emr: option<emrstepMetadata>,
  @ocaml.doc("<p>Container for the metadata for a Clarify check step. The configurations 
         and outcomes of the check step execution. This includes: </p>
         <ul>
            <li>
               <p>The type of the check conducted,</p>
            </li>
            <li>
               <p>The Amazon S3 URIs of baseline constraints and statistics files to be used for the drift check.</p>
            </li>
            <li>
               <p>The Amazon S3 URIs of newly calculated baseline constraints and statistics.</p>
            </li>
            <li>
               <p>The model package group name provided.</p>
            </li>
            <li>
               <p>The Amazon S3 URI of the violation report if violations detected.</p>
            </li>
            <li>
               <p>The Amazon Resource Name (ARN) of check processing job initiated by the step execution.</p>
            </li>
            <li>
               <p>The boolean flags indicating if the drift check is skipped.</p>
            </li>
            <li>
               <p>If step property <code>BaselineUsedForDriftCheck</code> is set the same as 
               <code>CalculatedBaseline</code>.</p>
            </li>
         </ul>")
  @as("ClarifyCheck")
  clarifyCheck: option<clarifyCheckStepMetadata>,
  @ocaml.doc("<p>The configurations and outcomes of the check step execution. This includes: </p>
         <ul>
            <li>
               <p>The type of the check conducted,</p>
            </li>
            <li>
               <p>The Amazon S3 URIs of baseline constraints and statistics files to be used for the drift check.</p>
            </li>
            <li>
               <p>The Amazon S3 URIs of newly calculated baseline constraints and statistics.</p>
            </li>
            <li>
               <p>The model package group name provided.</p>
            </li>
            <li>
               <p>The Amazon S3 URI of the violation report if violations detected.</p>
            </li>
            <li>
               <p>The Amazon Resource Name (ARN) of check processing job initiated by the step execution.</p>
            </li>
            <li>
               <p>The boolean flags indicating if the drift check is skipped.</p>
            </li>
            <li>
               <p>If step property <code>BaselineUsedForDriftCheck</code> is set the same as 
            <code>CalculatedBaseline</code>.</p>
            </li>
         </ul>")
  @as("QualityCheck")
  qualityCheck: option<qualityCheckStepMetadata>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Lambda function that was run by this step execution and a list of
        output parameters.</p>")
  @as("Lambda")
  lambda: option<lambdaStepMetadata>,
  @ocaml.doc("<p>The URL of the Amazon SQS queue used by this step execution, the pipeline generated token,
        and a list of output parameters.</p>")
  @as("Callback")
  callback: option<callbackStepMetadata>,
  @ocaml.doc("<p>The outcome of the condition evaluation that was run by this step execution.</p>")
  @as("Condition")
  condition: option<conditionStepMetadata>,
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the model package the model was registered to by this step execution.</p>"
  )
  @as("RegisterModel")
  registerModel: option<registerModelStepMetadata>,
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the model that was created by this step execution.</p>"
  )
  @as("Model")
  model: option<modelStepMetadata>,
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the tuning job that was run by this step execution.</p>"
  )
  @as("TuningJob")
  tuningJob: option<tuningJobStepMetaData>,
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the transform job that was run by this step execution.</p>"
  )
  @as("TransformJob")
  transformJob: option<transformJobStepMetadata>,
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the processing job that was run by this step execution.</p>"
  )
  @as("ProcessingJob")
  processingJob: option<processingJobStepMetadata>,
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the training job that was run by this step execution.</p>"
  )
  @as("TrainingJob")
  trainingJob: option<trainingJobStepMetadata>,
}
type pendingProductionVariantSummaryList = array<pendingProductionVariantSummary>
@ocaml.doc("<p>Specifies ranges of integer, continuous, and categorical hyperparameters that a
            hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs
            with hyperparameter values within these ranges to find the combination of values that
            result in the training job with the best performance as measured by the objective metric
            of the hyperparameter tuning job.</p>
        <note>
            <p>You can specify a maximum of 20 hyperparameters that a hyperparameter tuning job
                can search over. Every possible value of a categorical parameter range counts
                against this limit.</p>
        </note>")
type parameterRanges = {
  @ocaml.doc("<p>The array of <a>CategoricalParameterRange</a> objects that specify ranges
            of categorical hyperparameters that a hyperparameter tuning job searches.</p>")
  @as("CategoricalParameterRanges")
  categoricalParameterRanges: option<categoricalParameterRanges>,
  @ocaml.doc("<p>The array of <a>ContinuousParameterRange</a> objects that specify ranges of
            continuous hyperparameters that a hyperparameter tuning job searches.</p>")
  @as("ContinuousParameterRanges")
  continuousParameterRanges: option<continuousParameterRanges>,
  @ocaml.doc("<p>The array of <a>IntegerParameterRange</a> objects that specify ranges of
            integer hyperparameters that a hyperparameter tuning job searches.</p>")
  @as("IntegerParameterRanges")
  integerParameterRanges: option<integerParameterRanges>,
}
type nestedFiltersList = array<nestedFilters>
@ocaml.doc("<p>The output configuration for monitoring jobs.</p>")
type monitoringOutputConfig = {
  @ocaml.doc("<p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the model
         artifacts at rest using Amazon S3 server-side encryption.</p>")
  @as("KmsKeyId")
  kmsKeyId: option<kmsKeyId>,
  @ocaml.doc("<p>Monitoring outputs for monitoring jobs. This is where the output of the periodic
         monitoring jobs is uploaded.</p>")
  @as("MonitoringOutputs")
  monitoringOutputs: monitoringOutputs,
}
type memberDefinitions = array<memberDefinition>
@ocaml.doc("<p>Provides summary information about a labeling job.</p>")
type labelingJobSummary = {
  @ocaml.doc("<p>Input configuration for the labeling job.</p>") @as("InputConfig")
  inputConfig: option<labelingJobInputConfig>,
  @ocaml.doc("<p>The location of the output produced by the labeling job.</p>")
  @as("LabelingJobOutput")
  labelingJobOutput: option<labelingJobOutput>,
  @ocaml.doc("<p>If the <code>LabelingJobStatus</code> field is <code>Failed</code>, this field
            contains a description of the error.</p>")
  @as("FailureReason")
  failureReason: option<failureReason>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Lambda function used to consolidate the
            annotations from individual workers into a label for a data object. For more
            information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-annotation-consolidation.html\">Annotation
                Consolidation</a>.</p>")
  @as("AnnotationConsolidationLambdaArn")
  annotationConsolidationLambdaArn: option<lambdaFunctionArn>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of a Lambda function. The function is run before each
            data object is sent to a worker.</p>")
  @as("PreHumanTaskLambdaArn")
  preHumanTaskLambdaArn: lambdaFunctionArn,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the work team assigned to the job.</p>")
  @as("WorkteamArn")
  workteamArn: workteamArn,
  @ocaml.doc("<p>Counts showing the progress of the labeling job.</p>") @as("LabelCounters")
  labelCounters: labelCounters,
  @ocaml.doc("<p>The current status of the labeling job. </p>") @as("LabelingJobStatus")
  labelingJobStatus: labelingJobStatus,
  @ocaml.doc("<p>The date and time that the job was last modified (timestamp).</p>")
  @as("LastModifiedTime")
  lastModifiedTime: timestamp_,
  @ocaml.doc("<p>The date and time that the job was created (timestamp).</p>") @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) assigned to the labeling job when it was
            created.</p>")
  @as("LabelingJobArn")
  labelingJobArn: labelingJobArn,
  @ocaml.doc("<p>The name of the labeling job.</p>") @as("LabelingJobName")
  labelingJobName: labelingJobName,
}
@ocaml.doc("<p>Defines how to perform inference generation after a training job is run.</p>")
type inferenceSpecification = {
  @ocaml.doc("<p>The supported MIME types for the output data.</p>")
  @as("SupportedResponseMIMETypes")
  supportedResponseMIMETypes: responseMIMETypes,
  @ocaml.doc("<p>The supported MIME types for the input data.</p>") @as("SupportedContentTypes")
  supportedContentTypes: contentTypes,
  @ocaml.doc("<p>A list of the instance types that are used to generate inferences in real-time.</p>
        <p>This parameter is required for unversioned models, and optional for versioned
            models.</p>")
  @as("SupportedRealtimeInferenceInstanceTypes")
  supportedRealtimeInferenceInstanceTypes: option<realtimeInferenceInstanceTypes>,
  @ocaml.doc("<p>A list of the instance types on which a transformation job can be run or on which an
            endpoint can be deployed.</p>
        <p>This parameter is required for unversioned models, and optional for versioned
            models.</p>")
  @as("SupportedTransformInstanceTypes")
  supportedTransformInstanceTypes: option<transformInstanceTypes>,
  @ocaml.doc(
    "<p>The Amazon ECR registry path of the Docker image that contains the inference code.</p>"
  )
  @as("Containers")
  containers: modelPackageContainerDefinitionList,
}
@ocaml.doc("<p>A list of recommendations made by Amazon SageMaker Inference Recommender.</p>")
type inferenceRecommendation = {
  @ocaml.doc("<p>Defines the model configuration.</p>") @as("ModelConfiguration")
  modelConfiguration: modelConfiguration,
  @ocaml.doc("<p>Defines the endpoint configuration parameters.</p>") @as("EndpointConfiguration")
  endpointConfiguration: endpointOutputConfiguration,
  @ocaml.doc("<p>The metrics used to decide what recommendation to make.</p>") @as("Metrics")
  metrics: recommendationMetrics,
}
@ocaml.doc("<p>Defines a hyperparameter to be used by an algorithm.</p>")
type hyperParameterSpecification = {
  @ocaml.doc("<p>The default value for this hyperparameter. If a default value is specified, a
            hyperparameter cannot be required.</p>")
  @as("DefaultValue")
  defaultValue: option<hyperParameterValue>,
  @ocaml.doc("<p>Indicates whether this hyperparameter is required.</p>") @as("IsRequired")
  isRequired: option<boolean_>,
  @ocaml.doc("<p>Indicates whether this hyperparameter is tunable in a hyperparameter tuning
            job.</p>")
  @as("IsTunable")
  isTunable: option<boolean_>,
  @ocaml.doc("<p>The allowed range for this hyperparameter.</p>") @as("Range")
  range: option<parameterRange>,
  @ocaml.doc("<p>The type of this hyperparameter. The valid types are <code>Integer</code>,
                <code>Continuous</code>, <code>Categorical</code>, and <code>FreeText</code>.</p>")
  @as("Type")
  type_: parameterType,
  @ocaml.doc("<p>A brief description of the hyperparameter.</p>") @as("Description")
  description: option<entityDescription>,
  @ocaml.doc("<p>The name of this hyperparameter. The name must be unique.</p>") @as("Name")
  name: parameterName,
}
@ocaml.doc("<p>Specifies the range of environment parameters</p>")
type environmentParameterRanges = {
  @ocaml.doc("<p>Specified a list of parameters for each category.</p>")
  @as("CategoricalParameterRanges")
  categoricalParameterRanges: option<categoricalParameters>,
}
type deviceSummaries = array<deviceSummary>
@ocaml.doc("<p>The deployment configuration for an endpoint, which contains the desired deployment
            strategy and rollback configurations.</p>")
type deploymentConfig = {
  @ocaml.doc(
    "<p>Automatic rollback configuration for handling endpoint deployment failures and recovery.</p>"
  )
  @as("AutoRollbackConfiguration")
  autoRollbackConfiguration: option<autoRollbackConfig>,
  @ocaml.doc("<p>Update policy for a blue/green deployment. If this update policy is specified, SageMaker
            creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips
            traffic to the new fleet according to the specified traffic routing configuration. Only
            one update policy should be used in the deployment configuration. If no update policy is
            specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting
            by default.</p>")
  @as("BlueGreenUpdatePolicy")
  blueGreenUpdatePolicy: blueGreenUpdatePolicy,
}
@ocaml.doc("<p>Configuration information for the Debugger hook parameters, metric and tensor collections, and
            storage paths. To learn more about
            how to configure the <code>DebugHookConfig</code> parameter, 
            see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html\">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.</p>")
type debugHookConfig = {
  @ocaml.doc("<p>Configuration information for Debugger tensor collections. To learn more about
            how to configure the <code>CollectionConfiguration</code> parameter, 
            see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html\">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>.
        </p>")
  @as("CollectionConfigurations")
  collectionConfigurations: option<collectionConfigurations>,
  @ocaml.doc("<p>Configuration information for the Debugger hook parameters.</p>")
  @as("HookParameters")
  hookParameters: option<hookParameters>,
  @ocaml.doc("<p>Path to Amazon S3 storage location for metrics and tensors.</p>")
  @as("S3OutputPath")
  s3OutputPath: s3Uri,
  @ocaml.doc("<p>Path to local storage location for metrics and tensors. Defaults to
                <code>/opt/ml/output/tensors/</code>.</p>")
  @as("LocalPath")
  localPath: option<directoryPath>,
}
type containerDefinitionList = array<containerDefinition>
@ocaml.doc("<p>A channel is a named input source that training algorithms can consume. </p>")
type channel = {
  @ocaml.doc("<p>A configuration for a shuffle option for input data in a channel. If you use
                <code>S3Prefix</code> for <code>S3DataType</code>, this shuffles the results of the
            S3 key prefix matches. If you use <code>ManifestFile</code>, the order of the S3 object
            references in the <code>ManifestFile</code> is shuffled. If you use
                <code>AugmentedManifestFile</code>, the order of the JSON lines in the
                <code>AugmentedManifestFile</code> is shuffled. The shuffling order is determined
            using the <code>Seed</code> value.</p>
        <p>For Pipe input mode, shuffling is done at the start of every epoch. With large
            datasets this ensures that the order of the training data is different for each epoch,
            it helps reduce bias and possible overfitting. In a multi-node training job when
            ShuffleConfig is combined with <code>S3DataDistributionType</code> of
                <code>ShardedByS3Key</code>, the data is shuffled across nodes so that the content
            sent to a particular node on the first epoch might be sent to a different node on the
            second epoch.</p>")
  @as("ShuffleConfig")
  shuffleConfig: option<shuffleConfig>,
  @ocaml.doc("<p>(Optional) The input mode to use for the data channel in a training job. If you don't
            set a value for <code>InputMode</code>, Amazon SageMaker uses the value set for
                <code>TrainingInputMode</code>. Use this parameter to override the
                <code>TrainingInputMode</code> setting in a <a>AlgorithmSpecification</a>
            request when you have a channel that needs a different input mode from the training
            job's general setting. To download the data from Amazon Simple Storage Service (Amazon S3) to the provisioned ML
            storage volume, and mount the directory to a Docker volume, use <code>File</code> input
            mode. To stream data directly from Amazon S3 to the container, choose <code>Pipe</code> input
            mode.</p>
        <p>To use a model for incremental training, choose <code>File</code> input model.</p>")
  @as("InputMode")
  inputMode: option<trainingInputMode>,
  @ocaml.doc("<p></p>
        <p>Specify RecordIO as the value when input data is in raw format but the training
            algorithm requires the RecordIO format. In this case, Amazon SageMaker wraps each individual S3
            object in a RecordIO record. If the input data is already in RecordIO format, you don't
            need to set this attribute. For more information, see <a href=\"https://mxnet.apache.org/api/architecture/note_data_loading#data-format\">Create
                a Dataset Using RecordIO</a>. </p>
        <p>In File mode, leave this field unset or set it to None.</p>")
  @as("RecordWrapperType")
  recordWrapperType: option<recordWrapper>,
  @ocaml.doc("<p>If training data is compressed, the compression type. The default value is
                <code>None</code>. <code>CompressionType</code> is used only in Pipe input mode. In
            File mode, leave this field unset or set it to None.</p>")
  @as("CompressionType")
  compressionType: option<compressionType>,
  @ocaml.doc("<p>The MIME type of the data.</p>") @as("ContentType")
  contentType: option<contentType>,
  @ocaml.doc("<p>The location of the channel data.</p>") @as("DataSource") dataSource: dataSource,
  @ocaml.doc("<p>The name of the channel. </p>") @as("ChannelName") channelName: channelName,
}
type autoMLJobSummaries = array<autoMLJobSummary>
@ocaml.doc("<p>A collection of settings used for an AutoML job.</p>")
type autoMLJobConfig = {
  @ocaml.doc("<p>The security configuration for traffic encryption or Amazon VPC settings.</p>")
  @as("SecurityConfig")
  securityConfig: option<autoMLSecurityConfig>,
  @ocaml.doc("<p>How long an AutoML job is allowed to run, or how many candidates a job is allowed to
         generate.</p>")
  @as("CompletionCriteria")
  completionCriteria: option<autoMLJobCompletionCriteria>,
}
type autoMLInputDataConfig = array<autoMLChannel>
@ocaml.doc("<p>Information about a candidate produced by an AutoML training job, including its status,
         steps, and other properties.</p>")
type autoMLCandidate = {
  @ocaml.doc("<p>The properties of an AutoML candidate job.</p>") @as("CandidateProperties")
  candidateProperties: option<candidateProperties>,
  @ocaml.doc("<p>The failure reason.</p>") @as("FailureReason")
  failureReason: option<autoMLFailureReason>,
  @ocaml.doc("<p>The last modified time.</p>") @as("LastModifiedTime") lastModifiedTime: timestamp_,
  @ocaml.doc("<p>The end time.</p>") @as("EndTime") endTime: option<timestamp_>,
  @ocaml.doc("<p>The creation time.</p>") @as("CreationTime") creationTime: timestamp_,
  @ocaml.doc("<p>Information about the inference container definitions.</p>")
  @as("InferenceContainers")
  inferenceContainers: option<autoMLContainerDefinitions>,
  @ocaml.doc("<p>The candidate's status.</p>") @as("CandidateStatus")
  candidateStatus: candidateStatus,
  @ocaml.doc("<p>Information about the candidate's steps.</p>") @as("CandidateSteps")
  candidateSteps: candidateSteps,
  @ocaml.doc("<p>The objective's status.</p>") @as("ObjectiveStatus")
  objectiveStatus: objectiveStatus,
  @as("FinalAutoMLJobObjectiveMetric")
  finalAutoMLJobObjectiveMetric: option<finalAutoMLJobObjectiveMetric>,
  @ocaml.doc("<p>The name of the candidate.</p>") @as("CandidateName") candidateName: candidateName,
}
@ocaml.doc("<p>Lists a summary of the properties of an artifact. An artifact represents a URI
        addressable object or data. Some examples are a dataset and a model.</p>")
type artifactSummary = {
  @ocaml.doc("<p>When the artifact was last modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>When the artifact was created.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>The type of the artifact.</p>") @as("ArtifactType")
  artifactType: option<string256>,
  @ocaml.doc("<p>The source of the artifact.</p>") @as("Source") source: option<artifactSource>,
  @ocaml.doc("<p>The name of the artifact.</p>") @as("ArtifactName")
  artifactName: option<experimentEntityName>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the artifact.</p>") @as("ArtifactArn")
  artifactArn: option<artifactArn>,
}
@ocaml.doc("<p>The configuration for running a SageMaker image as a KernelGateway app.</p>")
type appImageConfigDetails = {
  @ocaml.doc("<p>The configuration for the file system and kernels in the SageMaker image.</p>")
  @as("KernelGatewayImageConfig")
  kernelGatewayImageConfig: option<kernelGatewayImageConfig>,
  @ocaml.doc("<p>When the AppImageConfig was last modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>When the AppImageConfig was created.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>The name of the AppImageConfig. Must be unique to your account.</p>")
  @as("AppImageConfigName")
  appImageConfigName: option<appImageConfigName>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the AppImageConfig.</p>")
  @as("AppImageConfigArn")
  appImageConfigArn: option<appImageConfigArn>,
}
@ocaml.doc("<p>A structure of additional Inference Specification. Additional Inference Specification 
            specifies details about inference jobs that can be run with models based on
            this model package</p>")
type additionalInferenceSpecificationDefinition = {
  @ocaml.doc("<p>The supported MIME types for the output data.</p>")
  @as("SupportedResponseMIMETypes")
  supportedResponseMIMETypes: option<responseMIMETypes>,
  @ocaml.doc("<p>The supported MIME types for the input data.</p>") @as("SupportedContentTypes")
  supportedContentTypes: option<contentTypes>,
  @ocaml.doc(
    "<p>A list of the instance types that are used to generate inferences in real-time.</p>"
  )
  @as("SupportedRealtimeInferenceInstanceTypes")
  supportedRealtimeInferenceInstanceTypes: option<realtimeInferenceInstanceTypes>,
  @ocaml.doc("<p>A list of the instance types on which a transformation job can be run 
           or on which an endpoint can be deployed.</p>")
  @as("SupportedTransformInstanceTypes")
  supportedTransformInstanceTypes: option<transformInstanceTypes>,
  @ocaml.doc(
    "<p>The Amazon ECR registry path of the Docker image that contains the inference code.</p>"
  )
  @as("Containers")
  containers: modelPackageContainerDefinitionList,
  @ocaml.doc("<p>A description of the additional Inference specification</p>") @as("Description")
  description: option<entityDescription>,
  @ocaml.doc("<p>A unique name to identify the additional inference specification. The name must 
           be unique within the list of your additional inference specifications for a 
           particular model package.</p>")
  @as("Name")
  name: entityName,
}
@ocaml.doc("<p>Provides details about a labeling work team.</p>")
type workteam = {
  @ocaml.doc("<p>Configures SNS notifications of available or expiring work items for work
            teams.</p>")
  @as("NotificationConfiguration")
  notificationConfiguration: option<notificationConfiguration>,
  @ocaml.doc("<p>The date and time that the work team was last updated (timestamp).</p>")
  @as("LastUpdatedDate")
  lastUpdatedDate: option<timestamp_>,
  @ocaml.doc("<p>The date and time that the work team was created (timestamp).</p>")
  @as("CreateDate")
  createDate: option<timestamp_>,
  @ocaml.doc("<p>The URI of the labeling job's user interface. Workers open this URI to start labeling
            your data objects.</p>")
  @as("SubDomain")
  subDomain: option<string_>,
  @ocaml.doc("<p>A description of the work team.</p>") @as("Description") description: string200,
  @ocaml.doc("<p>The Amazon Marketplace identifier for a vendor's work team.</p>")
  @as("ProductListingIds")
  productListingIds: option<productListings>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the workforce.</p>") @as("WorkforceArn")
  workforceArn: option<workforceArn>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) that identifies the work team.</p>")
  @as("WorkteamArn")
  workteamArn: workteamArn,
  @ocaml.doc("<p>A list of <code>MemberDefinition</code> objects that contains objects that identify
            the workers that make up the work team. </p>
        <p>Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). 
            For private workforces created using Amazon Cognito use
            <code>CognitoMemberDefinition</code>. For workforces created using your own OIDC identity
            provider (IdP) use <code>OidcMemberDefinition</code>.</p>")
  @as("MemberDefinitions")
  memberDefinitions: memberDefinitions,
  @ocaml.doc("<p>The name of the work team.</p>") @as("WorkteamName") workteamName: workteamName,
}
@ocaml.doc("<p>An Amazon SageMaker processing job that is used to analyze data and evaluate models. For more information,
            see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/processing-job.html\">Process
                Data and Evaluate Models</a>.</p>")
type processingJob = {
  @ocaml.doc("<p>An array of key-value pairs. For more information, see <a href=\"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL\">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
                User Guide</i>.</p>")
  @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The ARN of the training job associated with this processing job.</p>")
  @as("TrainingJobArn")
  trainingJobArn: option<trainingJobArn>,
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the AutoML job associated with this processing job.</p>"
  )
  @as("AutoMLJobArn")
  autoMLJobArn: option<autoMLJobArn>,
  @ocaml.doc("<p>The ARN of a monitoring schedule for an endpoint associated with this processing
            job.</p>")
  @as("MonitoringScheduleArn")
  monitoringScheduleArn: option<monitoringScheduleArn>,
  @ocaml.doc("<p>The time the processing job was created.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>The time the processing job was last modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>The time that the processing job started.</p>") @as("ProcessingStartTime")
  processingStartTime: option<timestamp_>,
  @ocaml.doc("<p>The time that the processing job ended.</p>") @as("ProcessingEndTime")
  processingEndTime: option<timestamp_>,
  @ocaml.doc("<p>A string, up to one KB in size, that contains the reason a processing job failed, if
            it failed.</p>")
  @as("FailureReason")
  failureReason: option<failureReason>,
  @ocaml.doc("<p>A string, up to one KB in size, that contains metadata from the processing
            container when the processing job exits.</p>")
  @as("ExitMessage")
  exitMessage: option<exitMessage>,
  @ocaml.doc("<p>The status of the processing job.</p>") @as("ProcessingJobStatus")
  processingJobStatus: option<processingJobStatus>,
  @ocaml.doc("<p>The ARN of the processing job.</p>") @as("ProcessingJobArn")
  processingJobArn: option<processingJobArn>,
  @as("ExperimentConfig") experimentConfig: option<experimentConfig>,
  @ocaml.doc("<p>The ARN of the role used to create the processing job.</p>") @as("RoleArn")
  roleArn: option<roleArn>,
  @as("NetworkConfig") networkConfig: option<networkConfig>,
  @ocaml.doc("<p>Sets the environment variables in the Docker container.</p>") @as("Environment")
  environment: option<processingEnvironmentMap>,
  @as("AppSpecification") appSpecification: option<appSpecification>,
  @as("StoppingCondition") stoppingCondition: option<processingStoppingCondition>,
  @as("ProcessingResources") processingResources: option<processingResources>,
  @ocaml.doc("<p>The name of the processing job.</p>") @as("ProcessingJobName")
  processingJobName: option<processingJobName>,
  @as("ProcessingOutputConfig") processingOutputConfig: option<processingOutputConfig>,
  @ocaml.doc("<p>List of input configurations for the processing job.</p>") @as("ProcessingInputs")
  processingInputs: option<processingInputs>,
}
@ocaml.doc("<p>An execution of a step in a pipeline.</p>")
type pipelineExecutionStep = {
  @ocaml.doc("<p>Metadata for the step execution.</p>") @as("Metadata")
  metadata: option<pipelineExecutionStepMetadata>,
  @ocaml.doc(
    "<p>The reason why the step failed execution. This is only returned if the step failed its execution.</p>"
  )
  @as("FailureReason")
  failureReason: option<failureReason>,
  @ocaml.doc(
    "<p>The current attempt of the execution step. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-retry-policy.html\">Retry Policy for SageMaker Pipelines steps</a>.</p>"
  )
  @as("AttemptCount")
  attemptCount: option<integerValue>,
  @ocaml.doc("<p>If this pipeline execution step was cached, details on the cache hit.</p>")
  @as("CacheHitResult")
  cacheHitResult: option<cacheHitResult>,
  @ocaml.doc("<p>The status of the step execution.</p>") @as("StepStatus")
  stepStatus: option<stepStatus>,
  @ocaml.doc("<p>The time that the step stopped executing.</p>") @as("EndTime")
  endTime: option<timestamp_>,
  @ocaml.doc("<p>The time that the step started executing.</p>") @as("StartTime")
  startTime: option<timestamp_>,
  @ocaml.doc("<p>The description of the step.</p>") @as("StepDescription")
  stepDescription: option<stepDescription>,
  @ocaml.doc("<p>The display name of the step.</p>") @as("StepDisplayName")
  stepDisplayName: option<stepDisplayName>,
  @ocaml.doc("<p>The name of the step that is executed.</p>") @as("StepName")
  stepName: option<stepName>,
}
@ocaml.doc("<p>The summary of an in-progress deployment when an endpoint is creating or
            updating with a new endpoint configuration.</p>")
type pendingDeploymentSummary = {
  @ocaml.doc("<p>The start time of the deployment.</p>") @as("StartTime")
  startTime: option<timestamp_>,
  @ocaml.doc("<p>List of <code>PendingProductionVariantSummary</code> objects.</p>")
  @as("ProductionVariants")
  productionVariants: option<pendingProductionVariantSummaryList>,
  @ocaml.doc("<p>The name of the endpoint configuration used in the deployment. </p>")
  @as("EndpointConfigName")
  endpointConfigName: endpointConfigName,
}
@ocaml.doc("<p>Defines the monitoring job.</p>")
type monitoringJobDefinition = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on
         your behalf.</p>")
  @as("RoleArn")
  roleArn: roleArn,
  @ocaml.doc("<p>Specifies networking options for an monitoring job.</p>") @as("NetworkConfig")
  networkConfig: option<networkConfig>,
  @ocaml.doc("<p>Sets the environment variables in the Docker container.</p>") @as("Environment")
  environment: option<monitoringEnvironmentMap>,
  @ocaml.doc("<p>Specifies a time limit for how long the monitoring job is allowed to run.</p>")
  @as("StoppingCondition")
  stoppingCondition: option<monitoringStoppingCondition>,
  @ocaml.doc("<p>Configures the monitoring job to run a specified Docker container image.</p>")
  @as("MonitoringAppSpecification")
  monitoringAppSpecification: monitoringAppSpecification,
  @ocaml.doc("<p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a
         monitoring job. In distributed processing, you specify more than one instance.</p>")
  @as("MonitoringResources")
  monitoringResources: monitoringResources,
  @ocaml.doc("<p>The array of outputs from the monitoring job to be uploaded to Amazon Simple Storage
         Service (Amazon S3).</p>")
  @as("MonitoringOutputConfig")
  monitoringOutputConfig: monitoringOutputConfig,
  @ocaml.doc("<p>The array of inputs for the monitoring job. Currently we support monitoring an Amazon SageMaker
         Endpoint.</p>")
  @as("MonitoringInputs")
  monitoringInputs: monitoringInputs,
  @ocaml.doc("<p>Baseline configuration used to validate that the data conforms to the specified
         constraints and statistics</p>")
  @as("BaselineConfig")
  baselineConfig: option<monitoringBaselineConfig>,
}
@ocaml.doc("<p>Contains data, such as the inputs and targeted instance types that are used in the
            process of validating the model package.</p>
        <p>The data provided in the validation profile is made available to your buyers on Amazon Web Services
            Marketplace.</p>")
type modelPackageValidationProfile = {
  @ocaml.doc("<p>The <code>TransformJobDefinition</code> object that describes the transform job used
            for the validation of the model package.</p>")
  @as("TransformJobDefinition")
  transformJobDefinition: transformJobDefinition,
  @ocaml.doc("<p>The name of the profile for the model package.</p>") @as("ProfileName")
  profileName: entityName,
}
type labelingJobSummaryList = array<labelingJobSummary>
type inputDataConfig = array<channel>
type inferenceRecommendations = array<inferenceRecommendation>
@ocaml.doc("<p>Configures a hyperparameter tuning job.</p>")
type hyperParameterTuningJobConfig = {
  @ocaml.doc("<p>The tuning job's completion criteria.</p>") @as("TuningJobCompletionCriteria")
  tuningJobCompletionCriteria: option<tuningJobCompletionCriteria>,
  @ocaml.doc("<p>Specifies whether to use early stopping for training jobs launched by the
            hyperparameter tuning job. This can be one of the following values (the default value is
                <code>OFF</code>):</p>
        <dl>
            <dt>OFF</dt>
            <dd>
                    <p>Training jobs launched by the hyperparameter tuning job do not use early
                        stopping.</p>
                </dd>
            <dt>AUTO</dt>
            <dd>
                    <p>Amazon SageMaker stops training jobs launched by the hyperparameter tuning job when
                        they are unlikely to perform better than previously completed training jobs.
                        For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-early-stopping.html\">Stop Training Jobs Early</a>.</p>
                </dd>
         </dl>")
  @as("TrainingJobEarlyStoppingType")
  trainingJobEarlyStoppingType: option<trainingJobEarlyStoppingType>,
  @ocaml.doc("<p>The <a>ParameterRanges</a> object that specifies the ranges of
            hyperparameters
            that this tuning job searches.</p>")
  @as("ParameterRanges")
  parameterRanges: option<parameterRanges>,
  @ocaml.doc("<p>The <a>ResourceLimits</a> object that specifies the
            maximum
            number of training jobs and parallel training jobs for this tuning
            job.</p>")
  @as("ResourceLimits")
  resourceLimits: resourceLimits,
  @ocaml.doc("<p>The <a>HyperParameterTuningJobObjective</a> object that specifies the
            objective
            metric for this tuning job.</p>")
  @as("HyperParameterTuningJobObjective")
  hyperParameterTuningJobObjective: option<hyperParameterTuningJobObjective>,
  @ocaml.doc("<p>Specifies how hyperparameter tuning chooses the combinations of hyperparameter values
            to use for the training job it launches. To use the Bayesian search strategy, set this
            to <code>Bayesian</code>. To randomly search, set it to <code>Random</code>. For
            information about search strategies, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html\">How
                Hyperparameter Tuning Works</a>.</p>")
  @as("Strategy")
  strategy: hyperParameterTuningJobStrategyType,
}
type hyperParameterSpecifications = array<hyperParameterSpecification>
@ocaml.doc("<p>The endpoint configuration for the load test.</p>")
type endpointInputConfiguration = {
  @ocaml.doc("<p> The parameter you want to benchmark against.</p>")
  @as("EnvironmentParameterRanges")
  environmentParameterRanges: option<environmentParameterRanges>,
  @ocaml.doc("<p>The inference specification name in the model package version.</p>")
  @as("InferenceSpecificationName")
  inferenceSpecificationName: option<inferenceSpecificationName>,
  @ocaml.doc("<p>The instance types to use for the load test.</p>") @as("InstanceType")
  instanceType: productionVariantInstanceType,
}
@ocaml.doc("<p>Provides summary information about the model package.</p>")
type batchDescribeModelPackageSummary = {
  @ocaml.doc("<p>The approval status of the model.</p>") @as("ModelApprovalStatus")
  modelApprovalStatus: option<modelApprovalStatus>,
  @ocaml.doc("<p>The status of the mortgage package.</p>") @as("ModelPackageStatus")
  modelPackageStatus: modelPackageStatus,
  @as("InferenceSpecification") inferenceSpecification: inferenceSpecification,
  @ocaml.doc("<p>The creation time of the mortgage package summary.</p>") @as("CreationTime")
  creationTime: creationTime,
  @ocaml.doc("<p>The description of the model package.</p>") @as("ModelPackageDescription")
  modelPackageDescription: option<entityDescription>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model package.</p>") @as("ModelPackageArn")
  modelPackageArn: modelPackageArn,
  @ocaml.doc("<p>The version number of a versioned model.</p>") @as("ModelPackageVersion")
  modelPackageVersion: option<modelPackageVersion>,
  @ocaml.doc("<p>The group name for the model package</p>") @as("ModelPackageGroupName")
  modelPackageGroupName: entityName,
}
type autoMLCandidates = array<autoMLCandidate>
type artifactSummaries = array<artifactSummary>
type appImageConfigList = array<appImageConfigDetails>
type additionalInferenceSpecifications = array<additionalInferenceSpecificationDefinition>
type workteams = array<workteam>
@ocaml.doc("<p>Defines how the algorithm is used for a training job.</p>")
type trainingSpecification = {
  @ocaml.doc("<p>A list of the metrics that the algorithm emits that can be used as the objective
            metric in a hyperparameter tuning job.</p>")
  @as("SupportedTuningJobObjectiveMetrics")
  supportedTuningJobObjectiveMetrics: option<hyperParameterTuningJobObjectives>,
  @ocaml.doc("<p>A list of <code>ChannelSpecification</code> objects, which specify the input sources
            to be used by the algorithm.</p>")
  @as("TrainingChannels")
  trainingChannels: channelSpecifications,
  @ocaml.doc("<p>A list of <code>MetricDefinition</code> objects, which are used for parsing metrics
            generated by the algorithm.</p>")
  @as("MetricDefinitions")
  metricDefinitions: option<metricDefinitionList>,
  @ocaml.doc("<p>Indicates whether the algorithm supports distributed training. If set to false, buyers
            can't request more than one instance during training.</p>")
  @as("SupportsDistributedTraining")
  supportsDistributedTraining: option<boolean_>,
  @ocaml.doc("<p>A list of the instance types that this algorithm can use for training.</p>")
  @as("SupportedTrainingInstanceTypes")
  supportedTrainingInstanceTypes: trainingInstanceTypes,
  @ocaml.doc("<p>A list of the <code>HyperParameterSpecification</code> objects, that define the
            supported hyperparameters. This is required if the algorithm supports automatic model
            tuning.></p>")
  @as("SupportedHyperParameters")
  supportedHyperParameters: option<hyperParameterSpecifications>,
  @ocaml.doc("<p>An MD5 hash of the training algorithm that identifies the Docker image used for
            training.</p>")
  @as("TrainingImageDigest")
  trainingImageDigest: option<imageDigest>,
  @ocaml.doc("<p>The Amazon ECR registry path of the Docker image that contains the training
            algorithm.</p>")
  @as("TrainingImage")
  trainingImage: containerImage,
}
@ocaml.doc("<p>Defines the input needed to run a training job using the algorithm.</p>")
type trainingJobDefinition = {
  @ocaml.doc("<p>Specifies a limit to how long a model training job can run. It also specifies how long
            a managed Spot training job has to complete. When the job reaches the time limit, Amazon SageMaker
            ends the training job. Use this API to cap model training costs.</p>
        <p>To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal, which delays job
            termination for 120 seconds. Algorithms can use this 120-second window to save the model
            artifacts.</p>")
  @as("StoppingCondition")
  stoppingCondition: stoppingCondition,
  @ocaml.doc("<p>The resources, including the ML compute instances and ML storage volumes, to use for
            model training.</p>")
  @as("ResourceConfig")
  resourceConfig: resourceConfig,
  @ocaml.doc("<p>the path to the S3 bucket where you want to store model artifacts. Amazon SageMaker creates
            subfolders for the artifacts.</p>")
  @as("OutputDataConfig")
  outputDataConfig: outputDataConfig,
  @ocaml.doc("<p>An array of <code>Channel</code> objects, each of which specifies an input
            source.</p>")
  @as("InputDataConfig")
  inputDataConfig: inputDataConfig,
  @ocaml.doc("<p>The hyperparameters used for the training job.</p>") @as("HyperParameters")
  hyperParameters: option<hyperParameters>,
  @as("TrainingInputMode") trainingInputMode: trainingInputMode,
}
@ocaml.doc("<p>Contains information about a training job.</p>")
type trainingJob = {
  @ocaml.doc("<p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
            different ways, for example, by purpose, owner, or environment. For more information,
            see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
                Resources</a>.</p>")
  @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The number of times to retry the job when the job fails due to an
                <code>InternalServerError</code>.</p>")
  @as("RetryStrategy")
  retryStrategy: option<retryStrategy>,
  @ocaml.doc("<p>The environment variables to set in the Docker container.</p>") @as("Environment")
  environment: option<trainingEnvironmentMap>,
  @ocaml.doc("<p>Information about the evaluation status of the rules for the training job.</p>")
  @as("DebugRuleEvaluationStatuses")
  debugRuleEvaluationStatuses: option<debugRuleEvaluationStatuses>,
  @as("TensorBoardOutputConfig") tensorBoardOutputConfig: option<tensorBoardOutputConfig>,
  @ocaml.doc("<p>Information about the debug rule configuration.</p>")
  @as("DebugRuleConfigurations")
  debugRuleConfigurations: option<debugRuleConfigurations>,
  @as("ExperimentConfig") experimentConfig: option<experimentConfig>,
  @as("DebugHookConfig") debugHookConfig: option<debugHookConfig>,
  @ocaml.doc("<p>The billable time in seconds.</p>") @as("BillableTimeInSeconds")
  billableTimeInSeconds: option<billableTimeInSeconds>,
  @ocaml.doc("<p>The training time in seconds.</p>") @as("TrainingTimeInSeconds")
  trainingTimeInSeconds: option<trainingTimeInSeconds>,
  @as("CheckpointConfig") checkpointConfig: option<checkpointConfig>,
  @ocaml.doc("<p>When true, enables managed spot training using Amazon EC2 Spot instances to run
            training jobs instead of on-demand instances. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html\">Managed Spot Training</a>.</p>")
  @as("EnableManagedSpotTraining")
  enableManagedSpotTraining: option<boolean_>,
  @ocaml.doc("<p>To encrypt all communications between ML compute instances in distributed training,
            choose <code>True</code>. Encryption provides greater security for distributed training,
            but training might take longer. How long it takes depends on the amount of communication
            between compute instances, especially if you use a deep learning algorithm in
            distributed training.</p>")
  @as("EnableInterContainerTrafficEncryption")
  enableInterContainerTrafficEncryption: option<boolean_>,
  @ocaml.doc("<p>If the <code>TrainingJob</code> was created with network isolation, the value is set
            to <code>true</code>. If network isolation is enabled, nodes can't communicate beyond
            the VPC they run in.</p>")
  @as("EnableNetworkIsolation")
  enableNetworkIsolation: option<boolean_>,
  @ocaml.doc("<p>A list of final metric values that are set when the training job completes. Used only
            if the training job was configured to use metrics.</p>")
  @as("FinalMetricDataList")
  finalMetricDataList: option<finalMetricDataList>,
  @ocaml.doc("<p>A history of all of the secondary statuses that the training job has transitioned
            through.</p>")
  @as("SecondaryStatusTransitions")
  secondaryStatusTransitions: option<secondaryStatusTransitions>,
  @ocaml.doc("<p>A timestamp that indicates when the status of the training job was last
            modified.</p>")
  @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>Indicates the time when the training job ends on training instances. You are billed
            for the time interval between the value of <code>TrainingStartTime</code> and this time.
            For successful jobs and stopped jobs, this is the time after model artifacts are
            uploaded. For failed jobs, this is the time when Amazon SageMaker detects a job failure.</p>")
  @as("TrainingEndTime")
  trainingEndTime: option<timestamp_>,
  @ocaml.doc("<p>Indicates the time when the training job starts on training instances. You are billed
            for the time interval between this time and the value of <code>TrainingEndTime</code>.
            The start time in CloudWatch Logs might be later than this time. The difference is due to the time
            it takes to download the training data and to the size of the training container.</p>")
  @as("TrainingStartTime")
  trainingStartTime: option<timestamp_>,
  @ocaml.doc("<p>A timestamp that indicates when the training job was created.</p>")
  @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>Specifies a limit to how long a model training job can run. It also specifies how long
            a managed Spot training job has to complete. When the job reaches the time limit, Amazon SageMaker
            ends the training job. Use this API to cap model training costs.</p>
        <p>To stop a job, Amazon SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays
            job termination for 120 seconds. Algorithms can use this 120-second window to save the
            model artifacts, so the results of training are not lost. </p>")
  @as("StoppingCondition")
  stoppingCondition: option<stoppingCondition>,
  @ocaml.doc("<p>A <a>VpcConfig</a> object that specifies the VPC that this training job has
            access to. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html\">Protect Training Jobs by Using an Amazon
                Virtual Private Cloud</a>.</p>")
  @as("VpcConfig")
  vpcConfig: option<vpcConfig>,
  @ocaml.doc("<p>Resources, including ML compute instances and ML storage volumes, that are configured
            for model training.</p>")
  @as("ResourceConfig")
  resourceConfig: option<resourceConfig>,
  @ocaml.doc("<p>The S3 path where model artifacts that you configured when creating the job are
            stored. Amazon SageMaker creates subfolders for model artifacts.</p>")
  @as("OutputDataConfig")
  outputDataConfig: option<outputDataConfig>,
  @ocaml.doc("<p>An array of <code>Channel</code> objects that describes each data input
            channel.</p>")
  @as("InputDataConfig")
  inputDataConfig: option<inputDataConfig>,
  @ocaml.doc(
    "<p>The Amazon Web Services Identity and Access Management (IAM) role configured for the training job.</p>"
  )
  @as("RoleArn")
  roleArn: option<roleArn>,
  @ocaml.doc("<p>Information about the algorithm used for training, and algorithm metadata.</p>")
  @as("AlgorithmSpecification")
  algorithmSpecification: option<algorithmSpecification>,
  @ocaml.doc("<p>Algorithm-specific parameters.</p>") @as("HyperParameters")
  hyperParameters: option<hyperParameters>,
  @ocaml.doc("<p>If the training job failed, the reason it failed.</p>") @as("FailureReason")
  failureReason: option<failureReason>,
  @ocaml.doc("<p> Provides detailed information about the state of the training job. For detailed
            information about the secondary status of the training job, see
                <code>StatusMessage</code> under <a>SecondaryStatusTransition</a>.</p>
        <p>Amazon SageMaker provides primary statuses and secondary statuses that apply to each of
            them:</p>
        <dl>
            <dt>InProgress</dt>
            <dd>
                    <ul>
                  <li>
                            <p>
                        <code>Starting</code>
                                - Starting the training job.</p>
                        </li>
                  <li>
                            <p>
                        <code>Downloading</code> - An optional stage for algorithms that
                                support <code>File</code> training input mode. It indicates that
                                data is being downloaded to the ML storage volumes.</p>
                        </li>
                  <li>
                            <p>
                        <code>Training</code> - Training is in progress.</p>
                        </li>
                  <li>
                            <p>
                        <code>Uploading</code> - Training is complete and the model
                                artifacts are being uploaded to the S3 location.</p>
                        </li>
               </ul>
                </dd>
            <dt>Completed</dt>
            <dd>
                    <ul>
                  <li>
                            <p>
                        <code>Completed</code> - The training job has completed.</p>
                        </li>
               </ul>
                </dd>
            <dt>Failed</dt>
            <dd>
                    <ul>
                  <li>
                            <p>
                        <code>Failed</code> - The training job has failed. The reason for
                                the failure is returned in the <code>FailureReason</code> field of
                                    <code>DescribeTrainingJobResponse</code>.</p>
                        </li>
               </ul>
                </dd>
            <dt>Stopped</dt>
            <dd>
                    <ul>
                  <li>
                            <p>
                        <code>MaxRuntimeExceeded</code> - The job stopped because it
                                exceeded the maximum allowed runtime.</p>
                        </li>
                  <li>
                            <p>
                        <code>Stopped</code> - The training job has stopped.</p>
                        </li>
               </ul>
                </dd>
            <dt>Stopping</dt>
            <dd>
                    <ul>
                  <li>
                            <p>
                        <code>Stopping</code> - Stopping the training job.</p>
                        </li>
               </ul>
                </dd>
         </dl>
        <important>
            <p>Valid values for <code>SecondaryStatus</code> are subject to change. </p>
        </important>
        <p>We no longer support the following secondary statuses:</p>
        <ul>
            <li>
                <p>
                    <code>LaunchingMLInstances</code>
                </p>
            </li>
            <li>
                <p>
                    <code>PreparingTrainingStack</code>
                </p>
            </li>
            <li>
                <p>
                    <code>DownloadingTrainingImage</code>
                </p>
            </li>
         </ul>")
  @as("SecondaryStatus")
  secondaryStatus: option<secondaryStatus>,
  @ocaml.doc("<p>The status of the
            training
            job.</p>
        <p>Training job statuses are:</p>
        <ul>
            <li>
                <p>
                  <code>InProgress</code> - The training is in progress.</p>
            </li>
            <li>
                <p>
                  <code>Completed</code> - The training job has completed.</p>
            </li>
            <li>
                <p>
                  <code>Failed</code> - The training job has failed. To see the reason for the
                    failure, see the <code>FailureReason</code> field in the response to a
                        <code>DescribeTrainingJobResponse</code> call.</p>
            </li>
            <li>
                <p>
                  <code>Stopping</code> - The training job is stopping.</p>
            </li>
            <li>
                <p>
                  <code>Stopped</code> - The training job has stopped.</p>
            </li>
         </ul>
        <p>For
            more detailed information, see <code>SecondaryStatus</code>. </p>")
  @as("TrainingJobStatus")
  trainingJobStatus: option<trainingJobStatus>,
  @ocaml.doc("<p>Information about the Amazon S3 location that is configured for storing model
            artifacts.</p>")
  @as("ModelArtifacts")
  modelArtifacts: option<modelArtifacts>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the job.</p>") @as("AutoMLJobArn")
  autoMLJobArn: option<autoMLJobArn>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the labeling job.</p>") @as("LabelingJobArn")
  labelingJobArn: option<labelingJobArn>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the associated hyperparameter tuning job if the
            training job was launched by a hyperparameter tuning job.</p>")
  @as("TuningJobArn")
  tuningJobArn: option<hyperParameterTuningJobArn>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the training job.</p>") @as("TrainingJobArn")
  trainingJobArn: option<trainingJobArn>,
  @ocaml.doc("<p>The name of the training job.</p>") @as("TrainingJobName")
  trainingJobName: option<trainingJobName>,
}
type pipelineExecutionStepList = array<pipelineExecutionStep>
@ocaml.doc("<p>Configures the monitoring schedule and defines the monitoring job.</p>")
type monitoringScheduleConfig = {
  @ocaml.doc("<p>The type of the monitoring job definition to schedule.</p>") @as("MonitoringType")
  monitoringType: option<monitoringType>,
  @ocaml.doc("<p>The name of the monitoring job definition to schedule.</p>")
  @as("MonitoringJobDefinitionName")
  monitoringJobDefinitionName: option<monitoringJobDefinitionName>,
  @ocaml.doc("<p>Defines the monitoring job.</p>") @as("MonitoringJobDefinition")
  monitoringJobDefinition: option<monitoringJobDefinition>,
  @ocaml.doc("<p>Configures the monitoring schedule.</p>") @as("ScheduleConfig")
  scheduleConfig: option<scheduleConfig>,
}
type modelPackageValidationProfiles = array<modelPackageValidationProfile>
type modelPackageSummaries = Js.Dict.t<batchDescribeModelPackageSummary>
@ocaml.doc("<p>Defines
            the training jobs launched by a hyperparameter tuning job.</p>")
type hyperParameterTrainingJobDefinition = {
  @ocaml.doc("<p>The number of times to retry the job when the job fails due to an
                <code>InternalServerError</code>.</p>")
  @as("RetryStrategy")
  retryStrategy: option<retryStrategy>,
  @as("CheckpointConfig") checkpointConfig: option<checkpointConfig>,
  @ocaml.doc("<p>A Boolean indicating whether managed spot training is enabled (<code>True</code>) or
            not (<code>False</code>).</p>")
  @as("EnableManagedSpotTraining")
  enableManagedSpotTraining: option<boolean_>,
  @ocaml.doc("<p>To encrypt all communications between ML compute instances in distributed training,
            choose <code>True</code>. Encryption provides greater security for distributed training,
            but training might take longer. How long it takes depends on the amount of communication
            between compute instances, especially if you use a deep learning algorithm in
            distributed training.</p>")
  @as("EnableInterContainerTrafficEncryption")
  enableInterContainerTrafficEncryption: option<boolean_>,
  @ocaml.doc("<p>Isolates the training container. No inbound or outbound network calls can be made,
            except for calls between peers within a training cluster for distributed training. If
            network isolation is used for training jobs that are configured to use a VPC, Amazon SageMaker
            downloads and uploads customer data and model artifacts through the specified VPC, but
            the training container does not have network access.</p>")
  @as("EnableNetworkIsolation")
  enableNetworkIsolation: option<boolean_>,
  @ocaml.doc("<p>Specifies a limit to how long a model hyperparameter training job can run. It also
            specifies how long a managed spot training job has to complete. When the job reaches the
            time limit, Amazon SageMaker ends the training job. Use this API to cap model training costs.</p>")
  @as("StoppingCondition")
  stoppingCondition: stoppingCondition,
  @ocaml.doc("<p>The resources,
            including
            the compute instances and storage volumes, to use for the training
            jobs that the tuning job launches.</p>
        <p>Storage
            volumes store model artifacts and
            incremental
            states. Training algorithms might also use storage volumes for
            scratch
            space. If you want Amazon SageMaker to use the storage volume
            to store the training data, choose <code>File</code> as the
                <code>TrainingInputMode</code> in the algorithm specification. For distributed
            training algorithms, specify an instance count greater than 1.</p>")
  @as("ResourceConfig")
  resourceConfig: resourceConfig,
  @ocaml.doc("<p>Specifies the path to the Amazon S3 bucket where you
            store
            model artifacts from the training jobs that the tuning job
            launches.</p>")
  @as("OutputDataConfig")
  outputDataConfig: outputDataConfig,
  @ocaml.doc("<p>The <a>VpcConfig</a> object that
            specifies
            the VPC that you want the training jobs that this hyperparameter
            tuning job launches to connect to. Control access to and from your
            training
            container by configuring the VPC. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html\">Protect Training Jobs
                by Using an Amazon Virtual Private Cloud</a>.</p>")
  @as("VpcConfig")
  vpcConfig: option<vpcConfig>,
  @ocaml.doc("<p>An array of <a>Channel</a> objects that specify
            the
            input for the training jobs that the tuning job launches.</p>")
  @as("InputDataConfig")
  inputDataConfig: option<inputDataConfig>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the
            IAM
            role associated with the training jobs that the tuning job
            launches.</p>")
  @as("RoleArn")
  roleArn: roleArn,
  @ocaml.doc("<p>The <a>HyperParameterAlgorithmSpecification</a> object that
            specifies
            the resource algorithm to use for the training jobs that the tuning
            job launches.</p>")
  @as("AlgorithmSpecification")
  algorithmSpecification: hyperParameterAlgorithmSpecification,
  @ocaml.doc("<p>Specifies the values of hyperparameters
            that
            do not change for the tuning job.</p>")
  @as("StaticHyperParameters")
  staticHyperParameters: option<hyperParameters>,
  @as("HyperParameterRanges") hyperParameterRanges: option<parameterRanges>,
  @as("TuningObjective") tuningObjective: option<hyperParameterTuningJobObjective>,
  @ocaml.doc("<p>The job definition name.</p>") @as("DefinitionName")
  definitionName: option<hyperParameterTrainingJobDefinitionName>,
}
type endpointInputConfigurations = array<endpointInputConfiguration>
@ocaml.doc("<p>Detailed information about the source of a trial component. Either
        <code>ProcessingJob</code> or <code>TrainingJob</code> is returned.</p>")
type trialComponentSourceDetail = {
  @ocaml.doc("<p>Information about a transform job that's the source of a trial component.</p>")
  @as("TransformJob")
  transformJob: option<transformJob>,
  @ocaml.doc("<p>Information about a processing job that's the source of a trial component.</p>")
  @as("ProcessingJob")
  processingJob: option<processingJob>,
  @ocaml.doc("<p>Information about a training job that's the source of a trial component.</p>")
  @as("TrainingJob")
  trainingJob: option<trainingJob>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the source.</p>") @as("SourceArn")
  sourceArn: option<trialComponentSourceArn>,
}
@ocaml.doc("<p>The input configuration of the recommendation job.</p>")
type recommendationJobInputConfig = {
  @ocaml.doc("<p>Specifies the endpoint configuration to use for a job.</p>")
  @as("EndpointConfigurations")
  endpointConfigurations: option<endpointInputConfigurations>,
  @ocaml.doc("<p>Defines the resource limit of the job.</p>") @as("ResourceLimit")
  resourceLimit: option<recommendationJobResourceLimit>,
  @ocaml.doc("<p>Specifies the traffic pattern of the job.</p>") @as("TrafficPattern")
  trafficPattern: option<trafficPattern>,
  @ocaml.doc("<p>Specifies the maximum duration of the job, in seconds.></p>")
  @as("JobDurationInSeconds")
  jobDurationInSeconds: option<jobDurationInSeconds>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of a versioned model package.</p>")
  @as("ModelPackageVersionArn")
  modelPackageVersionArn: modelPackageArn,
}
@ocaml.doc("<p>A schedule for a model monitoring job. For information about model monitor, see
            <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html\">Amazon SageMaker Model
                Monitor</a>.</p>")
type monitoringSchedule = {
  @ocaml.doc("<p>A list of the tags associated with the monitoring schedlue. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
            resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>")
  @as("Tags")
  tags: option<tagList_>,
  @as("LastMonitoringExecutionSummary")
  lastMonitoringExecutionSummary: option<monitoringExecutionSummary>,
  @ocaml.doc("<p>The endpoint that hosts the model being monitored.</p>") @as("EndpointName")
  endpointName: option<endpointName>,
  @as("MonitoringScheduleConfig") monitoringScheduleConfig: option<monitoringScheduleConfig>,
  @ocaml.doc("<p>The last time the monitoring schedule was changed.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>The time that the monitoring schedule was created.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>If the monitoring schedule failed, the reason it failed.</p>") @as("FailureReason")
  failureReason: option<failureReason>,
  @ocaml.doc("<p>The type of the monitoring job definition to schedule.</p>") @as("MonitoringType")
  monitoringType: option<monitoringType>,
  @ocaml.doc("<p>The status of the monitoring schedule. This can be one of the following values.</p>
        <ul>
            <li>
                <p>
                  <code>PENDING</code> - The schedule is pending being created.</p>
            </li>
            <li>
                <p>
                  <code>FAILED</code> - The schedule failed.</p>
            </li>
            <li>
                <p>
                  <code>SCHEDULED</code> - The schedule was successfully created.</p>
            </li>
            <li>
                <p>
                  <code>STOPPED</code> - The schedule was stopped.</p>
            </li>
         </ul>")
  @as("MonitoringScheduleStatus")
  monitoringScheduleStatus: option<scheduleStatus>,
  @ocaml.doc("<p>The name of the monitoring schedule.</p>") @as("MonitoringScheduleName")
  monitoringScheduleName: option<monitoringScheduleName>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>")
  @as("MonitoringScheduleArn")
  monitoringScheduleArn: option<monitoringScheduleArn>,
}
@ocaml.doc(
  "<p>Specifies batch transform jobs that Amazon SageMaker runs to validate your model package.</p>"
)
type modelPackageValidationSpecification = {
  @ocaml.doc("<p>An array of <code>ModelPackageValidationProfile</code> objects, each of which
            specifies a batch transform job that Amazon SageMaker runs to validate your model package.</p>")
  @as("ValidationProfiles")
  validationProfiles: modelPackageValidationProfiles,
  @ocaml.doc("<p>The IAM roles to be used for the validation of the model package.</p>")
  @as("ValidationRole")
  validationRole: roleArn,
}
type hyperParameterTrainingJobDefinitions = array<hyperParameterTrainingJobDefinition>
@ocaml.doc("<p>Defines a training job and a batch transform job that Amazon SageMaker runs to validate your
            algorithm.</p>
        <p>The data provided in the validation profile is made available to your buyers on Amazon Web Services
            Marketplace.</p>")
type algorithmValidationProfile = {
  @ocaml.doc("<p>The <code>TransformJobDefinition</code> object that describes the transform job that
            Amazon SageMaker runs to validate your algorithm.</p>")
  @as("TransformJobDefinition")
  transformJobDefinition: option<transformJobDefinition>,
  @ocaml.doc("<p>The <code>TrainingJobDefinition</code> object that describes the training job that
            Amazon SageMaker runs to validate your algorithm.</p>")
  @as("TrainingJobDefinition")
  trainingJobDefinition: trainingJobDefinition,
  @ocaml.doc("<p>The name of the profile for the algorithm. The name must have 1 to 63 characters.
            Valid characters are a-z, A-Z, 0-9, and - (hyphen).</p>")
  @as("ProfileName")
  profileName: entityName,
}
@ocaml.doc("<p>The properties of a trial component as returned by the <a>Search</a>
      API.</p>")
type trialComponent = {
  @ocaml.doc("<p>An array of the parents of the component. A parent is a trial the component is associated
      with and the experiment the trial is part of. A component might not have any parents.</p>")
  @as("Parents")
  parents: option<parents>,
  @ocaml.doc(
    "<p>The list of tags that are associated with the component. You can use <a>Search</a> API to search on the tags.</p>"
  )
  @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the lineage group resource.</p>")
  @as("LineageGroupArn")
  lineageGroupArn: option<lineageGroupArn>,
  @ocaml.doc("<p>Details of the source of the component.</p>") @as("SourceDetail")
  sourceDetail: option<trialComponentSourceDetail>,
  @as("MetadataProperties") metadataProperties: option<metadataProperties>,
  @ocaml.doc("<p>The metrics for the component.</p>") @as("Metrics")
  metrics: option<trialComponentMetricSummaries>,
  @ocaml.doc("<p>The output artifacts of the component.</p>") @as("OutputArtifacts")
  outputArtifacts: option<trialComponentArtifacts>,
  @ocaml.doc("<p>The input artifacts of the component.</p>") @as("InputArtifacts")
  inputArtifacts: option<trialComponentArtifacts>,
  @ocaml.doc("<p>The hyperparameters of the component.</p>") @as("Parameters")
  parameters: option<trialComponentParameters>,
  @as("LastModifiedBy") lastModifiedBy: option<userContext>,
  @ocaml.doc("<p>When the component was last modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>Who created the trial component.</p>") @as("CreatedBy")
  createdBy: option<userContext>,
  @ocaml.doc("<p>When the component was created.</p>") @as("CreationTime")
  creationTime: option<timestamp_>,
  @ocaml.doc("<p>When the component ended.</p>") @as("EndTime") endTime: option<timestamp_>,
  @ocaml.doc("<p>When the component started.</p>") @as("StartTime") startTime: option<timestamp_>,
  @as("Status") status: option<trialComponentStatus>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) and job type of the source of the component.</p>")
  @as("Source")
  source: option<trialComponentSource>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the trial component.</p>")
  @as("TrialComponentArn")
  trialComponentArn: option<trialComponentArn>,
  @ocaml.doc("<p>The name of the component as displayed. If <code>DisplayName</code> isn't specified,
        <code>TrialComponentName</code> is displayed.</p>")
  @as("DisplayName")
  displayName: option<experimentEntityName>,
  @ocaml.doc("<p>The name of the trial component.</p>") @as("TrialComponentName")
  trialComponentName: option<experimentEntityName>,
}
type monitoringScheduleList = array<monitoringSchedule>
@ocaml.doc("<p>A versioned model that can be deployed for SageMaker inference.</p>")
type modelPackage = {
  @ocaml.doc(
    "<p>Represents the drift check baselines that can be used when the model monitor is set using the model package.</p>"
  )
  @as("DriftCheckBaselines")
  driftCheckBaselines: option<driftCheckBaselines>,
  @ocaml.doc("<p>The metadata properties for the model package. </p>")
  @as("CustomerMetadataProperties")
  customerMetadataProperties: option<customerMetadataMap>,
  @ocaml.doc("<p>A list of the tags associated with the model package. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
            resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>")
  @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>An array of additional Inference Specification objects.</p>")
  @as("AdditionalInferenceSpecifications")
  additionalInferenceSpecifications: option<additionalInferenceSpecifications>,
  @ocaml.doc("<p>The Amazon Simple Storage Service path where the sample payload are stored. This path must point to 
           a single gzip compressed tar archive (.tar.gz suffix).</p>")
  @as("SamplePayloadUrl")
  samplePayloadUrl: option<string_>,
  @ocaml.doc("<p>The machine learning task your model package accomplishes. Common machine 
     learning tasks include object detection and image classification.</p>")
  @as("Task")
  task: option<string_>,
  @ocaml.doc("<p>The machine learning domain of your model package and its components. Common 
           machine learning domains include computer vision and natural language processing.</p>")
  @as("Domain")
  domain: option<string_>,
  @ocaml.doc("<p>A description provided when the model approval is set.</p>")
  @as("ApprovalDescription")
  approvalDescription: option<approvalDescription>,
  @as("LastModifiedBy") lastModifiedBy: option<userContext>,
  @ocaml.doc("<p>The last time the model package was modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: option<timestamp_>,
  @ocaml.doc("<p>Metrics for the model.</p>") @as("ModelMetrics")
  modelMetrics: option<modelMetrics>,
  @as("MetadataProperties") metadataProperties: option<metadataProperties>,
  @as("CreatedBy") createdBy: option<userContext>,
  @ocaml.doc("<p>The approval status of the model. This can be one of the following values.</p>
        <ul>
            <li>
                <p>
                  <code>APPROVED</code> - The model is approved</p>
            </li>
            <li>
                <p>
                  <code>REJECTED</code> - The model is rejected.</p>
            </li>
            <li>
                <p>
                  <code>PENDING_MANUAL_APPROVAL</code> - The model is waiting for manual
                    approval.</p>
            </li>
         </ul>")
  @as("ModelApprovalStatus")
  modelApprovalStatus: option<modelApprovalStatus>,
  @ocaml.doc("<p>Whether the model package is to be certified to be listed on Amazon Web Services Marketplace. For
            information about listing model packages on Amazon Web Services Marketplace, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-mkt-list.html\">List Your
                Algorithm or Model Package on Amazon Web Services Marketplace</a>.</p>")
  @as("CertifyForMarketplace")
  certifyForMarketplace: option<certifyForMarketplace>,
  @as("ModelPackageStatusDetails") modelPackageStatusDetails: option<modelPackageStatusDetails>,
  @ocaml.doc("<p>The status of the model package. This can be one of the following values.</p>
        <ul>
            <li>
                <p>
                  <code>PENDING</code> - The model package is pending being created.</p>
            </li>
            <li>
                <p>
                  <code>IN_PROGRESS</code> - The model package is in the process of being
                    created.</p>
            </li>
            <li>
                <p>
                  <code>COMPLETED</code> - The model package was successfully created.</p>
            </li>
            <li>
                <p>
                  <code>FAILED</code> - The model package failed.</p>
            </li>
            <li>
                <p>
                  <code>DELETING</code> - The model package is in the process of being deleted.</p>
            </li>
         </ul>")
  @as("ModelPackageStatus")
  modelPackageStatus: option<modelPackageStatus>,
  @as("ValidationSpecification")
  validationSpecification: option<modelPackageValidationSpecification>,
  @as("SourceAlgorithmSpecification")
  sourceAlgorithmSpecification: option<sourceAlgorithmSpecification>,
  @as("InferenceSpecification") inferenceSpecification: option<inferenceSpecification>,
  @ocaml.doc("<p>The time that the model package was created.</p>") @as("CreationTime")
  creationTime: option<creationTime>,
  @ocaml.doc("<p>The description of the model package.</p>") @as("ModelPackageDescription")
  modelPackageDescription: option<entityDescription>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model package.</p>") @as("ModelPackageArn")
  modelPackageArn: option<modelPackageArn>,
  @ocaml.doc("<p>The version number of a versioned model.</p>") @as("ModelPackageVersion")
  modelPackageVersion: option<modelPackageVersion>,
  @ocaml.doc("<p>The model group to which the model belongs.</p>") @as("ModelPackageGroupName")
  modelPackageGroupName: option<entityName>,
  @ocaml.doc("<p>The name of the model.</p>") @as("ModelPackageName")
  modelPackageName: option<entityName>,
}
type algorithmValidationProfiles = array<algorithmValidationProfile>
@ocaml.doc("<p>A hosted endpoint for real-time inference.</p>")
type endpoint = {
  @ocaml.doc("<p>A list of the tags associated with the endpoint. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
            resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>")
  @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>A list of monitoring schedules for the endpoint. For information about model
            monitoring, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html\">Amazon SageMaker Model Monitor</a>.</p>")
  @as("MonitoringSchedules")
  monitoringSchedules: option<monitoringScheduleList>,
  @ocaml.doc("<p>The last time the endpoint was modified.</p>") @as("LastModifiedTime")
  lastModifiedTime: timestamp_,
  @ocaml.doc("<p>The time that the endpoint was created.</p>") @as("CreationTime")
  creationTime: timestamp_,
  @ocaml.doc("<p>If the endpoint failed, the reason it failed.</p>") @as("FailureReason")
  failureReason: option<failureReason>,
  @ocaml.doc("<p>The status of the endpoint.</p>") @as("EndpointStatus")
  endpointStatus: endpointStatus,
  @as("DataCaptureConfig") dataCaptureConfig: option<dataCaptureConfigSummary>,
  @ocaml.doc("<p>A list of the production variants hosted on the endpoint. Each production variant is a
            model.</p>")
  @as("ProductionVariants")
  productionVariants: option<productionVariantSummaryList>,
  @ocaml.doc("<p>The endpoint configuration associated with the endpoint.</p>")
  @as("EndpointConfigName")
  endpointConfigName: endpointConfigName,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the endpoint.</p>") @as("EndpointArn")
  endpointArn: endpointArn,
  @ocaml.doc("<p>The name of the endpoint.</p>") @as("EndpointName") endpointName: endpointName,
}
@ocaml.doc("<p>Specifies configurations for one or more training jobs that Amazon SageMaker runs to test the
            algorithm.</p>")
type algorithmValidationSpecification = {
  @ocaml.doc("<p>An array of <code>AlgorithmValidationProfile</code> objects, each of which specifies a
            training job and batch transform job that Amazon SageMaker runs to validate your algorithm.</p>")
  @as("ValidationProfiles")
  validationProfiles: algorithmValidationProfiles,
  @ocaml.doc("<p>The IAM roles that Amazon SageMaker uses to run the training jobs.</p>")
  @as("ValidationRole")
  validationRole: roleArn,
}
@ocaml.doc("<p>A single resource returned as part of the <a>Search</a> API response.</p>")
type searchRecord = {
  @ocaml.doc("<p>The properties of a project.</p>") @as("Project") project: option<project>,
  @as("FeatureGroup") featureGroup: option<featureGroup>,
  @as("PipelineExecution") pipelineExecution: option<pipelineExecution>,
  @as("Pipeline") pipeline: option<pipeline>,
  @as("ModelPackageGroup") modelPackageGroup: option<modelPackageGroup>,
  @as("ModelPackage") modelPackage: option<modelPackage>,
  @as("Endpoint") endpoint: option<endpoint>,
  @ocaml.doc("<p>The properties of a trial component.</p>") @as("TrialComponent")
  trialComponent: option<trialComponent>,
  @ocaml.doc("<p>The properties of a trial.</p>") @as("Trial") trial: option<trial>,
  @ocaml.doc("<p>The properties of an experiment.</p>") @as("Experiment")
  experiment: option<experiment>,
  @ocaml.doc("<p>The properties of a training job.</p>") @as("TrainingJob")
  trainingJob: option<trainingJob>,
}
type searchResultsList = array<searchRecord>
type rec searchExpression = {
  @ocaml.doc("<p>A Boolean operator used to evaluate the search expression. If you want every
      conditional statement in all lists to be satisfied for the entire search expression to
      be true, specify <code>And</code>. If only a single conditional statement needs to be
      true for the entire search expression to be true, specify <code>Or</code>. The default
      value is <code>And</code>.</p>")
  @as("Operator")
  operator: option<booleanOperator>,
  @ocaml.doc("<p>A list of search expression objects.</p>") @as("SubExpressions")
  subExpressions: option<searchExpressionList>,
  @ocaml.doc("<p>A list of nested filter objects.</p>") @as("NestedFilters")
  nestedFilters: option<nestedFiltersList>,
  @ocaml.doc("<p>A list of filter objects.</p>") @as("Filters") filters: option<filterList>,
}
and searchExpressionList = array<searchExpression>
@ocaml.doc("<p>Provides APIs for creating and managing Amazon SageMaker resources. </p>
        <p>Other Resources:</p>
        <ul>
            <li>
                <p>
                  <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">Amazon SageMaker Developer
                        Guide</a>
               </p>
            </li>
            <li>
                <p>
                  <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI
                        Runtime API Reference</a>
               </p>
            </li>
         </ul>")
module EnableSagemakerServicecatalogPortfolio = {
  type t
  type request = {.}
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "EnableSagemakerServicecatalogPortfolioCommand"
  let make = () => new(Js.Obj.empty())
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DisableSagemakerServicecatalogPortfolio = {
  type t
  type request = {.}
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DisableSagemakerServicecatalogPortfolioCommand"
  let make = () => new(Js.Obj.empty())
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module UpdateTrial = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the trial as displayed. The name doesn't need to be unique. If
        <code>DisplayName</code> isn't specified, <code>TrialName</code> is displayed.</p>")
    @as("DisplayName")
    displayName: option<experimentEntityName>,
    @ocaml.doc("<p>The name of the trial to update.</p>") @as("TrialName")
    trialName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the trial.</p>") @as("TrialArn")
    trialArn: option<trialArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "UpdateTrialCommand"
  let make = (~trialName, ~displayName=?, ()) => new({displayName, trialName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdateExperiment = {
  type t
  type request = {
    @ocaml.doc("<p>The description of the experiment.</p>") @as("Description")
    description: option<experimentDescription>,
    @ocaml.doc("<p>The name of the experiment as displayed. The name doesn't need to be unique. If
        <code>DisplayName</code> isn't specified, <code>ExperimentName</code> is displayed.</p>")
    @as("DisplayName")
    displayName: option<experimentEntityName>,
    @ocaml.doc("<p>The name of the experiment to update.</p>") @as("ExperimentName")
    experimentName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the experiment.</p>") @as("ExperimentArn")
    experimentArn: option<experimentArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "UpdateExperimentCommand"
  let make = (~experimentName, ~description=?, ~displayName=?, ()) =>
    new({description, displayName, experimentName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module StopTransformJob = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the batch transform job to stop.</p>") @as("TransformJobName")
    transformJobName: transformJobName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "StopTransformJobCommand"
  let make = (~transformJobName, ()) => new({transformJobName: transformJobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module StopTrainingJob = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the training job to stop.</p>") @as("TrainingJobName")
    trainingJobName: trainingJobName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "StopTrainingJobCommand"
  let make = (~trainingJobName, ()) => new({trainingJobName: trainingJobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module StopProcessingJob = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the processing job to stop.</p>") @as("ProcessingJobName")
    processingJobName: processingJobName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "StopProcessingJobCommand"
  let make = (~processingJobName, ()) => new({processingJobName: processingJobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module StopPipelineExecution = {
  type t
  type request = {
    @ocaml.doc("<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
         operation. An idempotent operation completes no more than once.</p>")
    @as("ClientRequestToken")
    clientRequestToken: idempotencyToken,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline execution.</p>")
    @as("PipelineExecutionArn")
    pipelineExecutionArn: pipelineExecutionArn,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline execution.</p>")
    @as("PipelineExecutionArn")
    pipelineExecutionArn: option<pipelineExecutionArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "StopPipelineExecutionCommand"
  let make = (~clientRequestToken, ~pipelineExecutionArn, ()) =>
    new({clientRequestToken, pipelineExecutionArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module StopNotebookInstance = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the notebook instance to terminate.</p>") @as("NotebookInstanceName")
    notebookInstanceName: notebookInstanceName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "StopNotebookInstanceCommand"
  let make = (~notebookInstanceName, ()) => new({notebookInstanceName: notebookInstanceName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module StopMonitoringSchedule = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the schedule to stop.</p>") @as("MonitoringScheduleName")
    monitoringScheduleName: monitoringScheduleName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "StopMonitoringScheduleCommand"
  let make = (~monitoringScheduleName, ()) => new({monitoringScheduleName: monitoringScheduleName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module StopLabelingJob = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the labeling job to stop.</p>") @as("LabelingJobName")
    labelingJobName: labelingJobName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "StopLabelingJobCommand"
  let make = (~labelingJobName, ()) => new({labelingJobName: labelingJobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module StopInferenceRecommendationsJob = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the job you want to stop.</p>") @as("JobName")
    jobName: recommendationJobName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "StopInferenceRecommendationsJobCommand"
  let make = (~jobName, ()) => new({jobName: jobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module StopHyperParameterTuningJob = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the tuning job to stop.</p>") @as("HyperParameterTuningJobName")
    hyperParameterTuningJobName: hyperParameterTuningJobName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "StopHyperParameterTuningJobCommand"
  let make = (~hyperParameterTuningJobName, ()) =>
    new({hyperParameterTuningJobName: hyperParameterTuningJobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module StopEdgePackagingJob = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the edge packaging job.</p>") @as("EdgePackagingJobName")
    edgePackagingJobName: entityName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "StopEdgePackagingJobCommand"
  let make = (~edgePackagingJobName, ()) => new({edgePackagingJobName: edgePackagingJobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module StopCompilationJob = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the model compilation job to stop.</p>") @as("CompilationJobName")
    compilationJobName: entityName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "StopCompilationJobCommand"
  let make = (~compilationJobName, ()) => new({compilationJobName: compilationJobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module StopAutoMLJob = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the object you are requesting.</p>") @as("AutoMLJobName")
    autoMLJobName: autoMLJobName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "StopAutoMLJobCommand"
  let make = (~autoMLJobName, ()) => new({autoMLJobName: autoMLJobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module StartNotebookInstance = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the notebook instance to start.</p>") @as("NotebookInstanceName")
    notebookInstanceName: notebookInstanceName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "StartNotebookInstanceCommand"
  let make = (~notebookInstanceName, ()) => new({notebookInstanceName: notebookInstanceName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module StartMonitoringSchedule = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the schedule to start.</p>") @as("MonitoringScheduleName")
    monitoringScheduleName: monitoringScheduleName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "StartMonitoringScheduleCommand"
  let make = (~monitoringScheduleName, ()) => new({monitoringScheduleName: monitoringScheduleName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module SendPipelineExecutionStepFailure = {
  type t
  type request = {
    @ocaml.doc("<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
         operation. An idempotent operation completes no more than one time.</p>")
    @as("ClientRequestToken")
    clientRequestToken: option<idempotencyToken>,
    @ocaml.doc("<p>A message describing why the step failed.</p>") @as("FailureReason")
    failureReason: option<string256>,
    @ocaml.doc("<p>The pipeline generated token from the Amazon SQS queue.</p>")
    @as("CallbackToken")
    callbackToken: callbackToken,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline execution.</p>")
    @as("PipelineExecutionArn")
    pipelineExecutionArn: option<pipelineExecutionArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "SendPipelineExecutionStepFailureCommand"
  let make = (~callbackToken, ~clientRequestToken=?, ~failureReason=?, ()) =>
    new({clientRequestToken, failureReason, callbackToken})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module PutModelPackageGroupPolicy = {
  type t
  type request = {
    @ocaml.doc("<p>The resource policy for the model group.</p>") @as("ResourcePolicy")
    resourcePolicy: policyString,
    @ocaml.doc("<p>The name of the model group to add a resource policy to.</p>")
    @as("ModelPackageGroupName")
    modelPackageGroupName: entityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model package group.</p>")
    @as("ModelPackageGroupArn")
    modelPackageGroupArn: modelPackageGroupArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "PutModelPackageGroupPolicyCommand"
  let make = (~resourcePolicy, ~modelPackageGroupName, ()) =>
    new({resourcePolicy, modelPackageGroupName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module GetSagemakerServicecatalogPortfolioStatus = {
  type t
  type request = {.}
  type response = {
    @ocaml.doc("<p>Whether Service Catalog is enabled or disabled in SageMaker.</p>") @as("Status")
    status: option<sagemakerServicecatalogStatus>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "GetSagemakerServicecatalogPortfolioStatusCommand"
  let make = () => new(Js.Obj.empty())
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module GetModelPackageGroupPolicy = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the model group for which to get the resource policy.</p>")
    @as("ModelPackageGroupName")
    modelPackageGroupName: entityName,
  }
  type response = {
    @ocaml.doc("<p>The resource policy for the model group.</p>") @as("ResourcePolicy")
    resourcePolicy: policyString,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "GetModelPackageGroupPolicyCommand"
  let make = (~modelPackageGroupName, ()) => new({modelPackageGroupName: modelPackageGroupName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module GetLineageGroupPolicy = {
  type t
  type request = {
    @ocaml.doc("<p>The name or Amazon Resource Name (ARN) of the lineage group.</p>")
    @as("LineageGroupName")
    lineageGroupName: lineageGroupNameOrArn,
  }
  type response = {
    @ocaml.doc(
      "<p>The resource policy that gives access to the lineage group in another account.</p>"
    )
    @as("ResourcePolicy")
    resourcePolicy: option<resourcePolicyString>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the lineage group.</p>") @as("LineageGroupArn")
    lineageGroupArn: option<lineageGroupArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "GetLineageGroupPolicyCommand"
  let make = (~lineageGroupName, ()) => new({lineageGroupName: lineageGroupName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DisassociateTrialComponent = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the trial to disassociate from.</p>") @as("TrialName")
    trialName: experimentEntityName,
    @ocaml.doc("<p>The name of the component to disassociate from the trial.</p>")
    @as("TrialComponentName")
    trialComponentName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the trial.</p>") @as("TrialArn")
    trialArn: option<trialArn>,
    @ocaml.doc("<p>The ARN of the trial component.</p>") @as("TrialComponentArn")
    trialComponentArn: option<trialComponentArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DisassociateTrialComponentCommand"
  let make = (~trialName, ~trialComponentName, ()) => new({trialName, trialComponentName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeStudioLifecycleConfig = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the Studio Lifecycle Configuration to describe.</p>")
    @as("StudioLifecycleConfigName")
    studioLifecycleConfigName: studioLifecycleConfigName,
  }
  type response = {
    @ocaml.doc("<p>The App type that the Lifecycle Configuration is attached to.</p>")
    @as("StudioLifecycleConfigAppType")
    studioLifecycleConfigAppType: option<studioLifecycleConfigAppType>,
    @ocaml.doc("<p>The content of your Studio Lifecycle Configuration script.</p>")
    @as("StudioLifecycleConfigContent")
    studioLifecycleConfigContent: option<studioLifecycleConfigContent>,
    @ocaml.doc(
      "<p>This value is equivalent to CreationTime because Studio Lifecycle Configurations are immutable.</p>"
    )
    @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @ocaml.doc("<p>The creation time of the Studio Lifecycle Configuration.</p>")
    @as("CreationTime")
    creationTime: option<timestamp_>,
    @ocaml.doc("<p>The name of the Studio Lifecycle Configuration that is described.</p>")
    @as("StudioLifecycleConfigName")
    studioLifecycleConfigName: option<studioLifecycleConfigName>,
    @ocaml.doc("<p>The ARN of the Lifecycle Configuration to describe.</p>")
    @as("StudioLifecycleConfigArn")
    studioLifecycleConfigArn: option<studioLifecycleConfigArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeStudioLifecycleConfigCommand"
  let make = (~studioLifecycleConfigName, ()) =>
    new({studioLifecycleConfigName: studioLifecycleConfigName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribePipelineDefinitionForExecution = {
  type t
  type request = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline execution.</p>")
    @as("PipelineExecutionArn")
    pipelineExecutionArn: pipelineExecutionArn,
  }
  type response = {
    @ocaml.doc("<p>The time when the pipeline was created.</p>") @as("CreationTime")
    creationTime: option<timestamp_>,
    @ocaml.doc("<p>The JSON pipeline definition.</p>") @as("PipelineDefinition")
    pipelineDefinition: option<pipelineDefinition>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribePipelineDefinitionForExecutionCommand"
  let make = (~pipelineExecutionArn, ()) => new({pipelineExecutionArn: pipelineExecutionArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeImageVersion = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The version of the image. If not specified, the latest version is described.</p>"
    )
    @as("Version")
    version: option<imageVersionNumber>,
    @ocaml.doc("<p>The name of the image.</p>") @as("ImageName") imageName: imageName,
  }
  type response = {
    @ocaml.doc("<p>The version number.</p>") @as("Version") version: option<imageVersionNumber>,
    @ocaml.doc("<p>When the version was last modified.</p>") @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @ocaml.doc("<p>The status of the version.</p>") @as("ImageVersionStatus")
    imageVersionStatus: option<imageVersionStatus>,
    @ocaml.doc("<p>The ARN of the version.</p>") @as("ImageVersionArn")
    imageVersionArn: option<imageVersionArn>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the image the version is based on.</p>")
    @as("ImageArn")
    imageArn: option<imageArn>,
    @ocaml.doc("<p>When a create or delete operation fails, the reason for the failure.</p>")
    @as("FailureReason")
    failureReason: option<failureReason>,
    @ocaml.doc("<p>When the version was created.</p>") @as("CreationTime")
    creationTime: option<timestamp_>,
    @ocaml.doc("<p>The registry path of the container image that contains this image version.</p>")
    @as("ContainerImage")
    containerImage: option<imageContainerImage>,
    @ocaml.doc(
      "<p>The registry path of the container image on which this image version is based.</p>"
    )
    @as("BaseImage")
    baseImage: option<imageBaseImage>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeImageVersionCommand"
  let make = (~imageName, ~version=?, ()) => new({version, imageName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeImage = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the image to describe.</p>") @as("ImageName") imageName: imageName,
  }
  type response = {
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) of the IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>"
    )
    @as("RoleArn")
    roleArn: option<roleArn>,
    @ocaml.doc("<p>When the image was last modified.</p>") @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @ocaml.doc("<p>The status of the image.</p>") @as("ImageStatus")
    imageStatus: option<imageStatus>,
    @ocaml.doc("<p>The name of the image.</p>") @as("ImageName") imageName: option<imageName>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the image.</p>") @as("ImageArn")
    imageArn: option<imageArn>,
    @ocaml.doc(
      "<p>When a create, update, or delete operation fails, the reason for the failure.</p>"
    )
    @as("FailureReason")
    failureReason: option<failureReason>,
    @ocaml.doc("<p>The name of the image as displayed.</p>") @as("DisplayName")
    displayName: option<imageDisplayName>,
    @ocaml.doc("<p>The description of the image.</p>") @as("Description")
    description: option<imageDescription>,
    @ocaml.doc("<p>When the image was created.</p>") @as("CreationTime")
    creationTime: option<timestamp_>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DescribeImageCommand"
  let make = (~imageName, ()) => new({imageName: imageName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DeleteWorkteam = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the work team to delete.</p>") @as("WorkteamName")
    workteamName: workteamName,
  }
  type response = {
    @ocaml.doc("<p>Returns <code>true</code> if the work team was successfully deleted; otherwise,
            returns <code>false</code>.</p>")
    @as("Success")
    success: success,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteWorkteamCommand"
  let make = (~workteamName, ()) => new({workteamName: workteamName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DeleteWorkforce = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the workforce.</p>") @as("WorkforceName")
    workforceName: workforceName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteWorkforceCommand"
  let make = (~workforceName, ()) => new({workforceName: workforceName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteUserProfile = {
  type t
  type request = {
    @ocaml.doc("<p>The user profile name.</p>") @as("UserProfileName")
    userProfileName: userProfileName,
    @ocaml.doc("<p>The domain ID.</p>") @as("DomainId") domainId: domainId,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteUserProfileCommand"
  let make = (~userProfileName, ~domainId, ()) => new({userProfileName, domainId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteTrialComponent = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the component to delete.</p>") @as("TrialComponentName")
    trialComponentName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the component is being deleted.</p>")
    @as("TrialComponentArn")
    trialComponentArn: option<trialComponentArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DeleteTrialComponentCommand"
  let make = (~trialComponentName, ()) => new({trialComponentName: trialComponentName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DeleteTrial = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the trial to delete.</p>") @as("TrialName")
    trialName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the trial that is being deleted.</p>")
    @as("TrialArn")
    trialArn: option<trialArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteTrialCommand"
  let make = (~trialName, ()) => new({trialName: trialName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DeleteStudioLifecycleConfig = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the Studio Lifecycle Configuration to delete.</p>")
    @as("StudioLifecycleConfigName")
    studioLifecycleConfigName: studioLifecycleConfigName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DeleteStudioLifecycleConfigCommand"
  let make = (~studioLifecycleConfigName, ()) =>
    new({studioLifecycleConfigName: studioLifecycleConfigName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteProject = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the project to delete.</p>") @as("ProjectName")
    projectName: projectEntityName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteProjectCommand"
  let make = (~projectName, ()) => new({projectName: projectName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeletePipeline = {
  type t
  type request = {
    @ocaml.doc("<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
         operation. An idempotent operation completes no more than one time.</p>")
    @as("ClientRequestToken")
    clientRequestToken: idempotencyToken,
    @ocaml.doc("<p>The name of the pipeline to delete.</p>") @as("PipelineName")
    pipelineName: pipelineName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline to delete.</p>")
    @as("PipelineArn")
    pipelineArn: option<pipelineArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeletePipelineCommand"
  let make = (~clientRequestToken, ~pipelineName, ()) => new({clientRequestToken, pipelineName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DeleteNotebookInstanceLifecycleConfig = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the lifecycle configuration to delete.</p>")
    @as("NotebookInstanceLifecycleConfigName")
    notebookInstanceLifecycleConfigName: notebookInstanceLifecycleConfigName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DeleteNotebookInstanceLifecycleConfigCommand"
  let make = (~notebookInstanceLifecycleConfigName, ()) =>
    new({notebookInstanceLifecycleConfigName: notebookInstanceLifecycleConfigName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteNotebookInstance = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the Amazon SageMaker notebook instance to delete.</p>")
    @as("NotebookInstanceName")
    notebookInstanceName: notebookInstanceName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DeleteNotebookInstanceCommand"
  let make = (~notebookInstanceName, ()) => new({notebookInstanceName: notebookInstanceName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteMonitoringSchedule = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the monitoring schedule to delete.</p>")
    @as("MonitoringScheduleName")
    monitoringScheduleName: monitoringScheduleName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DeleteMonitoringScheduleCommand"
  let make = (~monitoringScheduleName, ()) => new({monitoringScheduleName: monitoringScheduleName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteModelQualityJobDefinition = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the model quality monitoring job definition to delete.</p>")
    @as("JobDefinitionName")
    jobDefinitionName: monitoringJobDefinitionName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DeleteModelQualityJobDefinitionCommand"
  let make = (~jobDefinitionName, ()) => new({jobDefinitionName: jobDefinitionName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteModelPackageGroupPolicy = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the model group for which to delete the policy.</p>")
    @as("ModelPackageGroupName")
    modelPackageGroupName: entityName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DeleteModelPackageGroupPolicyCommand"
  let make = (~modelPackageGroupName, ()) => new({modelPackageGroupName: modelPackageGroupName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteModelPackageGroup = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the model group to delete.</p>") @as("ModelPackageGroupName")
    modelPackageGroupName: arnOrName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DeleteModelPackageGroupCommand"
  let make = (~modelPackageGroupName, ()) => new({modelPackageGroupName: modelPackageGroupName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteModelPackage = {
  type t
  type request = {
    @ocaml.doc("<p>The name or Amazon Resource Name (ARN) of the model package to delete.</p>
        <p>When you specify a name, the name must have 1 to 63 characters. Valid
          characters are a-z, A-Z, 0-9, and - (hyphen).</p>")
    @as("ModelPackageName")
    modelPackageName: versionedArnOrName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteModelPackageCommand"
  let make = (~modelPackageName, ()) => new({modelPackageName: modelPackageName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteModelExplainabilityJobDefinition = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the model explainability job definition to delete.</p>")
    @as("JobDefinitionName")
    jobDefinitionName: monitoringJobDefinitionName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DeleteModelExplainabilityJobDefinitionCommand"
  let make = (~jobDefinitionName, ()) => new({jobDefinitionName: jobDefinitionName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteModelBiasJobDefinition = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the model bias job definition to delete.</p>")
    @as("JobDefinitionName")
    jobDefinitionName: monitoringJobDefinitionName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DeleteModelBiasJobDefinitionCommand"
  let make = (~jobDefinitionName, ()) => new({jobDefinitionName: jobDefinitionName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteModel = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the model to delete.</p>") @as("ModelName") modelName: modelName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteModelCommand"
  let make = (~modelName, ()) => new({modelName: modelName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteImageVersion = {
  type t
  type request = {
    @ocaml.doc("<p>The version to delete.</p>") @as("Version") version: imageVersionNumber,
    @ocaml.doc("<p>The name of the image.</p>") @as("ImageName") imageName: imageName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteImageVersionCommand"
  let make = (~version, ~imageName, ()) => new({version, imageName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteImage = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the image to delete.</p>") @as("ImageName") imageName: imageName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteImageCommand"
  let make = (~imageName, ()) => new({imageName: imageName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteHumanTaskUi = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The name of the human task user interface (work task template) you want to delete.</p>"
    )
    @as("HumanTaskUiName")
    humanTaskUiName: humanTaskUiName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteHumanTaskUiCommand"
  let make = (~humanTaskUiName, ()) => new({humanTaskUiName: humanTaskUiName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteFlowDefinition = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the flow definition you are deleting.</p>") @as("FlowDefinitionName")
    flowDefinitionName: flowDefinitionName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DeleteFlowDefinitionCommand"
  let make = (~flowDefinitionName, ()) => new({flowDefinitionName: flowDefinitionName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteFeatureGroup = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the <code>FeatureGroup</code> you want to delete. The name must be unique
         within an Amazon Web Services Region in an Amazon Web Services account. </p>")
    @as("FeatureGroupName")
    featureGroupName: featureGroupName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteFeatureGroupCommand"
  let make = (~featureGroupName, ()) => new({featureGroupName: featureGroupName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteExperiment = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the experiment to delete.</p>") @as("ExperimentName")
    experimentName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the experiment that is being deleted.</p>")
    @as("ExperimentArn")
    experimentArn: option<experimentArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteExperimentCommand"
  let make = (~experimentName, ()) => new({experimentName: experimentName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DeleteEndpointConfig = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the endpoint configuration that you want to delete.</p>")
    @as("EndpointConfigName")
    endpointConfigName: endpointConfigName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DeleteEndpointConfigCommand"
  let make = (~endpointConfigName, ()) => new({endpointConfigName: endpointConfigName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteEndpoint = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the endpoint that you want to delete.</p>") @as("EndpointName")
    endpointName: endpointName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteEndpointCommand"
  let make = (~endpointName, ()) => new({endpointName: endpointName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteDeviceFleet = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the fleet to delete.</p>") @as("DeviceFleetName")
    deviceFleetName: entityName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteDeviceFleetCommand"
  let make = (~deviceFleetName, ()) => new({deviceFleetName: deviceFleetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteDataQualityJobDefinition = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the data quality monitoring job definition to delete.</p>")
    @as("JobDefinitionName")
    jobDefinitionName: monitoringJobDefinitionName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DeleteDataQualityJobDefinitionCommand"
  let make = (~jobDefinitionName, ()) => new({jobDefinitionName: jobDefinitionName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteContext = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the context to delete.</p>") @as("ContextName")
    contextName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the context.</p>") @as("ContextArn")
    contextArn: option<contextArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteContextCommand"
  let make = (~contextName, ()) => new({contextName: contextName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DeleteCodeRepository = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the Git repository to delete.</p>") @as("CodeRepositoryName")
    codeRepositoryName: entityName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DeleteCodeRepositoryCommand"
  let make = (~codeRepositoryName, ()) => new({codeRepositoryName: codeRepositoryName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteAssociation = {
  type t
  type request = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the destination.</p>") @as("DestinationArn")
    destinationArn: associationEntityArn,
    @ocaml.doc("<p>The ARN of the source.</p>") @as("SourceArn") sourceArn: associationEntityArn,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the destination.</p>") @as("DestinationArn")
    destinationArn: option<associationEntityArn>,
    @ocaml.doc("<p>The ARN of the source.</p>") @as("SourceArn")
    sourceArn: option<associationEntityArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteAssociationCommand"
  let make = (~destinationArn, ~sourceArn, ()) => new({destinationArn, sourceArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DeleteAppImageConfig = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the AppImageConfig to delete.</p>") @as("AppImageConfigName")
    appImageConfigName: appImageConfigName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DeleteAppImageConfigCommand"
  let make = (~appImageConfigName, ()) => new({appImageConfigName: appImageConfigName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteApp = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the app.</p>") @as("AppName") appName: appName,
    @ocaml.doc("<p>The type of app.</p>") @as("AppType") appType: appType,
    @ocaml.doc("<p>The user profile name.</p>") @as("UserProfileName")
    userProfileName: userProfileName,
    @ocaml.doc("<p>The domain ID.</p>") @as("DomainId") domainId: domainId,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteAppCommand"
  let make = (~appName, ~appType, ~userProfileName, ~domainId, ()) =>
    new({appName, appType, userProfileName, domainId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteAlgorithm = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the algorithm to delete.</p>") @as("AlgorithmName")
    algorithmName: entityName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteAlgorithmCommand"
  let make = (~algorithmName, ()) => new({algorithmName: algorithmName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteAction = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the action to delete.</p>") @as("ActionName")
    actionName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the action.</p>") @as("ActionArn")
    actionArn: option<actionArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteActionCommand"
  let make = (~actionName, ()) => new({actionName: actionName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreatePresignedNotebookInstanceUrl = {
  type t
  type request = {
    @ocaml.doc("<p>The duration of the session, in seconds. The default is 12 hours.</p>")
    @as("SessionExpirationDurationInSeconds")
    sessionExpirationDurationInSeconds: option<sessionExpirationDurationInSeconds>,
    @ocaml.doc("<p>The name of the notebook instance.</p>") @as("NotebookInstanceName")
    notebookInstanceName: notebookInstanceName,
  }
  type response = {
    @ocaml.doc("<p>A JSON object that contains the URL string. </p>") @as("AuthorizedUrl")
    authorizedUrl: option<notebookInstanceUrl>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreatePresignedNotebookInstanceUrlCommand"
  let make = (~notebookInstanceName, ~sessionExpirationDurationInSeconds=?, ()) =>
    new({sessionExpirationDurationInSeconds, notebookInstanceName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreatePresignedDomainUrl = {
  type t
  type request = {
    @ocaml.doc("<p>The number of seconds until the pre-signed URL expires. This value defaults to
         300.</p>")
    @as("ExpiresInSeconds")
    expiresInSeconds: option<expiresInSeconds>,
    @ocaml.doc("<p>The session expiration duration in seconds. This value defaults to 43200.</p>")
    @as("SessionExpirationDurationInSeconds")
    sessionExpirationDurationInSeconds: option<sessionExpirationDurationInSeconds>,
    @ocaml.doc("<p>The name of the UserProfile to sign-in as.</p>") @as("UserProfileName")
    userProfileName: userProfileName,
    @ocaml.doc("<p>The domain ID.</p>") @as("DomainId") domainId: domainId,
  }
  type response = {
    @ocaml.doc("<p>The presigned URL.</p>") @as("AuthorizedUrl")
    authorizedUrl: option<presignedDomainUrl>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreatePresignedDomainUrlCommand"
  let make = (
    ~userProfileName,
    ~domainId,
    ~expiresInSeconds=?,
    ~sessionExpirationDurationInSeconds=?,
    (),
  ) => new({expiresInSeconds, sessionExpirationDurationInSeconds, userProfileName, domainId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateImageVersion = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The <code>ImageName</code> of the <code>Image</code> to create a version of.</p>"
    )
    @as("ImageName")
    imageName: imageName,
    @ocaml.doc("<p>A unique ID. If not specified, the Amazon Web Services CLI and Amazon Web Services SDKs, such as the SDK for Python
        (Boto3), add a unique value to the call.</p>")
    @as("ClientToken")
    clientToken: clientToken,
    @ocaml.doc("<p>The registry path of the container image to use as the starting point for this
        version. The path is an Amazon Container Registry (ECR) URI in the following format:</p>
         <p>
            <code><acct-id>.dkr.ecr.<region>.amazonaws.com/<repo-name[:tag] or [@digest]></code>
         </p>")
    @as("BaseImage")
    baseImage: imageBaseImage,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the image version.</p>") @as("ImageVersionArn")
    imageVersionArn: option<imageVersionArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateImageVersionCommand"
  let make = (~imageName, ~clientToken, ~baseImage, ()) => new({imageName, clientToken, baseImage})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module AssociateTrialComponent = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the trial to associate with.</p>") @as("TrialName")
    trialName: experimentEntityName,
    @ocaml.doc("<p>The name of the component to associated with the trial.</p>")
    @as("TrialComponentName")
    trialComponentName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the trial.</p>") @as("TrialArn")
    trialArn: option<trialArn>,
    @ocaml.doc("<p>The ARN of the trial component.</p>") @as("TrialComponentArn")
    trialComponentArn: option<trialComponentArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "AssociateTrialComponentCommand"
  let make = (~trialName, ~trialComponentName, ()) => new({trialName, trialComponentName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module AddAssociation = {
  type t
  type request = {
    @ocaml.doc("<p>The type of association. The following are suggested uses for each type. Amazon SageMaker
        places no restrictions on their use.</p>
         <ul>
            <li>
               <p>ContributedTo - The source contributed to the destination or had a part in
            enabling the destination. For example, the training data contributed to the training
            job.</p>
            </li>
            <li>
               <p>AssociatedWith - The source is connected to the destination. For example, an
            approval workflow is associated with a model deployment.</p>
            </li>
            <li>
               <p>DerivedFrom - The destination is a modification of the source. For example, a digest
            output of a channel input for a processing job is derived from the original inputs.</p>
            </li>
            <li>
               <p>Produced - The source generated the destination. For example, a training job
            produced a model artifact.</p>
            </li>
         </ul>")
    @as("AssociationType")
    associationType: option<associationEdgeType>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the destination.</p>") @as("DestinationArn")
    destinationArn: associationEntityArn,
    @ocaml.doc("<p>The ARN of the source.</p>") @as("SourceArn") sourceArn: associationEntityArn,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the destination.</p>") @as("DestinationArn")
    destinationArn: option<associationEntityArn>,
    @ocaml.doc("<p>The ARN of the source.</p>") @as("SourceArn")
    sourceArn: option<associationEntityArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "AddAssociationCommand"
  let make = (~destinationArn, ~sourceArn, ~associationType=?, ()) =>
    new({associationType, destinationArn, sourceArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdatePipelineExecution = {
  type t
  type request = {
    @ocaml.doc("<p>This configuration, if specified, overrides the parallelism configuration 
            of the parent pipeline for this specific run.</p>")
    @as("ParallelismConfiguration")
    parallelismConfiguration: option<parallelismConfiguration>,
    @ocaml.doc("<p>The display name of the pipeline execution.</p>")
    @as("PipelineExecutionDisplayName")
    pipelineExecutionDisplayName: option<pipelineExecutionName>,
    @ocaml.doc("<p>The description of the pipeline execution.</p>")
    @as("PipelineExecutionDescription")
    pipelineExecutionDescription: option<pipelineExecutionDescription>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline execution.</p>")
    @as("PipelineExecutionArn")
    pipelineExecutionArn: pipelineExecutionArn,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the updated pipeline execution.</p>")
    @as("PipelineExecutionArn")
    pipelineExecutionArn: option<pipelineExecutionArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "UpdatePipelineExecutionCommand"
  let make = (
    ~pipelineExecutionArn,
    ~parallelismConfiguration=?,
    ~pipelineExecutionDisplayName=?,
    ~pipelineExecutionDescription=?,
    (),
  ) =>
    new({
      parallelismConfiguration,
      pipelineExecutionDisplayName,
      pipelineExecutionDescription,
      pipelineExecutionArn,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdatePipeline = {
  type t
  type request = {
    @ocaml.doc("<p>If specified, it applies to all executions of this pipeline by default.</p>")
    @as("ParallelismConfiguration")
    parallelismConfiguration: option<parallelismConfiguration>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) that the pipeline uses to execute.</p>")
    @as("RoleArn")
    roleArn: option<roleArn>,
    @ocaml.doc("<p>The description of the pipeline.</p>") @as("PipelineDescription")
    pipelineDescription: option<pipelineDescription>,
    @ocaml.doc("<p>The location of the pipeline definition stored in Amazon S3. If specified, 
            SageMaker will retrieve the pipeline definition from this location.</p>")
    @as("PipelineDefinitionS3Location")
    pipelineDefinitionS3Location: option<pipelineDefinitionS3Location>,
    @ocaml.doc("<p>The JSON pipeline definition.</p>") @as("PipelineDefinition")
    pipelineDefinition: option<pipelineDefinition>,
    @ocaml.doc("<p>The display name of the pipeline.</p>") @as("PipelineDisplayName")
    pipelineDisplayName: option<pipelineName>,
    @ocaml.doc("<p>The name of the pipeline to update.</p>") @as("PipelineName")
    pipelineName: pipelineName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the updated pipeline.</p>") @as("PipelineArn")
    pipelineArn: option<pipelineArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "UpdatePipelineCommand"
  let make = (
    ~pipelineName,
    ~parallelismConfiguration=?,
    ~roleArn=?,
    ~pipelineDescription=?,
    ~pipelineDefinitionS3Location=?,
    ~pipelineDefinition=?,
    ~pipelineDisplayName=?,
    (),
  ) =>
    new({
      parallelismConfiguration,
      roleArn,
      pipelineDescription,
      pipelineDefinitionS3Location,
      pipelineDefinition,
      pipelineDisplayName,
      pipelineName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdateNotebookInstance = {
  type t
  type request = {
    @ocaml.doc("<p>Whether root access is enabled or disabled for users of the notebook instance. The
            default value is <code>Enabled</code>.</p>
        <note>
            <p>If you set this to <code>Disabled</code>, users don't have root access on the
                notebook instance, but lifecycle configuration scripts still run with root
                permissions.</p>
        </note>")
    @as("RootAccess")
    rootAccess: option<rootAccess>,
    @ocaml.doc("<p>A list of names or URLs of the default Git repositories to remove from this notebook
            instance. This operation is idempotent. If you specify a Git repository that is not
            associated with the notebook instance when you call this method, it does not throw an
            error.</p>")
    @as("DisassociateAdditionalCodeRepositories")
    disassociateAdditionalCodeRepositories: option<disassociateAdditionalCodeRepositories>,
    @ocaml.doc("<p>The name or URL of the default Git repository to remove from this notebook instance.
            This operation is idempotent. If you specify a Git repository that is not associated
            with the notebook instance when you call this method, it does not throw an error.</p>")
    @as("DisassociateDefaultCodeRepository")
    disassociateDefaultCodeRepository: option<disassociateDefaultCodeRepository>,
    @ocaml.doc("<p>A list of the Elastic Inference (EI) instance types to remove from this notebook
            instance. This operation is idempotent. If you specify an accelerator type that is not
            associated with the notebook instance when you call this method, it does not throw an
            error.</p>")
    @as("DisassociateAcceleratorTypes")
    disassociateAcceleratorTypes: option<disassociateNotebookInstanceAcceleratorTypes>,
    @ocaml.doc("<p>A list of the Elastic Inference (EI) instance types to associate with this notebook
            instance. Currently only one EI instance type can be associated with a notebook
            instance. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html\">Using Elastic Inference in Amazon
                SageMaker</a>.</p>")
    @as("AcceleratorTypes")
    acceleratorTypes: option<notebookInstanceAcceleratorTypes>,
    @ocaml.doc("<p>An array of up to three Git repositories to associate with the notebook instance.
            These can be either the names of Git repositories stored as resources in your account,
            or the URL of Git repositories in <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html\">Amazon Web Services CodeCommit</a> or in any
            other Git repository. These repositories are cloned at the same level as the default
            repository of your notebook instance. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html\">Associating Git
                Repositories with Amazon SageMaker Notebook Instances</a>.</p>")
    @as("AdditionalCodeRepositories")
    additionalCodeRepositories: option<additionalCodeRepositoryNamesOrUrls>,
    @ocaml.doc("<p>The Git repository to associate with the notebook instance as its default code
            repository. This can be either the name of a Git repository stored as a resource in your
            account, or the URL of a Git repository in <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html\">Amazon Web Services CodeCommit</a> or in any
            other Git repository. When you open a notebook instance, it opens in the directory that
            contains this repository. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html\">Associating Git Repositories with Amazon SageMaker
                Notebook Instances</a>.</p>")
    @as("DefaultCodeRepository")
    defaultCodeRepository: option<codeRepositoryNameOrUrl>,
    @ocaml.doc("<p>The size, in GB, of the ML storage volume to attach to the notebook instance. The
            default value is 5 GB. ML storage volumes are encrypted, so Amazon SageMaker can't determine the
            amount of available free space on the volume. Because of this, you can increase the
            volume size when you update a notebook instance, but you can't decrease the volume size.
            If you want to decrease the size of the ML storage volume in use, create a new notebook
            instance with the desired size.</p>")
    @as("VolumeSizeInGB")
    volumeSizeInGB: option<notebookInstanceVolumeSizeInGB>,
    @ocaml.doc("<p>Set to <code>true</code> to remove the notebook instance lifecycle configuration
            currently associated with the notebook instance. This operation is idempotent. If you
            specify a lifecycle configuration that is not associated with the notebook instance when
            you call this method, it does not throw an error.</p>")
    @as("DisassociateLifecycleConfig")
    disassociateLifecycleConfig: option<disassociateNotebookInstanceLifecycleConfig>,
    @ocaml.doc("<p>The name of a lifecycle configuration to associate with the notebook instance. For
            information about lifestyle configurations, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html\">Step 2.1: (Optional)
                Customize a Notebook Instance</a>.</p>")
    @as("LifecycleConfigName")
    lifecycleConfigName: option<notebookInstanceLifecycleConfigName>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker can assume to access the
            notebook instance. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html\">Amazon SageMaker Roles</a>. </p>
        <note>
            <p>To be able to pass this role to Amazon SageMaker, the caller of this API must have the
                    <code>iam:PassRole</code> permission.</p>
        </note>")
    @as("RoleArn")
    roleArn: option<roleArn>,
    @ocaml.doc("<p>The Amazon ML compute instance type.</p>") @as("InstanceType")
    instanceType: option<instanceType>,
    @ocaml.doc("<p>The name of the notebook instance to update.</p>") @as("NotebookInstanceName")
    notebookInstanceName: notebookInstanceName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "UpdateNotebookInstanceCommand"
  let make = (
    ~notebookInstanceName,
    ~rootAccess=?,
    ~disassociateAdditionalCodeRepositories=?,
    ~disassociateDefaultCodeRepository=?,
    ~disassociateAcceleratorTypes=?,
    ~acceleratorTypes=?,
    ~additionalCodeRepositories=?,
    ~defaultCodeRepository=?,
    ~volumeSizeInGB=?,
    ~disassociateLifecycleConfig=?,
    ~lifecycleConfigName=?,
    ~roleArn=?,
    ~instanceType=?,
    (),
  ) =>
    new({
      rootAccess,
      disassociateAdditionalCodeRepositories,
      disassociateDefaultCodeRepository,
      disassociateAcceleratorTypes,
      acceleratorTypes,
      additionalCodeRepositories,
      defaultCodeRepository,
      volumeSizeInGB,
      disassociateLifecycleConfig,
      lifecycleConfigName,
      roleArn,
      instanceType,
      notebookInstanceName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module UpdateImage = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The new Amazon Resource Name (ARN) for the IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>"
    )
    @as("RoleArn")
    roleArn: option<roleArn>,
    @ocaml.doc("<p>The name of the image to update.</p>") @as("ImageName") imageName: imageName,
    @ocaml.doc("<p>The new display name for the image.</p>") @as("DisplayName")
    displayName: option<imageDisplayName>,
    @ocaml.doc("<p>The new description for the image.</p>") @as("Description")
    description: option<imageDescription>,
    @ocaml.doc("<p>A list of properties to delete. Only the <code>Description</code> and
        <code>DisplayName</code> properties can be deleted.</p>")
    @as("DeleteProperties")
    deleteProperties: option<imageDeletePropertyList>,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the image.</p>") @as("ImageArn")
    imageArn: option<imageArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "UpdateImageCommand"
  let make = (~imageName, ~roleArn=?, ~displayName=?, ~description=?, ~deleteProperties=?, ()) =>
    new({roleArn, imageName, displayName, description, deleteProperties})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdateDeviceFleet = {
  type t
  type request = {
    @ocaml.doc("<p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. 
      The name of the role alias generated will match this pattern: 
      \"SageMakerEdge-{DeviceFleetName}\".</p>
         <p>For example, if your device fleet is called \"demo-fleet\", the name of 
      the role alias will be \"SageMakerEdge-demo-fleet\".</p>")
    @as("EnableIotRoleAlias")
    enableIotRoleAlias: option<enableIotRoleAlias>,
    @ocaml.doc("<p>Output configuration  for storing sample data collected by the fleet.</p>")
    @as("OutputConfig")
    outputConfig: edgeOutputConfig,
    @ocaml.doc("<p>Description of the fleet.</p>") @as("Description")
    description: option<deviceFleetDescription>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the device.</p>") @as("RoleArn")
    roleArn: option<roleArn>,
    @ocaml.doc("<p>The name of the fleet.</p>") @as("DeviceFleetName") deviceFleetName: entityName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "UpdateDeviceFleetCommand"
  let make = (
    ~outputConfig,
    ~deviceFleetName,
    ~enableIotRoleAlias=?,
    ~description=?,
    ~roleArn=?,
    (),
  ) => new({enableIotRoleAlias, outputConfig, description, roleArn, deviceFleetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module UpdateContext = {
  type t
  type request = {
    @ocaml.doc("<p>A list of properties to remove.</p>") @as("PropertiesToRemove")
    propertiesToRemove: option<listLineageEntityParameterKey>,
    @ocaml.doc("<p>The new list of properties. Overwrites the current property list.</p>")
    @as("Properties")
    properties: option<lineageEntityParameters>,
    @ocaml.doc("<p>The new description for the context.</p>") @as("Description")
    description: option<experimentDescription>,
    @ocaml.doc("<p>The name of the context to update.</p>") @as("ContextName")
    contextName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the context.</p>") @as("ContextArn")
    contextArn: option<contextArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "UpdateContextCommand"
  let make = (~contextName, ~propertiesToRemove=?, ~properties=?, ~description=?, ()) =>
    new({propertiesToRemove, properties, description, contextName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdateCodeRepository = {
  type t
  type request = {
    @ocaml.doc("<p>The configuration of the git repository, including the URL and the Amazon Resource
            Name (ARN) of the Amazon Web Services Secrets Manager secret that contains the credentials used to
            access the repository. The secret must have a staging label of <code>AWSCURRENT</code>
            and must be in the following format:</p>
        <p>
            <code>{\"username\": <i>UserName</i>, \"password\":
                    <i>Password</i>}</code>
        </p>")
    @as("GitConfig")
    gitConfig: option<gitConfigForUpdate>,
    @ocaml.doc("<p>The name of the Git repository to update.</p>") @as("CodeRepositoryName")
    codeRepositoryName: entityName,
  }
  type response = {
    @ocaml.doc("<p>The ARN of the Git repository.</p>") @as("CodeRepositoryArn")
    codeRepositoryArn: codeRepositoryArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "UpdateCodeRepositoryCommand"
  let make = (~codeRepositoryName, ~gitConfig=?, ()) => new({gitConfig, codeRepositoryName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdateArtifact = {
  type t
  type request = {
    @ocaml.doc("<p>A list of properties to remove.</p>") @as("PropertiesToRemove")
    propertiesToRemove: option<listLineageEntityParameterKey>,
    @ocaml.doc("<p>The new list of properties. Overwrites the current property list.</p>")
    @as("Properties")
    properties: option<lineageEntityParameters>,
    @ocaml.doc("<p>The new name for the artifact.</p>") @as("ArtifactName")
    artifactName: option<experimentEntityName>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the artifact to update.</p>")
    @as("ArtifactArn")
    artifactArn: artifactArn,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the artifact.</p>") @as("ArtifactArn")
    artifactArn: option<artifactArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "UpdateArtifactCommand"
  let make = (~artifactArn, ~propertiesToRemove=?, ~properties=?, ~artifactName=?, ()) =>
    new({propertiesToRemove, properties, artifactName, artifactArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdateAction = {
  type t
  type request = {
    @ocaml.doc("<p>A list of properties to remove.</p>") @as("PropertiesToRemove")
    propertiesToRemove: option<listLineageEntityParameterKey>,
    @ocaml.doc("<p>The new list of properties. Overwrites the current property list.</p>")
    @as("Properties")
    properties: option<lineageEntityParameters>,
    @ocaml.doc("<p>The new status for the action.</p>") @as("Status") status: option<actionStatus>,
    @ocaml.doc("<p>The new description for the action.</p>") @as("Description")
    description: option<experimentDescription>,
    @ocaml.doc("<p>The name of the action to update.</p>") @as("ActionName")
    actionName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the action.</p>") @as("ActionArn")
    actionArn: option<actionArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "UpdateActionCommand"
  let make = (~actionName, ~propertiesToRemove=?, ~properties=?, ~status=?, ~description=?, ()) =>
    new({propertiesToRemove, properties, status, description, actionName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module RetryPipelineExecution = {
  type t
  type request = {
    @ocaml.doc("<p>This configuration, if specified, overrides the parallelism configuration 
            of the parent pipeline.</p>")
    @as("ParallelismConfiguration")
    parallelismConfiguration: option<parallelismConfiguration>,
    @ocaml.doc("<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
         operation. An idempotent operation completes no more than once.</p>")
    @as("ClientRequestToken")
    clientRequestToken: idempotencyToken,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline execution.</p>")
    @as("PipelineExecutionArn")
    pipelineExecutionArn: pipelineExecutionArn,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline execution.</p>")
    @as("PipelineExecutionArn")
    pipelineExecutionArn: option<pipelineExecutionArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "RetryPipelineExecutionCommand"
  let make = (~clientRequestToken, ~pipelineExecutionArn, ~parallelismConfiguration=?, ()) =>
    new({parallelismConfiguration, clientRequestToken, pipelineExecutionArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeTrial = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the trial to describe.</p>") @as("TrialName")
    trialName: experimentEntityName,
  }
  type response = {
    @as("MetadataProperties") metadataProperties: option<metadataProperties>,
    @ocaml.doc("<p>Who last modified the trial.</p>") @as("LastModifiedBy")
    lastModifiedBy: option<userContext>,
    @ocaml.doc("<p>When the trial was last modified.</p>") @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @ocaml.doc("<p>Who created the trial.</p>") @as("CreatedBy") createdBy: option<userContext>,
    @ocaml.doc("<p>When the trial was created.</p>") @as("CreationTime")
    creationTime: option<timestamp_>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the source and, optionally, the job type.</p>")
    @as("Source")
    source: option<trialSource>,
    @ocaml.doc("<p>The name of the experiment the trial is part of.</p>") @as("ExperimentName")
    experimentName: option<experimentEntityName>,
    @ocaml.doc("<p>The name of the trial as displayed. If <code>DisplayName</code> isn't specified,
        <code>TrialName</code> is displayed.</p>")
    @as("DisplayName")
    displayName: option<experimentEntityName>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the trial.</p>") @as("TrialArn")
    trialArn: option<trialArn>,
    @ocaml.doc("<p>The name of the trial.</p>") @as("TrialName")
    trialName: option<experimentEntityName>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DescribeTrialCommand"
  let make = (~trialName, ()) => new({trialName: trialName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeSubscribedWorkteam = {
  type t
  type request = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the subscribed work team to describe.</p>")
    @as("WorkteamArn")
    workteamArn: workteamArn,
  }
  type response = {
    @ocaml.doc(
      "<p>A <code>Workteam</code> instance that contains information about the work team.</p>"
    )
    @as("SubscribedWorkteam")
    subscribedWorkteam: subscribedWorkteam,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeSubscribedWorkteamCommand"
  let make = (~workteamArn, ()) => new({workteamArn: workteamArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribePipelineExecution = {
  type t
  type request = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline execution.</p>")
    @as("PipelineExecutionArn")
    pipelineExecutionArn: pipelineExecutionArn,
  }
  type response = {
    @ocaml.doc("<p>The parallelism configuration applied to the pipeline.</p>")
    @as("ParallelismConfiguration")
    parallelismConfiguration: option<parallelismConfiguration>,
    @as("LastModifiedBy") lastModifiedBy: option<userContext>,
    @as("CreatedBy") createdBy: option<userContext>,
    @ocaml.doc("<p>The time when the pipeline execution was modified last.</p>")
    @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @ocaml.doc("<p>The time when the pipeline execution was created.</p>") @as("CreationTime")
    creationTime: option<timestamp_>,
    @ocaml.doc("<p>If the execution failed, a message describing why.</p>") @as("FailureReason")
    failureReason: option<pipelineExecutionFailureReason>,
    @as("PipelineExperimentConfig") pipelineExperimentConfig: option<pipelineExperimentConfig>,
    @ocaml.doc("<p>The description of the pipeline execution.</p>")
    @as("PipelineExecutionDescription")
    pipelineExecutionDescription: option<pipelineExecutionDescription>,
    @ocaml.doc("<p>The status of the pipeline execution.</p>") @as("PipelineExecutionStatus")
    pipelineExecutionStatus: option<pipelineExecutionStatus>,
    @ocaml.doc("<p>The display name of the pipeline execution.</p>")
    @as("PipelineExecutionDisplayName")
    pipelineExecutionDisplayName: option<pipelineExecutionName>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline execution.</p>")
    @as("PipelineExecutionArn")
    pipelineExecutionArn: option<pipelineExecutionArn>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline.</p>") @as("PipelineArn")
    pipelineArn: option<pipelineArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribePipelineExecutionCommand"
  let make = (~pipelineExecutionArn, ()) => new({pipelineExecutionArn: pipelineExecutionArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribePipeline = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the pipeline to describe.</p>") @as("PipelineName")
    pipelineName: pipelineName,
  }
  type response = {
    @ocaml.doc("<p>Lists the parallelism configuration applied to the pipeline.</p>")
    @as("ParallelismConfiguration")
    parallelismConfiguration: option<parallelismConfiguration>,
    @as("LastModifiedBy") lastModifiedBy: option<userContext>,
    @as("CreatedBy") createdBy: option<userContext>,
    @ocaml.doc("<p>The time when the pipeline was last run.</p>") @as("LastRunTime")
    lastRunTime: option<timestamp_>,
    @ocaml.doc("<p>The time when the pipeline was last modified.</p>") @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @ocaml.doc("<p>The time when the pipeline was created.</p>") @as("CreationTime")
    creationTime: option<timestamp_>,
    @ocaml.doc("<p>The status of the pipeline execution.</p>") @as("PipelineStatus")
    pipelineStatus: option<pipelineStatus>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) that the pipeline uses to execute.</p>")
    @as("RoleArn")
    roleArn: option<roleArn>,
    @ocaml.doc("<p>The description of the pipeline.</p>") @as("PipelineDescription")
    pipelineDescription: option<pipelineDescription>,
    @ocaml.doc("<p>The JSON pipeline definition.</p>") @as("PipelineDefinition")
    pipelineDefinition: option<pipelineDefinition>,
    @ocaml.doc("<p>The display name of the pipeline.</p>") @as("PipelineDisplayName")
    pipelineDisplayName: option<pipelineName>,
    @ocaml.doc("<p>The name of the pipeline.</p>") @as("PipelineName")
    pipelineName: option<pipelineName>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline.</p>") @as("PipelineArn")
    pipelineArn: option<pipelineArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DescribePipelineCommand"
  let make = (~pipelineName, ()) => new({pipelineName: pipelineName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeNotebookInstance = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the notebook instance that you want information about.</p>")
    @as("NotebookInstanceName")
    notebookInstanceName: notebookInstanceName,
  }
  type response = {
    @ocaml.doc("<p>The platform identifier of the notebook instance runtime environment.</p>")
    @as("PlatformIdentifier")
    platformIdentifier: option<platformIdentifier>,
    @ocaml.doc("<p>Whether root access is enabled or disabled for users of the notebook instance.</p>
        <note>
            <p>Lifecycle configurations need root access to be able to set up a notebook
                instance. Because of this, lifecycle configurations associated with a notebook
                instance always run with root access even if you disable root access for
                users.</p>
        </note>")
    @as("RootAccess")
    rootAccess: option<rootAccess>,
    @ocaml.doc("<p>An array of up to three Git repositories associated with the notebook instance. These
            can be either the names of Git repositories stored as resources in your account, or the
            URL of Git repositories in <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html\">Amazon Web Services CodeCommit</a> or in any
            other Git repository. These repositories are cloned at the same level as the default
            repository of your notebook instance. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html\">Associating Git
                Repositories with Amazon SageMaker Notebook Instances</a>.</p>")
    @as("AdditionalCodeRepositories")
    additionalCodeRepositories: option<additionalCodeRepositoryNamesOrUrls>,
    @ocaml.doc("<p>The Git repository associated with the notebook instance as its default code
            repository. This can be either the name of a Git repository stored as a resource in your
            account, or the URL of a Git repository in <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html\">Amazon Web Services CodeCommit</a> or in any
            other Git repository. When you open a notebook instance, it opens in the directory that
            contains this repository. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html\">Associating Git Repositories with Amazon SageMaker
                Notebook Instances</a>.</p>")
    @as("DefaultCodeRepository")
    defaultCodeRepository: option<codeRepositoryNameOrUrl>,
    @ocaml.doc("<p>A list of the Elastic Inference (EI) instance types associated with this notebook
            instance. Currently only one EI instance type can be associated with a notebook
            instance. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html\">Using Elastic Inference in Amazon
                SageMaker</a>.</p>")
    @as("AcceleratorTypes")
    acceleratorTypes: option<notebookInstanceAcceleratorTypes>,
    @ocaml.doc(
      "<p>The size, in GB, of the ML storage volume attached to the notebook instance.</p>"
    )
    @as("VolumeSizeInGB")
    volumeSizeInGB: option<notebookInstanceVolumeSizeInGB>,
    @ocaml.doc("<p>Describes whether Amazon SageMaker provides internet access to the notebook instance. If this
            value is set to <i>Disabled</i>, the notebook instance does not have
            internet access, and cannot connect to Amazon SageMaker training and endpoint services.</p>
        <p>For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access\">Notebook Instances Are Internet-Enabled by Default</a>.</p>")
    @as("DirectInternetAccess")
    directInternetAccess: option<directInternetAccess>,
    @ocaml.doc("<p>Returns the name of a notebook instance lifecycle configuration.</p>
        <p>For information about notebook instance lifestyle configurations, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html\">Step
                2.1: (Optional) Customize a Notebook Instance</a>
        </p>")
    @as("NotebookInstanceLifecycleConfigName")
    notebookInstanceLifecycleConfigName: option<notebookInstanceLifecycleConfigName>,
    @ocaml.doc("<p>A timestamp. Use this parameter to return the time when the notebook instance was
            created</p>")
    @as("CreationTime")
    creationTime: option<creationTime>,
    @ocaml.doc("<p>A timestamp. Use this parameter to retrieve the time when the notebook instance was
            last modified. </p>")
    @as("LastModifiedTime")
    lastModifiedTime: option<lastModifiedTime>,
    @ocaml.doc("<p>The network interface IDs that Amazon SageMaker created at the time of creating the instance.
        </p>")
    @as("NetworkInterfaceId")
    networkInterfaceId: option<networkInterfaceId>,
    @ocaml.doc("<p>The Amazon Web Services KMS key ID Amazon SageMaker uses to encrypt data when storing it on the ML storage
            volume attached to the instance. </p>")
    @as("KmsKeyId")
    kmsKeyId: option<kmsKeyId>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the IAM role associated with the instance.
        </p>")
    @as("RoleArn")
    roleArn: option<roleArn>,
    @ocaml.doc("<p>The IDs of the VPC security groups.</p>") @as("SecurityGroups")
    securityGroups: option<securityGroupIds>,
    @ocaml.doc("<p>The ID of the VPC subnet.</p>") @as("SubnetId") subnetId: option<subnetId>,
    @ocaml.doc("<p>The type of ML compute instance running on the notebook instance.</p>")
    @as("InstanceType")
    instanceType: option<instanceType>,
    @ocaml.doc("<p>The URL that you use to connect to the Jupyter notebook that is running in your
            notebook instance. </p>")
    @as("Url")
    url: option<notebookInstanceUrl>,
    @ocaml.doc("<p>If status is <code>Failed</code>, the reason it failed.</p>")
    @as("FailureReason")
    failureReason: option<failureReason>,
    @ocaml.doc("<p>The status of the notebook instance.</p>") @as("NotebookInstanceStatus")
    notebookInstanceStatus: option<notebookInstanceStatus>,
    @ocaml.doc("<p>The name of the Amazon SageMaker notebook instance. </p>")
    @as("NotebookInstanceName")
    notebookInstanceName: option<notebookInstanceName>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the notebook instance.</p>")
    @as("NotebookInstanceArn")
    notebookInstanceArn: option<notebookInstanceArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeNotebookInstanceCommand"
  let make = (~notebookInstanceName, ()) => new({notebookInstanceName: notebookInstanceName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeModelPackageGroup = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the model group to describe.</p>") @as("ModelPackageGroupName")
    modelPackageGroupName: arnOrName,
  }
  type response = {
    @ocaml.doc("<p>The status of the model group.</p>") @as("ModelPackageGroupStatus")
    modelPackageGroupStatus: modelPackageGroupStatus,
    @as("CreatedBy") createdBy: userContext,
    @ocaml.doc("<p>The time that the model group was created.</p>") @as("CreationTime")
    creationTime: creationTime,
    @ocaml.doc("<p>A description of the model group.</p>") @as("ModelPackageGroupDescription")
    modelPackageGroupDescription: option<entityDescription>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model group.</p>")
    @as("ModelPackageGroupArn")
    modelPackageGroupArn: modelPackageGroupArn,
    @ocaml.doc("<p>The name of the model group.</p>") @as("ModelPackageGroupName")
    modelPackageGroupName: entityName,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeModelPackageGroupCommand"
  let make = (~modelPackageGroupName, ()) => new({modelPackageGroupName: modelPackageGroupName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeLineageGroup = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the lineage group.</p>") @as("LineageGroupName")
    lineageGroupName: experimentEntityName,
  }
  type response = {
    @as("LastModifiedBy") lastModifiedBy: option<userContext>,
    @ocaml.doc("<p>The last modified time of the lineage group.</p>") @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @as("CreatedBy") createdBy: option<userContext>,
    @ocaml.doc("<p>The creation time of lineage group.</p>") @as("CreationTime")
    creationTime: option<timestamp_>,
    @ocaml.doc("<p>The description of the lineage group.</p>") @as("Description")
    description: option<experimentDescription>,
    @ocaml.doc("<p>The display name of the lineage group.</p>") @as("DisplayName")
    displayName: option<experimentEntityName>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the lineage group.</p>") @as("LineageGroupArn")
    lineageGroupArn: option<lineageGroupArn>,
    @ocaml.doc("<p>The name of the lineage group.</p>") @as("LineageGroupName")
    lineageGroupName: option<experimentEntityName>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeLineageGroupCommand"
  let make = (~lineageGroupName, ()) => new({lineageGroupName: lineageGroupName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeHumanTaskUi = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the human task user interface 
      (worker task template) you want information about.</p>")
    @as("HumanTaskUiName")
    humanTaskUiName: humanTaskUiName,
  }
  type response = {
    @as("UiTemplate") uiTemplate: uiTemplateInfo,
    @ocaml.doc("<p>The timestamp when the human task user interface was created.</p>")
    @as("CreationTime")
    creationTime: timestamp_,
    @ocaml.doc(
      "<p>The status of the human task user interface (worker task template). Valid values are listed below.</p>"
    )
    @as("HumanTaskUiStatus")
    humanTaskUiStatus: option<humanTaskUiStatus>,
    @ocaml.doc("<p>The name of the human task user interface (worker task template).</p>")
    @as("HumanTaskUiName")
    humanTaskUiName: humanTaskUiName,
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) of the human task user interface (worker task template).</p>"
    )
    @as("HumanTaskUiArn")
    humanTaskUiArn: humanTaskUiArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeHumanTaskUiCommand"
  let make = (~humanTaskUiName, ()) => new({humanTaskUiName: humanTaskUiName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeExperiment = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the experiment to describe.</p>") @as("ExperimentName")
    experimentName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>Who last modified the experiment.</p>") @as("LastModifiedBy")
    lastModifiedBy: option<userContext>,
    @ocaml.doc("<p>When the experiment was last modified.</p>") @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @ocaml.doc("<p>Who created the experiment.</p>") @as("CreatedBy")
    createdBy: option<userContext>,
    @ocaml.doc("<p>When the experiment was created.</p>") @as("CreationTime")
    creationTime: option<timestamp_>,
    @ocaml.doc("<p>The description of the experiment.</p>") @as("Description")
    description: option<experimentDescription>,
    @ocaml.doc("<p>The ARN of the source and, optionally, the type.</p>") @as("Source")
    source: option<experimentSource>,
    @ocaml.doc("<p>The name of the experiment as displayed. If <code>DisplayName</code> isn't specified,
        <code>ExperimentName</code> is displayed.</p>")
    @as("DisplayName")
    displayName: option<experimentEntityName>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the experiment.</p>") @as("ExperimentArn")
    experimentArn: option<experimentArn>,
    @ocaml.doc("<p>The name of the experiment.</p>") @as("ExperimentName")
    experimentName: option<experimentEntityName>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DescribeExperimentCommand"
  let make = (~experimentName, ()) => new({experimentName: experimentName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeEdgePackagingJob = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the edge packaging job.</p>") @as("EdgePackagingJobName")
    edgePackagingJobName: entityName,
  }
  type response = {
    @ocaml.doc("<p>The output of a SageMaker Edge Manager deployable resource.</p>")
    @as("PresetDeploymentOutput")
    presetDeploymentOutput: option<edgePresetDeploymentOutput>,
    @ocaml.doc("<p>The signature document of files in the model artifact.</p>")
    @as("ModelSignature")
    modelSignature: option<string_>,
    @ocaml.doc("<p>The Amazon Simple Storage (S3) URI where model artifacts ares stored.</p>")
    @as("ModelArtifact")
    modelArtifact: option<s3Uri>,
    @ocaml.doc("<p>The timestamp of when the job was last updated.</p>") @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @ocaml.doc("<p>The timestamp of when the packaging job was created.</p>") @as("CreationTime")
    creationTime: option<timestamp_>,
    @ocaml.doc("<p>Returns a message describing the job status and error messages.</p>")
    @as("EdgePackagingJobStatusMessage")
    edgePackagingJobStatusMessage: option<string_>,
    @ocaml.doc("<p>The current status of the packaging job.</p>") @as("EdgePackagingJobStatus")
    edgePackagingJobStatus: edgePackagingJobStatus,
    @ocaml.doc(
      "<p>The Amazon Web Services KMS key to use when encrypting the EBS volume the job run on.</p>"
    )
    @as("ResourceKey")
    resourceKey: option<kmsKeyId>,
    @ocaml.doc("<p>The output configuration for the edge packaging job.</p>") @as("OutputConfig")
    outputConfig: option<edgeOutputConfig>,
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to  download and upload the model, and to contact Neo.</p>"
    )
    @as("RoleArn")
    roleArn: option<roleArn>,
    @ocaml.doc("<p>The version of the model.</p>") @as("ModelVersion")
    modelVersion: option<edgeVersion>,
    @ocaml.doc("<p>The name of the model.</p>") @as("ModelName") modelName: option<entityName>,
    @ocaml.doc(
      "<p>The name of the SageMaker Neo compilation job that is used to locate model artifacts that are being packaged.</p>"
    )
    @as("CompilationJobName")
    compilationJobName: option<entityName>,
    @ocaml.doc("<p>The name of the edge packaging job.</p>") @as("EdgePackagingJobName")
    edgePackagingJobName: entityName,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the edge packaging job.</p>")
    @as("EdgePackagingJobArn")
    edgePackagingJobArn: edgePackagingJobArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeEdgePackagingJobCommand"
  let make = (~edgePackagingJobName, ()) => new({edgePackagingJobName: edgePackagingJobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeDeviceFleet = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the fleet.</p>") @as("DeviceFleetName") deviceFleetName: entityName,
  }
  type response = {
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) alias created in Amazon Web Services Internet of Things (IoT).</p>"
    )
    @as("IotRoleAlias")
    iotRoleAlias: option<iotRoleAlias>,
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) that has access to Amazon Web Services Internet of Things (IoT).</p>"
    )
    @as("RoleArn")
    roleArn: option<roleArn>,
    @ocaml.doc("<p>Timestamp of when the device fleet was last updated.</p>")
    @as("LastModifiedTime")
    lastModifiedTime: timestamp_,
    @ocaml.doc("<p>Timestamp of when the device fleet was created.</p>") @as("CreationTime")
    creationTime: timestamp_,
    @ocaml.doc("<p>A description of the fleet.</p>") @as("Description")
    description: option<deviceFleetDescription>,
    @ocaml.doc("<p>The output configuration for storing sampled data.</p>") @as("OutputConfig")
    outputConfig: edgeOutputConfig,
    @ocaml.doc("<p>The The Amazon Resource Name (ARN) of the fleet.</p>") @as("DeviceFleetArn")
    deviceFleetArn: deviceFleetArn,
    @ocaml.doc("<p>The name of the fleet.</p>") @as("DeviceFleetName") deviceFleetName: entityName,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeDeviceFleetCommand"
  let make = (~deviceFleetName, ()) => new({deviceFleetName: deviceFleetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeContext = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the context to describe.</p>") @as("ContextName")
    contextName: experimentEntityNameOrArn,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the lineage group.</p>") @as("LineageGroupArn")
    lineageGroupArn: option<lineageGroupArn>,
    @as("LastModifiedBy") lastModifiedBy: option<userContext>,
    @ocaml.doc("<p>When the context was last modified.</p>") @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @as("CreatedBy") createdBy: option<userContext>,
    @ocaml.doc("<p>When the context was created.</p>") @as("CreationTime")
    creationTime: option<timestamp_>,
    @ocaml.doc("<p>A list of the context's properties.</p>") @as("Properties")
    properties: option<lineageEntityParameters>,
    @ocaml.doc("<p>The description of the context.</p>") @as("Description")
    description: option<experimentDescription>,
    @ocaml.doc("<p>The type of the context.</p>") @as("ContextType") contextType: option<string256>,
    @ocaml.doc("<p>The source of the context.</p>") @as("Source") source: option<contextSource>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the context.</p>") @as("ContextArn")
    contextArn: option<contextArn>,
    @ocaml.doc("<p>The name of the context.</p>") @as("ContextName")
    contextName: option<experimentEntityName>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DescribeContextCommand"
  let make = (~contextName, ()) => new({contextName: contextName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeCodeRepository = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the Git repository to describe.</p>") @as("CodeRepositoryName")
    codeRepositoryName: entityName,
  }
  type response = {
    @ocaml.doc("<p>Configuration details about the repository, including the URL where the repository is
            located, the default branch, and the Amazon Resource Name (ARN) of the Amazon Web Services Secrets
            Manager secret that contains the credentials used to access the repository.</p>")
    @as("GitConfig")
    gitConfig: option<gitConfig>,
    @ocaml.doc("<p>The date and time that the repository was last changed.</p>")
    @as("LastModifiedTime")
    lastModifiedTime: lastModifiedTime,
    @ocaml.doc("<p>The date and time that the repository was created.</p>") @as("CreationTime")
    creationTime: creationTime,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Git repository.</p>")
    @as("CodeRepositoryArn")
    codeRepositoryArn: codeRepositoryArn,
    @ocaml.doc("<p>The name of the Git repository.</p>") @as("CodeRepositoryName")
    codeRepositoryName: entityName,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeCodeRepositoryCommand"
  let make = (~codeRepositoryName, ()) => new({codeRepositoryName: codeRepositoryName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeApp = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the app.</p>") @as("AppName") appName: appName,
    @ocaml.doc("<p>The type of app.</p>") @as("AppType") appType: appType,
    @ocaml.doc("<p>The user profile name.</p>") @as("UserProfileName")
    userProfileName: userProfileName,
    @ocaml.doc("<p>The domain ID.</p>") @as("DomainId") domainId: domainId,
  }
  type response = {
    @ocaml.doc(
      "<p>The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.</p>"
    )
    @as("ResourceSpec")
    resourceSpec: option<resourceSpec>,
    @ocaml.doc("<p>The failure reason.</p>") @as("FailureReason")
    failureReason: option<failureReason>,
    @ocaml.doc("<p>The creation time.</p>") @as("CreationTime") creationTime: option<creationTime>,
    @ocaml.doc(
      "<p>The timestamp of the last user's activity. <code>LastUserActivityTimestamp</code> is also updated when SageMaker performs health checks without user activity. As a result, this value is set to the same value as <code>LastHealthCheckTimestamp</code>.</p>"
    )
    @as("LastUserActivityTimestamp")
    lastUserActivityTimestamp: option<timestamp_>,
    @ocaml.doc("<p>The timestamp of the last health check.</p>") @as("LastHealthCheckTimestamp")
    lastHealthCheckTimestamp: option<timestamp_>,
    @ocaml.doc("<p>The status.</p>") @as("Status") status: option<appStatus>,
    @ocaml.doc("<p>The user profile name.</p>") @as("UserProfileName")
    userProfileName: option<userProfileName>,
    @ocaml.doc("<p>The domain ID.</p>") @as("DomainId") domainId: option<domainId>,
    @ocaml.doc("<p>The name of the app.</p>") @as("AppName") appName: option<appName>,
    @ocaml.doc("<p>The type of app.</p>") @as("AppType") appType: option<appType>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the app.</p>") @as("AppArn")
    appArn: option<appArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DescribeAppCommand"
  let make = (~appName, ~appType, ~userProfileName, ~domainId, ()) =>
    new({appName, appType, userProfileName, domainId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeAction = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the action to describe.</p>") @as("ActionName")
    actionName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the lineage group.</p>") @as("LineageGroupArn")
    lineageGroupArn: option<lineageGroupArn>,
    @as("MetadataProperties") metadataProperties: option<metadataProperties>,
    @as("LastModifiedBy") lastModifiedBy: option<userContext>,
    @ocaml.doc("<p>When the action was last modified.</p>") @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @as("CreatedBy") createdBy: option<userContext>,
    @ocaml.doc("<p>When the action was created.</p>") @as("CreationTime")
    creationTime: option<timestamp_>,
    @ocaml.doc("<p>A list of the action's properties.</p>") @as("Properties")
    properties: option<lineageEntityParameters>,
    @ocaml.doc("<p>The status of the action.</p>") @as("Status") status: option<actionStatus>,
    @ocaml.doc("<p>The description of the action.</p>") @as("Description")
    description: option<experimentDescription>,
    @ocaml.doc("<p>The type of the action.</p>") @as("ActionType") actionType: option<string256>,
    @ocaml.doc("<p>The source of the action.</p>") @as("Source") source: option<actionSource>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the action.</p>") @as("ActionArn")
    actionArn: option<actionArn>,
    @ocaml.doc("<p>The name of the action.</p>") @as("ActionName")
    actionName: option<experimentEntityNameOrArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DescribeActionCommand"
  let make = (~actionName, ()) => new({actionName: actionName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DeregisterDevices = {
  type t
  type request = {
    @ocaml.doc("<p>The unique IDs of the devices.</p>") @as("DeviceNames") deviceNames: deviceNames,
    @ocaml.doc("<p>The name of the fleet the devices belong to.</p>") @as("DeviceFleetName")
    deviceFleetName: entityName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeregisterDevicesCommand"
  let make = (~deviceNames, ~deviceFleetName, ()) => new({deviceNames, deviceFleetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteTags = {
  type t
  type request = {
    @ocaml.doc("<p>An array or one or more tag keys to delete.</p>") @as("TagKeys")
    tagKeys: tagKeyList,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the resource whose tags you want to
            delete.</p>")
    @as("ResourceArn")
    resourceArn: resourceArn,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteTagsCommand"
  let make = (~tagKeys, ~resourceArn, ()) => new({tagKeys, resourceArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module DeleteDomain = {
  type t
  type request = {
    @ocaml.doc("<p>The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted.
           By default, all resources are retained (not automatically deleted).
       </p>")
    @as("RetentionPolicy")
    retentionPolicy: option<retentionPolicy>,
    @ocaml.doc("<p>The domain ID.</p>") @as("DomainId") domainId: domainId,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteDomainCommand"
  let make = (~domainId, ~retentionPolicy=?, ()) => new({retentionPolicy, domainId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module UpdateTrialComponent = {
  type t
  type request = {
    @ocaml.doc("<p>The output artifacts to remove from the component.</p>")
    @as("OutputArtifactsToRemove")
    outputArtifactsToRemove: option<listTrialComponentKey256>,
    @ocaml.doc(
      "<p>Replaces all of the component's output artifacts with the specified artifacts.</p>"
    )
    @as("OutputArtifacts")
    outputArtifacts: option<trialComponentArtifacts>,
    @ocaml.doc("<p>The input artifacts to remove from the component.</p>")
    @as("InputArtifactsToRemove")
    inputArtifactsToRemove: option<listTrialComponentKey256>,
    @ocaml.doc(
      "<p>Replaces all of the component's input artifacts with the specified artifacts.</p>"
    )
    @as("InputArtifacts")
    inputArtifacts: option<trialComponentArtifacts>,
    @ocaml.doc("<p>The hyperparameters to remove from the component.</p>") @as("ParametersToRemove")
    parametersToRemove: option<listTrialComponentKey256>,
    @ocaml.doc(
      "<p>Replaces all of the component's hyperparameters with the specified hyperparameters.</p>"
    )
    @as("Parameters")
    parameters: option<trialComponentParameters>,
    @ocaml.doc("<p>When the component ended.</p>") @as("EndTime") endTime: option<timestamp_>,
    @ocaml.doc("<p>When the component started.</p>") @as("StartTime") startTime: option<timestamp_>,
    @ocaml.doc("<p>The new status of the component.</p>") @as("Status")
    status: option<trialComponentStatus>,
    @ocaml.doc("<p>The name of the component as displayed. The name doesn't need to be unique. If
        <code>DisplayName</code> isn't specified, <code>TrialComponentName</code> is
      displayed.</p>")
    @as("DisplayName")
    displayName: option<experimentEntityName>,
    @ocaml.doc("<p>The name of the component to update.</p>") @as("TrialComponentName")
    trialComponentName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the trial component.</p>")
    @as("TrialComponentArn")
    trialComponentArn: option<trialComponentArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "UpdateTrialComponentCommand"
  let make = (
    ~trialComponentName,
    ~outputArtifactsToRemove=?,
    ~outputArtifacts=?,
    ~inputArtifactsToRemove=?,
    ~inputArtifacts=?,
    ~parametersToRemove=?,
    ~parameters=?,
    ~endTime=?,
    ~startTime=?,
    ~status=?,
    ~displayName=?,
    (),
  ) =>
    new({
      outputArtifactsToRemove,
      outputArtifacts,
      inputArtifactsToRemove,
      inputArtifacts,
      parametersToRemove,
      parameters,
      endTime,
      startTime,
      status,
      displayName,
      trialComponentName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdateNotebookInstanceLifecycleConfig = {
  type t
  type request = {
    @ocaml.doc("<p>The shell script that runs every time you start a notebook instance, including when
            you create the notebook instance. The shell script must be a base64-encoded
            string.</p>")
    @as("OnStart")
    onStart: option<notebookInstanceLifecycleConfigList>,
    @ocaml.doc("<p>The shell script that runs only once, when you create a notebook instance. The shell
            script must be a base64-encoded string.</p>")
    @as("OnCreate")
    onCreate: option<notebookInstanceLifecycleConfigList>,
    @ocaml.doc("<p>The name of the lifecycle configuration.</p>")
    @as("NotebookInstanceLifecycleConfigName")
    notebookInstanceLifecycleConfigName: notebookInstanceLifecycleConfigName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "UpdateNotebookInstanceLifecycleConfigCommand"
  let make = (~notebookInstanceLifecycleConfigName, ~onStart=?, ~onCreate=?, ()) =>
    new({onStart, onCreate, notebookInstanceLifecycleConfigName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module UpdateEndpointWeightsAndCapacities = {
  type t
  type request = {
    @ocaml.doc("<p>An object that provides new capacity and weight values for a variant.</p>")
    @as("DesiredWeightsAndCapacities")
    desiredWeightsAndCapacities: desiredWeightAndCapacityList,
    @ocaml.doc("<p>The name of an existing Amazon SageMaker endpoint.</p>") @as("EndpointName")
    endpointName: endpointName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the updated endpoint.</p>") @as("EndpointArn")
    endpointArn: endpointArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "UpdateEndpointWeightsAndCapacitiesCommand"
  let make = (~desiredWeightsAndCapacities, ~endpointName, ()) =>
    new({desiredWeightsAndCapacities, endpointName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdateDevices = {
  type t
  type request = {
    @ocaml.doc("<p>List of devices to register with Edge Manager agent.</p>") @as("Devices")
    devices: devices,
    @ocaml.doc("<p>The name of the fleet the devices belong to.</p>") @as("DeviceFleetName")
    deviceFleetName: entityName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "UpdateDevicesCommand"
  let make = (~devices, ~deviceFleetName, ()) => new({devices, deviceFleetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module StartPipelineExecution = {
  type t
  type request = {
    @ocaml.doc("<p>This configuration, if specified, overrides the parallelism configuration 
            of the parent pipeline for this specific run.</p>")
    @as("ParallelismConfiguration")
    parallelismConfiguration: option<parallelismConfiguration>,
    @ocaml.doc("<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
         operation. An idempotent operation completes no more than once.</p>")
    @as("ClientRequestToken")
    clientRequestToken: idempotencyToken,
    @ocaml.doc("<p>The description of the pipeline execution.</p>")
    @as("PipelineExecutionDescription")
    pipelineExecutionDescription: option<pipelineExecutionDescription>,
    @ocaml.doc("<p>Contains a list of pipeline parameters. This list can be empty. </p>")
    @as("PipelineParameters")
    pipelineParameters: option<parameterList>,
    @ocaml.doc("<p>The display name of the pipeline execution.</p>")
    @as("PipelineExecutionDisplayName")
    pipelineExecutionDisplayName: option<pipelineExecutionName>,
    @ocaml.doc("<p>The name of the pipeline.</p>") @as("PipelineName") pipelineName: pipelineName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline execution.</p>")
    @as("PipelineExecutionArn")
    pipelineExecutionArn: option<pipelineExecutionArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "StartPipelineExecutionCommand"
  let make = (
    ~clientRequestToken,
    ~pipelineName,
    ~parallelismConfiguration=?,
    ~pipelineExecutionDescription=?,
    ~pipelineParameters=?,
    ~pipelineExecutionDisplayName=?,
    (),
  ) =>
    new({
      parallelismConfiguration,
      clientRequestToken,
      pipelineExecutionDescription,
      pipelineParameters,
      pipelineExecutionDisplayName,
      pipelineName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module SendPipelineExecutionStepSuccess = {
  type t
  type request = {
    @ocaml.doc("<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
         operation. An idempotent operation completes no more than one time.</p>")
    @as("ClientRequestToken")
    clientRequestToken: option<idempotencyToken>,
    @ocaml.doc("<p>A list of the output parameters of the callback step.</p>")
    @as("OutputParameters")
    outputParameters: option<outputParameterList>,
    @ocaml.doc("<p>The pipeline generated token from the Amazon SQS queue.</p>")
    @as("CallbackToken")
    callbackToken: callbackToken,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline execution.</p>")
    @as("PipelineExecutionArn")
    pipelineExecutionArn: option<pipelineExecutionArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "SendPipelineExecutionStepSuccessCommand"
  let make = (~callbackToken, ~clientRequestToken=?, ~outputParameters=?, ()) =>
    new({clientRequestToken, outputParameters, callbackToken})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module RenderUiTemplate = {
  type t
  type request = {
    @ocaml.doc("<p>The <code>HumanTaskUiArn</code> of the worker UI that you want to render. Do not
            provide a <code>HumanTaskUiArn</code> if you use the <code>UiTemplate</code>
            parameter.</p>
        <p>See a list of available Human Ui Amazon Resource Names (ARNs) in <a>UiConfig</a>.</p>")
    @as("HumanTaskUiArn")
    humanTaskUiArn: option<humanTaskUiArn>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) that has access to the S3 objects that are used by the
            template.</p>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>A <code>RenderableTask</code> object containing a representative task to
            render.</p>")
    @as("Task")
    task: renderableTask,
    @ocaml.doc("<p>A <code>Template</code> object containing the worker UI template to render.</p>")
    @as("UiTemplate")
    uiTemplate: option<uiTemplate>,
  }
  type response = {
    @ocaml.doc("<p>A list of one or more <code>RenderingError</code> objects if any were encountered
            while rendering the template. If there were no errors, the list is empty.</p>")
    @as("Errors")
    errors: renderingErrorList,
    @ocaml.doc("<p>A Liquid template that renders the HTML for the worker UI.</p>")
    @as("RenderedContent")
    renderedContent: string_,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "RenderUiTemplateCommand"
  let make = (~roleArn, ~task, ~humanTaskUiArn=?, ~uiTemplate=?, ()) =>
    new({humanTaskUiArn, roleArn, task, uiTemplate})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module RegisterDevices = {
  type t
  type request = {
    @ocaml.doc("<p>The tags associated with devices.</p>") @as("Tags") tags: option<tagList_>,
    @ocaml.doc("<p>A list of devices to register with SageMaker Edge Manager.</p>") @as("Devices")
    devices: devices,
    @ocaml.doc("<p>The name of the fleet.</p>") @as("DeviceFleetName") deviceFleetName: entityName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "RegisterDevicesCommand"
  let make = (~devices, ~deviceFleetName, ~tags=?, ()) => new({tags, devices, deviceFleetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module QueryLineage = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Limits the number of vertices in the request. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>"
    )
    @as("NextToken")
    nextToken: option<string8192>,
    @ocaml.doc(
      "<p>Limits the number of vertices in the results. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>"
    )
    @as("MaxResults")
    maxResults: option<queryLineageMaxResults>,
    @ocaml.doc("<p>The maximum depth in lineage relationships from the <code>StartArns</code> that will be traversed. Depth is a measure of the number 
         of <code>Associations</code> from the <code>StartArn</code> entity to the matched results.</p>")
    @as("MaxDepth")
    maxDepth: option<queryLineageMaxDepth>,
    @ocaml.doc("<p>A set of filtering parameters that allow you to specify which entities should be returned.</p>
         <ul>
            <li>
               <p>Properties - Key-value pairs to match on the lineage entities' properties.</p>
            </li>
            <li>
               <p>LineageTypes - A set of lineage entity types to match on. For example: <code>TrialComponent</code>, 
            <code>Artifact</code>, or <code>Context</code>.</p>
            </li>
            <li>
               <p>CreatedBefore - Filter entities created before this date.</p>
            </li>
            <li>
               <p>ModifiedBefore - Filter entities modified before this date.</p>
            </li>
            <li>
               <p>ModifiedAfter - Filter entities modified after this date.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<queryFilters>,
    @ocaml.doc("<p> Setting this value to <code>True</code> will retrieve not only the entities of interest but also the 
         <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking-entities.html\">Associations</a> and 
         lineage entities on the path. Set to <code>False</code> to only return lineage entities that match your query.</p>")
    @as("IncludeEdges")
    includeEdges: option<boolean_>,
    @ocaml.doc("<p>Associations between lineage entities are directed.  This parameter determines the direction from the 
         StartArn(s) the query will look.</p>")
    @as("Direction")
    direction: option<direction>,
    @ocaml.doc(
      "<p>A list of resource Amazon Resource Name (ARN) that represent the starting point for your lineage query.</p>"
    )
    @as("StartArns")
    startArns: queryLineageStartArns,
  }
  type response = {
    @ocaml.doc(
      "<p>Limits the number of vertices in the response. Use the <code>NextToken</code> in a response to to retrieve the next page of results.</p>"
    )
    @as("NextToken")
    nextToken: option<string8192>,
    @ocaml.doc("<p>A list of edges that connect vertices in the response.</p>") @as("Edges")
    edges: option<edges>,
    @ocaml.doc("<p>A list of vertices connected to the start entity(ies) in the lineage graph.</p>")
    @as("Vertices")
    vertices: option<vertices>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "QueryLineageCommand"
  let make = (
    ~startArns,
    ~nextToken=?,
    ~maxResults=?,
    ~maxDepth=?,
    ~filters=?,
    ~includeEdges=?,
    ~direction=?,
    (),
  ) => new({nextToken, maxResults, maxDepth, filters, includeEdges, direction, startArns})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListUserProfiles = {
  type t
  type request = {
    @ocaml.doc("<p>A parameter by which to filter the results.</p>") @as("UserProfileNameContains")
    userProfileNameContains: option<userProfileName>,
    @ocaml.doc("<p>A parameter by which to filter the results.</p>") @as("DomainIdEquals")
    domainIdEquals: option<domainId>,
    @ocaml.doc("<p>The parameter by which to sort the results. The default is CreationTime.</p>")
    @as("SortBy")
    sortBy: option<userProfileSortKey>,
    @ocaml.doc("<p>The sort order for the results. The default is Ascending.</p>") @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>Returns a list up to a specified limit.</p>") @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the previous response was truncated, you will receive this token.
        Use it in your next request to receive the next set of results.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  type response = {
    @ocaml.doc("<p>If the previous response was truncated, you will receive this token.
        Use it in your next request to receive the next set of results.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The list of user profiles.</p>") @as("UserProfiles")
    userProfiles: option<userProfileList>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListUserProfilesCommand"
  let make = (
    ~userProfileNameContains=?,
    ~domainIdEquals=?,
    ~sortBy=?,
    ~sortOrder=?,
    ~maxResults=?,
    ~nextToken=?,
    (),
  ) => new({userProfileNameContains, domainIdEquals, sortBy, sortOrder, maxResults, nextToken})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListTransformJobs = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The maximum number of transform jobs to return in the response. The default value is <code>10</code>.</p>"
    )
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the result of the previous <code>ListTransformJobs</code> request was truncated,
            the response includes a <code>NextToken</code>. To retrieve the next set of transform
            jobs, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The sort order for results. The default is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>The field to sort results by. The default is <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<sortBy>,
    @ocaml.doc("<p>A filter that retrieves only transform jobs with a specific status.</p>")
    @as("StatusEquals")
    statusEquals: option<transformJobStatus>,
    @ocaml.doc("<p>A string in the transform job name. This filter returns only transform jobs whose name
            contains the specified string.</p>")
    @as("NameContains")
    nameContains: option<nameContains>,
    @ocaml.doc(
      "<p>A filter that returns only transform jobs modified before the specified time.</p>"
    )
    @as("LastModifiedTimeBefore")
    lastModifiedTimeBefore: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only transform jobs modified after the specified time.</p>"
    )
    @as("LastModifiedTimeAfter")
    lastModifiedTimeAfter: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only transform jobs created before the specified time.</p>"
    )
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only transform jobs created after the specified time.</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
  }
  type response = {
    @ocaml.doc("<p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of
            transform jobs, use it in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array of
                <code>TransformJobSummary</code>
            objects.</p>")
    @as("TransformJobSummaries")
    transformJobSummaries: transformJobSummaries,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListTransformJobsCommand"
  let make = (
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~statusEquals=?,
    ~nameContains=?,
    ~lastModifiedTimeBefore=?,
    ~lastModifiedTimeAfter=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    (),
  ) =>
    new({
      maxResults,
      nextToken,
      sortOrder,
      sortBy,
      statusEquals,
      nameContains,
      lastModifiedTimeBefore,
      lastModifiedTimeAfter,
      creationTimeBefore,
      creationTimeAfter,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListTrainingJobs = {
  type t
  type request = {
    @ocaml.doc("<p>The sort order for results. The default is <code>Ascending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>The field to sort results by. The default is <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<sortBy>,
    @ocaml.doc("<p>A filter that retrieves only training jobs with a specific status.</p>")
    @as("StatusEquals")
    statusEquals: option<trainingJobStatus>,
    @ocaml.doc("<p>A string in the training job name. This filter returns only training jobs whose
            name contains the specified string.</p>")
    @as("NameContains")
    nameContains: option<nameContains>,
    @ocaml.doc("<p>A filter that returns only training jobs modified before the specified time
            (timestamp).</p>")
    @as("LastModifiedTimeBefore")
    lastModifiedTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only training jobs modified after the specified time
            (timestamp).</p>")
    @as("LastModifiedTimeAfter")
    lastModifiedTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only training jobs created before the specified time
            (timestamp).</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only training jobs created after the specified time
            (timestamp).</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>The maximum number of training jobs to return in the response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the result of the previous <code>ListTrainingJobs</code> request was truncated,
            the response includes a <code>NextToken</code>. To retrieve the next set of training
            jobs, use the token in the next request. </p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  type response = {
    @ocaml.doc("<p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of
            training jobs, use it in the subsequent request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array of <code>TrainingJobSummary</code> objects, each listing a training
            job.</p>")
    @as("TrainingJobSummaries")
    trainingJobSummaries: trainingJobSummaries,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListTrainingJobsCommand"
  let make = (
    ~sortOrder=?,
    ~sortBy=?,
    ~statusEquals=?,
    ~nameContains=?,
    ~lastModifiedTimeBefore=?,
    ~lastModifiedTimeAfter=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    ~maxResults=?,
    ~nextToken=?,
    (),
  ) =>
    new({
      sortOrder,
      sortBy,
      statusEquals,
      nameContains,
      lastModifiedTimeBefore,
      lastModifiedTimeAfter,
      creationTimeBefore,
      creationTimeAfter,
      maxResults,
      nextToken,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListTags = {
  type t
  type request = {
    @ocaml.doc("<p>Maximum number of tags to return.</p>") @as("MaxResults")
    maxResults: option<listTagsMaxResults>,
    @ocaml.doc("<p> If the response to the previous <code>ListTags</code> request is truncated, Amazon SageMaker
            returns this token. To retrieve the next set of tags, use it in the subsequent request.
        </p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the resource whose tags you want to
            retrieve.</p>")
    @as("ResourceArn")
    resourceArn: resourceArn,
  }
  type response = {
    @ocaml.doc("<p> If response is truncated, Amazon SageMaker includes a token in the response. You can use this
            token in your subsequent request to fetch next set of tokens. </p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array of <code>Tag</code> objects, each with a tag key and a value.</p>")
    @as("Tags")
    tags: option<tagList_>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListTagsCommand"
  let make = (~resourceArn, ~maxResults=?, ~nextToken=?, ()) =>
    new({maxResults, nextToken, resourceArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListSubscribedWorkteams = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of work teams to return in each page of the response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the result of the previous <code>ListSubscribedWorkteams</code> request was
            truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
            labeling jobs, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A string in the work team name. This filter returns only work teams whose name
            contains the specified string.</p>")
    @as("NameContains")
    nameContains: option<workteamName>,
  }
  type response = {
    @ocaml.doc("<p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of
            work teams, use it in the subsequent request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array of <code>Workteam</code> objects, each describing a work team.</p>")
    @as("SubscribedWorkteams")
    subscribedWorkteams: subscribedWorkteams,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListSubscribedWorkteamsCommand"
  let make = (~maxResults=?, ~nextToken=?, ~nameContains=?, ()) =>
    new({maxResults, nextToken, nameContains})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListStudioLifecycleConfigs = {
  type t
  type request = {
    @ocaml.doc("<p>The sort order. The default value is Descending.</p>") @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>The property used to sort results. The default value is CreationTime.</p>")
    @as("SortBy")
    sortBy: option<studioLifecycleConfigSortKey>,
    @ocaml.doc(
      "<p>A filter that returns only Lifecycle Configurations modified after the specified time.</p>"
    )
    @as("ModifiedTimeAfter")
    modifiedTimeAfter: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only Lifecycle Configurations modified before the specified time.</p>"
    )
    @as("ModifiedTimeBefore")
    modifiedTimeBefore: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only Lifecycle Configurations created on or after the specified time.</p>"
    )
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only Lifecycle Configurations created on or before the specified time.</p>"
    )
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc(
      "<p>A parameter to search for the App Type to which the Lifecycle Configuration is attached.</p>"
    )
    @as("AppTypeEquals")
    appTypeEquals: option<studioLifecycleConfigAppType>,
    @ocaml.doc(
      "<p>A string in the Lifecycle Configuration name. This filter returns only Lifecycle Configurations whose name contains the specified string.</p>"
    )
    @as("NameContains")
    nameContains: option<studioLifecycleConfigName>,
    @ocaml.doc(
      "<p>If the previous call to ListStudioLifecycleConfigs didn't return the full set of Lifecycle Configurations, the call returns a token for getting the next set of Lifecycle Configurations.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>The maximum number of Studio Lifecycle Configurations to return in the response. The default value is 10.</p>"
    )
    @as("MaxResults")
    maxResults: option<maxResults>,
  }
  type response = {
    @ocaml.doc("<p>A list of Lifecycle Configurations and their properties.</p>")
    @as("StudioLifecycleConfigs")
    studioLifecycleConfigs: option<studioLifecycleConfigsList>,
    @ocaml.doc("<p>A token for getting the next set of actions, if there are any.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListStudioLifecycleConfigsCommand"
  let make = (
    ~sortOrder=?,
    ~sortBy=?,
    ~modifiedTimeAfter=?,
    ~modifiedTimeBefore=?,
    ~creationTimeAfter=?,
    ~creationTimeBefore=?,
    ~appTypeEquals=?,
    ~nameContains=?,
    ~nextToken=?,
    ~maxResults=?,
    (),
  ) =>
    new({
      sortOrder,
      sortBy,
      modifiedTimeAfter,
      modifiedTimeBefore,
      creationTimeAfter,
      creationTimeBefore,
      appTypeEquals,
      nameContains,
      nextToken,
      maxResults,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListProjects = {
  type t
  type request = {
    @ocaml.doc("<p>The sort order for results. The default is <code>Ascending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<projectSortOrder>,
    @ocaml.doc(
      "<p>The field by which to sort results. The default is <code>CreationTime</code>.</p>"
    )
    @as("SortBy")
    sortBy: option<projectSortBy>,
    @ocaml.doc("<p>If the result of the previous <code>ListProjects</code> request was truncated,
            the response includes a <code>NextToken</code>. To retrieve the next set of projects, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A filter that returns the projects whose name contains a specified
            string.</p>")
    @as("NameContains")
    nameContains: option<projectEntityName>,
    @ocaml.doc("<p>The maximum number of projects to return in the response.</p>") @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>A filter that returns the projects that were created before a specified
            time.</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns the projects that were created after a specified
            time.</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
  }
  type response = {
    @ocaml.doc("<p>If the result of the previous <code>ListCompilationJobs</code> request was truncated,
            the response includes a <code>NextToken</code>. To retrieve the next set of model
            compilation jobs, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of summaries of projects.</p>") @as("ProjectSummaryList")
    projectSummaryList: projectSummaryList,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListProjectsCommand"
  let make = (
    ~sortOrder=?,
    ~sortBy=?,
    ~nextToken=?,
    ~nameContains=?,
    ~maxResults=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    (),
  ) =>
    new({
      sortOrder,
      sortBy,
      nextToken,
      nameContains,
      maxResults,
      creationTimeBefore,
      creationTimeAfter,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListProcessingJobs = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of processing jobs to return in the response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the result of the previous <code>ListProcessingJobs</code> request was truncated,
            the response includes a <code>NextToken</code>. To retrieve the next set of processing
            jobs, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The sort order for results. The default is <code>Ascending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>The field to sort results by. The default is <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<sortBy>,
    @ocaml.doc("<p>A filter that retrieves only processing jobs with a specific status.</p>")
    @as("StatusEquals")
    statusEquals: option<processingJobStatus>,
    @ocaml.doc("<p>A string in the processing job name. This filter returns only processing jobs whose
            name contains the specified string.</p>")
    @as("NameContains")
    nameContains: option<string_>,
    @ocaml.doc(
      "<p>A filter that returns only processing jobs modified before the specified time.</p>"
    )
    @as("LastModifiedTimeBefore")
    lastModifiedTimeBefore: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only processing jobs modified after the specified time.</p>"
    )
    @as("LastModifiedTimeAfter")
    lastModifiedTimeAfter: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only processing jobs created after the specified time.</p>"
    )
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only processing jobs created after the specified time.</p>"
    )
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
  }
  type response = {
    @ocaml.doc("<p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of
            processing jobs, use it in the subsequent request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array of <code>ProcessingJobSummary</code> objects, each listing a processing
            job.</p>")
    @as("ProcessingJobSummaries")
    processingJobSummaries: processingJobSummaries,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListProcessingJobsCommand"
  let make = (
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~statusEquals=?,
    ~nameContains=?,
    ~lastModifiedTimeBefore=?,
    ~lastModifiedTimeAfter=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    (),
  ) =>
    new({
      maxResults,
      nextToken,
      sortOrder,
      sortBy,
      statusEquals,
      nameContains,
      lastModifiedTimeBefore,
      lastModifiedTimeAfter,
      creationTimeBefore,
      creationTimeAfter,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListPipelines = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of pipelines to return in the response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the result of the previous <code>ListPipelines</code> request was truncated,
         the response includes a <code>NextToken</code>. To retrieve the next set of pipelines, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The sort order for results.</p>") @as("SortOrder") sortOrder: option<sortOrder>,
    @ocaml.doc(
      "<p>The field by which to sort results. The default is <code>CreatedTime</code>.</p>"
    )
    @as("SortBy")
    sortBy: option<sortPipelinesBy>,
    @ocaml.doc("<p>A filter that returns the pipelines that were created before a specified
         time.</p>")
    @as("CreatedBefore")
    createdBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns the pipelines that were created after a specified
         time.</p>")
    @as("CreatedAfter")
    createdAfter: option<timestamp_>,
    @ocaml.doc("<p>The prefix of the pipeline name.</p>") @as("PipelineNamePrefix")
    pipelineNamePrefix: option<pipelineName>,
  }
  type response = {
    @ocaml.doc("<p>If the result of the previous <code>ListPipelines</code> request was truncated,
         the response includes a <code>NextToken</code>. To retrieve the next set of pipelines, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Contains a sorted list of <code>PipelineSummary</code> objects matching the specified
         filters. Each <code>PipelineSummary</code> consists of PipelineArn, PipelineName,
         ExperimentName, PipelineDescription, CreationTime, LastModifiedTime, LastRunTime, and
         RoleArn. This list can be empty. </p>")
    @as("PipelineSummaries")
    pipelineSummaries: option<pipelineSummaryList>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListPipelinesCommand"
  let make = (
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~createdBefore=?,
    ~createdAfter=?,
    ~pipelineNamePrefix=?,
    (),
  ) =>
    new({maxResults, nextToken, sortOrder, sortBy, createdBefore, createdAfter, pipelineNamePrefix})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListPipelineParametersForExecution = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of parameters to return in the response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the result of the previous <code>ListPipelineParametersForExecution</code> request was truncated,
         the response includes a <code>NextToken</code>. To retrieve the next set of parameters, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline execution.</p>")
    @as("PipelineExecutionArn")
    pipelineExecutionArn: pipelineExecutionArn,
  }
  type response = {
    @ocaml.doc("<p>If the result of the previous <code>ListPipelineParametersForExecution</code> request was truncated,
         the response includes a <code>NextToken</code>. To retrieve the next set of parameters, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Contains a list of pipeline parameters. This list can be empty. </p>")
    @as("PipelineParameters")
    pipelineParameters: option<parameterList>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListPipelineParametersForExecutionCommand"
  let make = (~pipelineExecutionArn, ~maxResults=?, ~nextToken=?, ()) =>
    new({maxResults, nextToken, pipelineExecutionArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListPipelineExecutions = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of pipeline executions to return in the response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the result of the previous <code>ListPipelineExecutions</code> request was truncated,
         the response includes a <code>NextToken</code>. To retrieve the next set of pipeline executions, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The sort order for results.</p>") @as("SortOrder") sortOrder: option<sortOrder>,
    @ocaml.doc(
      "<p>The field by which to sort results. The default is <code>CreatedTime</code>.</p>"
    )
    @as("SortBy")
    sortBy: option<sortPipelineExecutionsBy>,
    @ocaml.doc("<p>A filter that returns the pipeline executions that were created before a specified
         time.</p>")
    @as("CreatedBefore")
    createdBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns the pipeline executions that were created after a specified
         time.</p>")
    @as("CreatedAfter")
    createdAfter: option<timestamp_>,
    @ocaml.doc("<p>The name of the pipeline.</p>") @as("PipelineName") pipelineName: pipelineName,
  }
  type response = {
    @ocaml.doc("<p>If the result of the previous <code>ListPipelineExecutions</code> request was truncated,
         the response includes a <code>NextToken</code>. To retrieve the next set of pipeline executions, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Contains a sorted list of pipeline execution summary objects matching the specified
         filters. Each run summary includes the Amazon Resource Name (ARN) of the pipeline execution, the run date,
         and the status. This list can be empty. </p>")
    @as("PipelineExecutionSummaries")
    pipelineExecutionSummaries: option<pipelineExecutionSummaryList>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListPipelineExecutionsCommand"
  let make = (
    ~pipelineName,
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~createdBefore=?,
    ~createdAfter=?,
    (),
  ) => new({maxResults, nextToken, sortOrder, sortBy, createdBefore, createdAfter, pipelineName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListNotebookInstanceLifecycleConfigs = {
  type t
  type request = {
    @ocaml.doc("<p>A filter that returns only lifecycle configurations that were modified after the
            specified time (timestamp).</p>")
    @as("LastModifiedTimeAfter")
    lastModifiedTimeAfter: option<lastModifiedTime>,
    @ocaml.doc("<p>A filter that returns only lifecycle configurations that were modified before the
            specified time (timestamp).</p>")
    @as("LastModifiedTimeBefore")
    lastModifiedTimeBefore: option<lastModifiedTime>,
    @ocaml.doc("<p>A filter that returns only lifecycle configurations that were created after the
            specified time (timestamp).</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<creationTime>,
    @ocaml.doc("<p>A filter that returns only lifecycle configurations that were created before the
            specified time (timestamp).</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<creationTime>,
    @ocaml.doc("<p>A string in the lifecycle configuration name. This filter returns only lifecycle
            configurations whose name contains the specified string.</p>")
    @as("NameContains")
    nameContains: option<notebookInstanceLifecycleConfigNameContains>,
    @ocaml.doc("<p>The sort order for results.</p>") @as("SortOrder")
    sortOrder: option<notebookInstanceLifecycleConfigSortOrder>,
    @ocaml.doc("<p>Sorts the list of results. The default is <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<notebookInstanceLifecycleConfigSortKey>,
    @ocaml.doc("<p>The maximum number of lifecycle configurations to return in the response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the result of a <code>ListNotebookInstanceLifecycleConfigs</code> request was
            truncated, the response includes a <code>NextToken</code>. To get the next set of
            lifecycle configurations, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  type response = {
    @ocaml.doc("<p>An array of <code>NotebookInstanceLifecycleConfiguration</code> objects, each listing
            a lifecycle configuration.</p>")
    @as("NotebookInstanceLifecycleConfigs")
    notebookInstanceLifecycleConfigs: option<notebookInstanceLifecycleConfigSummaryList>,
    @ocaml.doc("<p>If the response is truncated, Amazon SageMaker returns this token. To get the next set of
            lifecycle configurations, use it in the next request. </p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListNotebookInstanceLifecycleConfigsCommand"
  let make = (
    ~lastModifiedTimeAfter=?,
    ~lastModifiedTimeBefore=?,
    ~creationTimeAfter=?,
    ~creationTimeBefore=?,
    ~nameContains=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~maxResults=?,
    ~nextToken=?,
    (),
  ) =>
    new({
      lastModifiedTimeAfter,
      lastModifiedTimeBefore,
      creationTimeAfter,
      creationTimeBefore,
      nameContains,
      sortOrder,
      sortBy,
      maxResults,
      nextToken,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListMonitoringSchedules = {
  type t
  type request = {
    @ocaml.doc("<p>A filter that returns only the monitoring schedules for the specified monitoring
         type.</p>")
    @as("MonitoringTypeEquals")
    monitoringTypeEquals: option<monitoringType>,
    @ocaml.doc("<p>Gets a list of the monitoring schedules for the specified monitoring job
         definition.</p>")
    @as("MonitoringJobDefinitionName")
    monitoringJobDefinitionName: option<monitoringJobDefinitionName>,
    @ocaml.doc(
      "<p>A filter that returns only monitoring schedules modified before a specified time.</p>"
    )
    @as("StatusEquals")
    statusEquals: option<scheduleStatus>,
    @ocaml.doc(
      "<p>A filter that returns only monitoring schedules modified after a specified time.</p>"
    )
    @as("LastModifiedTimeAfter")
    lastModifiedTimeAfter: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only monitoring schedules modified before a specified time.</p>"
    )
    @as("LastModifiedTimeBefore")
    lastModifiedTimeBefore: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only monitoring schedules created after a specified time.</p>"
    )
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only monitoring schedules created before a specified time.</p>"
    )
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>Filter for monitoring schedules whose name contains a specified string.</p>")
    @as("NameContains")
    nameContains: option<nameContains>,
    @ocaml.doc(
      "<p>The maximum number of jobs to return in the response. The default value is 10.</p>"
    )
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>The token returned if the response is truncated. To retrieve the next set of job
         executions, use it in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.
         The default is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>Whether to sort results by <code>Status</code>, <code>CreationTime</code>,
            <code>ScheduledTime</code> field. The default is <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<monitoringScheduleSortKey>,
    @ocaml.doc("<p>Name of a specific endpoint to fetch schedules for.</p>") @as("EndpointName")
    endpointName: option<endpointName>,
  }
  type response = {
    @ocaml.doc("<p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of jobs,
         use it in the subsequent request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A JSON array in which each element is a summary for a monitoring schedule.</p>")
    @as("MonitoringScheduleSummaries")
    monitoringScheduleSummaries: monitoringScheduleSummaryList,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListMonitoringSchedulesCommand"
  let make = (
    ~monitoringTypeEquals=?,
    ~monitoringJobDefinitionName=?,
    ~statusEquals=?,
    ~lastModifiedTimeAfter=?,
    ~lastModifiedTimeBefore=?,
    ~creationTimeAfter=?,
    ~creationTimeBefore=?,
    ~nameContains=?,
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~endpointName=?,
    (),
  ) =>
    new({
      monitoringTypeEquals,
      monitoringJobDefinitionName,
      statusEquals,
      lastModifiedTimeAfter,
      lastModifiedTimeBefore,
      creationTimeAfter,
      creationTimeBefore,
      nameContains,
      maxResults,
      nextToken,
      sortOrder,
      sortBy,
      endpointName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListMonitoringExecutions = {
  type t
  type request = {
    @ocaml.doc("<p>A filter that returns only the monitoring job runs of the specified monitoring
         type.</p>")
    @as("MonitoringTypeEquals")
    monitoringTypeEquals: option<monitoringType>,
    @ocaml.doc("<p>Gets a list of the monitoring job runs of the specified monitoring job
         definitions.</p>")
    @as("MonitoringJobDefinitionName")
    monitoringJobDefinitionName: option<monitoringJobDefinitionName>,
    @ocaml.doc("<p>A filter that retrieves only jobs with a specific status.</p>")
    @as("StatusEquals")
    statusEquals: option<executionStatus>,
    @ocaml.doc("<p>A filter that returns only jobs modified before a specified time.</p>")
    @as("LastModifiedTimeAfter")
    lastModifiedTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only jobs modified after a specified time.</p>")
    @as("LastModifiedTimeBefore")
    lastModifiedTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only jobs created after a specified time.</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only jobs created before a specified time.</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>Filter for jobs scheduled after a specified time.</p>") @as("ScheduledTimeAfter")
    scheduledTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>Filter for jobs scheduled before a specified time.</p>")
    @as("ScheduledTimeBefore")
    scheduledTimeBefore: option<timestamp_>,
    @ocaml.doc(
      "<p>The maximum number of jobs to return in the response. The default value is 10.</p>"
    )
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>The token returned if the response is truncated. To retrieve the next set of job
         executions, use it in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.
         The default is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>Whether to sort results by <code>Status</code>, <code>CreationTime</code>,
            <code>ScheduledTime</code> field. The default is <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<monitoringExecutionSortKey>,
    @ocaml.doc("<p>Name of a specific endpoint to fetch jobs for.</p>") @as("EndpointName")
    endpointName: option<endpointName>,
    @ocaml.doc("<p>Name of a specific schedule to fetch jobs for.</p>")
    @as("MonitoringScheduleName")
    monitoringScheduleName: option<monitoringScheduleName>,
  }
  type response = {
    @ocaml.doc("<p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of jobs,
         use it in the subsequent reques</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A JSON array in which each element is a summary for a monitoring execution.</p>")
    @as("MonitoringExecutionSummaries")
    monitoringExecutionSummaries: monitoringExecutionSummaryList,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListMonitoringExecutionsCommand"
  let make = (
    ~monitoringTypeEquals=?,
    ~monitoringJobDefinitionName=?,
    ~statusEquals=?,
    ~lastModifiedTimeAfter=?,
    ~lastModifiedTimeBefore=?,
    ~creationTimeAfter=?,
    ~creationTimeBefore=?,
    ~scheduledTimeAfter=?,
    ~scheduledTimeBefore=?,
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~endpointName=?,
    ~monitoringScheduleName=?,
    (),
  ) =>
    new({
      monitoringTypeEquals,
      monitoringJobDefinitionName,
      statusEquals,
      lastModifiedTimeAfter,
      lastModifiedTimeBefore,
      creationTimeAfter,
      creationTimeBefore,
      scheduledTimeAfter,
      scheduledTimeBefore,
      maxResults,
      nextToken,
      sortOrder,
      sortBy,
      endpointName,
      monitoringScheduleName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListModels = {
  type t
  type request = {
    @ocaml.doc("<p>A filter that returns only models with a creation time greater than or equal to the
            specified time (timestamp).</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only models created before the specified time
            (timestamp).</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A string in the model name. This filter returns only models whose 
            name contains the specified string.</p>")
    @as("NameContains")
    nameContains: option<modelNameContains>,
    @ocaml.doc("<p>The maximum number of models to return in the response.</p>") @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the response to a previous <code>ListModels</code> request was truncated, the
            response includes a <code>NextToken</code>. To retrieve the next set of models, use the
            token in the next request.</p>")
    @as("NextToken")
    nextToken: option<paginationToken>,
    @ocaml.doc("<p>The sort order for results. The default is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<orderKey>,
    @ocaml.doc("<p>Sorts the list of results. The default is <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<modelSortKey>,
  }
  type response = {
    @ocaml.doc("<p> If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of
            models, use it in the subsequent request. </p>")
    @as("NextToken")
    nextToken: option<paginationToken>,
    @ocaml.doc("<p>An array of <code>ModelSummary</code> objects, each of which lists a
            model.</p>")
    @as("Models")
    models: modelSummaryList,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListModelsCommand"
  let make = (
    ~creationTimeAfter=?,
    ~creationTimeBefore=?,
    ~nameContains=?,
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    (),
  ) =>
    new({
      creationTimeAfter,
      creationTimeBefore,
      nameContains,
      maxResults,
      nextToken,
      sortOrder,
      sortBy,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListModelQualityJobDefinitions = {
  type t
  type request = {
    @ocaml.doc("<p>A filter that returns only model quality monitoring job definitions created after the
         specified time.</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only model quality monitoring job definitions created before the
         specified time.</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A string in the transform job name. This filter returns only model quality monitoring
         job definitions whose name contains the specified string.</p>")
    @as("NameContains")
    nameContains: option<nameContains>,
    @ocaml.doc("<p>The maximum number of results to return in a call to
            <code>ListModelQualityJobDefinitions</code>.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the result of the previous <code>ListModelQualityJobDefinitions</code> request was
         truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
         model quality monitoring job definitions, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The sort order for results. The default is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>The field to sort results by. The default is <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<monitoringJobDefinitionSortKey>,
    @ocaml.doc("<p>A filter that returns only model quality monitoring job definitions that are associated
         with the specified endpoint.</p>")
    @as("EndpointName")
    endpointName: option<endpointName>,
  }
  type response = {
    @ocaml.doc("<p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of model
         quality monitoring job definitions, use it in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of summaries of model quality monitoring job definitions.</p>")
    @as("JobDefinitionSummaries")
    jobDefinitionSummaries: monitoringJobDefinitionSummaryList,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListModelQualityJobDefinitionsCommand"
  let make = (
    ~creationTimeAfter=?,
    ~creationTimeBefore=?,
    ~nameContains=?,
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~endpointName=?,
    (),
  ) =>
    new({
      creationTimeAfter,
      creationTimeBefore,
      nameContains,
      maxResults,
      nextToken,
      sortOrder,
      sortBy,
      endpointName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListModelPackages = {
  type t
  type request = {
    @ocaml.doc("<p>The sort order for the results. The default is <code>Ascending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>The parameter by which to sort the results. The default is
            <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<modelPackageSortBy>,
    @ocaml.doc("<p>If the response to a previous <code>ListModelPackages</code> request was truncated,
            the response includes a <code>NextToken</code>. To retrieve the next set of model
            packages, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A filter that returns only the model packages of the specified type. This can be one
            of the following values.</p>
        <ul>
            <li>
                <p>
                  <code>UNVERSIONED</code> - List only unversioined models. 
                    This is the default value if no <code>ModelPackageType</code> is specified.</p>
            </li>
            <li>
                <p>
                  <code>VERSIONED</code> - List only versioned models.</p>
            </li>
            <li>
                <p>
                  <code>BOTH</code> - List both versioned and unversioned models.</p>
            </li>
         </ul>")
    @as("ModelPackageType")
    modelPackageType: option<modelPackageType>,
    @ocaml.doc(
      "<p>A filter that returns only model versions that belong to the specified model group.</p>"
    )
    @as("ModelPackageGroupName")
    modelPackageGroupName: option<arnOrName>,
    @ocaml.doc("<p>A filter that returns only the model packages with the specified approval
            status.</p>")
    @as("ModelApprovalStatus")
    modelApprovalStatus: option<modelApprovalStatus>,
    @ocaml.doc("<p>A string in the model package name. This filter returns only model packages whose name
            contains the specified string.</p>")
    @as("NameContains")
    nameContains: option<nameContains>,
    @ocaml.doc("<p>The maximum number of model packages to return in the response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>A filter that returns only model packages created before the specified time
            (timestamp).</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<creationTime>,
    @ocaml.doc("<p>A filter that returns only model packages created after the specified time
            (timestamp).</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<creationTime>,
  }
  type response = {
    @ocaml.doc("<p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of
            model packages, use it in the subsequent request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array of <code>ModelPackageSummary</code> objects, each of which lists a model
            package.</p>")
    @as("ModelPackageSummaryList")
    modelPackageSummaryList: modelPackageSummaryList,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListModelPackagesCommand"
  let make = (
    ~sortOrder=?,
    ~sortBy=?,
    ~nextToken=?,
    ~modelPackageType=?,
    ~modelPackageGroupName=?,
    ~modelApprovalStatus=?,
    ~nameContains=?,
    ~maxResults=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    (),
  ) =>
    new({
      sortOrder,
      sortBy,
      nextToken,
      modelPackageType,
      modelPackageGroupName,
      modelApprovalStatus,
      nameContains,
      maxResults,
      creationTimeBefore,
      creationTimeAfter,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListModelPackageGroups = {
  type t
  type request = {
    @ocaml.doc("<p>The sort order for results. The default is <code>Ascending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>The field to sort results by. The default is <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<modelPackageGroupSortBy>,
    @ocaml.doc("<p>If the result of the previous <code>ListModelPackageGroups</code> request was
            truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
            model groups, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A string in the model group name. This filter returns only model groups whose name
            contains the specified string.</p>")
    @as("NameContains")
    nameContains: option<nameContains>,
    @ocaml.doc("<p>The maximum number of results to return in the response.</p>") @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>A filter that returns only model groups created before the specified time.</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<creationTime>,
    @ocaml.doc("<p>A filter that returns only model groups created after the specified time.</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<creationTime>,
  }
  type response = {
    @ocaml.doc("<p>If the response is truncated, SageMaker returns this token. To retrieve the next set
            of model groups, use it in the subsequent request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>A list of summaries of the model groups in your Amazon Web Services account.</p>"
    )
    @as("ModelPackageGroupSummaryList")
    modelPackageGroupSummaryList: modelPackageGroupSummaryList,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListModelPackageGroupsCommand"
  let make = (
    ~sortOrder=?,
    ~sortBy=?,
    ~nextToken=?,
    ~nameContains=?,
    ~maxResults=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    (),
  ) =>
    new({
      sortOrder,
      sortBy,
      nextToken,
      nameContains,
      maxResults,
      creationTimeBefore,
      creationTimeAfter,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListModelExplainabilityJobDefinitions = {
  type t
  type request = {
    @ocaml.doc("<p>A filter that returns only model explainability jobs created after a specified
         time.</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only model explainability jobs created before a specified
         time.</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc(
      "<p>Filter for model explainability jobs whose name contains a specified string.</p>"
    )
    @as("NameContains")
    nameContains: option<nameContains>,
    @ocaml.doc(
      "<p>The maximum number of jobs to return in the response. The default value is 10.</p>"
    )
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>The token returned if the response is truncated. To retrieve the next set of job
         executions, use it in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.
         The default is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>Whether to sort results by the <code>Name</code> or <code>CreationTime</code> field. The
         default is <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<monitoringJobDefinitionSortKey>,
    @ocaml.doc("<p>Name of the endpoint to monitor for model explainability.</p>")
    @as("EndpointName")
    endpointName: option<endpointName>,
  }
  type response = {
    @ocaml.doc("<p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of jobs,
         use it in the subsequent request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>A JSON array in which each element is a summary for a explainability bias jobs.</p>"
    )
    @as("JobDefinitionSummaries")
    jobDefinitionSummaries: monitoringJobDefinitionSummaryList,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListModelExplainabilityJobDefinitionsCommand"
  let make = (
    ~creationTimeAfter=?,
    ~creationTimeBefore=?,
    ~nameContains=?,
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~endpointName=?,
    (),
  ) =>
    new({
      creationTimeAfter,
      creationTimeBefore,
      nameContains,
      maxResults,
      nextToken,
      sortOrder,
      sortBy,
      endpointName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListModelBiasJobDefinitions = {
  type t
  type request = {
    @ocaml.doc("<p>A filter that returns only model bias jobs created after a specified time.</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only model bias jobs created before a specified time.</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>Filter for model bias jobs whose name contains a specified string.</p>")
    @as("NameContains")
    nameContains: option<nameContains>,
    @ocaml.doc("<p>The maximum number of model bias jobs to return in the response. The default value is
         10.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>The token returned if the response is truncated. To retrieve the next set of job
         executions, use it in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.
         The default is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>Whether to sort results by the <code>Name</code> or <code>CreationTime</code> field. The
         default is <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<monitoringJobDefinitionSortKey>,
    @ocaml.doc("<p>Name of the endpoint to monitor for model bias.</p>") @as("EndpointName")
    endpointName: option<endpointName>,
  }
  type response = {
    @ocaml.doc("<p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of jobs,
         use it in the subsequent request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A JSON array in which each element is a summary for a model bias jobs.</p>")
    @as("JobDefinitionSummaries")
    jobDefinitionSummaries: monitoringJobDefinitionSummaryList,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListModelBiasJobDefinitionsCommand"
  let make = (
    ~creationTimeAfter=?,
    ~creationTimeBefore=?,
    ~nameContains=?,
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~endpointName=?,
    (),
  ) =>
    new({
      creationTimeAfter,
      creationTimeBefore,
      nameContains,
      maxResults,
      nextToken,
      sortOrder,
      sortBy,
      endpointName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListLineageGroups = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of endpoints to return in the response. This value defaults to
         10.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the response is truncated, SageMaker returns this token. To retrieve the next set of
         algorithms, use it in the subsequent request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The sort order for the results. The default is <code>Ascending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>The parameter by which to sort the results. The default is
         <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<sortLineageGroupsBy>,
    @ocaml.doc(
      "<p>A timestamp to filter against lineage groups created before a certain point in time.</p>"
    )
    @as("CreatedBefore")
    createdBefore: option<timestamp_>,
    @ocaml.doc(
      "<p>A timestamp to filter against lineage groups created after a certain point in time.</p>"
    )
    @as("CreatedAfter")
    createdAfter: option<timestamp_>,
  }
  type response = {
    @ocaml.doc("<p>If the response is truncated, SageMaker returns this token. To retrieve the next set of
         algorithms, use it in the subsequent request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of lineage groups and their properties.</p>") @as("LineageGroupSummaries")
    lineageGroupSummaries: option<lineageGroupSummaries>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListLineageGroupsCommand"
  let make = (
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~createdBefore=?,
    ~createdAfter=?,
    (),
  ) => new({maxResults, nextToken, sortOrder, sortBy, createdBefore, createdAfter})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListInferenceRecommendationsJobs = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of recommendations to return in the response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the response to a previous <code>ListInferenceRecommendationsJobsRequest</code> request 
         was truncated, the response includes a <code>NextToken</code>. To retrieve the next set 
         of recommendations, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The sort order for the results.</p>") @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>The parameter by which to sort the results.</p>") @as("SortBy")
    sortBy: option<listInferenceRecommendationsJobsSortBy>,
    @ocaml.doc(
      "<p>A filter that retrieves only inference recommendations jobs with a specific status.</p>"
    )
    @as("StatusEquals")
    statusEquals: option<recommendationJobStatus>,
    @ocaml.doc(
      "<p>A string in the job name. This filter returns only recommendations whose name contains the specified string.</p>"
    )
    @as("NameContains")
    nameContains: option<nameContains>,
    @ocaml.doc(
      "<p>A filter that returns only jobs that were last modified before the specified time (timestamp).</p>"
    )
    @as("LastModifiedTimeBefore")
    lastModifiedTimeBefore: option<lastModifiedTime>,
    @ocaml.doc(
      "<p>A filter that returns only jobs that were last modified after the specified time (timestamp).</p>"
    )
    @as("LastModifiedTimeAfter")
    lastModifiedTimeAfter: option<lastModifiedTime>,
    @ocaml.doc(
      "<p>A filter that returns only jobs created before the specified time (timestamp).</p>"
    )
    @as("CreationTimeBefore")
    creationTimeBefore: option<creationTime>,
    @ocaml.doc(
      "<p>A filter that returns only jobs created after the specified time (timestamp).</p>"
    )
    @as("CreationTimeAfter")
    creationTimeAfter: option<creationTime>,
  }
  type response = {
    @ocaml.doc("<p>A token for getting the next set of recommendations, if there are any.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>The recommendations created from the Amazon SageMaker Inference Recommender job.</p>"
    )
    @as("InferenceRecommendationsJobs")
    inferenceRecommendationsJobs: inferenceRecommendationsJobs,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListInferenceRecommendationsJobsCommand"
  let make = (
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~statusEquals=?,
    ~nameContains=?,
    ~lastModifiedTimeBefore=?,
    ~lastModifiedTimeAfter=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    (),
  ) =>
    new({
      maxResults,
      nextToken,
      sortOrder,
      sortBy,
      statusEquals,
      nameContains,
      lastModifiedTimeBefore,
      lastModifiedTimeAfter,
      creationTimeBefore,
      creationTimeAfter,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListImages = {
  type t
  type request = {
    @ocaml.doc("<p>The sort order. The default value is <code>DESCENDING</code>.</p>")
    @as("SortOrder")
    sortOrder: option<imageSortOrder>,
    @ocaml.doc(
      "<p>The property used to sort results. The default value is <code>CREATION_TIME</code>.</p>"
    )
    @as("SortBy")
    sortBy: option<imageSortBy>,
    @ocaml.doc("<p>If the previous call to <code>ListImages</code> didn't return the full set of images,
        the call returns a token for getting the next set of images.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A filter that returns only images whose name contains the specified string.</p>")
    @as("NameContains")
    nameContains: option<imageNameContains>,
    @ocaml.doc(
      "<p>The maximum number of images to return in the response. The default value is 10. </p>"
    )
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>A filter that returns only images modified on or before the specified time.</p>")
    @as("LastModifiedTimeBefore")
    lastModifiedTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only images modified on or after the specified time.</p>")
    @as("LastModifiedTimeAfter")
    lastModifiedTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only images created on or before the specified time.</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only images created on or after the specified time.</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
  }
  type response = {
    @ocaml.doc("<p>A token for getting the next set of images, if there are any.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of images and their properties.</p>") @as("Images")
    images: option<images>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListImagesCommand"
  let make = (
    ~sortOrder=?,
    ~sortBy=?,
    ~nextToken=?,
    ~nameContains=?,
    ~maxResults=?,
    ~lastModifiedTimeBefore=?,
    ~lastModifiedTimeAfter=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    (),
  ) =>
    new({
      sortOrder,
      sortBy,
      nextToken,
      nameContains,
      maxResults,
      lastModifiedTimeBefore,
      lastModifiedTimeAfter,
      creationTimeBefore,
      creationTimeAfter,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListImageVersions = {
  type t
  type request = {
    @ocaml.doc("<p>The sort order. The default value is <code>DESCENDING</code>.</p>")
    @as("SortOrder")
    sortOrder: option<imageVersionSortOrder>,
    @ocaml.doc(
      "<p>The property used to sort results. The default value is <code>CREATION_TIME</code>.</p>"
    )
    @as("SortBy")
    sortBy: option<imageVersionSortBy>,
    @ocaml.doc("<p>If the previous call to <code>ListImageVersions</code> didn't return the full set of
        versions, the call returns a token for getting the next set of versions.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>The maximum number of versions to return in the response. The default value is 10. </p>"
    )
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc(
      "<p>A filter that returns only versions modified on or before the specified time.</p>"
    )
    @as("LastModifiedTimeBefore")
    lastModifiedTimeBefore: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only versions modified on or after the specified time.</p>"
    )
    @as("LastModifiedTimeAfter")
    lastModifiedTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>The name of the image to list the versions of.</p>") @as("ImageName")
    imageName: imageName,
    @ocaml.doc(
      "<p>A filter that returns only versions created on or before the specified time.</p>"
    )
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only versions created on or after the specified time.</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
  }
  type response = {
    @ocaml.doc("<p>A token for getting the next set of versions, if there are any.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of versions and their properties.</p>") @as("ImageVersions")
    imageVersions: option<imageVersions>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListImageVersionsCommand"
  let make = (
    ~imageName,
    ~sortOrder=?,
    ~sortBy=?,
    ~nextToken=?,
    ~maxResults=?,
    ~lastModifiedTimeBefore=?,
    ~lastModifiedTimeAfter=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    (),
  ) =>
    new({
      sortOrder,
      sortBy,
      nextToken,
      maxResults,
      lastModifiedTimeBefore,
      lastModifiedTimeAfter,
      imageName,
      creationTimeBefore,
      creationTimeAfter,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListHumanTaskUis = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The total number of items to return. If the total number of available items is more than the value specified in <code>MaxResults</code>, then a <code>NextToken</code> will be provided in the output that you can use to resume pagination.</p>"
    )
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>A token to resume pagination.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>An optional value that specifies whether you want the results sorted in <code>Ascending</code> or <code>Descending</code> order.</p>"
    )
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc(
      "<p>A filter that returns only human task user interfaces that were created before the specified timestamp.</p>"
    )
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only human task user interfaces with a creation time greater than or equal to the specified timestamp.</p>"
    )
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
  }
  type response = {
    @ocaml.doc("<p>A token to resume pagination.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array of objects describing the human task user interfaces.</p>")
    @as("HumanTaskUiSummaries")
    humanTaskUiSummaries: humanTaskUiSummaries,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListHumanTaskUisCommand"
  let make = (
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    (),
  ) => new({maxResults, nextToken, sortOrder, creationTimeBefore, creationTimeAfter})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListFlowDefinitions = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The total number of items to return. If the total number of available items is more than the value specified in <code>MaxResults</code>, then a <code>NextToken</code> will be provided in the output that you can use to resume pagination.</p>"
    )
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>A token to resume pagination.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>An optional value that specifies whether you want the results sorted in <code>Ascending</code> or <code>Descending</code> order.</p>"
    )
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc(
      "<p>A filter that returns only flow definitions that were created before the specified timestamp.</p>"
    )
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only flow definitions with a creation time greater than or equal to the specified timestamp.</p>"
    )
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
  }
  type response = {
    @ocaml.doc("<p>A token to resume pagination.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array of objects describing the flow definitions.</p>")
    @as("FlowDefinitionSummaries")
    flowDefinitionSummaries: flowDefinitionSummaries,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListFlowDefinitionsCommand"
  let make = (
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    (),
  ) => new({maxResults, nextToken, sortOrder, creationTimeBefore, creationTimeAfter})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListEndpoints = {
  type t
  type request = {
    @ocaml.doc("<p> A filter that returns only endpoints with the specified status.</p>")
    @as("StatusEquals")
    statusEquals: option<endpointStatus>,
    @ocaml.doc("<p> A filter that returns only endpoints that were modified after the specified
            timestamp. </p>")
    @as("LastModifiedTimeAfter")
    lastModifiedTimeAfter: option<timestamp_>,
    @ocaml.doc("<p> A filter that returns only endpoints that were modified before the specified
            timestamp. </p>")
    @as("LastModifiedTimeBefore")
    lastModifiedTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only endpoints with a creation time greater than or equal to
            the specified time (timestamp).</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only endpoints that were created before the specified time
            (timestamp).</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A string in endpoint names. This filter returns only endpoints whose name contains
            the specified string.</p>")
    @as("NameContains")
    nameContains: option<endpointNameContains>,
    @ocaml.doc("<p>The maximum number of endpoints to return in the response. This value defaults to
            10.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the result of a <code>ListEndpoints</code> request was truncated, the response
            includes a <code>NextToken</code>. To retrieve the next set of endpoints, use the token
            in the next request.</p>")
    @as("NextToken")
    nextToken: option<paginationToken>,
    @ocaml.doc("<p>The sort order for results. The default is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<orderKey>,
    @ocaml.doc("<p>Sorts the list of results. The default is <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<endpointSortKey>,
  }
  type response = {
    @ocaml.doc("<p> If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of
            training jobs, use it in the subsequent request. </p>")
    @as("NextToken")
    nextToken: option<paginationToken>,
    @ocaml.doc("<p> An array or endpoint objects. </p>") @as("Endpoints")
    endpoints: endpointSummaryList,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListEndpointsCommand"
  let make = (
    ~statusEquals=?,
    ~lastModifiedTimeAfter=?,
    ~lastModifiedTimeBefore=?,
    ~creationTimeAfter=?,
    ~creationTimeBefore=?,
    ~nameContains=?,
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    (),
  ) =>
    new({
      statusEquals,
      lastModifiedTimeAfter,
      lastModifiedTimeBefore,
      creationTimeAfter,
      creationTimeBefore,
      nameContains,
      maxResults,
      nextToken,
      sortOrder,
      sortBy,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListEndpointConfigs = {
  type t
  type request = {
    @ocaml.doc("<p>A filter that returns only endpoint configurations with a creation time greater
            than or equal to the specified time (timestamp).</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only endpoint configurations created before the specified
            time (timestamp).</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A string in the endpoint configuration name. This filter returns only endpoint
            configurations whose name contains the specified string. </p>")
    @as("NameContains")
    nameContains: option<endpointConfigNameContains>,
    @ocaml.doc("<p>The maximum number of training jobs to return in the response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the result of the previous <code>ListEndpointConfig</code> request was
            truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
            endpoint configurations, use the token in the next request. </p>")
    @as("NextToken")
    nextToken: option<paginationToken>,
    @ocaml.doc("<p>The sort order for results. The default is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<orderKey>,
    @ocaml.doc("<p>The field to sort results by. The default is <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<endpointConfigSortKey>,
  }
  type response = {
    @ocaml.doc("<p> If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of
            endpoint configurations, use it in the subsequent request </p>")
    @as("NextToken")
    nextToken: option<paginationToken>,
    @ocaml.doc("<p>An array of endpoint configurations.</p>") @as("EndpointConfigs")
    endpointConfigs: endpointConfigSummaryList,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListEndpointConfigsCommand"
  let make = (
    ~creationTimeAfter=?,
    ~creationTimeBefore=?,
    ~nameContains=?,
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    (),
  ) =>
    new({
      creationTimeAfter,
      creationTimeBefore,
      nameContains,
      maxResults,
      nextToken,
      sortOrder,
      sortBy,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListEdgePackagingJobs = {
  type t
  type request = {
    @ocaml.doc("<p>What direction to sort by.</p>") @as("SortOrder") sortOrder: option<sortOrder>,
    @ocaml.doc("<p>Use to specify what column to sort by.</p>") @as("SortBy")
    sortBy: option<listEdgePackagingJobsSortBy>,
    @ocaml.doc("<p>The job status to filter for.</p>") @as("StatusEquals")
    statusEquals: option<edgePackagingJobStatus>,
    @ocaml.doc("<p>Filter for jobs where the model name contains this string.</p>")
    @as("ModelNameContains")
    modelNameContains: option<nameContains>,
    @ocaml.doc("<p>Filter for jobs containing this name in their packaging job name.</p>")
    @as("NameContains")
    nameContains: option<nameContains>,
    @ocaml.doc("<p>Select jobs where the job was updated before specified time.</p>")
    @as("LastModifiedTimeBefore")
    lastModifiedTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>Select jobs where the job was updated after specified time.</p>")
    @as("LastModifiedTimeAfter")
    lastModifiedTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>Select jobs where the job was created before specified time.</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>Select jobs where the job was created after specified time.</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>Maximum number of results to select.</p>") @as("MaxResults")
    maxResults: option<listMaxResults>,
    @ocaml.doc(
      "<p>The response from the last list when returning a list large enough to need tokening.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  type response = {
    @ocaml.doc("<p>Token to use when calling the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Summaries of edge packaging jobs.</p>") @as("EdgePackagingJobSummaries")
    edgePackagingJobSummaries: edgePackagingJobSummaries,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListEdgePackagingJobsCommand"
  let make = (
    ~sortOrder=?,
    ~sortBy=?,
    ~statusEquals=?,
    ~modelNameContains=?,
    ~nameContains=?,
    ~lastModifiedTimeBefore=?,
    ~lastModifiedTimeAfter=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    ~maxResults=?,
    ~nextToken=?,
    (),
  ) =>
    new({
      sortOrder,
      sortBy,
      statusEquals,
      modelNameContains,
      nameContains,
      lastModifiedTimeBefore,
      lastModifiedTimeAfter,
      creationTimeBefore,
      creationTimeAfter,
      maxResults,
      nextToken,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListDomains = {
  type t
  type request = {
    @ocaml.doc("<p>Returns a list up to a specified limit.</p>") @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the previous response was truncated, you will receive this token.
        Use it in your next request to receive the next set of results.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  type response = {
    @ocaml.doc("<p>If the previous response was truncated, you will receive this token.
        Use it in your next request to receive the next set of results.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The list of domains.</p>") @as("Domains") domains: option<domainList>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListDomainsCommand"
  let make = (~maxResults=?, ~nextToken=?, ()) => new({maxResults, nextToken})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListDeviceFleets = {
  type t
  type request = {
    @ocaml.doc("<p>What direction to sort in.</p>") @as("SortOrder") sortOrder: option<sortOrder>,
    @ocaml.doc("<p>The column to sort by.</p>") @as("SortBy")
    sortBy: option<listDeviceFleetsSortBy>,
    @ocaml.doc("<p>Filter for fleets containing this name in their fleet device name.</p>")
    @as("NameContains")
    nameContains: option<nameContains>,
    @ocaml.doc("<p>Select fleets where the job was updated before X</p>")
    @as("LastModifiedTimeBefore")
    lastModifiedTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>Select fleets where the job was updated after X</p>")
    @as("LastModifiedTimeAfter")
    lastModifiedTimeAfter: option<timestamp_>,
    @ocaml.doc(
      "<p>Filter fleets where the edge packaging job was created before specified time.</p>"
    )
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>Filter fleets where packaging job was created after specified time.</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>The maximum number of results to select.</p>") @as("MaxResults")
    maxResults: option<listMaxResults>,
    @ocaml.doc(
      "<p>The response from the last list when returning a list large enough to need tokening.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  type response = {
    @ocaml.doc(
      "<p>The response from the last list when returning a list large enough to need tokening.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Summary of the device fleet.</p>") @as("DeviceFleetSummaries")
    deviceFleetSummaries: deviceFleetSummaries,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListDeviceFleetsCommand"
  let make = (
    ~sortOrder=?,
    ~sortBy=?,
    ~nameContains=?,
    ~lastModifiedTimeBefore=?,
    ~lastModifiedTimeAfter=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    ~maxResults=?,
    ~nextToken=?,
    (),
  ) =>
    new({
      sortOrder,
      sortBy,
      nameContains,
      lastModifiedTimeBefore,
      lastModifiedTimeAfter,
      creationTimeBefore,
      creationTimeAfter,
      maxResults,
      nextToken,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListDataQualityJobDefinitions = {
  type t
  type request = {
    @ocaml.doc("<p>A filter that returns only data quality monitoring job definitions created after the
         specified time.</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only data quality monitoring job definitions created before the
         specified time.</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A string in the data quality monitoring job definition name. This filter returns only
         data quality monitoring job definitions whose name contains the specified string.</p>")
    @as("NameContains")
    nameContains: option<nameContains>,
    @ocaml.doc("<p>The maximum number of data quality monitoring job definitions to return in the
         response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the result of the previous <code>ListDataQualityJobDefinitions</code> request was
         truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
         transform jobs, use the token in the next request.></p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The sort order for results. The default is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>The field to sort results by. The default is <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<monitoringJobDefinitionSortKey>,
    @ocaml.doc("<p>A filter that lists the data quality job definitions associated with the specified
         endpoint.</p>")
    @as("EndpointName")
    endpointName: option<endpointName>,
  }
  type response = {
    @ocaml.doc("<p>If the result of the previous <code>ListDataQualityJobDefinitions</code> request was
         truncated, the response includes a <code>NextToken</code>. To retrieve the next set of data
         quality monitoring job definitions, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of data quality monitoring job definitions.</p>")
    @as("JobDefinitionSummaries")
    jobDefinitionSummaries: monitoringJobDefinitionSummaryList,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListDataQualityJobDefinitionsCommand"
  let make = (
    ~creationTimeAfter=?,
    ~creationTimeBefore=?,
    ~nameContains=?,
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~endpointName=?,
    (),
  ) =>
    new({
      creationTimeAfter,
      creationTimeBefore,
      nameContains,
      maxResults,
      nextToken,
      sortOrder,
      sortBy,
      endpointName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListCompilationJobs = {
  type t
  type request = {
    @ocaml.doc("<p>The sort order for results. The default is <code>Ascending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc(
      "<p>The field by which to sort results. The default is <code>CreationTime</code>.</p>"
    )
    @as("SortBy")
    sortBy: option<listCompilationJobsSortBy>,
    @ocaml.doc(
      "<p>A filter that retrieves model compilation jobs with a specific <a>DescribeCompilationJobResponse$CompilationJobStatus</a> status.</p>"
    )
    @as("StatusEquals")
    statusEquals: option<compilationJobStatus>,
    @ocaml.doc("<p>A filter that returns the model compilation jobs whose name contains a specified
            string.</p>")
    @as("NameContains")
    nameContains: option<nameContains>,
    @ocaml.doc("<p>A filter that returns the model compilation jobs that were modified before a specified
            time.</p>")
    @as("LastModifiedTimeBefore")
    lastModifiedTimeBefore: option<lastModifiedTime>,
    @ocaml.doc("<p>A filter that returns the model compilation jobs that were modified after a specified
            time.</p>")
    @as("LastModifiedTimeAfter")
    lastModifiedTimeAfter: option<lastModifiedTime>,
    @ocaml.doc("<p>A filter that returns the model compilation jobs that were created before a specified
            time.</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<creationTime>,
    @ocaml.doc("<p>A filter that returns the model compilation jobs that were created after a specified
            time. </p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<creationTime>,
    @ocaml.doc("<p>The maximum number of model compilation jobs to return in the response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the result of the previous <code>ListCompilationJobs</code> request was truncated,
            the response includes a <code>NextToken</code>. To retrieve the next set of model
            compilation jobs, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  type response = {
    @ocaml.doc("<p>If the response is truncated, Amazon SageMaker returns this <code>NextToken</code>. To retrieve
            the next set of model compilation jobs, use this token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array of <a>CompilationJobSummary</a> objects, each describing a model
            compilation job. </p>")
    @as("CompilationJobSummaries")
    compilationJobSummaries: compilationJobSummaries,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListCompilationJobsCommand"
  let make = (
    ~sortOrder=?,
    ~sortBy=?,
    ~statusEquals=?,
    ~nameContains=?,
    ~lastModifiedTimeBefore=?,
    ~lastModifiedTimeAfter=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    ~maxResults=?,
    ~nextToken=?,
    (),
  ) =>
    new({
      sortOrder,
      sortBy,
      statusEquals,
      nameContains,
      lastModifiedTimeBefore,
      lastModifiedTimeAfter,
      creationTimeBefore,
      creationTimeAfter,
      maxResults,
      nextToken,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListApps = {
  type t
  type request = {
    @ocaml.doc("<p>A parameter to search by user profile name.</p>") @as("UserProfileNameEquals")
    userProfileNameEquals: option<userProfileName>,
    @ocaml.doc("<p>A parameter to search for the domain ID.</p>") @as("DomainIdEquals")
    domainIdEquals: option<domainId>,
    @ocaml.doc("<p>The parameter by which to sort the results. The default is CreationTime.</p>")
    @as("SortBy")
    sortBy: option<appSortKey>,
    @ocaml.doc("<p>The sort order for the results. The default is Ascending.</p>") @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>Returns a list up to a specified limit.</p>") @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the previous response was truncated, you will receive this token.
        Use it in your next request to receive the next set of results.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  type response = {
    @ocaml.doc("<p>If the previous response was truncated, you will receive this token.
        Use it in your next request to receive the next set of results.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The list of apps.</p>") @as("Apps") apps: option<appList>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListAppsCommand"
  let make = (
    ~userProfileNameEquals=?,
    ~domainIdEquals=?,
    ~sortBy=?,
    ~sortOrder=?,
    ~maxResults=?,
    ~nextToken=?,
    (),
  ) => new({userProfileNameEquals, domainIdEquals, sortBy, sortOrder, maxResults, nextToken})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListAlgorithms = {
  type t
  type request = {
    @ocaml.doc("<p>The sort order for the results. The default is <code>Ascending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>The parameter by which to sort the results. The default is
            <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<algorithmSortBy>,
    @ocaml.doc("<p>If the response to a previous <code>ListAlgorithms</code> request was truncated, the
            response includes a <code>NextToken</code>. To retrieve the next set of algorithms, use
            the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A string in the algorithm name. This filter returns only algorithms whose name
            contains the specified string.</p>")
    @as("NameContains")
    nameContains: option<nameContains>,
    @ocaml.doc("<p>The maximum number of algorithms to return in the response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>A filter that returns only algorithms created before the specified time
            (timestamp).</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<creationTime>,
    @ocaml.doc("<p>A filter that returns only algorithms created after the specified time
            (timestamp).</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<creationTime>,
  }
  type response = {
    @ocaml.doc("<p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of
            algorithms, use it in the subsequent request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>>An array of <code>AlgorithmSummary</code> objects, each of which lists an
            algorithm.</p>")
    @as("AlgorithmSummaryList")
    algorithmSummaryList: algorithmSummaryList,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListAlgorithmsCommand"
  let make = (
    ~sortOrder=?,
    ~sortBy=?,
    ~nextToken=?,
    ~nameContains=?,
    ~maxResults=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    (),
  ) =>
    new({
      sortOrder,
      sortBy,
      nextToken,
      nameContains,
      maxResults,
      creationTimeBefore,
      creationTimeAfter,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module GetSearchSuggestions = {
  type t
  type request = {
    @ocaml.doc("<p>Limits the property names that are included in the response.</p>")
    @as("SuggestionQuery")
    suggestionQuery: option<suggestionQuery>,
    @ocaml.doc("<p>The name of the Amazon SageMaker resource to search for.</p>") @as("Resource")
    resource: resourceType,
  }
  type response = {
    @ocaml.doc("<p>A list of property names for a <code>Resource</code> that match a
      <code>SuggestionQuery</code>.</p>")
    @as("PropertyNameSuggestions")
    propertyNameSuggestions: option<propertyNameSuggestionList>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "GetSearchSuggestionsCommand"
  let make = (~resource, ~suggestionQuery=?, ()) => new({suggestionQuery, resource})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module GetDeviceFleetReport = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the fleet.</p>") @as("DeviceFleetName") deviceFleetName: entityName,
  }
  type response = {
    @ocaml.doc("<p>Status of model on device.</p>") @as("ModelStats")
    modelStats: option<edgeModelStats>,
    @ocaml.doc("<p>The versions of Edge Manager agent deployed on the fleet.</p>")
    @as("AgentVersions")
    agentVersions: option<agentVersions>,
    @ocaml.doc("<p>Status of devices.</p>") @as("DeviceStats") deviceStats: option<deviceStats>,
    @ocaml.doc("<p>Timestamp of when the report was generated.</p>") @as("ReportGenerated")
    reportGenerated: option<timestamp_>,
    @ocaml.doc("<p>Description of the fleet.</p>") @as("Description")
    description: option<deviceFleetDescription>,
    @ocaml.doc("<p>The output configuration for storing sample data collected by the fleet.</p>")
    @as("OutputConfig")
    outputConfig: option<edgeOutputConfig>,
    @ocaml.doc("<p>The name of the fleet.</p>") @as("DeviceFleetName") deviceFleetName: entityName,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the device.</p>") @as("DeviceFleetArn")
    deviceFleetArn: deviceFleetArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "GetDeviceFleetReportCommand"
  let make = (~deviceFleetName, ()) => new({deviceFleetName: deviceFleetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeTrialComponent = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the trial component to describe.</p>") @as("TrialComponentName")
    trialComponentName: experimentEntityNameOrArn,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the lineage group.</p>") @as("LineageGroupArn")
    lineageGroupArn: option<lineageGroupArn>,
    @ocaml.doc("<p>The metrics for the component.</p>") @as("Metrics")
    metrics: option<trialComponentMetricSummaries>,
    @as("MetadataProperties") metadataProperties: option<metadataProperties>,
    @ocaml.doc("<p>The output artifacts of the component.</p>") @as("OutputArtifacts")
    outputArtifacts: option<trialComponentArtifacts>,
    @ocaml.doc("<p>The input artifacts of the component.</p>") @as("InputArtifacts")
    inputArtifacts: option<trialComponentArtifacts>,
    @ocaml.doc("<p>The hyperparameters of the component.</p>") @as("Parameters")
    parameters: option<trialComponentParameters>,
    @ocaml.doc("<p>Who last modified the component.</p>") @as("LastModifiedBy")
    lastModifiedBy: option<userContext>,
    @ocaml.doc("<p>When the component was last modified.</p>") @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @ocaml.doc("<p>Who created the trial component.</p>") @as("CreatedBy")
    createdBy: option<userContext>,
    @ocaml.doc("<p>When the component was created.</p>") @as("CreationTime")
    creationTime: option<timestamp_>,
    @ocaml.doc("<p>When the component ended.</p>") @as("EndTime") endTime: option<timestamp_>,
    @ocaml.doc("<p>When the component started.</p>") @as("StartTime") startTime: option<timestamp_>,
    @ocaml.doc("<p>The status of the component. States include:</p>
         <ul>
            <li>
               <p>InProgress</p>
            </li>
            <li>
               <p>Completed</p>
            </li>
            <li>
               <p>Failed</p>
            </li>
         </ul>")
    @as("Status")
    status: option<trialComponentStatus>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the source and, optionally, the job type.</p>")
    @as("Source")
    source: option<trialComponentSource>,
    @ocaml.doc("<p>The name of the component as displayed. If <code>DisplayName</code> isn't specified,
        <code>TrialComponentName</code> is displayed.</p>")
    @as("DisplayName")
    displayName: option<experimentEntityName>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the trial component.</p>")
    @as("TrialComponentArn")
    trialComponentArn: option<trialComponentArn>,
    @ocaml.doc("<p>The name of the trial component.</p>") @as("TrialComponentName")
    trialComponentName: option<experimentEntityName>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeTrialComponentCommand"
  let make = (~trialComponentName, ()) => new({trialComponentName: trialComponentName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeNotebookInstanceLifecycleConfig = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the lifecycle configuration to describe.</p>")
    @as("NotebookInstanceLifecycleConfigName")
    notebookInstanceLifecycleConfigName: notebookInstanceLifecycleConfigName,
  }
  type response = {
    @ocaml.doc("<p>A timestamp that tells when the lifecycle configuration was created.</p>")
    @as("CreationTime")
    creationTime: option<creationTime>,
    @ocaml.doc("<p>A timestamp that tells when the lifecycle configuration was last modified.</p>")
    @as("LastModifiedTime")
    lastModifiedTime: option<lastModifiedTime>,
    @ocaml.doc("<p>The shell script that runs every time you start a notebook instance, including when
            you create the notebook instance.</p>")
    @as("OnStart")
    onStart: option<notebookInstanceLifecycleConfigList>,
    @ocaml.doc("<p>The shell script that runs only once, when you create a notebook instance.</p>")
    @as("OnCreate")
    onCreate: option<notebookInstanceLifecycleConfigList>,
    @ocaml.doc("<p>The name of the lifecycle configuration.</p>")
    @as("NotebookInstanceLifecycleConfigName")
    notebookInstanceLifecycleConfigName: option<notebookInstanceLifecycleConfigName>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the lifecycle configuration.</p>")
    @as("NotebookInstanceLifecycleConfigArn")
    notebookInstanceLifecycleConfigArn: option<notebookInstanceLifecycleConfigArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeNotebookInstanceLifecycleConfigCommand"
  let make = (~notebookInstanceLifecycleConfigName, ()) =>
    new({notebookInstanceLifecycleConfigName: notebookInstanceLifecycleConfigName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeFeatureGroup = {
  type t
  type request = {
    @ocaml.doc("<p>A token to resume pagination of the list of <code>Features</code>
            (<code>FeatureDefinitions</code>). 2,500 <code>Features</code> are returned by
         default.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The name of the <code>FeatureGroup</code> you want described. </p>")
    @as("FeatureGroupName")
    featureGroupName: featureGroupName,
  }
  type response = {
    @ocaml.doc("<p>A token to resume pagination of the list of <code>Features</code>
            (<code>FeatureDefinitions</code>).</p>")
    @as("NextToken")
    nextToken: nextToken,
    @ocaml.doc("<p>A free form description of the feature group.</p>") @as("Description")
    description: option<description>,
    @ocaml.doc("<p>The reason that the <code>FeatureGroup</code> failed to be replicated in the
            <code>OfflineStore</code>. This is failure can occur because:</p>
         <ul>
            <li>
               <p>The <code>FeatureGroup</code> could not be created in the
                  <code>OfflineStore</code>.</p>
            </li>
            <li>
               <p>The <code>FeatureGroup</code> could not be deleted from the
                  <code>OfflineStore</code>.</p>
            </li>
         </ul>")
    @as("FailureReason")
    failureReason: option<failureReason>,
    @ocaml.doc("<p>The status of the <code>OfflineStore</code>. Notifies you if replicating data into the
            <code>OfflineStore</code> has failed. Returns either: <code>Active</code> or
            <code>Blocked</code>
         </p>")
    @as("OfflineStoreStatus")
    offlineStoreStatus: option<offlineStoreStatus>,
    @ocaml.doc("<p>The status of the feature group.</p>") @as("FeatureGroupStatus")
    featureGroupStatus: option<featureGroupStatus>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the
         <code>OfflineStore</code> if an <code>OfflineStoreConfig</code> is provided.</p>")
    @as("RoleArn")
    roleArn: option<roleArn>,
    @ocaml.doc("<p>The configuration of the <code>OfflineStore</code>, inducing the S3 location of the
         <code>OfflineStore</code>, Amazon Web Services Glue or Amazon Web Services Hive data catalogue configurations, and the
         security configuration.</p>")
    @as("OfflineStoreConfig")
    offlineStoreConfig: option<offlineStoreConfig>,
    @ocaml.doc("<p>The configuration for the <code>OnlineStore</code>.</p>")
    @as("OnlineStoreConfig")
    onlineStoreConfig: option<onlineStoreConfig>,
    @ocaml.doc(
      "<p>A timestamp indicating when SageMaker created the <code>FeatureGroup</code>.</p>"
    )
    @as("CreationTime")
    creationTime: creationTime,
    @ocaml.doc("<p>A list of the <code>Features</code> in the <code>FeatureGroup</code>. 
         Each feature is defined by a <code>FeatureName</code> and <code>FeatureType</code>.</p>")
    @as("FeatureDefinitions")
    featureDefinitions: featureDefinitions,
    @ocaml.doc("<p>The name of the feature that stores the <code>EventTime</code> of a Record in a
         <code>FeatureGroup</code>.</p>
         <p> An <code>EventTime</code> is a point in time when a new event occurs that
         corresponds to the creation or update of a <code>Record</code> in a
            <code>FeatureGroup</code>. All <code>Records</code> in the <code>FeatureGroup</code>
         have a corresponding <code>EventTime</code>.</p>")
    @as("EventTimeFeatureName")
    eventTimeFeatureName: featureName,
    @ocaml.doc("<p>The name of the <code>Feature</code> used for <code>RecordIdentifier</code>, whose value
         uniquely identifies a record stored in the feature store.</p>")
    @as("RecordIdentifierFeatureName")
    recordIdentifierFeatureName: featureName,
    @ocaml.doc("<p>he name of the <code>FeatureGroup</code>.</p>") @as("FeatureGroupName")
    featureGroupName: featureGroupName,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the <code>FeatureGroup</code>.  </p>")
    @as("FeatureGroupArn")
    featureGroupArn: featureGroupArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeFeatureGroupCommand"
  let make = (~featureGroupName, ~nextToken=?, ()) => new({nextToken, featureGroupName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeDevice = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the fleet the devices belong to.</p>") @as("DeviceFleetName")
    deviceFleetName: entityName,
    @ocaml.doc("<p>The unique ID of the device.</p>") @as("DeviceName") deviceName: entityName,
    @ocaml.doc("<p>Next token of device description.</p>") @as("NextToken")
    nextToken: option<nextToken>,
  }
  type response = {
    @ocaml.doc("<p>Edge Manager agent version.</p>") @as("AgentVersion")
    agentVersion: option<edgeVersion>,
    @ocaml.doc(
      "<p>The response from the last list when returning a list large enough to need tokening.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of models.</p>") @as("MaxModels") maxModels: option<integer_>,
    @ocaml.doc("<p>Models on the device.</p>") @as("Models") models: option<edgeModels>,
    @ocaml.doc("<p>The last heartbeat received from the device.</p>") @as("LatestHeartbeat")
    latestHeartbeat: option<timestamp_>,
    @ocaml.doc("<p>The timestamp of the last registration or de-reregistration.</p>")
    @as("RegistrationTime")
    registrationTime: timestamp_,
    @ocaml.doc(
      "<p>The Amazon Web Services Internet of Things (IoT) object thing name associated with the device.</p>"
    )
    @as("IotThingName")
    iotThingName: option<thingName>,
    @ocaml.doc("<p>The name of the fleet the device belongs to.</p>") @as("DeviceFleetName")
    deviceFleetName: entityName,
    @ocaml.doc("<p>A description of the device.</p>") @as("Description")
    description: option<deviceDescription>,
    @ocaml.doc("<p>The unique identifier of the device.</p>") @as("DeviceName")
    deviceName: entityName,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the device.</p>") @as("DeviceArn")
    deviceArn: option<deviceArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DescribeDeviceCommand"
  let make = (~deviceFleetName, ~deviceName, ~nextToken=?, ()) =>
    new({deviceFleetName, deviceName, nextToken})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeCompilationJob = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the model compilation job that you want information about.</p>")
    @as("CompilationJobName")
    compilationJobName: entityName,
  }
  type response = {
    @ocaml.doc("<p>A <a>VpcConfig</a> object that specifies the VPC that you want your
            compilation job to connect to. Control access to your models by
            configuring the VPC. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html\">Protect Compilation Jobs by Using an Amazon
                Virtual Private Cloud</a>.</p>")
    @as("VpcConfig")
    vpcConfig: option<neoVpcConfig>,
    @ocaml.doc("<p>Information about the output location for the compiled model and the target device
            that the model runs on.</p>")
    @as("OutputConfig")
    outputConfig: outputConfig,
    @ocaml.doc("<p>Information about the location in Amazon S3 of the input model artifacts, the name and
            shape of the expected data inputs, and the framework in which the model was
            trained.</p>")
    @as("InputConfig")
    inputConfig: inputConfig,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker assumes to perform the model
            compilation job.</p>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc(
      "<p>Provides a BLAKE2 hash value that identifies the compiled model artifacts in Amazon S3.</p>"
    )
    @as("ModelDigests")
    modelDigests: option<modelDigests>,
    @ocaml.doc("<p>Information about the location in Amazon S3 that has been configured for storing the model
            artifacts used in the compilation job.</p>")
    @as("ModelArtifacts")
    modelArtifacts: modelArtifacts,
    @ocaml.doc("<p>If a model compilation job failed, the reason it failed. </p>")
    @as("FailureReason")
    failureReason: failureReason,
    @ocaml.doc("<p>The time that the status
            of
            the model compilation job was last modified.</p>")
    @as("LastModifiedTime")
    lastModifiedTime: lastModifiedTime,
    @ocaml.doc("<p>The time that the model compilation job was created.</p>") @as("CreationTime")
    creationTime: creationTime,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the versioned model package that was 
    provided to SageMaker Neo when you initiated a compilation job.</p>")
    @as("ModelPackageVersionArn")
    modelPackageVersionArn: option<modelPackageArn>,
    @ocaml.doc("<p>The inference image to use when compiling a model. 
            Specify an image only if the target device is a cloud instance.</p>")
    @as("InferenceImage")
    inferenceImage: option<inferenceImage>,
    @ocaml.doc("<p>Specifies a limit to how long a model compilation job can run. When the job reaches
            the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training
            costs.</p>")
    @as("StoppingCondition")
    stoppingCondition: stoppingCondition,
    @ocaml.doc("<p>The time when the model compilation job on a compilation job instance ended. For a
            successful or stopped job, this is when the job's model artifacts have finished
            uploading. For a failed job, this is when Amazon SageMaker detected that the job failed. </p>")
    @as("CompilationEndTime")
    compilationEndTime: option<timestamp_>,
    @ocaml.doc("<p>The time when the model compilation job started the <code>CompilationJob</code>
            instances. </p>
        <p>You are billed for the time between this timestamp and the timestamp in the <a>DescribeCompilationJobResponse$CompilationEndTime</a> field. In Amazon CloudWatch Logs,
            the start time might be later than this time. That's because it takes time to download
            the compilation job, which depends on the size of the compilation job container. </p>")
    @as("CompilationStartTime")
    compilationStartTime: option<timestamp_>,
    @ocaml.doc("<p>The status of the model compilation job.</p>") @as("CompilationJobStatus")
    compilationJobStatus: compilationJobStatus,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model compilation job.</p>")
    @as("CompilationJobArn")
    compilationJobArn: compilationJobArn,
    @ocaml.doc("<p>The name of the model compilation job.</p>") @as("CompilationJobName")
    compilationJobName: entityName,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeCompilationJobCommand"
  let make = (~compilationJobName, ()) => new({compilationJobName: compilationJobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateWorkforce = {
  type t
  type request = {
    @ocaml.doc("<p>An array of key-value pairs that contain metadata to help you categorize and 
      organize our workforce. Each tag consists of a key and a value, 
      both of which you define.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The name of the private workforce.</p>") @as("WorkforceName")
    workforceName: workforceName,
    @as("SourceIpConfig") sourceIpConfig: option<sourceIpConfig>,
    @ocaml.doc("<p>Use this parameter to configure a private workforce using your own OIDC Identity Provider.</p>
         <p>Do not use <code>CognitoConfig</code> if you specify values for 
      <code>OidcConfig</code>.</p>")
    @as("OidcConfig")
    oidcConfig: option<oidcConfig>,
    @ocaml.doc("<p>Use this parameter to configure an Amazon Cognito private workforce.
      A single Cognito workforce is created using and corresponds to a single
      <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html\">
      Amazon Cognito user pool</a>.</p>
      
         <p>Do not use <code>OidcConfig</code> if you specify values for 
      <code>CognitoConfig</code>.</p>")
    @as("CognitoConfig")
    cognitoConfig: option<cognitoConfig>,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the workforce.</p>") @as("WorkforceArn")
    workforceArn: workforceArn,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateWorkforceCommand"
  let make = (~workforceName, ~tags=?, ~sourceIpConfig=?, ~oidcConfig=?, ~cognitoConfig=?, ()) =>
    new({tags, workforceName, sourceIpConfig, oidcConfig, cognitoConfig})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateTrialComponent = {
  type t
  type request = {
    @ocaml.doc("<p>A list of tags to associate with the component. You can use <a>Search</a> API
      to search on the tags.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @as("MetadataProperties") metadataProperties: option<metadataProperties>,
    @ocaml.doc("<p>The output artifacts for the component. Examples of output artifacts are metrics,
      snapshots, logs, and images.</p>")
    @as("OutputArtifacts")
    outputArtifacts: option<trialComponentArtifacts>,
    @ocaml.doc("<p>The input artifacts for the component. Examples of input artifacts are datasets,
      algorithms, hyperparameters, source code, and instance types.</p>")
    @as("InputArtifacts")
    inputArtifacts: option<trialComponentArtifacts>,
    @ocaml.doc("<p>The hyperparameters for the component.</p>") @as("Parameters")
    parameters: option<trialComponentParameters>,
    @ocaml.doc("<p>When the component ended.</p>") @as("EndTime") endTime: option<timestamp_>,
    @ocaml.doc("<p>When the component started.</p>") @as("StartTime") startTime: option<timestamp_>,
    @ocaml.doc("<p>The status of the component. States include:</p>
         <ul>
            <li>
               <p>InProgress</p>
            </li>
            <li>
               <p>Completed</p>
            </li>
            <li>
               <p>Failed</p>
            </li>
         </ul>")
    @as("Status")
    status: option<trialComponentStatus>,
    @ocaml.doc("<p>The name of the component as displayed. The name doesn't need to be unique. If
        <code>DisplayName</code> isn't specified, <code>TrialComponentName</code> is
      displayed.</p>")
    @as("DisplayName")
    displayName: option<experimentEntityName>,
    @ocaml.doc("<p>The name of the component. The name must be unique in your Amazon Web Services account and is not
      case-sensitive.</p>")
    @as("TrialComponentName")
    trialComponentName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the trial component.</p>")
    @as("TrialComponentArn")
    trialComponentArn: option<trialComponentArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateTrialComponentCommand"
  let make = (
    ~trialComponentName,
    ~tags=?,
    ~metadataProperties=?,
    ~outputArtifacts=?,
    ~inputArtifacts=?,
    ~parameters=?,
    ~endTime=?,
    ~startTime=?,
    ~status=?,
    ~displayName=?,
    (),
  ) =>
    new({
      tags,
      metadataProperties,
      outputArtifacts,
      inputArtifacts,
      parameters,
      endTime,
      startTime,
      status,
      displayName,
      trialComponentName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateTrial = {
  type t
  type request = {
    @ocaml.doc("<p>A list of tags to associate with the trial. You can use <a>Search</a> API to
      search on the tags.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @as("MetadataProperties") metadataProperties: option<metadataProperties>,
    @ocaml.doc("<p>The name of the experiment to associate the trial with.</p>")
    @as("ExperimentName")
    experimentName: experimentEntityName,
    @ocaml.doc("<p>The name of the trial as displayed. The name doesn't need to be unique. If
        <code>DisplayName</code> isn't specified, <code>TrialName</code> is displayed.</p>")
    @as("DisplayName")
    displayName: option<experimentEntityName>,
    @ocaml.doc("<p>The name of the trial. The name must be unique in your Amazon Web Services account and is not
      case-sensitive.</p>")
    @as("TrialName")
    trialName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the trial.</p>") @as("TrialArn")
    trialArn: option<trialArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateTrialCommand"
  let make = (~experimentName, ~trialName, ~tags=?, ~metadataProperties=?, ~displayName=?, ()) =>
    new({tags, metadataProperties, experimentName, displayName, trialName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateStudioLifecycleConfig = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Tags to be associated with the Lifecycle Configuration. Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the Search API. </p>"
    )
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The App type that the Lifecycle Configuration is attached to.</p>")
    @as("StudioLifecycleConfigAppType")
    studioLifecycleConfigAppType: studioLifecycleConfigAppType,
    @ocaml.doc(
      "<p>The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.</p>"
    )
    @as("StudioLifecycleConfigContent")
    studioLifecycleConfigContent: studioLifecycleConfigContent,
    @ocaml.doc("<p>The name of the Studio Lifecycle Configuration to create.</p>")
    @as("StudioLifecycleConfigName")
    studioLifecycleConfigName: studioLifecycleConfigName,
  }
  type response = {
    @ocaml.doc("<p>The ARN of your created Lifecycle Configuration.</p>")
    @as("StudioLifecycleConfigArn")
    studioLifecycleConfigArn: option<studioLifecycleConfigArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateStudioLifecycleConfigCommand"
  let make = (
    ~studioLifecycleConfigAppType,
    ~studioLifecycleConfigContent,
    ~studioLifecycleConfigName,
    ~tags=?,
    (),
  ) =>
    new({
      tags,
      studioLifecycleConfigAppType,
      studioLifecycleConfigContent,
      studioLifecycleConfigName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreatePipeline = {
  type t
  type request = {
    @ocaml.doc("<p>This is the configuration that controls the parallelism of the pipeline. 
            If specified, it applies to all runs of this pipeline by default.</p>")
    @as("ParallelismConfiguration")
    parallelismConfiguration: option<parallelismConfiguration>,
    @ocaml.doc("<p>A list of tags to apply to the created pipeline.</p>") @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) of the role used by the pipeline to access and create resources.</p>"
    )
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
         operation. An idempotent operation completes no more than one time.</p>")
    @as("ClientRequestToken")
    clientRequestToken: idempotencyToken,
    @ocaml.doc("<p>A description of the pipeline.</p>") @as("PipelineDescription")
    pipelineDescription: option<pipelineDescription>,
    @ocaml.doc("<p>The location of the pipeline definition stored in Amazon S3. If specified, 
            SageMaker will retrieve the pipeline definition from this location.</p>")
    @as("PipelineDefinitionS3Location")
    pipelineDefinitionS3Location: option<pipelineDefinitionS3Location>,
    @ocaml.doc("<p>The JSON pipeline definition of the pipeline.</p>") @as("PipelineDefinition")
    pipelineDefinition: option<pipelineDefinition>,
    @ocaml.doc("<p>The display name of the pipeline.</p>") @as("PipelineDisplayName")
    pipelineDisplayName: option<pipelineName>,
    @ocaml.doc("<p>The name of the pipeline.</p>") @as("PipelineName") pipelineName: pipelineName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the created pipeline.</p>") @as("PipelineArn")
    pipelineArn: option<pipelineArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreatePipelineCommand"
  let make = (
    ~roleArn,
    ~clientRequestToken,
    ~pipelineName,
    ~parallelismConfiguration=?,
    ~tags=?,
    ~pipelineDescription=?,
    ~pipelineDefinitionS3Location=?,
    ~pipelineDefinition=?,
    ~pipelineDisplayName=?,
    (),
  ) =>
    new({
      parallelismConfiguration,
      tags,
      roleArn,
      clientRequestToken,
      pipelineDescription,
      pipelineDefinitionS3Location,
      pipelineDefinition,
      pipelineDisplayName,
      pipelineName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateNotebookInstanceLifecycleConfig = {
  type t
  type request = {
    @ocaml.doc("<p>A shell script that runs every time you start a notebook instance, including when you
            create the notebook instance. The shell script must be a base64-encoded string.</p>")
    @as("OnStart")
    onStart: option<notebookInstanceLifecycleConfigList>,
    @ocaml.doc("<p>A shell script that runs only once, when you create a notebook instance. The shell
            script must be a base64-encoded string.</p>")
    @as("OnCreate")
    onCreate: option<notebookInstanceLifecycleConfigList>,
    @ocaml.doc("<p>The name of the lifecycle configuration.</p>")
    @as("NotebookInstanceLifecycleConfigName")
    notebookInstanceLifecycleConfigName: notebookInstanceLifecycleConfigName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the lifecycle configuration.</p>")
    @as("NotebookInstanceLifecycleConfigArn")
    notebookInstanceLifecycleConfigArn: option<notebookInstanceLifecycleConfigArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateNotebookInstanceLifecycleConfigCommand"
  let make = (~notebookInstanceLifecycleConfigName, ~onStart=?, ~onCreate=?, ()) =>
    new({onStart, onCreate, notebookInstanceLifecycleConfigName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateNotebookInstance = {
  type t
  type request = {
    @ocaml.doc("<p>The platform identifier of the notebook instance runtime environment.</p>")
    @as("PlatformIdentifier")
    platformIdentifier: option<platformIdentifier>,
    @ocaml.doc("<p>Whether root access is enabled or disabled for users of the notebook instance. The
            default value is <code>Enabled</code>.</p>
        <note>
            <p>Lifecycle configurations need root access to be able to set up a notebook
                instance. Because of this, lifecycle configurations associated with a notebook
                instance always run with root access even if you disable root access for
                users.</p>
        </note>")
    @as("RootAccess")
    rootAccess: option<rootAccess>,
    @ocaml.doc("<p>An array of up to three Git repositories to associate with the notebook instance.
            These can be either the names of Git repositories stored as resources in your account,
            or the URL of Git repositories in <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html\">Amazon Web Services CodeCommit</a> or in any
            other Git repository. These repositories are cloned at the same level as the default
            repository of your notebook instance. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html\">Associating Git
                Repositories with Amazon SageMaker Notebook Instances</a>.</p>")
    @as("AdditionalCodeRepositories")
    additionalCodeRepositories: option<additionalCodeRepositoryNamesOrUrls>,
    @ocaml.doc("<p>A Git repository to associate with the notebook instance as its default code
            repository. This can be either the name of a Git repository stored as a resource in your
            account, or the URL of a Git repository in <a href=\"https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html\">Amazon Web Services CodeCommit</a> or in any
            other Git repository. When you open a notebook instance, it opens in the directory that
            contains this repository. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html\">Associating Git Repositories with Amazon SageMaker
                Notebook Instances</a>.</p>")
    @as("DefaultCodeRepository")
    defaultCodeRepository: option<codeRepositoryNameOrUrl>,
    @ocaml.doc("<p>A list of Elastic Inference (EI) instance types to associate with this notebook
            instance. Currently, only one instance type can be associated with a notebook instance.
            For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html\">Using Elastic Inference in Amazon SageMaker</a>.</p>")
    @as("AcceleratorTypes")
    acceleratorTypes: option<notebookInstanceAcceleratorTypes>,
    @ocaml.doc("<p>The size, in GB, of the ML storage volume to attach to the notebook instance. The
            default value is 5 GB.</p>")
    @as("VolumeSizeInGB")
    volumeSizeInGB: option<notebookInstanceVolumeSizeInGB>,
    @ocaml.doc("<p>Sets whether Amazon SageMaker provides internet access to the notebook instance. If you set this
            to <code>Disabled</code> this notebook instance is able to access resources only in your
            VPC, and is not be able to connect to Amazon SageMaker training and endpoint services unless you
            configure a NAT Gateway in your VPC.</p>
        <p>For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access\">Notebook Instances Are Internet-Enabled by Default</a>. You can set the value
            of this parameter to <code>Disabled</code> only if you set a value for the
                <code>SubnetId</code> parameter.</p>")
    @as("DirectInternetAccess")
    directInternetAccess: option<directInternetAccess>,
    @ocaml.doc("<p>The name of a lifecycle configuration to associate with the notebook instance. For
            information about lifestyle configurations, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html\">Step 2.1: (Optional)
                Customize a Notebook Instance</a>.</p>")
    @as("LifecycleConfigName")
    lifecycleConfigName: option<notebookInstanceLifecycleConfigName>,
    @ocaml.doc("<p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
            different ways, for example, by purpose, owner, or environment. For more information,
            see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
                Resources</a>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that Amazon SageMaker uses to encrypt data on
            the storage volume attached to your notebook instance. The KMS key you provide must be
            enabled. For information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/enabling-keys.html\">Enabling and Disabling
                Keys</a> in the <i>Amazon Web Services Key Management Service Developer Guide</i>.</p>")
    @as("KmsKeyId")
    kmsKeyId: option<kmsKeyId>,
    @ocaml.doc("<p> When you send any requests to Amazon Web Services resources from the notebook instance, Amazon SageMaker
            assumes this role to perform tasks on your behalf. You must grant this role necessary
            permissions so Amazon SageMaker can perform these tasks. The policy must allow the Amazon SageMaker service
            principal (sagemaker.amazonaws.com) permissions to assume this role. For more
            information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html\">Amazon SageMaker Roles</a>. </p>
        <note>
            <p>To be able to pass this role to Amazon SageMaker, the caller of this API must have the
                    <code>iam:PassRole</code> permission.</p>
        </note>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>The VPC security group IDs, in the form sg-xxxxxxxx. The security groups must be
            for the same VPC as specified in the subnet. </p>")
    @as("SecurityGroupIds")
    securityGroupIds: option<securityGroupIds>,
    @ocaml.doc("<p>The ID of the subnet in a VPC to which you would like to have a connectivity from
            your ML compute instance. </p>")
    @as("SubnetId")
    subnetId: option<subnetId>,
    @ocaml.doc("<p>The type of ML compute instance to launch for the notebook instance.</p>")
    @as("InstanceType")
    instanceType: instanceType,
    @ocaml.doc("<p>The name of the new notebook instance.</p>") @as("NotebookInstanceName")
    notebookInstanceName: notebookInstanceName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the notebook instance. </p>")
    @as("NotebookInstanceArn")
    notebookInstanceArn: option<notebookInstanceArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateNotebookInstanceCommand"
  let make = (
    ~roleArn,
    ~instanceType,
    ~notebookInstanceName,
    ~platformIdentifier=?,
    ~rootAccess=?,
    ~additionalCodeRepositories=?,
    ~defaultCodeRepository=?,
    ~acceleratorTypes=?,
    ~volumeSizeInGB=?,
    ~directInternetAccess=?,
    ~lifecycleConfigName=?,
    ~tags=?,
    ~kmsKeyId=?,
    ~securityGroupIds=?,
    ~subnetId=?,
    (),
  ) =>
    new({
      platformIdentifier,
      rootAccess,
      additionalCodeRepositories,
      defaultCodeRepository,
      acceleratorTypes,
      volumeSizeInGB,
      directInternetAccess,
      lifecycleConfigName,
      tags,
      kmsKeyId,
      roleArn,
      securityGroupIds,
      subnetId,
      instanceType,
      notebookInstanceName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateModelPackageGroup = {
  type t
  type request = {
    @ocaml.doc("<p>A list of key value pairs associated with the model group. For more information, see
            <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
                resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>A description for the model group.</p>") @as("ModelPackageGroupDescription")
    modelPackageGroupDescription: option<entityDescription>,
    @ocaml.doc("<p>The name of the model group.</p>") @as("ModelPackageGroupName")
    modelPackageGroupName: entityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model group.</p>")
    @as("ModelPackageGroupArn")
    modelPackageGroupArn: modelPackageGroupArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateModelPackageGroupCommand"
  let make = (~modelPackageGroupName, ~tags=?, ~modelPackageGroupDescription=?, ()) =>
    new({tags, modelPackageGroupDescription, modelPackageGroupName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateImage = {
  type t
  type request = {
    @ocaml.doc("<p>A list of tags to apply to the image.</p>") @as("Tags") tags: option<tagList_>,
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.</p>"
    )
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>The name of the image. Must be unique to your account.</p>") @as("ImageName")
    imageName: imageName,
    @ocaml.doc(
      "<p>The display name of the image. If not provided, <code>ImageName</code> is displayed.</p>"
    )
    @as("DisplayName")
    displayName: option<imageDisplayName>,
    @ocaml.doc("<p>The description of the image.</p>") @as("Description")
    description: option<imageDescription>,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the image.</p>") @as("ImageArn")
    imageArn: option<imageArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateImageCommand"
  let make = (~roleArn, ~imageName, ~tags=?, ~displayName=?, ~description=?, ()) =>
    new({tags, roleArn, imageName, displayName, description})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateHumanTaskUi = {
  type t
  type request = {
    @ocaml.doc(
      "<p>An array of key-value pairs that contain metadata to help you categorize and organize a human review workflow user interface. Each tag consists of a key and a value, both of which you define.</p>"
    )
    @as("Tags")
    tags: option<tagList_>,
    @as("UiTemplate") uiTemplate: uiTemplate,
    @ocaml.doc("<p>The name of the user interface you are creating.</p>") @as("HumanTaskUiName")
    humanTaskUiName: humanTaskUiName,
  }
  type response = {
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) of the human review workflow user interface you create.</p>"
    )
    @as("HumanTaskUiArn")
    humanTaskUiArn: humanTaskUiArn,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateHumanTaskUiCommand"
  let make = (~uiTemplate, ~humanTaskUiName, ~tags=?, ()) =>
    new({tags, uiTemplate, humanTaskUiName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateFeatureGroup = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Tags used to identify <code>Features</code> in each <code>FeatureGroup</code>.</p>"
    )
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>A free-form description of a <code>FeatureGroup</code>.</p>") @as("Description")
    description: option<description>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the
            <code>OfflineStore</code> if an <code>OfflineStoreConfig</code> is provided.</p>")
    @as("RoleArn")
    roleArn: option<roleArn>,
    @ocaml.doc("<p>Use this to configure an <code>OfflineFeatureStore</code>. This parameter allows you to
         specify:</p>
         <ul>
            <li>
               <p>The Amazon Simple Storage Service (Amazon S3) location of an
                  <code>OfflineStore</code>.</p>
            </li>
            <li>
               <p>A configuration for an Amazon Web Services Glue or Amazon Web Services Hive data catalog. </p>
            </li>
            <li>
               <p>An KMS encryption key to encrypt the Amazon S3 location used for
               <code>OfflineStore</code>. If KMS encryption key is not specified, by default we encrypt all data at rest using 
               Amazon Web Services KMS key. By defining your <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-key.html\">bucket-level key</a> for SSE, 
               you can reduce Amazon Web Services KMS requests costs by up to 99 percent.</p>
            </li>
         </ul>
         <p>To learn more about this parameter, see <a>OfflineStoreConfig</a>.</p>")
    @as("OfflineStoreConfig")
    offlineStoreConfig: option<offlineStoreConfig>,
    @ocaml.doc("<p>You can turn the <code>OnlineStore</code> on or off by specifying <code>True</code> for
         the <code>EnableOnlineStore</code> flag in <code>OnlineStoreConfig</code>; the default
         value is <code>False</code>.</p>
         <p>You can also include an Amazon Web Services KMS key ID (<code>KMSKeyId</code>) for at-rest encryption of
         the <code>OnlineStore</code>.</p>")
    @as("OnlineStoreConfig")
    onlineStoreConfig: option<onlineStoreConfig>,
    @ocaml.doc("<p>A list of <code>Feature</code> names and types. <code>Name</code> and <code>Type</code>
         is compulsory per <code>Feature</code>. </p>
         <p>Valid feature <code>FeatureType</code>s are <code>Integral</code>,
            <code>Fractional</code> and <code>String</code>.</p>
         <p>
            <code>FeatureName</code>s cannot be any of the following: <code>is_deleted</code>,
            <code>write_time</code>, <code>api_invocation_time</code>
         </p>
         <p>You can create up to 2,500 <code>FeatureDefinition</code>s per
         <code>FeatureGroup</code>.</p>")
    @as("FeatureDefinitions")
    featureDefinitions: featureDefinitions,
    @ocaml.doc("<p>The name of the feature that stores the <code>EventTime</code> of a <code>Record</code>
         in a <code>FeatureGroup</code>.</p>
         <p>An <code>EventTime</code> is a point in time when a new event occurs that corresponds to
         the creation or update of a <code>Record</code> in a <code>FeatureGroup</code>. All
            <code>Records</code> in the <code>FeatureGroup</code> must have a corresponding
            <code>EventTime</code>.</p>
         <p>An <code>EventTime</code> can be a <code>String</code> or <code>Fractional</code>. </p>
         <ul>
            <li>
               <p>
                  <code>Fractional</code>: <code>EventTime</code> feature values must be a Unix
               timestamp in seconds.</p>
            </li>
            <li>
               <p>
                  <code>String</code>: <code>EventTime</code> feature values must be an ISO-8601
               string in the format. The following formats are supported
                  <code>yyyy-MM-dd'T'HH:mm:ssZ</code> and <code>yyyy-MM-dd'T'HH:mm:ss.SSSZ</code>
               where <code>yyyy</code>, <code>MM</code>, and <code>dd</code> represent the year,
               month, and day respectively and <code>HH</code>, <code>mm</code>, <code>ss</code>,
               and if applicable, <code>SSS</code> represent the hour, month, second and
               milliseconds respsectively. <code>'T'</code> and <code>Z</code> are constants.</p>
            </li>
         </ul>")
    @as("EventTimeFeatureName")
    eventTimeFeatureName: featureName,
    @ocaml.doc("<p>The name of the <code>Feature</code> whose value uniquely identifies a
            <code>Record</code> defined in the <code>FeatureStore</code>. Only the latest record per
         identifier value will be stored in the <code>OnlineStore</code>.
            <code>RecordIdentifierFeatureName</code> must be one of feature definitions'
         names.</p>
         <p>You use the <code>RecordIdentifierFeatureName</code> to access data in a
            <code>FeatureStore</code>.</p>
         <p>This name:</p>
         <ul>
            <li>
               <p>Must start and end with an alphanumeric character.</p>
            </li>
            <li>
               <p>Can only contains alphanumeric characters, hyphens, underscores. Spaces are not
               allowed. </p>
            </li>
         </ul>")
    @as("RecordIdentifierFeatureName")
    recordIdentifierFeatureName: featureName,
    @ocaml.doc("<p>The name of the <code>FeatureGroup</code>. The name must be unique within an Amazon Web Services Region
         in an Amazon Web Services account. The name:</p>
         <ul>
            <li>
               <p>Must start and end with an alphanumeric character.</p>
            </li>
            <li>
               <p>Can only contain alphanumeric character and hyphens. Spaces are not allowed.
            </p>
            </li>
         </ul>")
    @as("FeatureGroupName")
    featureGroupName: featureGroupName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the <code>FeatureGroup</code>. This is a unique
         identifier for the feature group. </p>")
    @as("FeatureGroupArn")
    featureGroupArn: featureGroupArn,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateFeatureGroupCommand"
  let make = (
    ~featureDefinitions,
    ~eventTimeFeatureName,
    ~recordIdentifierFeatureName,
    ~featureGroupName,
    ~tags=?,
    ~description=?,
    ~roleArn=?,
    ~offlineStoreConfig=?,
    ~onlineStoreConfig=?,
    (),
  ) =>
    new({
      tags,
      description,
      roleArn,
      offlineStoreConfig,
      onlineStoreConfig,
      featureDefinitions,
      eventTimeFeatureName,
      recordIdentifierFeatureName,
      featureGroupName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateExperiment = {
  type t
  type request = {
    @ocaml.doc("<p>A list of tags to associate with the experiment. You can use <a>Search</a> API
      to search on the tags.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The description of the experiment.</p>") @as("Description")
    description: option<experimentDescription>,
    @ocaml.doc("<p>The name of the experiment as displayed. The name doesn't need to be unique. If you don't
      specify <code>DisplayName</code>, the value in <code>ExperimentName</code> is
      displayed.</p>")
    @as("DisplayName")
    displayName: option<experimentEntityName>,
    @ocaml.doc("<p>The name of the experiment. The name must be unique in your Amazon Web Services account and is not
      case-sensitive.</p>")
    @as("ExperimentName")
    experimentName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the experiment.</p>") @as("ExperimentArn")
    experimentArn: option<experimentArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateExperimentCommand"
  let make = (~experimentName, ~tags=?, ~description=?, ~displayName=?, ()) =>
    new({tags, description, displayName, experimentName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateEdgePackagingJob = {
  type t
  type request = {
    @ocaml.doc("<p>Creates tags for the packaging job.</p>") @as("Tags") tags: option<tagList_>,
    @ocaml.doc(
      "<p>The Amazon Web Services KMS key to use when encrypting the EBS volume the edge packaging job runs on.</p>"
    )
    @as("ResourceKey")
    resourceKey: option<kmsKeyId>,
    @ocaml.doc("<p>Provides information about the output location for the packaged model.</p>")
    @as("OutputConfig")
    outputConfig: edgeOutputConfig,
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to download and upload the model, and to contact SageMaker Neo.</p>"
    )
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>The version of the model.</p>") @as("ModelVersion") modelVersion: edgeVersion,
    @ocaml.doc("<p>The name of the model.</p>") @as("ModelName") modelName: entityName,
    @ocaml.doc(
      "<p>The name of the SageMaker Neo compilation job that will be used to locate model artifacts for packaging.</p>"
    )
    @as("CompilationJobName")
    compilationJobName: entityName,
    @ocaml.doc("<p>The name of the edge packaging job.</p>") @as("EdgePackagingJobName")
    edgePackagingJobName: entityName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateEdgePackagingJobCommand"
  let make = (
    ~outputConfig,
    ~roleArn,
    ~modelVersion,
    ~modelName,
    ~compilationJobName,
    ~edgePackagingJobName,
    ~tags=?,
    ~resourceKey=?,
    (),
  ) =>
    new({
      tags,
      resourceKey,
      outputConfig,
      roleArn,
      modelVersion,
      modelName,
      compilationJobName,
      edgePackagingJobName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module CreateDeviceFleet = {
  type t
  type request = {
    @ocaml.doc("<p>Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. 
     The name of the role alias generated will match this pattern: 
     \"SageMakerEdge-{DeviceFleetName}\".</p>
         <p>For example, if your device fleet is called \"demo-fleet\", the name of 
     the role alias will be \"SageMakerEdge-demo-fleet\".</p>")
    @as("EnableIotRoleAlias")
    enableIotRoleAlias: option<enableIotRoleAlias>,
    @ocaml.doc("<p>Creates tags for the specified fleet.</p>") @as("Tags") tags: option<tagList_>,
    @ocaml.doc("<p>The output configuration for storing sample data collected by the fleet.</p>")
    @as("OutputConfig")
    outputConfig: edgeOutputConfig,
    @ocaml.doc("<p>A description of the fleet.</p>") @as("Description")
    description: option<deviceFleetDescription>,
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) that has access to Amazon Web Services Internet of Things (IoT).</p>"
    )
    @as("RoleArn")
    roleArn: option<roleArn>,
    @ocaml.doc("<p>The name of the fleet that the device belongs to.</p>") @as("DeviceFleetName")
    deviceFleetName: entityName,
  }
  type response = {.}
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateDeviceFleetCommand"
  let make = (
    ~outputConfig,
    ~deviceFleetName,
    ~enableIotRoleAlias=?,
    ~tags=?,
    ~description=?,
    ~roleArn=?,
    (),
  ) => new({enableIotRoleAlias, tags, outputConfig, description, roleArn, deviceFleetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}
module CreateContext = {
  type t
  type request = {
    @ocaml.doc("<p>A list of tags to apply to the context.</p>") @as("Tags") tags: option<tagList_>,
    @ocaml.doc("<p>A list of properties to add to the context.</p>") @as("Properties")
    properties: option<lineageEntityParameters>,
    @ocaml.doc("<p>The description of the context.</p>") @as("Description")
    description: option<experimentDescription>,
    @ocaml.doc("<p>The context type.</p>") @as("ContextType") contextType: string256,
    @ocaml.doc("<p>The source type, ID, and URI.</p>") @as("Source") source: contextSource,
    @ocaml.doc(
      "<p>The name of the context. Must be unique to your account in an Amazon Web Services Region.</p>"
    )
    @as("ContextName")
    contextName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the context.</p>") @as("ContextArn")
    contextArn: option<contextArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateContextCommand"
  let make = (~contextType, ~source, ~contextName, ~tags=?, ~properties=?, ~description=?, ()) =>
    new({tags, properties, description, contextType, source, contextName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateCompilationJob = {
  type t
  type request = {
    @ocaml.doc("<p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
            different ways, for example, by purpose, owner, or environment. For more information,
            see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
                Resources</a>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>Specifies a limit to how long a model compilation job can run. When the job reaches
            the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training
            costs.</p>")
    @as("StoppingCondition")
    stoppingCondition: stoppingCondition,
    @ocaml.doc("<p>A <a>VpcConfig</a> object that specifies the VPC that you want your
            compilation job to connect to. Control access to your models by
            configuring the VPC. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html\">Protect Compilation Jobs by Using an Amazon
                Virtual Private Cloud</a>.</p>")
    @as("VpcConfig")
    vpcConfig: option<neoVpcConfig>,
    @ocaml.doc("<p>Provides information about the output location for the compiled model and the target
            device the model runs on.</p>")
    @as("OutputConfig")
    outputConfig: outputConfig,
    @ocaml.doc("<p>Provides information about the location of input model artifacts, the name and shape
            of the expected data inputs, and the framework in which the model was trained.</p>")
    @as("InputConfig")
    inputConfig: option<inputConfig>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of a versioned model package. Provide either a 
    <code>ModelPackageVersionArn</code> or an <code>InputConfig</code> object in the 
    request syntax. The presence of both objects in the <code>CreateCompilationJob</code> 
    request will return an exception.</p>")
    @as("ModelPackageVersionArn")
    modelPackageVersionArn: option<modelPackageArn>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on
            your behalf. </p>
        <p>During model compilation, Amazon SageMaker needs your permission to:</p>
        <ul>
            <li>
                <p>Read input data from an S3 bucket</p>
            </li>
            <li>
                <p>Write model artifacts to an S3 bucket</p>
            </li>
            <li>
                <p>Write logs to Amazon CloudWatch Logs</p>
            </li>
            <li>
                <p>Publish metrics to Amazon CloudWatch</p>
            </li>
         </ul>
        <p>You grant permissions for all of these tasks to an IAM role. To pass this role to
            Amazon SageMaker, the caller of this API must have the <code>iam:PassRole</code> permission. For
            more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html\">Amazon SageMaker
                Roles.</a>
         </p>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>A name for the model compilation job. The name must be unique within the Amazon Web Services Region
            and within your Amazon Web Services account. </p>")
    @as("CompilationJobName")
    compilationJobName: entityName,
  }
  type response = {
    @ocaml.doc("<p>If the action is successful, the service sends back an HTTP 200 response. Amazon SageMaker returns
            the following data in JSON format:</p>
        <ul>
            <li>
                <p>
                  <code>CompilationJobArn</code>: The Amazon Resource Name (ARN) of the compiled
                    job.</p>
            </li>
         </ul>")
    @as("CompilationJobArn")
    compilationJobArn: compilationJobArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateCompilationJobCommand"
  let make = (
    ~stoppingCondition,
    ~outputConfig,
    ~roleArn,
    ~compilationJobName,
    ~tags=?,
    ~vpcConfig=?,
    ~inputConfig=?,
    ~modelPackageVersionArn=?,
    (),
  ) =>
    new({
      tags,
      stoppingCondition,
      vpcConfig,
      outputConfig,
      inputConfig,
      modelPackageVersionArn,
      roleArn,
      compilationJobName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateCodeRepository = {
  type t
  type request = {
    @ocaml.doc("<p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
            different ways, for example, by purpose, owner, or environment. For more information,
            see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
                Resources</a>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>Specifies details about the repository, including the URL where the repository is
            located, the default branch, and credentials to use to access the repository.</p>")
    @as("GitConfig")
    gitConfig: gitConfig,
    @ocaml.doc("<p>The name of the Git repository. The name must have 1 to 63 characters. Valid
            characters are a-z, A-Z, 0-9, and - (hyphen).</p>")
    @as("CodeRepositoryName")
    codeRepositoryName: entityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the new repository.</p>")
    @as("CodeRepositoryArn")
    codeRepositoryArn: codeRepositoryArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateCodeRepositoryCommand"
  let make = (~gitConfig, ~codeRepositoryName, ~tags=?, ()) =>
    new({tags, gitConfig, codeRepositoryName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateApp = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.</p>"
    )
    @as("ResourceSpec")
    resourceSpec: option<resourceSpec>,
    @ocaml.doc("<p>Each tag consists of a key and an optional value.
         Tag keys must be unique per resource.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The name of the app.</p>") @as("AppName") appName: appName,
    @ocaml.doc("<p>The type of app. Supported apps are <code>JupyterServer</code> and
        <code>KernelGateway</code>. <code>TensorBoard</code> is not supported.</p>")
    @as("AppType")
    appType: appType,
    @ocaml.doc("<p>The user profile name.</p>") @as("UserProfileName")
    userProfileName: userProfileName,
    @ocaml.doc("<p>The domain ID.</p>") @as("DomainId") domainId: domainId,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the app.</p>") @as("AppArn")
    appArn: option<appArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateAppCommand"
  let make = (~appName, ~appType, ~userProfileName, ~domainId, ~resourceSpec=?, ~tags=?, ()) =>
    new({resourceSpec, tags, appName, appType, userProfileName, domainId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateAction = {
  type t
  type request = {
    @ocaml.doc("<p>A list of tags to apply to the action.</p>") @as("Tags") tags: option<tagList_>,
    @as("MetadataProperties") metadataProperties: option<metadataProperties>,
    @ocaml.doc("<p>A list of properties to add to the action.</p>") @as("Properties")
    properties: option<lineageEntityParameters>,
    @ocaml.doc("<p>The status of the action.</p>") @as("Status") status: option<actionStatus>,
    @ocaml.doc("<p>The description of the action.</p>") @as("Description")
    description: option<experimentDescription>,
    @ocaml.doc("<p>The action type.</p>") @as("ActionType") actionType: string256,
    @ocaml.doc("<p>The source type, ID, and URI.</p>") @as("Source") source: actionSource,
    @ocaml.doc(
      "<p>The name of the action. Must be unique to your account in an Amazon Web Services Region.</p>"
    )
    @as("ActionName")
    actionName: experimentEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the action.</p>") @as("ActionArn")
    actionArn: option<actionArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateActionCommand"
  let make = (
    ~actionType,
    ~source,
    ~actionName,
    ~tags=?,
    ~metadataProperties=?,
    ~properties=?,
    ~status=?,
    ~description=?,
    (),
  ) =>
    new({tags, metadataProperties, properties, status, description, actionType, source, actionName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module AddTags = {
  type t
  type request = {
    @ocaml.doc("<p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
            different ways, for example, by purpose, owner, or environment. For more information,
            see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
                Resources</a>.</p>")
    @as("Tags")
    tags: tagList_,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the resource that you want to tag.</p>")
    @as("ResourceArn")
    resourceArn: resourceArn,
  }
  type response = {
    @ocaml.doc("<p>A list of tags associated with the Amazon SageMaker resource.</p>") @as("Tags")
    tags: option<tagList_>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "AddTagsCommand"
  let make = (~tags, ~resourceArn, ()) => new({tags, resourceArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdateWorkforce = {
  type t
  type request = {
    @ocaml.doc("<p>Use this parameter to update your OIDC Identity Provider (IdP) 
      configuration for a workforce made using your own IdP.</p>")
    @as("OidcConfig")
    oidcConfig: option<oidcConfig>,
    @ocaml.doc("<p>A list of one to ten worker IP address ranges (<a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\">CIDRs</a>) that can be used to
            access tasks assigned to this workforce.</p>
        <p>Maximum: Ten CIDR values</p>")
    @as("SourceIpConfig")
    sourceIpConfig: option<sourceIpConfig>,
    @ocaml.doc("<p>The name of the private workforce that you want to update. You can find your workforce
        name by using the  operation.</p>")
    @as("WorkforceName")
    workforceName: workforceName,
  }
  type response = {
    @ocaml.doc("<p>A single private workforce. You can create one private work force in each Amazon Web Services Region. By default,
            any workforce-related API operation used in a specific region will apply to the
            workforce created in that region. To learn how to create a private workforce, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html\">Create a Private Workforce</a>.</p>")
    @as("Workforce")
    workforce: workforce,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "UpdateWorkforceCommand"
  let make = (~workforceName, ~oidcConfig=?, ~sourceIpConfig=?, ()) =>
    new({oidcConfig, sourceIpConfig, workforceName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdateTrainingJob = {
  type t
  type request = {
    @ocaml.doc("<p>Configuration information for Debugger rules for profiling system and framework
            metrics.</p>")
    @as("ProfilerRuleConfigurations")
    profilerRuleConfigurations: option<profilerRuleConfigurations>,
    @ocaml.doc("<p>Configuration information for Debugger system monitoring, framework profiling, and
            storage paths.</p>")
    @as("ProfilerConfig")
    profilerConfig: option<profilerConfigForUpdate>,
    @ocaml.doc("<p>The name of a training job to update the Debugger profiling configuration.</p>")
    @as("TrainingJobName")
    trainingJobName: trainingJobName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the training job.</p>") @as("TrainingJobArn")
    trainingJobArn: trainingJobArn,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "UpdateTrainingJobCommand"
  let make = (~trainingJobName, ~profilerRuleConfigurations=?, ~profilerConfig=?, ()) =>
    new({profilerRuleConfigurations, profilerConfig, trainingJobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdateProject = {
  type t
  type request = {
    @ocaml.doc("<p>An array of key-value pairs. You can use tags to categorize your 
            Amazon Web Services resources in different ways, for example, by purpose, owner, or 
            environment. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services Resources</a>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The product ID and provisioning artifact ID to provision a service catalog. 
            The provisioning artifact ID will default to the latest provisioning artifact 
            ID of the product, if you don't provide the provisioning artifact ID. For more 
            information, see <a href=\"https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html\">What is Amazon Web Services Service Catalog</a>.
        </p>")
    @as("ServiceCatalogProvisioningUpdateDetails")
    serviceCatalogProvisioningUpdateDetails: option<serviceCatalogProvisioningUpdateDetails>,
    @ocaml.doc("<p>The description for the project.</p>") @as("ProjectDescription")
    projectDescription: option<entityDescription>,
    @ocaml.doc("<p>The name of the project.</p>") @as("ProjectName") projectName: projectEntityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the project.</p>") @as("ProjectArn")
    projectArn: projectArn,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "UpdateProjectCommand"
  let make = (
    ~projectName,
    ~tags=?,
    ~serviceCatalogProvisioningUpdateDetails=?,
    ~projectDescription=?,
    (),
  ) => new({tags, serviceCatalogProvisioningUpdateDetails, projectDescription, projectName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdateAppImageConfig = {
  type t
  type request = {
    @ocaml.doc("<p>The new KernelGateway app to run on the image.</p>")
    @as("KernelGatewayImageConfig")
    kernelGatewayImageConfig: option<kernelGatewayImageConfig>,
    @ocaml.doc("<p>The name of the AppImageConfig to update.</p>") @as("AppImageConfigName")
    appImageConfigName: appImageConfigName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) for the AppImageConfig.</p>")
    @as("AppImageConfigArn")
    appImageConfigArn: option<appImageConfigArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "UpdateAppImageConfigCommand"
  let make = (~appImageConfigName, ~kernelGatewayImageConfig=?, ()) =>
    new({kernelGatewayImageConfig, appImageConfigName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListTrials = {
  type t
  type request = {
    @ocaml.doc("<p>If the previous call to <code>ListTrials</code> didn't return the full set of trials, the
      call returns a token for getting the next set of trials.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>The maximum number of trials to return in the response. The default value is 10.</p>"
    )
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>The sort order. The default value is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc(
      "<p>The property used to sort results. The default value is <code>CreationTime</code>.</p>"
    )
    @as("SortBy")
    sortBy: option<sortTrialsBy>,
    @ocaml.doc("<p>A filter that returns only trials created before the specified time.</p>")
    @as("CreatedBefore")
    createdBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only trials created after the specified time.</p>")
    @as("CreatedAfter")
    createdAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only trials that are associated with the specified trial
      component.</p>")
    @as("TrialComponentName")
    trialComponentName: option<experimentEntityName>,
    @ocaml.doc(
      "<p>A filter that returns only trials that are part of the specified experiment.</p>"
    )
    @as("ExperimentName")
    experimentName: option<experimentEntityName>,
  }
  type response = {
    @ocaml.doc("<p>A token for getting the next set of trials, if there are any.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of the summaries of your trials.</p>") @as("TrialSummaries")
    trialSummaries: option<trialSummaries>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListTrialsCommand"
  let make = (
    ~nextToken=?,
    ~maxResults=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~createdBefore=?,
    ~createdAfter=?,
    ~trialComponentName=?,
    ~experimentName=?,
    (),
  ) =>
    new({
      nextToken,
      maxResults,
      sortOrder,
      sortBy,
      createdBefore,
      createdAfter,
      trialComponentName,
      experimentName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListTrialComponents = {
  type t
  type request = {
    @ocaml.doc("<p>If the previous call to <code>ListTrialComponents</code> didn't return the full set of
      components, the call returns a token for getting the next set of components.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of components to return in the response. The default value is
      10.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>The sort order. The default value is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc(
      "<p>The property used to sort results. The default value is <code>CreationTime</code>.</p>"
    )
    @as("SortBy")
    sortBy: option<sortTrialComponentsBy>,
    @ocaml.doc("<p>A filter that returns only components created before the specified time.</p>")
    @as("CreatedBefore")
    createdBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only components created after the specified time.</p>")
    @as("CreatedAfter")
    createdAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only components that have the specified source Amazon Resource Name
      (ARN). If you specify <code>SourceArn</code>, you can't filter by <code>ExperimentName</code>
      or <code>TrialName</code>.</p>")
    @as("SourceArn")
    sourceArn: option<string256>,
    @ocaml.doc("<p>A filter that returns only components that are part of the specified trial. If you specify
        <code>TrialName</code>, you can't filter by <code>ExperimentName</code> or
        <code>SourceArn</code>.</p>")
    @as("TrialName")
    trialName: option<experimentEntityName>,
    @ocaml.doc("<p>A filter that returns only components that are part of the specified experiment. If you
      specify <code>ExperimentName</code>, you can't filter by <code>SourceArn</code> or
        <code>TrialName</code>.</p>")
    @as("ExperimentName")
    experimentName: option<experimentEntityName>,
  }
  type response = {
    @ocaml.doc("<p>A token for getting the next set of components, if there are any.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of the summaries of your trial components.</p>")
    @as("TrialComponentSummaries")
    trialComponentSummaries: option<trialComponentSummaries>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListTrialComponentsCommand"
  let make = (
    ~nextToken=?,
    ~maxResults=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~createdBefore=?,
    ~createdAfter=?,
    ~sourceArn=?,
    ~trialName=?,
    ~experimentName=?,
    (),
  ) =>
    new({
      nextToken,
      maxResults,
      sortOrder,
      sortBy,
      createdBefore,
      createdAfter,
      sourceArn,
      trialName,
      experimentName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListTrainingJobsForHyperParameterTuningJob = {
  type t
  type request = {
    @ocaml.doc("<p>The sort order
            for
            results. The default is <code>Ascending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>The field to sort
            results
            by. The default is <code>Name</code>.</p>
        <p>If the value of this field is <code>FinalObjectiveMetricValue</code>, any training
            jobs that did not return an objective metric are not listed.</p>")
    @as("SortBy")
    sortBy: option<trainingJobSortByOptions>,
    @ocaml.doc("<p>A filter that returns only training jobs with the
            specified
            status.</p>")
    @as("StatusEquals")
    statusEquals: option<trainingJobStatus>,
    @ocaml.doc("<p>The maximum number of training jobs to return. The default value is 10.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the result of the previous <code>ListTrainingJobsForHyperParameterTuningJob</code>
            request was truncated, the response includes a <code>NextToken</code>. To retrieve the
            next set of training jobs, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The name of the tuning job whose training jobs you want to list.</p>")
    @as("HyperParameterTuningJobName")
    hyperParameterTuningJobName: hyperParameterTuningJobName,
  }
  type response = {
    @ocaml.doc("<p>If the result of this <code>ListTrainingJobsForHyperParameterTuningJob</code> request
            was truncated, the response includes a <code>NextToken</code>. To retrieve the next set
            of training jobs, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of <a>TrainingJobSummary</a> objects that
            describe
            the training jobs that the
                <code>ListTrainingJobsForHyperParameterTuningJob</code> request returned.</p>")
    @as("TrainingJobSummaries")
    trainingJobSummaries: hyperParameterTrainingJobSummaries,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListTrainingJobsForHyperParameterTuningJobCommand"
  let make = (
    ~hyperParameterTuningJobName,
    ~sortOrder=?,
    ~sortBy=?,
    ~statusEquals=?,
    ~maxResults=?,
    ~nextToken=?,
    (),
  ) => new({sortOrder, sortBy, statusEquals, maxResults, nextToken, hyperParameterTuningJobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListNotebookInstances = {
  type t
  type request = {
    @ocaml.doc("<p>A filter that returns only notebook instances with associated with the specified git
            repository.</p>")
    @as("AdditionalCodeRepositoryEquals")
    additionalCodeRepositoryEquals: option<codeRepositoryNameOrUrl>,
    @ocaml.doc("<p>A string in the name or URL of a Git repository associated with this notebook
            instance. This filter returns only notebook instances associated with a git repository
            with a name that contains the specified string.</p>")
    @as("DefaultCodeRepositoryContains")
    defaultCodeRepositoryContains: option<codeRepositoryContains>,
    @ocaml.doc("<p>A string in the name of a notebook instances lifecycle configuration associated with
            this notebook instance. This filter returns only notebook instances associated with a
            lifecycle configuration with a name that contains the specified string.</p>")
    @as("NotebookInstanceLifecycleConfigNameContains")
    notebookInstanceLifecycleConfigNameContains: option<notebookInstanceLifecycleConfigName>,
    @ocaml.doc("<p>A filter that returns only notebook instances with the specified status.</p>")
    @as("StatusEquals")
    statusEquals: option<notebookInstanceStatus>,
    @ocaml.doc("<p>A filter that returns only notebook instances that were modified after the
            specified time (timestamp).</p>")
    @as("LastModifiedTimeAfter")
    lastModifiedTimeAfter: option<lastModifiedTime>,
    @ocaml.doc("<p>A filter that returns only notebook instances that were modified before the
            specified time (timestamp).</p>")
    @as("LastModifiedTimeBefore")
    lastModifiedTimeBefore: option<lastModifiedTime>,
    @ocaml.doc("<p>A filter that returns only notebook instances that were created after the specified
            time (timestamp).</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<creationTime>,
    @ocaml.doc("<p>A filter that returns only notebook instances that were created before the
            specified time (timestamp). </p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<creationTime>,
    @ocaml.doc("<p>A string in the notebook instances' name. This filter returns only notebook
            instances whose name contains the specified string.</p>")
    @as("NameContains")
    nameContains: option<notebookInstanceNameContains>,
    @ocaml.doc("<p>The sort order for results. </p>") @as("SortOrder")
    sortOrder: option<notebookInstanceSortOrder>,
    @ocaml.doc("<p>The field to sort results by. The default is <code>Name</code>.</p>")
    @as("SortBy")
    sortBy: option<notebookInstanceSortKey>,
    @ocaml.doc("<p>The maximum number of notebook instances to return.</p>") @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p> If the previous call to the <code>ListNotebookInstances</code> is truncated, the
            response includes a <code>NextToken</code>. You can use this token in your subsequent
                <code>ListNotebookInstances</code> request to fetch the next set of notebook
            instances. </p>
        <note>
            <p>You might specify a filter or a sort order in your request. When response is
                truncated, you must use the same values for the filer and sort order in the next
                request. </p>
        </note>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  type response = {
    @ocaml.doc("<p>An array of <code>NotebookInstanceSummary</code> objects, one for each notebook
            instance.</p>")
    @as("NotebookInstances")
    notebookInstances: option<notebookInstanceSummaryList>,
    @ocaml.doc("<p>If the response to the previous <code>ListNotebookInstances</code> request was
            truncated, Amazon SageMaker returns this token. To retrieve the next set of notebook instances, use
            the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListNotebookInstancesCommand"
  let make = (
    ~additionalCodeRepositoryEquals=?,
    ~defaultCodeRepositoryContains=?,
    ~notebookInstanceLifecycleConfigNameContains=?,
    ~statusEquals=?,
    ~lastModifiedTimeAfter=?,
    ~lastModifiedTimeBefore=?,
    ~creationTimeAfter=?,
    ~creationTimeBefore=?,
    ~nameContains=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~maxResults=?,
    ~nextToken=?,
    (),
  ) =>
    new({
      additionalCodeRepositoryEquals,
      defaultCodeRepositoryContains,
      notebookInstanceLifecycleConfigNameContains,
      statusEquals,
      lastModifiedTimeAfter,
      lastModifiedTimeBefore,
      creationTimeAfter,
      creationTimeBefore,
      nameContains,
      sortOrder,
      sortBy,
      maxResults,
      nextToken,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListModelMetadata = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of models to return in the response.</p>") @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the response to a previous <code>ListModelMetadataResponse</code> request was truncated, 
           the response includes a NextToken. To retrieve the next set of model metadata, 
           use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>One or more filters that searches for the specified resource or resources 
          in a search. All resource objects that satisfy the expression's condition are 
          included in the search results. Specify the  Framework, FrameworkVersion, Domain 
          or Task to filter supported. Filter names and values are case-sensitive.</p>")
    @as("SearchExpression")
    searchExpression: option<modelMetadataSearchExpression>,
  }
  type response = {
    @ocaml.doc("<p>A token for getting the next set of recommendations, if there are any.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A structure that holds model metadata.</p>") @as("ModelMetadataSummaries")
    modelMetadataSummaries: modelMetadataSummaries,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListModelMetadataCommand"
  let make = (~maxResults=?, ~nextToken=?, ~searchExpression=?, ()) =>
    new({maxResults, nextToken, searchExpression})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListLabelingJobsForWorkteam = {
  type t
  type request = {
    @ocaml.doc("<p>The sort order for results. The default is <code>Ascending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>The field to sort results by. The default is <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<listLabelingJobsForWorkteamSortByOptions>,
    @ocaml.doc("<p>A filter the limits jobs to only the ones whose job reference code contains the
            specified string.</p>")
    @as("JobReferenceCodeContains")
    jobReferenceCodeContains: option<jobReferenceCodeContains>,
    @ocaml.doc("<p>A filter that returns only labeling jobs created before the specified time
            (timestamp).</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only labeling jobs created after the specified time
            (timestamp).</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>If the result of the previous <code>ListLabelingJobsForWorkteam</code> request was
            truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
            labeling jobs, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of labeling jobs to return in each page of the response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the work team for which you want to see labeling
            jobs for.</p>")
    @as("WorkteamArn")
    workteamArn: workteamArn,
  }
  type response = {
    @ocaml.doc("<p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of
            labeling jobs, use it in the subsequent request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array of <code>LabelingJobSummary</code> objects, each describing a labeling
            job.</p>")
    @as("LabelingJobSummaryList")
    labelingJobSummaryList: labelingJobForWorkteamSummaryList,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListLabelingJobsForWorkteamCommand"
  let make = (
    ~workteamArn,
    ~sortOrder=?,
    ~sortBy=?,
    ~jobReferenceCodeContains=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    ~nextToken=?,
    ~maxResults=?,
    (),
  ) =>
    new({
      sortOrder,
      sortBy,
      jobReferenceCodeContains,
      creationTimeBefore,
      creationTimeAfter,
      nextToken,
      maxResults,
      workteamArn,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListHyperParameterTuningJobs = {
  type t
  type request = {
    @ocaml.doc("<p>A filter that returns only tuning jobs with the
            specified
            status.</p>")
    @as("StatusEquals")
    statusEquals: option<hyperParameterTuningJobStatus>,
    @ocaml.doc("<p>A filter that returns only tuning jobs that were modified before the specified
            time.</p>")
    @as("LastModifiedTimeBefore")
    lastModifiedTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only tuning jobs that were modified after the specified
            time.</p>")
    @as("LastModifiedTimeAfter")
    lastModifiedTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only tuning jobs that were created before the
            specified
            time.</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only tuning jobs that were created after the
            specified
            time.</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>A string in the tuning job name. This filter returns only tuning jobs whose name
            contains the specified string.</p>")
    @as("NameContains")
    nameContains: option<nameContains>,
    @ocaml.doc("<p>The sort
            order
            for results. The default is <code>Ascending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>The
            field
            to sort results by. The default is <code>Name</code>.</p>")
    @as("SortBy")
    sortBy: option<hyperParameterTuningJobSortByOptions>,
    @ocaml.doc("<p>The
            maximum number of tuning jobs to return. The default value is
            10.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the result of the previous <code>ListHyperParameterTuningJobs</code> request was
            truncated, the response includes a <code>NextToken</code>. To retrieve the next set of
            tuning jobs, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  type response = {
    @ocaml.doc("<p>If the result of this <code>ListHyperParameterTuningJobs</code> request was truncated,
            the response includes a <code>NextToken</code>. To retrieve the next set of tuning jobs,
            use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of <a>HyperParameterTuningJobSummary</a> objects that
            describe
            the tuning jobs that the <code>ListHyperParameterTuningJobs</code>
            request returned.</p>")
    @as("HyperParameterTuningJobSummaries")
    hyperParameterTuningJobSummaries: hyperParameterTuningJobSummaries,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListHyperParameterTuningJobsCommand"
  let make = (
    ~statusEquals=?,
    ~lastModifiedTimeBefore=?,
    ~lastModifiedTimeAfter=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    ~nameContains=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~maxResults=?,
    ~nextToken=?,
    (),
  ) =>
    new({
      statusEquals,
      lastModifiedTimeBefore,
      lastModifiedTimeAfter,
      creationTimeBefore,
      creationTimeAfter,
      nameContains,
      sortOrder,
      sortBy,
      maxResults,
      nextToken,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListFeatureGroups = {
  type t
  type request = {
    @ocaml.doc("<p>A token to resume pagination of <code>ListFeatureGroups</code> results.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results returned by <code>ListFeatureGroups</code>.</p>")
    @as("MaxResults")
    maxResults: option<featureGroupMaxResults>,
    @ocaml.doc("<p>The value on which the feature group list is sorted.</p>") @as("SortBy")
    sortBy: option<featureGroupSortBy>,
    @ocaml.doc("<p>The order in which feature groups are listed.</p>") @as("SortOrder")
    sortOrder: option<featureGroupSortOrder>,
    @ocaml.doc("<p>Use this parameter to search for <code>FeatureGroups</code>s created before a specific
         date and time.</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<creationTime>,
    @ocaml.doc("<p>Use this parameter to search for <code>FeatureGroups</code>s created after a specific
         date and time.</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<creationTime>,
    @ocaml.doc(
      "<p>An <code>OfflineStore</code> status. Filters by <code>OfflineStore</code> status. </p>"
    )
    @as("OfflineStoreStatusEquals")
    offlineStoreStatusEquals: option<offlineStoreStatusValue>,
    @ocaml.doc(
      "<p>A <code>FeatureGroup</code> status. Filters by <code>FeatureGroup</code> status. </p>"
    )
    @as("FeatureGroupStatusEquals")
    featureGroupStatusEquals: option<featureGroupStatus>,
    @ocaml.doc("<p>A string that partially matches one or more <code>FeatureGroup</code>s names. Filters
            <code>FeatureGroup</code>s by name. </p>")
    @as("NameContains")
    nameContains: option<featureGroupNameContains>,
  }
  type response = {
    @ocaml.doc("<p>A token to resume pagination of <code>ListFeatureGroups</code> results.</p>")
    @as("NextToken")
    nextToken: nextToken,
    @ocaml.doc("<p>A summary of feature groups.</p>") @as("FeatureGroupSummaries")
    featureGroupSummaries: featureGroupSummaries,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListFeatureGroupsCommand"
  let make = (
    ~nextToken=?,
    ~maxResults=?,
    ~sortBy=?,
    ~sortOrder=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    ~offlineStoreStatusEquals=?,
    ~featureGroupStatusEquals=?,
    ~nameContains=?,
    (),
  ) =>
    new({
      nextToken,
      maxResults,
      sortBy,
      sortOrder,
      creationTimeBefore,
      creationTimeAfter,
      offlineStoreStatusEquals,
      featureGroupStatusEquals,
      nameContains,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListExperiments = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of experiments to return in the response. The default value is
      10.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the previous call to <code>ListExperiments</code> didn't return the full set of
      experiments, the call returns a token for getting the next set of experiments.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The sort order. The default value is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc(
      "<p>The property used to sort results. The default value is <code>CreationTime</code>.</p>"
    )
    @as("SortBy")
    sortBy: option<sortExperimentsBy>,
    @ocaml.doc("<p>A filter that returns only experiments created before the specified time.</p>")
    @as("CreatedBefore")
    createdBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only experiments created after the specified time.</p>")
    @as("CreatedAfter")
    createdAfter: option<timestamp_>,
  }
  type response = {
    @ocaml.doc("<p>A token for getting the next set of experiments, if there are any.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of the summaries of your experiments.</p>") @as("ExperimentSummaries")
    experimentSummaries: option<experimentSummaries>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListExperimentsCommand"
  let make = (
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~createdBefore=?,
    ~createdAfter=?,
    (),
  ) => new({maxResults, nextToken, sortOrder, sortBy, createdBefore, createdAfter})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListContexts = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The maximum number of contexts to return in the response. The default value is 10.</p>"
    )
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the previous call to <code>ListContexts</code> didn't return the full set of contexts,
        the call returns a token for getting the next set of contexts.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The sort order. The default value is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc(
      "<p>The property used to sort results. The default value is <code>CreationTime</code>.</p>"
    )
    @as("SortBy")
    sortBy: option<sortContextsBy>,
    @ocaml.doc(
      "<p>A filter that returns only contexts created on or before the specified time.</p>"
    )
    @as("CreatedBefore")
    createdBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only contexts created on or after the specified time.</p>")
    @as("CreatedAfter")
    createdAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only contexts of the specified type.</p>")
    @as("ContextType")
    contextType: option<string256>,
    @ocaml.doc("<p>A filter that returns only contexts with the specified source URI.</p>")
    @as("SourceUri")
    sourceUri: option<sourceUri>,
  }
  type response = {
    @ocaml.doc("<p>A token for getting the next set of contexts, if there are any.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of contexts and their properties.</p>") @as("ContextSummaries")
    contextSummaries: option<contextSummaries>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListContextsCommand"
  let make = (
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~createdBefore=?,
    ~createdAfter=?,
    ~contextType=?,
    ~sourceUri=?,
    (),
  ) =>
    new({
      maxResults,
      nextToken,
      sortOrder,
      sortBy,
      createdBefore,
      createdAfter,
      contextType,
      sourceUri,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListCodeRepositories = {
  type t
  type request = {
    @ocaml.doc("<p>The sort order for results. The default is <code>Ascending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<codeRepositorySortOrder>,
    @ocaml.doc("<p>The field to sort results by. The default is <code>Name</code>.</p>")
    @as("SortBy")
    sortBy: option<codeRepositorySortBy>,
    @ocaml.doc("<p>If the result of a <code>ListCodeRepositoriesOutput</code> request was truncated, the
            response includes a <code>NextToken</code>. To get the next set of Git repositories, use
            the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A string in the Git repositories name. This filter returns only repositories whose
            name contains the specified string.</p>")
    @as("NameContains")
    nameContains: option<codeRepositoryNameContains>,
    @ocaml.doc("<p>The maximum number of Git repositories to return in the response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>A filter that returns only Git repositories that were last modified before the
            specified time.</p>")
    @as("LastModifiedTimeBefore")
    lastModifiedTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only Git repositories that were last modified after the
            specified time.</p>")
    @as("LastModifiedTimeAfter")
    lastModifiedTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only Git repositories that were created before the specified
            time.</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<creationTime>,
    @ocaml.doc("<p>A filter that returns only Git repositories that were created after the specified
            time.</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<creationTime>,
  }
  type response = {
    @ocaml.doc("<p>If the result of a <code>ListCodeRepositoriesOutput</code> request was truncated, the
            response includes a <code>NextToken</code>. To get the next set of Git repositories, use
            the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Gets a list of summaries of the Git repositories. Each summary specifies the following
            values for the repository: </p>
        <ul>
            <li>
                <p>Name</p>
            </li>
            <li>
                <p>Amazon Resource Name (ARN)</p>
            </li>
            <li>
                <p>Creation time</p>
            </li>
            <li>
                <p>Last modified time</p>
            </li>
            <li>
                <p>Configuration information, including the URL location of the repository and
                    the ARN of the Amazon Web Services Secrets Manager secret that contains the credentials used
                    to access the repository.</p>
            </li>
         </ul>")
    @as("CodeRepositorySummaryList")
    codeRepositorySummaryList: codeRepositorySummaryList,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListCodeRepositoriesCommand"
  let make = (
    ~sortOrder=?,
    ~sortBy=?,
    ~nextToken=?,
    ~nameContains=?,
    ~maxResults=?,
    ~lastModifiedTimeBefore=?,
    ~lastModifiedTimeAfter=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    (),
  ) =>
    new({
      sortOrder,
      sortBy,
      nextToken,
      nameContains,
      maxResults,
      lastModifiedTimeBefore,
      lastModifiedTimeAfter,
      creationTimeBefore,
      creationTimeAfter,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListAssociations = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The maximum number of associations to return in the response. The default value is 10.</p>"
    )
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the previous call to <code>ListAssociations</code> didn't return the full set of associations,
        the call returns a token for getting the next set of associations.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The sort order. The default value is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc(
      "<p>The property used to sort results. The default value is <code>CreationTime</code>.</p>"
    )
    @as("SortBy")
    sortBy: option<sortAssociationsBy>,
    @ocaml.doc(
      "<p>A filter that returns only associations created on or before the specified time.</p>"
    )
    @as("CreatedBefore")
    createdBefore: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only associations created on or after the specified time.</p>"
    )
    @as("CreatedAfter")
    createdAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only associations of the specified type.</p>")
    @as("AssociationType")
    associationType: option<associationEdgeType>,
    @ocaml.doc(
      "<p>A filter that returns only associations with the specified destination type.</p>"
    )
    @as("DestinationType")
    destinationType: option<string256>,
    @ocaml.doc("<p>A filter that returns only associations with the specified source type.</p>")
    @as("SourceType")
    sourceType: option<string256>,
    @ocaml.doc(
      "<p>A filter that returns only associations with the specified destination Amazon Resource Name (ARN).</p>"
    )
    @as("DestinationArn")
    destinationArn: option<associationEntityArn>,
    @ocaml.doc("<p>A filter that returns only associations with the specified source ARN.</p>")
    @as("SourceArn")
    sourceArn: option<associationEntityArn>,
  }
  type response = {
    @ocaml.doc("<p>A token for getting the next set of associations, if there are any.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of associations and their properties.</p>") @as("AssociationSummaries")
    associationSummaries: option<associationSummaries>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListAssociationsCommand"
  let make = (
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~createdBefore=?,
    ~createdAfter=?,
    ~associationType=?,
    ~destinationType=?,
    ~sourceType=?,
    ~destinationArn=?,
    ~sourceArn=?,
    (),
  ) =>
    new({
      maxResults,
      nextToken,
      sortOrder,
      sortBy,
      createdBefore,
      createdAfter,
      associationType,
      destinationType,
      sourceType,
      destinationArn,
      sourceArn,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListActions = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The maximum number of actions to return in the response. The default value is 10.</p>"
    )
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the previous call to <code>ListActions</code> didn't return the full set of actions,
        the call returns a token for getting the next set of actions.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The sort order. The default value is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc(
      "<p>The property used to sort results. The default value is <code>CreationTime</code>.</p>"
    )
    @as("SortBy")
    sortBy: option<sortActionsBy>,
    @ocaml.doc("<p>A filter that returns only actions created on or before the specified time.</p>")
    @as("CreatedBefore")
    createdBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only actions created on or after the specified time.</p>")
    @as("CreatedAfter")
    createdAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only actions of the specified type.</p>") @as("ActionType")
    actionType: option<string256>,
    @ocaml.doc("<p>A filter that returns only actions with the specified source URI.</p>")
    @as("SourceUri")
    sourceUri: option<sourceUri>,
  }
  type response = {
    @ocaml.doc("<p>A token for getting the next set of actions, if there are any.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of actions and their properties.</p>") @as("ActionSummaries")
    actionSummaries: option<actionSummaries>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListActionsCommand"
  let make = (
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~createdBefore=?,
    ~createdAfter=?,
    ~actionType=?,
    ~sourceUri=?,
    (),
  ) =>
    new({
      maxResults,
      nextToken,
      sortOrder,
      sortBy,
      createdBefore,
      createdAfter,
      actionType,
      sourceUri,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeWorkforce = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the private workforce whose access you want to restrict.
                <code>WorkforceName</code> is automatically set to <code>default</code> when a
            workforce is created and cannot be modified. </p>")
    @as("WorkforceName")
    workforceName: workforceName,
  }
  type response = {
    @ocaml.doc("<p>A single private workforce, which is automatically created when you create your first
            private work team. You can create one private work force in each Amazon Web Services Region. By default,
            any workforce-related API operation used in a specific region will apply to the
            workforce created in that region. To learn how to create a private workforce, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html\">Create a Private Workforce</a>.</p>")
    @as("Workforce")
    workforce: workforce,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DescribeWorkforceCommand"
  let make = (~workforceName, ()) => new({workforceName: workforceName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeTransformJob = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the transform job that you want to view details of.</p>")
    @as("TransformJobName")
    transformJobName: transformJobName,
  }
  type response = {
    @as("ExperimentConfig") experimentConfig: option<experimentConfig>,
    @as("DataProcessing") dataProcessing: option<dataProcessing>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the AutoML transform job.</p>")
    @as("AutoMLJobArn")
    autoMLJobArn: option<autoMLJobArn>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Amazon SageMaker Ground Truth labeling job that created the
            transform or training job.</p>")
    @as("LabelingJobArn")
    labelingJobArn: option<labelingJobArn>,
    @ocaml.doc("<p>Indicates when the transform job has been
            
            completed, or has stopped or failed. You are billed for the time
            interval between this time and the value of <code>TransformStartTime</code>.</p>")
    @as("TransformEndTime")
    transformEndTime: option<timestamp_>,
    @ocaml.doc("<p>Indicates when the transform job starts
            on
            ML instances. You are billed for the time interval between this time
            and the value of <code>TransformEndTime</code>.</p>")
    @as("TransformStartTime")
    transformStartTime: option<timestamp_>,
    @ocaml.doc("<p>A timestamp that shows when the transform Job was created.</p>")
    @as("CreationTime")
    creationTime: timestamp_,
    @ocaml.doc("<p>Describes
            the resources, including ML instance types and ML instance count, to
            use for the transform job.</p>")
    @as("TransformResources")
    transformResources: transformResources,
    @ocaml.doc("<p>Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the
            transform job.</p>")
    @as("TransformOutput")
    transformOutput: option<transformOutput>,
    @ocaml.doc("<p>Describes the dataset to be transformed and the Amazon S3 location where it is
            stored.</p>")
    @as("TransformInput")
    transformInput: transformInput,
    @ocaml.doc("<p>The
            environment variables to set in the Docker container. We support up to 16 key and values
            entries in the map.</p>")
    @as("Environment")
    environment: option<transformEnvironmentMap>,
    @ocaml.doc("<p>Specifies the number of records to include in a mini-batch for an HTTP inference
            request.
            A <i>record</i>
            <i></i> is a single unit of input data that inference
            can be made on. For example, a single line in a CSV file is a record. </p>
        <p>To enable the batch strategy, you must set <code>SplitType</code>
            to
                <code>Line</code>, <code>RecordIO</code>, or
            <code>TFRecord</code>.</p>")
    @as("BatchStrategy")
    batchStrategy: option<batchStrategy>,
    @ocaml.doc("<p>The
            maximum
            payload size, in MB, used in the
            transform job.</p>")
    @as("MaxPayloadInMB")
    maxPayloadInMB: option<maxPayloadInMB>,
    @ocaml.doc("<p>The timeout and maximum number of retries for processing a transform job
            invocation.</p>")
    @as("ModelClientConfig")
    modelClientConfig: option<modelClientConfig>,
    @ocaml.doc("<p>The
            maximum number
            of
            parallel requests on each instance node
            that can be launched in a transform job. The default value is 1.</p>")
    @as("MaxConcurrentTransforms")
    maxConcurrentTransforms: option<maxConcurrentTransforms>,
    @ocaml.doc("<p>The name of the model used in the transform job.</p>") @as("ModelName")
    modelName: modelName,
    @ocaml.doc("<p>If the transform job failed, <code>FailureReason</code> describes
            why
            it failed. A transform job creates a log file, which includes error
            messages, and stores it
            as
            an Amazon S3 object. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/logging-cloudwatch.html\">Log Amazon SageMaker Events with
                Amazon CloudWatch</a>.</p>")
    @as("FailureReason")
    failureReason: option<failureReason>,
    @ocaml.doc("<p>The
            status of the transform job. If the transform job failed, the reason
            is returned in the <code>FailureReason</code> field.</p>")
    @as("TransformJobStatus")
    transformJobStatus: transformJobStatus,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the transform job.</p>") @as("TransformJobArn")
    transformJobArn: transformJobArn,
    @ocaml.doc("<p>The name of the transform job.</p>") @as("TransformJobName")
    transformJobName: transformJobName,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeTransformJobCommand"
  let make = (~transformJobName, ()) => new({transformJobName: transformJobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeProject = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the project to describe.</p>") @as("ProjectName")
    projectName: projectEntityName,
  }
  type response = {
    @as("LastModifiedBy") lastModifiedBy: option<userContext>,
    @ocaml.doc("<p>The timestamp when project was last modified.</p>") @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @ocaml.doc("<p>The time when the project was created.</p>") @as("CreationTime")
    creationTime: timestamp_,
    @as("CreatedBy") createdBy: option<userContext>,
    @ocaml.doc("<p>The status of the project.</p>") @as("ProjectStatus")
    projectStatus: projectStatus,
    @ocaml.doc("<p>Information about a provisioned service catalog product.</p>")
    @as("ServiceCatalogProvisionedProductDetails")
    serviceCatalogProvisionedProductDetails: option<serviceCatalogProvisionedProductDetails>,
    @ocaml.doc("<p>Information used to provision a service catalog product. For information, see <a href=\"https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html\">What is Amazon Web Services Service
            Catalog</a>.</p>")
    @as("ServiceCatalogProvisioningDetails")
    serviceCatalogProvisioningDetails: serviceCatalogProvisioningDetails,
    @ocaml.doc("<p>The description of the project.</p>") @as("ProjectDescription")
    projectDescription: option<entityDescription>,
    @ocaml.doc("<p>The ID of the project.</p>") @as("ProjectId") projectId: projectId,
    @ocaml.doc("<p>The name of the project.</p>") @as("ProjectName") projectName: projectEntityName,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the project.</p>") @as("ProjectArn")
    projectArn: projectArn,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DescribeProjectCommand"
  let make = (~projectName, ()) => new({projectName: projectName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeLabelingJob = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the labeling job to return information for.</p>")
    @as("LabelingJobName")
    labelingJobName: labelingJobName,
  }
  type response = {
    @ocaml.doc("<p>The location of the output produced by the labeling job.</p>")
    @as("LabelingJobOutput")
    labelingJobOutput: option<labelingJobOutput>,
    @ocaml.doc("<p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
            different ways, for example, by purpose, owner, or environment. For more information,
            see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
                Resources</a>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>Configuration information required for human workers to complete a labeling
            task.</p>")
    @as("HumanTaskConfig")
    humanTaskConfig: humanTaskConfig,
    @ocaml.doc("<p>Configuration information for automated data labeling.</p>")
    @as("LabelingJobAlgorithmsConfig")
    labelingJobAlgorithmsConfig: option<labelingJobAlgorithmsConfig>,
    @ocaml.doc("<p>A set of conditions for stopping a labeling job. If any of the conditions are met, the
            job is automatically stopped.</p>")
    @as("StoppingConditions")
    stoppingConditions: option<labelingJobStoppingConditions>,
    @ocaml.doc("<p>The S3 location of the JSON file that defines the categories used to label data
            objects. Please note the following label-category limits:</p>
        <ul>
            <li>
                <p>Semantic segmentation labeling jobs using automated labeling: 20 labels</p>
            </li>
            <li>
                <p>Box bounding labeling jobs (all): 10 labels</p>
            </li>
         </ul>
        <p>The file is a JSON structure in the following format:</p>
        <p>
            <code>{</code>
        </p>
        <p>
            <code> \"document-version\": \"2018-11-28\"</code>
        </p>
        <p>
            <code> \"labels\": [</code>
        </p>
        <p>
            <code> {</code>
        </p>
        <p>
            <code> \"label\": \"<i>label 1</i>\"</code>
        </p>
        <p>
            <code> },</code>
        </p>
        <p>
            <code> {</code>
        </p>
        <p>
            <code> \"label\": \"<i>label 2</i>\"</code>
        </p>
        <p>
            <code> },</code>
        </p>
        <p>
            <code> ...</code>
        </p>
        <p>
            <code> {</code>
        </p>
        <p>
            <code> \"label\": \"<i>label n</i>\"</code>
        </p>
        <p>
            <code> }</code>
        </p>
        <p>
            <code> ]</code>
        </p>
        <p>
            <code>}</code>
        </p>")
    @as("LabelCategoryConfigS3Uri")
    labelCategoryConfigS3Uri: option<s3Uri>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) that Amazon SageMaker assumes to perform tasks on your behalf
            during data labeling.</p>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>The location of the job's output data and the Amazon Web Services Key Management Service key ID for the key used to
            encrypt the output data, if any.</p>")
    @as("OutputConfig")
    outputConfig: labelingJobOutputConfig,
    @ocaml.doc("<p>Input configuration information for the labeling job, such as the Amazon S3 location of the
            data objects and the location of the manifest file that describes the data
            objects.</p>")
    @as("InputConfig")
    inputConfig: labelingJobInputConfig,
    @ocaml.doc("<p>The attribute used as the label in the output manifest file.</p>")
    @as("LabelAttributeName")
    labelAttributeName: option<labelAttributeName>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the labeling job.</p>") @as("LabelingJobArn")
    labelingJobArn: labelingJobArn,
    @ocaml.doc("<p>The name assigned to the labeling job when it was created.</p>")
    @as("LabelingJobName")
    labelingJobName: labelingJobName,
    @ocaml.doc("<p>A unique identifier for work done as part of a labeling job.</p>")
    @as("JobReferenceCode")
    jobReferenceCode: jobReferenceCode,
    @ocaml.doc("<p>The date and time that the labeling job was last updated.</p>")
    @as("LastModifiedTime")
    lastModifiedTime: timestamp_,
    @ocaml.doc("<p>The date and time that the labeling job was created.</p>") @as("CreationTime")
    creationTime: timestamp_,
    @ocaml.doc("<p>If the job failed, the reason that it failed. </p>") @as("FailureReason")
    failureReason: option<failureReason>,
    @ocaml.doc("<p>Provides a breakdown of the number of data objects labeled by humans, the number of
            objects labeled by machine, the number of objects than couldn't be labeled, and the
            total number of objects labeled. </p>")
    @as("LabelCounters")
    labelCounters: labelCounters,
    @ocaml.doc("<p>The processing status of the labeling job. </p>") @as("LabelingJobStatus")
    labelingJobStatus: labelingJobStatus,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeLabelingJobCommand"
  let make = (~labelingJobName, ()) => new({labelingJobName: labelingJobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeFlowDefinition = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the flow definition.</p>") @as("FlowDefinitionName")
    flowDefinitionName: flowDefinitionName,
  }
  type response = {
    @ocaml.doc("<p>The reason your flow definition failed.</p>") @as("FailureReason")
    failureReason: option<failureReason>,
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) execution role for the flow definition.</p>"
    )
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>An object containing information about the output file.</p>") @as("OutputConfig")
    outputConfig: flowDefinitionOutputConfig,
    @ocaml.doc(
      "<p>An object containing information about who works on the task, the workforce task price, and other task details.</p>"
    )
    @as("HumanLoopConfig")
    humanLoopConfig: humanLoopConfig,
    @ocaml.doc(
      "<p>An object containing information about what triggers a human review workflow.</p>"
    )
    @as("HumanLoopActivationConfig")
    humanLoopActivationConfig: option<humanLoopActivationConfig>,
    @ocaml.doc("<p>Container for configuring the source of human task requests. Used to specify if
      Amazon Rekognition or Amazon Textract is used as an integration source.</p>")
    @as("HumanLoopRequestSource")
    humanLoopRequestSource: option<humanLoopRequestSource>,
    @ocaml.doc("<p>The timestamp when the flow definition was created.</p>") @as("CreationTime")
    creationTime: timestamp_,
    @ocaml.doc("<p>The status of the flow definition. Valid values are listed below.</p>")
    @as("FlowDefinitionStatus")
    flowDefinitionStatus: flowDefinitionStatus,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the flow definition.</p>")
    @as("FlowDefinitionName")
    flowDefinitionName: flowDefinitionName,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the flow defintion.</p>")
    @as("FlowDefinitionArn")
    flowDefinitionArn: flowDefinitionArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeFlowDefinitionCommand"
  let make = (~flowDefinitionName, ()) => new({flowDefinitionName: flowDefinitionName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeEndpointConfig = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the endpoint configuration.</p>") @as("EndpointConfigName")
    endpointConfigName: endpointConfigName,
  }
  type response = {
    @ocaml.doc("<p>Returns the description of an endpoint configuration created using the 
            <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html\">
               <code>CreateEndpointConfig</code>
            </a> API.</p>")
    @as("AsyncInferenceConfig")
    asyncInferenceConfig: option<asyncInferenceConfig>,
    @ocaml.doc("<p>A timestamp that shows when the endpoint configuration was created.</p>")
    @as("CreationTime")
    creationTime: timestamp_,
    @ocaml.doc("<p>Amazon Web Services KMS key ID Amazon SageMaker uses to encrypt data when storing it on the ML storage
            volume attached to the instance.</p>")
    @as("KmsKeyId")
    kmsKeyId: option<kmsKeyId>,
    @as("DataCaptureConfig") dataCaptureConfig: option<dataCaptureConfig>,
    @ocaml.doc("<p>An array of <code>ProductionVariant</code> objects, one for each model that you
            want to host at this endpoint.</p>")
    @as("ProductionVariants")
    productionVariants: productionVariantList,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the endpoint configuration.</p>")
    @as("EndpointConfigArn")
    endpointConfigArn: endpointConfigArn,
    @ocaml.doc("<p>Name of the Amazon SageMaker endpoint configuration.</p>")
    @as("EndpointConfigName")
    endpointConfigName: endpointConfigName,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeEndpointConfigCommand"
  let make = (~endpointConfigName, ()) => new({endpointConfigName: endpointConfigName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeArtifact = {
  type t
  type request = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the artifact to describe.</p>")
    @as("ArtifactArn")
    artifactArn: artifactArn,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the lineage group.</p>") @as("LineageGroupArn")
    lineageGroupArn: option<lineageGroupArn>,
    @as("MetadataProperties") metadataProperties: option<metadataProperties>,
    @as("LastModifiedBy") lastModifiedBy: option<userContext>,
    @ocaml.doc("<p>When the artifact was last modified.</p>") @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @as("CreatedBy") createdBy: option<userContext>,
    @ocaml.doc("<p>When the artifact was created.</p>") @as("CreationTime")
    creationTime: option<timestamp_>,
    @ocaml.doc("<p>A list of the artifact's properties.</p>") @as("Properties")
    properties: option<lineageEntityParameters>,
    @ocaml.doc("<p>The type of the artifact.</p>") @as("ArtifactType")
    artifactType: option<string256>,
    @ocaml.doc("<p>The source of the artifact.</p>") @as("Source") source: option<artifactSource>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the artifact.</p>") @as("ArtifactArn")
    artifactArn: option<artifactArn>,
    @ocaml.doc("<p>The name of the artifact.</p>") @as("ArtifactName")
    artifactName: option<experimentEntityNameOrArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DescribeArtifactCommand"
  let make = (~artifactArn, ()) => new({artifactArn: artifactArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeAppImageConfig = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the AppImageConfig to describe.</p>") @as("AppImageConfigName")
    appImageConfigName: appImageConfigName,
  }
  type response = {
    @ocaml.doc("<p>The configuration of a KernelGateway app.</p>") @as("KernelGatewayImageConfig")
    kernelGatewayImageConfig: option<kernelGatewayImageConfig>,
    @ocaml.doc("<p>When the AppImageConfig was last modified.</p>") @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @ocaml.doc("<p>When the AppImageConfig was created.</p>") @as("CreationTime")
    creationTime: option<timestamp_>,
    @ocaml.doc("<p>The name of the AppImageConfig.</p>") @as("AppImageConfigName")
    appImageConfigName: option<appImageConfigName>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the AppImageConfig.</p>")
    @as("AppImageConfigArn")
    appImageConfigArn: option<appImageConfigArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeAppImageConfigCommand"
  let make = (~appImageConfigName, ()) => new({appImageConfigName: appImageConfigName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DeleteArtifact = {
  type t
  type request = {
    @ocaml.doc("<p>The URI of the source.</p>") @as("Source") source: option<artifactSource>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the artifact to delete.</p>")
    @as("ArtifactArn")
    artifactArn: option<artifactArn>,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the artifact.</p>") @as("ArtifactArn")
    artifactArn: option<artifactArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DeleteArtifactCommand"
  let make = (~source=?, ~artifactArn=?, ()) => new({source, artifactArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateTransformJob = {
  type t
  type request = {
    @as("ExperimentConfig") experimentConfig: option<experimentConfig>,
    @ocaml.doc("<p>(Optional)
            An
            array of key-value pairs. For more information, see <a href=\"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what\">Using
                Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management User
                Guide</i>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The data structure used to specify the data to be used for inference in a batch
            transform job and to associate the data that is relevant to the prediction results in
            the output. The input filter provided allows you to exclude input data that is not
            needed for inference in a batch transform job. The output filter provided allows you to
            include input data relevant to interpreting the predictions in the output from the job.
            For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html\">Associate Prediction
                Results with their Corresponding Input Records</a>.</p>")
    @as("DataProcessing")
    dataProcessing: option<dataProcessing>,
    @ocaml.doc("<p>Describes the resources, including
            ML
            instance types and ML instance count, to use for the transform
            job.</p>")
    @as("TransformResources")
    transformResources: transformResources,
    @ocaml.doc("<p>Describes the results of the transform job.</p>") @as("TransformOutput")
    transformOutput: transformOutput,
    @ocaml.doc("<p>Describes the input source and
            the
            way the transform job consumes it.</p>")
    @as("TransformInput")
    transformInput: transformInput,
    @ocaml.doc("<p>The environment variables to set in the Docker container. We support up to 16 key and
            values entries in the map.</p>")
    @as("Environment")
    environment: option<transformEnvironmentMap>,
    @ocaml.doc("<p>Specifies the number of records to include in a mini-batch for an HTTP inference
            request. A <i>record</i>
            <i></i> is a single unit of input data that
            inference can be made on. For example, a single line in a CSV file is a record. </p>
        <p>To enable the batch strategy, you must set the <code>SplitType</code> property to
                <code>Line</code>, <code>RecordIO</code>, or <code>TFRecord</code>.</p>
        <p>To use only one record when making an HTTP invocation request to a container, set
                <code>BatchStrategy</code> to <code>SingleRecord</code> and <code>SplitType</code>
            to <code>Line</code>.</p>
        <p>To fit as many records in a mini-batch as can fit within the
                <code>MaxPayloadInMB</code> limit, set <code>BatchStrategy</code> to
                <code>MultiRecord</code> and <code>SplitType</code> to <code>Line</code>.</p>")
    @as("BatchStrategy")
    batchStrategy: option<batchStrategy>,
    @ocaml.doc("<p>The maximum allowed size of the payload, in MB. A <i>payload</i> is the
            data portion of a record (without metadata). The value in <code>MaxPayloadInMB</code>
            must be greater than, or equal to, the size of a single record. To estimate the size of
            a record in MB, divide the size of your dataset by the number of records. To ensure that
            the records fit within the maximum payload size, we recommend using a slightly larger
            value. The default value is <code>6</code> MB.
            </p>
        <p>For cases where the payload might be arbitrarily large and is transmitted using HTTP
            chunked encoding, set the value to <code>0</code>.
            This
            feature works only in supported algorithms. Currently, Amazon SageMaker built-in
            algorithms do not support HTTP chunked encoding.</p>")
    @as("MaxPayloadInMB")
    maxPayloadInMB: option<maxPayloadInMB>,
    @ocaml.doc("<p>Configures the timeout and maximum number of retries for processing a transform job
            invocation.</p>")
    @as("ModelClientConfig")
    modelClientConfig: option<modelClientConfig>,
    @ocaml.doc("<p>The maximum number of parallel requests that can be sent to each instance in a
            transform job. If <code>MaxConcurrentTransforms</code> is set to <code>0</code> or left
            unset, Amazon SageMaker checks the optional execution-parameters to determine the settings for your
            chosen algorithm. If the execution-parameters endpoint is not enabled, the default value
            is <code>1</code>. For more information on execution-parameters, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-batch-code.html#your-algorithms-batch-code-how-containe-serves-requests\">How Containers Serve Requests</a>. For built-in algorithms, you don't need to
            set a value for <code>MaxConcurrentTransforms</code>.</p>")
    @as("MaxConcurrentTransforms")
    maxConcurrentTransforms: option<maxConcurrentTransforms>,
    @ocaml.doc("<p>The name of the model that you want to use for the transform job.
            <code>ModelName</code> must be the name of an existing Amazon SageMaker model within an Amazon Web Services
            Region in an Amazon Web Services account.</p>")
    @as("ModelName")
    modelName: modelName,
    @ocaml.doc("<p>The name of the transform job. The name must be unique within an Amazon Web Services Region in an
            Amazon Web Services account. </p>")
    @as("TransformJobName")
    transformJobName: transformJobName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the transform job.</p>") @as("TransformJobArn")
    transformJobArn: transformJobArn,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateTransformJobCommand"
  let make = (
    ~transformResources,
    ~transformOutput,
    ~transformInput,
    ~modelName,
    ~transformJobName,
    ~experimentConfig=?,
    ~tags=?,
    ~dataProcessing=?,
    ~environment=?,
    ~batchStrategy=?,
    ~maxPayloadInMB=?,
    ~modelClientConfig=?,
    ~maxConcurrentTransforms=?,
    (),
  ) =>
    new({
      experimentConfig,
      tags,
      dataProcessing,
      transformResources,
      transformOutput,
      transformInput,
      environment,
      batchStrategy,
      maxPayloadInMB,
      modelClientConfig,
      maxConcurrentTransforms,
      modelName,
      transformJobName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateProject = {
  type t
  type request = {
    @ocaml.doc("<p>An array of key-value pairs that you want to use to organize and track your Amazon Web Services
            resource costs. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The product ID and provisioning artifact ID to provision a service catalog. The provisioning 
            artifact ID will default to the latest provisioning artifact ID of the product, if you don't 
            provide the provisioning artifact ID. For more information, see <a href=\"https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html\">What is Amazon Web Services Service
                Catalog</a>.</p>")
    @as("ServiceCatalogProvisioningDetails")
    serviceCatalogProvisioningDetails: serviceCatalogProvisioningDetails,
    @ocaml.doc("<p>A description for the project.</p>") @as("ProjectDescription")
    projectDescription: option<entityDescription>,
    @ocaml.doc("<p>The name of the project.</p>") @as("ProjectName") projectName: projectEntityName,
  }
  type response = {
    @ocaml.doc("<p>The ID of the new project.</p>") @as("ProjectId") projectId: projectId,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the project.</p>") @as("ProjectArn")
    projectArn: projectArn,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateProjectCommand"
  let make = (
    ~serviceCatalogProvisioningDetails,
    ~projectName,
    ~tags=?,
    ~projectDescription=?,
    (),
  ) => new({tags, serviceCatalogProvisioningDetails, projectDescription, projectName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateLabelingJob = {
  type t
  type request = {
    @ocaml.doc("<p>An array of key/value pairs. For more information, see <a href=\"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what\">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
                User Guide</i>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc(
      "<p>Configures the labeling task and how it is presented to workers; including, but not limited to price, keywords, and batch size (task count).</p>"
    )
    @as("HumanTaskConfig")
    humanTaskConfig: humanTaskConfig,
    @ocaml.doc("<p>Configures the information required to perform automated data labeling.</p>")
    @as("LabelingJobAlgorithmsConfig")
    labelingJobAlgorithmsConfig: option<labelingJobAlgorithmsConfig>,
    @ocaml.doc("<p>A set of conditions for stopping the labeling job. If any of the conditions are met,
            the job is automatically stopped. You can use these conditions to control the cost of
            data labeling.</p>")
    @as("StoppingConditions")
    stoppingConditions: option<labelingJobStoppingConditions>,
    @ocaml.doc("<p>The S3 URI of the file, referred to as a <i>label category configuration
                file</i>, that defines the categories used to label the data objects.</p>
        <p>For 3D point cloud and video frame task types, you can add label category attributes
            and frame attributes to your label category configuration file. To learn how, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud-label-category-config.html\">Create a
                Labeling Category Configuration File for 3D Point Cloud Labeling Jobs</a>. </p>
        <p>For named entity recognition jobs, in addition to <code>\"labels\"</code>, you must
            provide worker instructions in the label category configuration file using the
                <code>\"instructions\"</code> parameter: <code>\"instructions\":
                {\"shortInstruction\":\"<h1>Add header</h1><p>Add Instructions</p>\",
                \"fullInstruction\":\"<p>Add additional instructions.</p>\"}</code>. For details
            and an example, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-named-entity-recg.html#sms-creating-ner-api\">Create a
                Named Entity Recognition Labeling Job (API) </a>.</p>
        <p>For all other <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html\">built-in task types</a> and <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates.html\">custom
                tasks</a>, your label category configuration file must be a JSON file in the
            following format. Identify the labels you want to use by replacing <code>label_1</code>,
                <code>label_2</code>,<code>...</code>,<code>label_n</code> with your label
            categories.</p>
        <p>
            <code>{ </code>
         </p>
        <p>
            <code>\"document-version\": \"2018-11-28\",</code>
         </p>
        <p>
            <code>\"labels\": [{\"label\": \"label_1\"},{\"label\": \"label_2\"},...{\"label\":
                \"label_n\"}]</code>
         </p>
        <p>
            <code>}</code>
         </p>
        <p>Note the following about the label category configuration file:</p>
        <ul>
            <li>
                <p>For image classification and text classification (single and multi-label) you
                    must specify at least two label categories. For all other task types, the
                    minimum number of label categories required is one. </p>
            </li>
            <li>
                <p>Each label category must be unique, you cannot specify duplicate label
                    categories.</p>
            </li>
            <li>
                <p>If you create a 3D point cloud or video frame adjustment or verification
                    labeling job, you must include <code>auditLabelAttributeName</code> in the label
                    category configuration. Use this parameter to enter the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateLabelingJob.html#sagemaker-CreateLabelingJob-request-LabelAttributeName\">
                     <code>LabelAttributeName</code>
                  </a> of the labeling job you want to
                    adjust or verify annotations of.</p>
            </li>
         </ul>")
    @as("LabelCategoryConfigS3Uri")
    labelCategoryConfigS3Uri: option<s3Uri>,
    @ocaml.doc("<p>The Amazon Resource Number (ARN) that Amazon SageMaker assumes to perform tasks on your behalf
            during data labeling. You must grant this role the necessary permissions so that Amazon SageMaker
            can successfully complete data labeling.</p>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>The location of the output data and the Amazon Web Services Key Management Service key ID for the key used to encrypt
            the output data, if any.</p>")
    @as("OutputConfig")
    outputConfig: labelingJobOutputConfig,
    @ocaml.doc("<p>Input data for the labeling job, such as the Amazon S3 location of the data objects and the
            location of the manifest file that describes the data objects.</p>
        <p>You must specify at least one of the following: <code>S3DataSource</code> or
                <code>SnsDataSource</code>. </p>
        <ul>
            <li>
                <p>Use <code>SnsDataSource</code> to specify an SNS input topic for a streaming
                    labeling job. If you do not specify and SNS input topic ARN, Ground Truth will
                    create a one-time labeling job that stops after all data objects in the input
                    manifest file have been labeled.</p>
            </li>
            <li>
                <p>Use <code>S3DataSource</code> to specify an input manifest file for both
                    streaming and one-time labeling jobs. Adding an <code>S3DataSource</code> is
                    optional if you use <code>SnsDataSource</code> to create a streaming labeling
                    job.</p>
            </li>
         </ul>
        <p>If you use the Amazon Mechanical Turk workforce, your input data should not include
            confidential information, personal information or protected health information. Use
                <code>ContentClassifiers</code> to specify that your data is free of personally
            identifiable information and adult content.</p>")
    @as("InputConfig")
    inputConfig: labelingJobInputConfig,
    @ocaml.doc("<p>The attribute name to use for the label in the output manifest file. This is the key
            for the key/value pair formed with the label that a worker assigns to the object. The
                <code>LabelAttributeName</code> must meet the following requirements.</p>
        <ul>
            <li>
                <p>The name can't end with \"-metadata\". </p>
            </li>
            <li>
                <p>If you are using one of the following <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html\">built-in task types</a>,
                    the attribute name <i>must</i> end with \"-ref\". If the task type
                    you are using is not listed below, the attribute name <i>must
                        not</i> end with \"-ref\".</p>
                <ul>
                  <li>
                        <p>Image semantic segmentation (<code>SemanticSegmentation)</code>, and
                            adjustment (<code>AdjustmentSemanticSegmentation</code>) and
                            verification (<code>VerificationSemanticSegmentation</code>) labeling
                            jobs for this task type.</p>
                    </li>
                  <li>
                        <p>Video frame object detection (<code>VideoObjectDetection</code>), and
                            adjustment and verification
                            (<code>AdjustmentVideoObjectDetection</code>) labeling jobs for this
                            task type.</p>
                    </li>
                  <li>
                        <p>Video frame object tracking (<code>VideoObjectTracking</code>), and
                            adjustment and verification (<code>AdjustmentVideoObjectTracking</code>)
                            labeling jobs for this task type.</p>
                    </li>
                  <li>
                        <p>3D point cloud semantic segmentation
                                (<code>3DPointCloudSemanticSegmentation</code>), and adjustment and
                            verification (<code>Adjustment3DPointCloudSemanticSegmentation</code>)
                            labeling jobs for this task type. </p>
                    </li>
                  <li>
                        <p>3D point cloud object tracking
                                (<code>3DPointCloudObjectTracking</code>), and adjustment and
                            verification (<code>Adjustment3DPointCloudObjectTracking</code>)
                            labeling jobs for this task type. </p>
                    </li>
               </ul>
            </li>
         </ul>
        <p></p>
        <important>
            <p>If you are creating an adjustment or verification labeling job, you must use a
                    <i>different</i>
                <code>LabelAttributeName</code> than the one used in the original labeling job. The
                original labeling job is the Ground Truth labeling job that produced the labels that you
                want verified or adjusted. To learn more about adjustment and verification labeling
                jobs, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html\">Verify and Adjust
                    Labels</a>.</p>
        </important>")
    @as("LabelAttributeName")
    labelAttributeName: labelAttributeName,
    @ocaml.doc("<p>The name of the labeling job. This name is used to identify the job in a list of
            labeling jobs. Labeling job names must be unique within an Amazon Web Services account and region.
                <code>LabelingJobName</code> is not case sensitive. For example, Example-job and
            example-job are considered the same labeling job name by Ground Truth.</p>")
    @as("LabelingJobName")
    labelingJobName: labelingJobName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the labeling job. You use this ARN to identify the
            labeling job.</p>")
    @as("LabelingJobArn")
    labelingJobArn: labelingJobArn,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateLabelingJobCommand"
  let make = (
    ~humanTaskConfig,
    ~roleArn,
    ~outputConfig,
    ~inputConfig,
    ~labelAttributeName,
    ~labelingJobName,
    ~tags=?,
    ~labelingJobAlgorithmsConfig=?,
    ~stoppingConditions=?,
    ~labelCategoryConfigS3Uri=?,
    (),
  ) =>
    new({
      tags,
      humanTaskConfig,
      labelingJobAlgorithmsConfig,
      stoppingConditions,
      labelCategoryConfigS3Uri,
      roleArn,
      outputConfig,
      inputConfig,
      labelAttributeName,
      labelingJobName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateFlowDefinition = {
  type t
  type request = {
    @ocaml.doc(
      "<p>An array of key-value pairs that contain metadata to help you categorize and organize a flow definition. Each tag consists of a key and a value, both of which you define.</p>"
    )
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) of the role needed to call other services on your behalf. For example, <code>arn:aws:iam::1234567890:role/service-role/AmazonSageMaker-ExecutionRole-20180111T151298</code>.</p>"
    )
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc(
      "<p>An object containing information about where the human review results will be uploaded.</p>"
    )
    @as("OutputConfig")
    outputConfig: flowDefinitionOutputConfig,
    @ocaml.doc(
      "<p>An object containing information about the tasks the human reviewers will perform.</p>"
    )
    @as("HumanLoopConfig")
    humanLoopConfig: humanLoopConfig,
    @ocaml.doc(
      "<p>An object containing information about the events that trigger a human workflow.</p>"
    )
    @as("HumanLoopActivationConfig")
    humanLoopActivationConfig: option<humanLoopActivationConfig>,
    @ocaml.doc("<p>Container for configuring the source of human task requests. Use to specify if
      Amazon Rekognition or Amazon Textract is used as an integration source.</p>")
    @as("HumanLoopRequestSource")
    humanLoopRequestSource: option<humanLoopRequestSource>,
    @ocaml.doc("<p>The name of your flow definition.</p>") @as("FlowDefinitionName")
    flowDefinitionName: flowDefinitionName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the flow definition you create.</p>")
    @as("FlowDefinitionArn")
    flowDefinitionArn: flowDefinitionArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateFlowDefinitionCommand"
  let make = (
    ~roleArn,
    ~outputConfig,
    ~humanLoopConfig,
    ~flowDefinitionName,
    ~tags=?,
    ~humanLoopActivationConfig=?,
    ~humanLoopRequestSource=?,
    (),
  ) =>
    new({
      tags,
      roleArn,
      outputConfig,
      humanLoopConfig,
      humanLoopActivationConfig,
      humanLoopRequestSource,
      flowDefinitionName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateEndpointConfig = {
  type t
  type request = {
    @ocaml.doc("<p>Specifies configuration for how an endpoint performs asynchronous inference. 
            This is a required field in order for your Endpoint to be invoked using
            <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpointAsync.html\">InvokeEndpointAsync</a>.</p>")
    @as("AsyncInferenceConfig")
    asyncInferenceConfig: option<asyncInferenceConfig>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that Amazon SageMaker uses to encrypt data on
            the storage volume attached to the ML compute instance that hosts the endpoint.</p>
        <p>The KmsKeyId can be any of the following formats: </p>
        <ul>
            <li>
                <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
               </p>
            </li>
            <li>
                <p>Key ARN:
                        <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
               </p>
            </li>
            <li>
                <p>Alias name: <code>alias/ExampleAlias</code>
               </p>
            </li>
            <li>
                <p>Alias name ARN:
                        <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code>
               </p>
            </li>
         </ul>
        <p>The KMS key policy must grant permission to the IAM role that you specify in your
                <code>CreateEndpoint</code>, <code>UpdateEndpoint</code> requests. For more
            information, refer to the Amazon Web Services Key Management Service section<a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html\"> Using Key
                Policies in Amazon Web Services KMS </a>
         </p>
        <note>
            <p>Certain Nitro-based instances include local storage, dependent on the instance
                type. Local storage volumes are encrypted using a hardware module on the instance.
                You can't request a <code>KmsKeyId</code> when using an instance type with local
                storage. If any of the models that you specify in the
                    <code>ProductionVariants</code> parameter use nitro-based instances with local
                storage, do not specify a value for the <code>KmsKeyId</code> parameter. If you
                specify a value for <code>KmsKeyId</code> when using any nitro-based instances with
                local storage, the call to <code>CreateEndpointConfig</code> fails.</p>
            <p>For a list of instance types that support local instance storage, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes\">Instance Store Volumes</a>.</p>
            <p>For more information about local instance storage encryption, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html\">SSD
                    Instance Store Volumes</a>.</p>
        </note>")
    @as("KmsKeyId")
    kmsKeyId: option<kmsKeyId>,
    @ocaml.doc("<p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
            different ways, for example, by purpose, owner, or environment. For more information,
            see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
                Resources</a>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @as("DataCaptureConfig") dataCaptureConfig: option<dataCaptureConfig>,
    @ocaml.doc("<p>An list of <code>ProductionVariant</code> objects, one for each model that you want
            to host at this endpoint.</p>")
    @as("ProductionVariants")
    productionVariants: productionVariantList,
    @ocaml.doc(
      "<p>The name of the endpoint configuration. You specify this name in a <a>CreateEndpoint</a> request. </p>"
    )
    @as("EndpointConfigName")
    endpointConfigName: endpointConfigName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the endpoint configuration. </p>")
    @as("EndpointConfigArn")
    endpointConfigArn: endpointConfigArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateEndpointConfigCommand"
  let make = (
    ~productionVariants,
    ~endpointConfigName,
    ~asyncInferenceConfig=?,
    ~kmsKeyId=?,
    ~tags=?,
    ~dataCaptureConfig=?,
    (),
  ) =>
    new({
      asyncInferenceConfig,
      kmsKeyId,
      tags,
      dataCaptureConfig,
      productionVariants,
      endpointConfigName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateArtifact = {
  type t
  type request = {
    @ocaml.doc("<p>A list of tags to apply to the artifact.</p>") @as("Tags")
    tags: option<tagList_>,
    @as("MetadataProperties") metadataProperties: option<metadataProperties>,
    @ocaml.doc("<p>A list of properties to add to the artifact.</p>") @as("Properties")
    properties: option<lineageEntityParameters>,
    @ocaml.doc("<p>The artifact type.</p>") @as("ArtifactType") artifactType: string256,
    @ocaml.doc("<p>The ID, ID type, and URI of the source.</p>") @as("Source")
    source: artifactSource,
    @ocaml.doc(
      "<p>The name of the artifact. Must be unique to your account in an Amazon Web Services Region.</p>"
    )
    @as("ArtifactName")
    artifactName: option<experimentEntityName>,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the artifact.</p>") @as("ArtifactArn")
    artifactArn: option<artifactArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateArtifactCommand"
  let make = (
    ~artifactType,
    ~source,
    ~tags=?,
    ~metadataProperties=?,
    ~properties=?,
    ~artifactName=?,
    (),
  ) => new({tags, metadataProperties, properties, artifactType, source, artifactName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateAppImageConfig = {
  type t
  type request = {
    @ocaml.doc("<p>The KernelGatewayImageConfig.</p>") @as("KernelGatewayImageConfig")
    kernelGatewayImageConfig: option<kernelGatewayImageConfig>,
    @ocaml.doc("<p>A list of tags to apply to the AppImageConfig.</p>") @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The name of the AppImageConfig. Must be unique to your account.</p>")
    @as("AppImageConfigName")
    appImageConfigName: appImageConfigName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the AppImageConfig.</p>")
    @as("AppImageConfigArn")
    appImageConfigArn: option<appImageConfigArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateAppImageConfigCommand"
  let make = (~appImageConfigName, ~kernelGatewayImageConfig=?, ~tags=?, ()) =>
    new({kernelGatewayImageConfig, tags, appImageConfigName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdateUserProfile = {
  type t
  type request = {
    @ocaml.doc("<p>A collection of settings.</p>") @as("UserSettings")
    userSettings: option<userSettings>,
    @ocaml.doc("<p>The user profile name.</p>") @as("UserProfileName")
    userProfileName: userProfileName,
    @ocaml.doc("<p>The domain ID.</p>") @as("DomainId") domainId: domainId,
  }
  type response = {
    @ocaml.doc("<p>The user profile Amazon Resource Name (ARN).</p>") @as("UserProfileArn")
    userProfileArn: option<userProfileArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "UpdateUserProfileCommand"
  let make = (~userProfileName, ~domainId, ~userSettings=?, ()) =>
    new({userSettings, userProfileName, domainId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdateEndpoint = {
  type t
  type request = {
    @ocaml.doc("<p>Specifies whether to reuse the last deployment configuration. The default value is
            false (the configuration is not reused).</p>")
    @as("RetainDeploymentConfig")
    retainDeploymentConfig: option<boolean_>,
    @ocaml.doc(
      "<p>The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.</p>"
    )
    @as("DeploymentConfig")
    deploymentConfig: option<deploymentConfig>,
    @ocaml.doc("<p>When you are updating endpoint resources with <a>UpdateEndpointInput$RetainAllVariantProperties</a>, whose value is set to
                <code>true</code>, <code>ExcludeRetainedVariantProperties</code> specifies the list
            of type <a>VariantProperty</a> to override with the values provided by
                <code>EndpointConfig</code>. If you don't specify a value for
                <code>ExcludeAllVariantProperties</code>, no variant properties are overridden.
        </p>")
    @as("ExcludeRetainedVariantProperties")
    excludeRetainedVariantProperties: option<variantPropertyList>,
    @ocaml.doc("<p>When updating endpoint resources, enables or disables the retention of <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VariantProperty.html\">variant properties</a>, such as the instance count or the variant weight. To
            retain the variant properties of an endpoint when updating it, set
                <code>RetainAllVariantProperties</code> to <code>true</code>. To use the variant
            properties specified in a new <code>EndpointConfig</code> call when updating an
            endpoint, set <code>RetainAllVariantProperties</code> to <code>false</code>. The default
            is <code>false</code>.</p>")
    @as("RetainAllVariantProperties")
    retainAllVariantProperties: option<boolean_>,
    @ocaml.doc("<p>The name of the new endpoint configuration.</p>") @as("EndpointConfigName")
    endpointConfigName: endpointConfigName,
    @ocaml.doc("<p>The name of the endpoint whose configuration you want to update.</p>")
    @as("EndpointName")
    endpointName: endpointName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the endpoint.</p>") @as("EndpointArn")
    endpointArn: endpointArn,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "UpdateEndpointCommand"
  let make = (
    ~endpointConfigName,
    ~endpointName,
    ~retainDeploymentConfig=?,
    ~deploymentConfig=?,
    ~excludeRetainedVariantProperties=?,
    ~retainAllVariantProperties=?,
    (),
  ) =>
    new({
      retainDeploymentConfig,
      deploymentConfig,
      excludeRetainedVariantProperties,
      retainAllVariantProperties,
      endpointConfigName,
      endpointName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdateDomain = {
  type t
  type request = {
    @ocaml.doc("<p>A collection of <code>DomainSettings</code> configuration values to update.</p>")
    @as("DomainSettingsForUpdate")
    domainSettingsForUpdate: option<domainSettingsForUpdate>,
    @ocaml.doc("<p>A collection of settings.</p>") @as("DefaultUserSettings")
    defaultUserSettings: option<userSettings>,
    @ocaml.doc("<p>The ID of the domain to be updated.</p>") @as("DomainId") domainId: domainId,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the domain.</p>") @as("DomainArn")
    domainArn: option<domainArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "UpdateDomainCommand"
  let make = (~domainId, ~domainSettingsForUpdate=?, ~defaultUserSettings=?, ()) =>
    new({domainSettingsForUpdate, defaultUserSettings, domainId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListWorkforces = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of workforces returned in the response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>A token to resume pagination.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>A filter you can use to search for workforces using part of the workforce name.</p>"
    )
    @as("NameContains")
    nameContains: option<workforceName>,
    @ocaml.doc("<p>Sort workforces in ascending or descending order.</p>") @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>Sort workforces using the workforce name or creation date.</p>") @as("SortBy")
    sortBy: option<listWorkforcesSortByOptions>,
  }
  type response = {
    @ocaml.doc("<p>A token to resume pagination.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list containing information about your workforce.</p>") @as("Workforces")
    workforces: workforces,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListWorkforcesCommand"
  let make = (~maxResults=?, ~nextToken=?, ~nameContains=?, ~sortOrder=?, ~sortBy=?, ()) =>
    new({maxResults, nextToken, nameContains, sortOrder, sortBy})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListDevices = {
  type t
  type request = {
    @ocaml.doc("<p>Filter for fleets containing this name in their device fleet name.</p>")
    @as("DeviceFleetName")
    deviceFleetName: option<entityName>,
    @ocaml.doc(
      "<p>A filter that searches devices that contains this name in any of their models.</p>"
    )
    @as("ModelName")
    modelName: option<entityName>,
    @ocaml.doc("<p>Select fleets where the job was updated after X</p>") @as("LatestHeartbeatAfter")
    latestHeartbeatAfter: option<timestamp_>,
    @ocaml.doc("<p>Maximum number of results to select.</p>") @as("MaxResults")
    maxResults: option<listMaxResults>,
    @ocaml.doc(
      "<p>The response from the last list when returning a list large enough to need tokening.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  type response = {
    @ocaml.doc(
      "<p>The response from the last list when returning a list large enough to need tokening.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Summary of devices.</p>") @as("DeviceSummaries")
    deviceSummaries: deviceSummaries,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListDevicesCommand"
  let make = (
    ~deviceFleetName=?,
    ~modelName=?,
    ~latestHeartbeatAfter=?,
    ~maxResults=?,
    ~nextToken=?,
    (),
  ) => new({deviceFleetName, modelName, latestHeartbeatAfter, maxResults, nextToken})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListAutoMLJobs = {
  type t
  type request = {
    @ocaml.doc("<p>If the previous response was truncated, you receive this token. Use it in your next
         request to receive the next set of results.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Request a list of jobs up to a specified limit.</p>") @as("MaxResults")
    maxResults: option<autoMLMaxResults>,
    @ocaml.doc(
      "<p>The parameter by which to sort the results. The default is <code>Name</code>.</p>"
    )
    @as("SortBy")
    sortBy: option<autoMLSortBy>,
    @ocaml.doc("<p>The sort order for the results. The default is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<autoMLSortOrder>,
    @ocaml.doc("<p>Request a list of jobs, using a filter for status.</p>") @as("StatusEquals")
    statusEquals: option<autoMLJobStatus>,
    @ocaml.doc("<p>Request a list of jobs, using a search filter for name.</p>") @as("NameContains")
    nameContains: option<autoMLNameContains>,
    @ocaml.doc("<p>Request a list of jobs, using a filter for time.</p>")
    @as("LastModifiedTimeBefore")
    lastModifiedTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>Request a list of jobs, using a filter for time.</p>")
    @as("LastModifiedTimeAfter")
    lastModifiedTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>Request a list of jobs, using a filter for time.</p>") @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>Request a list of jobs, using a filter for time.</p>") @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
  }
  type response = {
    @ocaml.doc("<p>If the previous response was truncated, you receive this token. Use it in your next
         request to receive the next set of results.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Returns a summary list of jobs.</p>") @as("AutoMLJobSummaries")
    autoMLJobSummaries: autoMLJobSummaries,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListAutoMLJobsCommand"
  let make = (
    ~nextToken=?,
    ~maxResults=?,
    ~sortBy=?,
    ~sortOrder=?,
    ~statusEquals=?,
    ~nameContains=?,
    ~lastModifiedTimeBefore=?,
    ~lastModifiedTimeAfter=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    (),
  ) =>
    new({
      nextToken,
      maxResults,
      sortBy,
      sortOrder,
      statusEquals,
      nameContains,
      lastModifiedTimeBefore,
      lastModifiedTimeAfter,
      creationTimeBefore,
      creationTimeAfter,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeUserProfile = {
  type t
  type request = {
    @ocaml.doc("<p>The user profile name. This value is not case sensitive.</p>")
    @as("UserProfileName")
    userProfileName: userProfileName,
    @ocaml.doc("<p>The domain ID.</p>") @as("DomainId") domainId: domainId,
  }
  type response = {
    @ocaml.doc("<p>A collection of settings.</p>") @as("UserSettings")
    userSettings: option<userSettings>,
    @ocaml.doc("<p>The SSO user value.</p>") @as("SingleSignOnUserValue")
    singleSignOnUserValue: option<string256>,
    @ocaml.doc("<p>The SSO user identifier.</p>") @as("SingleSignOnUserIdentifier")
    singleSignOnUserIdentifier: option<singleSignOnUserIdentifier>,
    @ocaml.doc("<p>The failure reason.</p>") @as("FailureReason")
    failureReason: option<failureReason>,
    @ocaml.doc("<p>The creation time.</p>") @as("CreationTime") creationTime: option<creationTime>,
    @ocaml.doc("<p>The last modified time.</p>") @as("LastModifiedTime")
    lastModifiedTime: option<lastModifiedTime>,
    @ocaml.doc("<p>The status.</p>") @as("Status") status: option<userProfileStatus>,
    @ocaml.doc(
      "<p>The ID of the user's profile in the Amazon Elastic File System (EFS) volume.</p>"
    )
    @as("HomeEfsFileSystemUid")
    homeEfsFileSystemUid: option<efsUid>,
    @ocaml.doc("<p>The user profile name.</p>") @as("UserProfileName")
    userProfileName: option<userProfileName>,
    @ocaml.doc("<p>The user profile Amazon Resource Name (ARN).</p>") @as("UserProfileArn")
    userProfileArn: option<userProfileArn>,
    @ocaml.doc("<p>The ID of the domain that contains the profile.</p>") @as("DomainId")
    domainId: option<domainId>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeUserProfileCommand"
  let make = (~userProfileName, ~domainId, ()) => new({userProfileName, domainId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeProcessingJob = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the processing job. The name must be unique within an Amazon Web Services Region in the
            Amazon Web Services account.</p>")
    @as("ProcessingJobName")
    processingJobName: processingJobName,
  }
  type response = {
    @ocaml.doc("<p>The ARN of a training job associated with this processing job.</p>")
    @as("TrainingJobArn")
    trainingJobArn: option<trainingJobArn>,
    @ocaml.doc("<p>The ARN of an AutoML job associated with this processing job.</p>")
    @as("AutoMLJobArn")
    autoMLJobArn: option<autoMLJobArn>,
    @ocaml.doc("<p>The ARN of a monitoring schedule for an endpoint associated with this processing
            job.</p>")
    @as("MonitoringScheduleArn")
    monitoringScheduleArn: option<monitoringScheduleArn>,
    @ocaml.doc("<p>The time at which the processing job was created.</p>") @as("CreationTime")
    creationTime: timestamp_,
    @ocaml.doc("<p>The time at which the processing job was last modified.</p>")
    @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @ocaml.doc("<p>The time at which the processing job started.</p>") @as("ProcessingStartTime")
    processingStartTime: option<timestamp_>,
    @ocaml.doc("<p>The time at which the processing job completed.</p>") @as("ProcessingEndTime")
    processingEndTime: option<timestamp_>,
    @ocaml.doc("<p>A string, up to one KB in size, that contains the reason a processing job failed, if
            it failed.</p>")
    @as("FailureReason")
    failureReason: option<failureReason>,
    @ocaml.doc("<p>An optional string, up to one KB in size, that contains metadata from the processing
            container when the processing job exits.</p>")
    @as("ExitMessage")
    exitMessage: option<exitMessage>,
    @ocaml.doc("<p>Provides the status of a processing job.</p>") @as("ProcessingJobStatus")
    processingJobStatus: processingJobStatus,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the processing job.</p>")
    @as("ProcessingJobArn")
    processingJobArn: processingJobArn,
    @ocaml.doc("<p>The configuration information used to create an experiment.</p>")
    @as("ExperimentConfig")
    experimentConfig: option<experimentConfig>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on
            your behalf.</p>")
    @as("RoleArn")
    roleArn: option<roleArn>,
    @ocaml.doc("<p>Networking options for a processing job.</p>") @as("NetworkConfig")
    networkConfig: option<networkConfig>,
    @ocaml.doc("<p>The environment variables set in the Docker container.</p>") @as("Environment")
    environment: option<processingEnvironmentMap>,
    @ocaml.doc("<p>Configures the processing job to run a specified container image.</p>")
    @as("AppSpecification")
    appSpecification: appSpecification,
    @ocaml.doc("<p>The time limit for how long the processing job is allowed to run.</p>")
    @as("StoppingCondition")
    stoppingCondition: option<processingStoppingCondition>,
    @ocaml.doc("<p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a
            processing job. In distributed training, you specify more than one instance.</p>")
    @as("ProcessingResources")
    processingResources: processingResources,
    @ocaml.doc("<p>The name of the processing job. The name must be unique within an Amazon Web Services Region in the
            Amazon Web Services account.</p>")
    @as("ProcessingJobName")
    processingJobName: processingJobName,
    @ocaml.doc("<p>Output configuration for the processing job.</p>") @as("ProcessingOutputConfig")
    processingOutputConfig: option<processingOutputConfig>,
    @ocaml.doc("<p>The inputs for a processing job.</p>") @as("ProcessingInputs")
    processingInputs: option<processingInputs>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeProcessingJobCommand"
  let make = (~processingJobName, ()) => new({processingJobName: processingJobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeModelQualityJobDefinition = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the model quality job. The name must be unique within an Amazon Web Services Region in the
         Amazon Web Services account.</p>")
    @as("JobDefinitionName")
    jobDefinitionName: monitoringJobDefinitionName,
  }
  type response = {
    @as("StoppingCondition") stoppingCondition: option<monitoringStoppingCondition>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to
         perform tasks on your behalf.</p>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>Networking options for a model quality job.</p>") @as("NetworkConfig")
    networkConfig: option<monitoringNetworkConfig>,
    @as("JobResources") jobResources: monitoringResources,
    @as("ModelQualityJobOutputConfig") modelQualityJobOutputConfig: monitoringOutputConfig,
    @ocaml.doc("<p>Inputs for the model quality job.</p>") @as("ModelQualityJobInput")
    modelQualityJobInput: modelQualityJobInput,
    @ocaml.doc("<p>Configures the model quality job to run a specified Docker container image.</p>")
    @as("ModelQualityAppSpecification")
    modelQualityAppSpecification: modelQualityAppSpecification,
    @ocaml.doc("<p>The baseline configuration for a model quality job.</p>")
    @as("ModelQualityBaselineConfig")
    modelQualityBaselineConfig: option<modelQualityBaselineConfig>,
    @ocaml.doc("<p>The time at which the model quality job was created.</p>") @as("CreationTime")
    creationTime: timestamp_,
    @ocaml.doc("<p>The name of the quality job definition. The name must be unique within an Amazon Web Services Region in
         the Amazon Web Services account.</p>")
    @as("JobDefinitionName")
    jobDefinitionName: monitoringJobDefinitionName,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model quality job.</p>")
    @as("JobDefinitionArn")
    jobDefinitionArn: monitoringJobDefinitionArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeModelQualityJobDefinitionCommand"
  let make = (~jobDefinitionName, ()) => new({jobDefinitionName: jobDefinitionName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeModelExplainabilityJobDefinition = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the model explainability job definition. The name must be unique within an
         Amazon Web Services Region in the Amazon Web Services account.</p>")
    @as("JobDefinitionName")
    jobDefinitionName: monitoringJobDefinitionName,
  }
  type response = {
    @as("StoppingCondition") stoppingCondition: option<monitoringStoppingCondition>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that
         has read permission to the input data location and write permission to the output data
         location in Amazon S3.</p>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>Networking options for a model explainability job.</p>") @as("NetworkConfig")
    networkConfig: option<monitoringNetworkConfig>,
    @as("JobResources") jobResources: monitoringResources,
    @as("ModelExplainabilityJobOutputConfig")
    modelExplainabilityJobOutputConfig: monitoringOutputConfig,
    @ocaml.doc("<p>Inputs for the model explainability job.</p>") @as("ModelExplainabilityJobInput")
    modelExplainabilityJobInput: modelExplainabilityJobInput,
    @ocaml.doc("<p>Configures the model explainability job to run a specified Docker container
         image.</p>")
    @as("ModelExplainabilityAppSpecification")
    modelExplainabilityAppSpecification: modelExplainabilityAppSpecification,
    @ocaml.doc("<p>The baseline configuration for a model explainability job.</p>")
    @as("ModelExplainabilityBaselineConfig")
    modelExplainabilityBaselineConfig: option<modelExplainabilityBaselineConfig>,
    @ocaml.doc("<p>The time at which the model explainability job was created.</p>")
    @as("CreationTime")
    creationTime: timestamp_,
    @ocaml.doc("<p>The name of the explainability job definition. The name must be unique within an Amazon Web Services
         Region in the Amazon Web Services account.</p>")
    @as("JobDefinitionName")
    jobDefinitionName: monitoringJobDefinitionName,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model explainability job.</p>")
    @as("JobDefinitionArn")
    jobDefinitionArn: monitoringJobDefinitionArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeModelExplainabilityJobDefinitionCommand"
  let make = (~jobDefinitionName, ()) => new({jobDefinitionName: jobDefinitionName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeModelBiasJobDefinition = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the model bias job definition. The name must be unique within an Amazon Web Services Region
         in the Amazon Web Services account.</p>")
    @as("JobDefinitionName")
    jobDefinitionName: monitoringJobDefinitionName,
  }
  type response = {
    @as("StoppingCondition") stoppingCondition: option<monitoringStoppingCondition>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that
         has read permission to the input data location and write permission to the output data
         location in Amazon S3.</p>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>Networking options for a model bias job.</p>") @as("NetworkConfig")
    networkConfig: option<monitoringNetworkConfig>,
    @as("JobResources") jobResources: monitoringResources,
    @as("ModelBiasJobOutputConfig") modelBiasJobOutputConfig: monitoringOutputConfig,
    @ocaml.doc("<p>Inputs for the model bias job.</p>") @as("ModelBiasJobInput")
    modelBiasJobInput: modelBiasJobInput,
    @ocaml.doc("<p>Configures the model bias job to run a specified Docker container image.</p>")
    @as("ModelBiasAppSpecification")
    modelBiasAppSpecification: modelBiasAppSpecification,
    @ocaml.doc("<p>The baseline configuration for a model bias job.</p>")
    @as("ModelBiasBaselineConfig")
    modelBiasBaselineConfig: option<modelBiasBaselineConfig>,
    @ocaml.doc("<p>The time at which the model bias job was created.</p>") @as("CreationTime")
    creationTime: timestamp_,
    @ocaml.doc("<p>The name of the bias job definition. The name must be unique within an Amazon Web Services Region in the
         Amazon Web Services account.</p>")
    @as("JobDefinitionName")
    jobDefinitionName: monitoringJobDefinitionName,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model bias job.</p>")
    @as("JobDefinitionArn")
    jobDefinitionArn: monitoringJobDefinitionArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeModelBiasJobDefinitionCommand"
  let make = (~jobDefinitionName, ()) => new({jobDefinitionName: jobDefinitionName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeModel = {
  type t
  type request = {@ocaml.doc("<p>The name of the model.</p>") @as("ModelName") modelName: modelName}
  type response = {
    @ocaml.doc("<p>If <code>True</code>, no inbound or outbound network calls can be made to or from the
            model container.</p>")
    @as("EnableNetworkIsolation")
    enableNetworkIsolation: option<boolean_>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model.</p>") @as("ModelArn")
    modelArn: modelArn,
    @ocaml.doc("<p>A timestamp that shows when the model was created.</p>") @as("CreationTime")
    creationTime: timestamp_,
    @ocaml.doc("<p>A <a>VpcConfig</a> object that specifies the VPC that this model has access
            to. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html\">Protect Endpoints by Using an Amazon Virtual
                Private Cloud</a>
         </p>")
    @as("VpcConfig")
    vpcConfig: option<vpcConfig>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the IAM role that you specified for the
            model.</p>")
    @as("ExecutionRoleArn")
    executionRoleArn: roleArn,
    @ocaml.doc(
      "<p>Specifies details of how containers in a multi-container endpoint are called.</p>"
    )
    @as("InferenceExecutionConfig")
    inferenceExecutionConfig: option<inferenceExecutionConfig>,
    @ocaml.doc("<p>The containers in the inference pipeline.</p>") @as("Containers")
    containers: option<containerDefinitionList>,
    @ocaml.doc("<p>The location of the primary inference code, associated artifacts, and custom
            environment map that the inference code uses when it is deployed in production.
        </p>")
    @as("PrimaryContainer")
    primaryContainer: option<containerDefinition>,
    @ocaml.doc("<p>Name of the Amazon SageMaker model.</p>") @as("ModelName") modelName: modelName,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DescribeModelCommand"
  let make = (~modelName, ()) => new({modelName: modelName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeDomain = {
  type t
  type request = {@ocaml.doc("<p>The domain ID.</p>") @as("DomainId") domainId: domainId}
  type response = {
    @ocaml.doc(
      "<p>The ID of the security group that authorizes traffic between the <code>RSessionGateway</code> apps and the <code>RStudioServerPro</code> app.</p>"
    )
    @as("SecurityGroupIdForDomainBoundary")
    securityGroupIdForDomainBoundary: option<securityGroupId>,
    @ocaml.doc("<p>The entity that creates and manages the required security groups for inter-app communication in <code>VPCOnly</code> mode. 
            Required when <code>CreateDomain.AppNetworkAccessType</code> is <code>VPCOnly</code> and <code>DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn</code> is provided.</p>")
    @as("AppSecurityGroupManagement")
    appSecurityGroupManagement: option<appSecurityGroupManagement>,
    @ocaml.doc("<p>A collection of <code>Domain</code> settings.</p>") @as("DomainSettings")
    domainSettings: option<domainSettings>,
    @ocaml.doc("<p>The Amazon Web Services KMS customer managed key used to encrypt
         the EFS volume attached to the domain.</p>")
    @as("KmsKeyId")
    kmsKeyId: option<kmsKeyId>,
    @ocaml.doc(
      "<p>The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.</p>"
    )
    @as("VpcId")
    vpcId: option<vpcId>,
    @ocaml.doc("<p>The domain's URL.</p>") @as("Url") url: option<string1024>,
    @ocaml.doc("<p>The VPC subnets that Studio uses for communication.</p>") @as("SubnetIds")
    subnetIds: option<subnets>,
    @ocaml.doc("<p>Use <code>KmsKeyId</code>.</p>") @as("HomeEfsFileSystemKmsKeyId")
    homeEfsFileSystemKmsKeyId: option<kmsKeyId>,
    @ocaml.doc("<p>Specifies the VPC used for non-EFS traffic. The default value is
        <code>PublicInternetOnly</code>.</p>
         <ul>
            <li>
               <p>
                  <code>PublicInternetOnly</code> - Non-EFS traffic is through a VPC managed by
            Amazon SageMaker, which allows direct internet access</p>
            </li>
            <li>
               <p>
                  <code>VpcOnly</code> - All Studio traffic is through the specified VPC and subnets</p>
            </li>
         </ul>")
    @as("AppNetworkAccessType")
    appNetworkAccessType: option<appNetworkAccessType>,
    @ocaml.doc("<p>Settings which are applied to UserProfiles in this domain if settings are not explicitly specified
           in a given UserProfile.
       </p>")
    @as("DefaultUserSettings")
    defaultUserSettings: option<userSettings>,
    @ocaml.doc("<p>The domain's authentication mode.</p>") @as("AuthMode")
    authMode: option<authMode>,
    @ocaml.doc("<p>The failure reason.</p>") @as("FailureReason")
    failureReason: option<failureReason>,
    @ocaml.doc("<p>The last modified time.</p>") @as("LastModifiedTime")
    lastModifiedTime: option<lastModifiedTime>,
    @ocaml.doc("<p>The creation time.</p>") @as("CreationTime") creationTime: option<creationTime>,
    @ocaml.doc("<p>The status.</p>") @as("Status") status: option<domainStatus>,
    @ocaml.doc("<p>The SSO managed application instance ID.</p>")
    @as("SingleSignOnManagedApplicationInstanceId")
    singleSignOnManagedApplicationInstanceId: option<string256>,
    @ocaml.doc("<p>The ID of the Amazon Elastic File System (EFS) managed by this Domain.</p>")
    @as("HomeEfsFileSystemId")
    homeEfsFileSystemId: option<resourceId>,
    @ocaml.doc("<p>The domain name.</p>") @as("DomainName") domainName: option<domainName>,
    @ocaml.doc("<p>The domain ID.</p>") @as("DomainId") domainId: option<domainId>,
    @ocaml.doc("<p>The domain's Amazon Resource Name (ARN).</p>") @as("DomainArn")
    domainArn: option<domainArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DescribeDomainCommand"
  let make = (~domainId, ()) => new({domainId: domainId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeDataQualityJobDefinition = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the data quality monitoring job definition to describe.</p>")
    @as("JobDefinitionName")
    jobDefinitionName: monitoringJobDefinitionName,
  }
  type response = {
    @as("StoppingCondition") stoppingCondition: option<monitoringStoppingCondition>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to
         perform tasks on your behalf.</p>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>The networking configuration for the data quality monitoring job.</p>")
    @as("NetworkConfig")
    networkConfig: option<monitoringNetworkConfig>,
    @as("JobResources") jobResources: monitoringResources,
    @as("DataQualityJobOutputConfig") dataQualityJobOutputConfig: monitoringOutputConfig,
    @ocaml.doc("<p>The list of inputs for the data quality monitoring job. Currently endpoints are
         supported.</p>")
    @as("DataQualityJobInput")
    dataQualityJobInput: dataQualityJobInput,
    @ocaml.doc("<p>Information about the container that runs the data quality monitoring job.</p>")
    @as("DataQualityAppSpecification")
    dataQualityAppSpecification: dataQualityAppSpecification,
    @ocaml.doc(
      "<p>The constraints and baselines for the data quality monitoring job definition.</p>"
    )
    @as("DataQualityBaselineConfig")
    dataQualityBaselineConfig: option<dataQualityBaselineConfig>,
    @ocaml.doc("<p>The time that the data quality monitoring job definition was created.</p>")
    @as("CreationTime")
    creationTime: timestamp_,
    @ocaml.doc("<p>The name of the data quality monitoring job definition.</p>")
    @as("JobDefinitionName")
    jobDefinitionName: monitoringJobDefinitionName,
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) of the data quality monitoring job definition.</p>"
    )
    @as("JobDefinitionArn")
    jobDefinitionArn: monitoringJobDefinitionArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeDataQualityJobDefinitionCommand"
  let make = (~jobDefinitionName, ()) => new({jobDefinitionName: jobDefinitionName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeAutoMLJob = {
  type t
  type request = {
    @ocaml.doc("<p>Requests information about an AutoML job using its unique name.</p>")
    @as("AutoMLJobName")
    autoMLJobName: autoMLJobName,
  }
  type response = {
    @ocaml.doc("<p>Provides information about endpoint for the model deployment.</p>")
    @as("ModelDeployResult")
    modelDeployResult: option<modelDeployResult>,
    @ocaml.doc("<p>Indicates whether the model was deployed automatically to an endpoint and the name of
         that endpoint if deployed automatically.</p>")
    @as("ModelDeployConfig")
    modelDeployConfig: option<modelDeployConfig>,
    @ocaml.doc("<p>This contains <code>ProblemType</code>, <code>AutoMLJobObjective</code>, and
            <code>CompletionCriteria</code>. If you do not provide these values, they are
         auto-inferred. If you do provide them, the values used are the ones you provide.</p>")
    @as("ResolvedAttributes")
    resolvedAttributes: option<resolvedAttributes>,
    @ocaml.doc("<p>Returns information on the job's artifacts found in
         <code>AutoMLJobArtifacts</code>.</p>")
    @as("AutoMLJobArtifacts")
    autoMLJobArtifacts: option<autoMLJobArtifacts>,
    @ocaml.doc("<p>Indicates whether the output for an AutoML job generates candidate definitions
         only.</p>")
    @as("GenerateCandidateDefinitionsOnly")
    generateCandidateDefinitionsOnly: option<generateCandidateDefinitionsOnly>,
    @ocaml.doc("<p>Returns the secondary status of the AutoML job.</p>")
    @as("AutoMLJobSecondaryStatus")
    autoMLJobSecondaryStatus: autoMLJobSecondaryStatus,
    @ocaml.doc("<p>Returns the status of the AutoML job.</p>") @as("AutoMLJobStatus")
    autoMLJobStatus: autoMLJobStatus,
    @ocaml.doc("<p>Returns the job's best <code>AutoMLCandidate</code>.</p>") @as("BestCandidate")
    bestCandidate: option<autoMLCandidate>,
    @ocaml.doc("<p>Returns a list of reasons for partial failures within an AutoML job.</p>")
    @as("PartialFailureReasons")
    partialFailureReasons: option<autoMLPartialFailureReasons>,
    @ocaml.doc("<p>Returns the failure reason for an AutoML job, when applicable.</p>")
    @as("FailureReason")
    failureReason: option<autoMLFailureReason>,
    @ocaml.doc("<p>Returns the job's last modified time.</p>") @as("LastModifiedTime")
    lastModifiedTime: timestamp_,
    @ocaml.doc("<p>Returns the end time of the AutoML job.</p>") @as("EndTime")
    endTime: option<timestamp_>,
    @ocaml.doc("<p>Returns the creation time of the AutoML job.</p>") @as("CreationTime")
    creationTime: timestamp_,
    @ocaml.doc("<p>Returns the configuration for the AutoML job.</p>") @as("AutoMLJobConfig")
    autoMLJobConfig: option<autoMLJobConfig>,
    @ocaml.doc("<p>Returns the job's problem type.</p>") @as("ProblemType")
    problemType: option<problemType>,
    @ocaml.doc("<p>Returns the job's objective.</p>") @as("AutoMLJobObjective")
    autoMLJobObjective: option<autoMLJobObjective>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that
         has read permission to the input data location and write permission to the output data
         location in Amazon S3.</p>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>Returns the job's output data config.</p>") @as("OutputDataConfig")
    outputDataConfig: autoMLOutputDataConfig,
    @ocaml.doc("<p>Returns the input data configuration for the AutoML job..</p>")
    @as("InputDataConfig")
    inputDataConfig: autoMLInputDataConfig,
    @ocaml.doc("<p>Returns the ARN of the AutoML job.</p>") @as("AutoMLJobArn")
    autoMLJobArn: autoMLJobArn,
    @ocaml.doc("<p>Returns the name of the AutoML job.</p>") @as("AutoMLJobName")
    autoMLJobName: autoMLJobName,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DescribeAutoMLJobCommand"
  let make = (~autoMLJobName, ()) => new({autoMLJobName: autoMLJobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateWorkteam = {
  type t
  type request = {
    @ocaml.doc("<p>An array of key-value pairs.</p>
        <p>For more information, see <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html\">Resource
                Tag</a> and <a href=\"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what\">Using
                    Cost Allocation Tags</a> in the <i> Amazon Web Services Billing and Cost Management User
                Guide</i>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc(
      "<p>Configures notification of workers regarding available or expiring work items.</p>"
    )
    @as("NotificationConfiguration")
    notificationConfiguration: option<notificationConfiguration>,
    @ocaml.doc("<p>A description of the work team.</p>") @as("Description") description: string200,
    @ocaml.doc("<p>A list of <code>MemberDefinition</code> objects that contains objects that identify
            the workers that make up the work team. </p>
        <p>Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For
            private workforces created using Amazon Cognito use <code>CognitoMemberDefinition</code>. For
            workforces created using your own OIDC identity provider (IdP) use
                <code>OidcMemberDefinition</code>. Do not provide input for both of these parameters
            in a single request.</p>
        <p>For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito
                <i>user groups</i> within the user pool used to create a workforce. All of the
                <code>CognitoMemberDefinition</code> objects that make up the member definition must
            have the same <code>ClientId</code> and <code>UserPool</code> values. To add a Amazon
            Cognito user group to an existing worker pool, see <a href=\"\">Adding groups to a User
                Pool</a>. For more information about user pools, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html\">Amazon Cognito User
                Pools</a>.</p>
        <p>For workforces created using your own OIDC IdP, specify the user groups that you want to 
        include in your private work team in <code>OidcMemberDefinition</code> by listing those groups
        in <code>Groups</code>.</p>")
    @as("MemberDefinitions")
    memberDefinitions: memberDefinitions,
    @ocaml.doc("<p>The name of the workforce.</p>") @as("WorkforceName")
    workforceName: option<workforceName>,
    @ocaml.doc("<p>The name of the work team. Use this name to identify the work team.</p>")
    @as("WorkteamName")
    workteamName: workteamName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the work team. You can use this ARN to identify the
            work team.</p>")
    @as("WorkteamArn")
    workteamArn: option<workteamArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateWorkteamCommand"
  let make = (
    ~description,
    ~memberDefinitions,
    ~workteamName,
    ~tags=?,
    ~notificationConfiguration=?,
    ~workforceName=?,
    (),
  ) =>
    new({
      tags,
      notificationConfiguration,
      description,
      memberDefinitions,
      workforceName,
      workteamName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateUserProfile = {
  type t
  type request = {
    @ocaml.doc("<p>A collection of settings.</p>") @as("UserSettings")
    userSettings: option<userSettings>,
    @ocaml.doc("<p>Each tag consists of a key and an optional value.
         Tag keys must be unique per resource.</p>
         <p>Tags that you specify for the User Profile are also added to all Apps that the
          User Profile launches.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The username of the associated Amazon Web Services Single Sign-On User for this UserProfile.  If the Domain's AuthMode is SSO, this field is
           required, and must match a valid username of a user in your directory.  If the Domain's AuthMode is not SSO, this field cannot be specified.
       </p>")
    @as("SingleSignOnUserValue")
    singleSignOnUserValue: option<string256>,
    @ocaml.doc("<p>A specifier for the type of value specified in SingleSignOnUserValue.  Currently, the only supported value is \"UserName\".
           If the Domain's AuthMode is SSO, this field is required.  If the Domain's AuthMode is not SSO, this field cannot be specified.
       </p>")
    @as("SingleSignOnUserIdentifier")
    singleSignOnUserIdentifier: option<singleSignOnUserIdentifier>,
    @ocaml.doc("<p>A name for the UserProfile. This value is not case sensitive.</p>")
    @as("UserProfileName")
    userProfileName: userProfileName,
    @ocaml.doc("<p>The ID of the associated Domain.</p>") @as("DomainId") domainId: domainId,
  }
  type response = {
    @ocaml.doc("<p>The user profile Amazon Resource Name (ARN).</p>") @as("UserProfileArn")
    userProfileArn: option<userProfileArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateUserProfileCommand"
  let make = (
    ~userProfileName,
    ~domainId,
    ~userSettings=?,
    ~tags=?,
    ~singleSignOnUserValue=?,
    ~singleSignOnUserIdentifier=?,
    (),
  ) =>
    new({
      userSettings,
      tags,
      singleSignOnUserValue,
      singleSignOnUserIdentifier,
      userProfileName,
      domainId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateProcessingJob = {
  type t
  type request = {
    @as("ExperimentConfig") experimentConfig: option<experimentConfig>,
    @ocaml.doc("<p>(Optional) An array of key-value pairs. For more information, see <a href=\"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL\">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
                User Guide</i>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on
            your behalf.</p>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>Networking options for a processing job, such as whether to allow inbound and 
            outbound network calls to and from processing containers, and the VPC subnets and 
            security groups to use for VPC-enabled processing jobs.</p>")
    @as("NetworkConfig")
    networkConfig: option<networkConfig>,
    @ocaml.doc("<p>The environment variables to set in the Docker container. Up to 
            100 key and values entries in the map are supported.</p>")
    @as("Environment")
    environment: option<processingEnvironmentMap>,
    @ocaml.doc("<p>Configures the processing job to run a specified Docker container image.</p>")
    @as("AppSpecification")
    appSpecification: appSpecification,
    @ocaml.doc("<p>The time limit for how long the processing job is allowed to run.</p>")
    @as("StoppingCondition")
    stoppingCondition: option<processingStoppingCondition>,
    @ocaml.doc("<p>Identifies the resources, ML compute instances, and ML storage volumes to deploy for a
            processing job. In distributed training, you specify more than one instance.</p>")
    @as("ProcessingResources")
    processingResources: processingResources,
    @ocaml.doc("<p> The name of the processing job. The name must be unique within an Amazon Web Services Region in the
            Amazon Web Services account.</p>")
    @as("ProcessingJobName")
    processingJobName: processingJobName,
    @ocaml.doc("<p>Output configuration for the processing job.</p>") @as("ProcessingOutputConfig")
    processingOutputConfig: option<processingOutputConfig>,
    @ocaml.doc("<p>An array of inputs configuring the data to download into the 
            processing container.</p>")
    @as("ProcessingInputs")
    processingInputs: option<processingInputs>,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the processing job.</p>")
    @as("ProcessingJobArn")
    processingJobArn: processingJobArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateProcessingJobCommand"
  let make = (
    ~roleArn,
    ~appSpecification,
    ~processingResources,
    ~processingJobName,
    ~experimentConfig=?,
    ~tags=?,
    ~networkConfig=?,
    ~environment=?,
    ~stoppingCondition=?,
    ~processingOutputConfig=?,
    ~processingInputs=?,
    (),
  ) =>
    new({
      experimentConfig,
      tags,
      roleArn,
      networkConfig,
      environment,
      appSpecification,
      stoppingCondition,
      processingResources,
      processingJobName,
      processingOutputConfig,
      processingInputs,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateModelQualityJobDefinition = {
  type t
  type request = {
    @ocaml.doc("<p>(Optional) An array of key-value pairs. For more information, see <a href=\"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL\">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
            User Guide</i>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @as("StoppingCondition") stoppingCondition: option<monitoringStoppingCondition>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to
         perform tasks on your behalf.</p>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>Specifies the network configuration for the monitoring job.</p>")
    @as("NetworkConfig")
    networkConfig: option<monitoringNetworkConfig>,
    @as("JobResources") jobResources: monitoringResources,
    @as("ModelQualityJobOutputConfig") modelQualityJobOutputConfig: monitoringOutputConfig,
    @ocaml.doc("<p>A list of the inputs that are monitored. Currently endpoints are supported.</p>")
    @as("ModelQualityJobInput")
    modelQualityJobInput: modelQualityJobInput,
    @ocaml.doc("<p>The container that runs the monitoring job.</p>")
    @as("ModelQualityAppSpecification")
    modelQualityAppSpecification: modelQualityAppSpecification,
    @ocaml.doc("<p>Specifies the constraints and baselines for the monitoring job.</p>")
    @as("ModelQualityBaselineConfig")
    modelQualityBaselineConfig: option<modelQualityBaselineConfig>,
    @ocaml.doc("<p>The name of the monitoring job definition.</p>") @as("JobDefinitionName")
    jobDefinitionName: monitoringJobDefinitionName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model quality monitoring job.</p>")
    @as("JobDefinitionArn")
    jobDefinitionArn: monitoringJobDefinitionArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateModelQualityJobDefinitionCommand"
  let make = (
    ~roleArn,
    ~jobResources,
    ~modelQualityJobOutputConfig,
    ~modelQualityJobInput,
    ~modelQualityAppSpecification,
    ~jobDefinitionName,
    ~tags=?,
    ~stoppingCondition=?,
    ~networkConfig=?,
    ~modelQualityBaselineConfig=?,
    (),
  ) =>
    new({
      tags,
      stoppingCondition,
      roleArn,
      networkConfig,
      jobResources,
      modelQualityJobOutputConfig,
      modelQualityJobInput,
      modelQualityAppSpecification,
      modelQualityBaselineConfig,
      jobDefinitionName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateModelExplainabilityJobDefinition = {
  type t
  type request = {
    @ocaml.doc("<p>(Optional) An array of key-value pairs. For more information, see <a href=\"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL\">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
            User Guide</i>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @as("StoppingCondition") stoppingCondition: option<monitoringStoppingCondition>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to
         perform tasks on your behalf.</p>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>Networking options for a model explainability job.</p>") @as("NetworkConfig")
    networkConfig: option<monitoringNetworkConfig>,
    @as("JobResources") jobResources: monitoringResources,
    @as("ModelExplainabilityJobOutputConfig")
    modelExplainabilityJobOutputConfig: monitoringOutputConfig,
    @ocaml.doc("<p>Inputs for the model explainability job.</p>") @as("ModelExplainabilityJobInput")
    modelExplainabilityJobInput: modelExplainabilityJobInput,
    @ocaml.doc("<p>Configures the model explainability job to run a specified Docker container
         image.</p>")
    @as("ModelExplainabilityAppSpecification")
    modelExplainabilityAppSpecification: modelExplainabilityAppSpecification,
    @ocaml.doc("<p>The baseline configuration for a model explainability job.</p>")
    @as("ModelExplainabilityBaselineConfig")
    modelExplainabilityBaselineConfig: option<modelExplainabilityBaselineConfig>,
    @ocaml.doc("<p> The name of the model explainability job definition. The name must be unique within an
         Amazon Web Services Region in the Amazon Web Services account.</p>")
    @as("JobDefinitionName")
    jobDefinitionName: monitoringJobDefinitionName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model explainability job.</p>")
    @as("JobDefinitionArn")
    jobDefinitionArn: monitoringJobDefinitionArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateModelExplainabilityJobDefinitionCommand"
  let make = (
    ~roleArn,
    ~jobResources,
    ~modelExplainabilityJobOutputConfig,
    ~modelExplainabilityJobInput,
    ~modelExplainabilityAppSpecification,
    ~jobDefinitionName,
    ~tags=?,
    ~stoppingCondition=?,
    ~networkConfig=?,
    ~modelExplainabilityBaselineConfig=?,
    (),
  ) =>
    new({
      tags,
      stoppingCondition,
      roleArn,
      networkConfig,
      jobResources,
      modelExplainabilityJobOutputConfig,
      modelExplainabilityJobInput,
      modelExplainabilityAppSpecification,
      modelExplainabilityBaselineConfig,
      jobDefinitionName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateModelBiasJobDefinition = {
  type t
  type request = {
    @ocaml.doc("<p>(Optional) An array of key-value pairs. For more information, see <a href=\"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL\">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
            User Guide</i>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @as("StoppingCondition") stoppingCondition: option<monitoringStoppingCondition>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to
         perform tasks on your behalf.</p>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>Networking options for a model bias job.</p>") @as("NetworkConfig")
    networkConfig: option<monitoringNetworkConfig>,
    @as("JobResources") jobResources: monitoringResources,
    @as("ModelBiasJobOutputConfig") modelBiasJobOutputConfig: monitoringOutputConfig,
    @ocaml.doc("<p>Inputs for the model bias job.</p>") @as("ModelBiasJobInput")
    modelBiasJobInput: modelBiasJobInput,
    @ocaml.doc("<p>Configures the model bias job to run a specified Docker container image.</p>")
    @as("ModelBiasAppSpecification")
    modelBiasAppSpecification: modelBiasAppSpecification,
    @ocaml.doc("<p>The baseline configuration for a model bias job.</p>")
    @as("ModelBiasBaselineConfig")
    modelBiasBaselineConfig: option<modelBiasBaselineConfig>,
    @ocaml.doc("<p>The name of the bias job definition. The name must be unique within an Amazon Web Services Region in the
         Amazon Web Services account.</p>")
    @as("JobDefinitionName")
    jobDefinitionName: monitoringJobDefinitionName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model bias job.</p>")
    @as("JobDefinitionArn")
    jobDefinitionArn: monitoringJobDefinitionArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateModelBiasJobDefinitionCommand"
  let make = (
    ~roleArn,
    ~jobResources,
    ~modelBiasJobOutputConfig,
    ~modelBiasJobInput,
    ~modelBiasAppSpecification,
    ~jobDefinitionName,
    ~tags=?,
    ~stoppingCondition=?,
    ~networkConfig=?,
    ~modelBiasBaselineConfig=?,
    (),
  ) =>
    new({
      tags,
      stoppingCondition,
      roleArn,
      networkConfig,
      jobResources,
      modelBiasJobOutputConfig,
      modelBiasJobInput,
      modelBiasAppSpecification,
      modelBiasBaselineConfig,
      jobDefinitionName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateModel = {
  type t
  type request = {
    @ocaml.doc("<p>Isolates the model container. No inbound or outbound network calls can be made to or
            from the model container.</p>")
    @as("EnableNetworkIsolation")
    enableNetworkIsolation: option<boolean_>,
    @ocaml.doc("<p>A <a>VpcConfig</a> object that specifies the VPC that you want your model
            to connect to. Control access to and from your model container by configuring the VPC.
                <code>VpcConfig</code> is used in hosting services and in batch transform. For more
            information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html\">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/batch-vpc.html\">Protect Data in Batch
                Transform Jobs by Using an Amazon Virtual Private Cloud</a>.</p>")
    @as("VpcConfig")
    vpcConfig: option<vpcConfig>,
    @ocaml.doc("<p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
            different ways, for example, by purpose, owner, or environment. For more information,
            see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
                Resources</a>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker can assume to access model
            artifacts and docker image for deployment on ML compute instances or for batch transform
            jobs. Deploying on ML compute instances is part of model hosting. For more information,
            see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html\">Amazon SageMaker
                Roles</a>. </p>
        <note>
            <p>To be able to pass this role to Amazon SageMaker, the caller of this API must have the
                    <code>iam:PassRole</code> permission.</p>
        </note>")
    @as("ExecutionRoleArn")
    executionRoleArn: roleArn,
    @ocaml.doc(
      "<p>Specifies details of how containers in a multi-container endpoint are called.</p>"
    )
    @as("InferenceExecutionConfig")
    inferenceExecutionConfig: option<inferenceExecutionConfig>,
    @ocaml.doc("<p>Specifies the containers in the inference pipeline.</p>") @as("Containers")
    containers: option<containerDefinitionList>,
    @ocaml.doc("<p>The location of the primary docker image containing inference code, associated
            artifacts, and custom environment map that the inference code uses when the model is
            deployed for predictions. </p>")
    @as("PrimaryContainer")
    primaryContainer: option<containerDefinition>,
    @ocaml.doc("<p>The name of the new model.</p>") @as("ModelName") modelName: modelName,
  }
  type response = {
    @ocaml.doc("<p>The ARN of the model created in Amazon SageMaker.</p>") @as("ModelArn")
    modelArn: modelArn,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateModelCommand"
  let make = (
    ~executionRoleArn,
    ~modelName,
    ~enableNetworkIsolation=?,
    ~vpcConfig=?,
    ~tags=?,
    ~inferenceExecutionConfig=?,
    ~containers=?,
    ~primaryContainer=?,
    (),
  ) =>
    new({
      enableNetworkIsolation,
      vpcConfig,
      tags,
      executionRoleArn,
      inferenceExecutionConfig,
      containers,
      primaryContainer,
      modelName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateEndpoint = {
  type t
  type request = {
    @ocaml.doc("<p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
            different ways, for example, by purpose, owner, or environment. For more information,
            see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
                Resources</a>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @as("DeploymentConfig") deploymentConfig: option<deploymentConfig>,
    @ocaml.doc(
      "<p>The name of an endpoint configuration. For more information, see <a>CreateEndpointConfig</a>. </p>"
    )
    @as("EndpointConfigName")
    endpointConfigName: endpointConfigName,
    @ocaml.doc("<p>The name of the endpoint.The name must be unique within an Amazon Web Services Region in your Amazon Web Services
            account. The name is case-insensitive in <code>CreateEndpoint</code>, but the case is
            preserved and must be matched in .</p>")
    @as("EndpointName")
    endpointName: endpointName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the endpoint.</p>") @as("EndpointArn")
    endpointArn: endpointArn,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateEndpointCommand"
  let make = (~endpointConfigName, ~endpointName, ~tags=?, ~deploymentConfig=?, ()) =>
    new({tags, deploymentConfig, endpointConfigName, endpointName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateDomain = {
  type t
  type request = {
    @ocaml.doc("<p>A collection of <code>Domain</code> settings.</p>") @as("DomainSettings")
    domainSettings: option<domainSettings>,
    @ocaml.doc("<p>The entity that creates and manages the required security groups for inter-app
            communication in <code>VPCOnly</code> mode. Required when
            <code>CreateDomain.AppNetworkAccessType</code> is <code>VPCOnly</code> and
            <code>DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn</code> is
            provided.</p>")
    @as("AppSecurityGroupManagement")
    appSecurityGroupManagement: option<appSecurityGroupManagement>,
    @ocaml.doc("<p>SageMaker uses Amazon Web Services KMS to encrypt the EFS volume attached to the domain with an Amazon Web Services managed
         key by default. For more control, specify a customer managed key.</p>")
    @as("KmsKeyId")
    kmsKeyId: option<kmsKeyId>,
    @ocaml.doc("<p>Use <code>KmsKeyId</code>.</p>") @as("HomeEfsFileSystemKmsKeyId")
    homeEfsFileSystemKmsKeyId: option<kmsKeyId>,
    @ocaml.doc("<p>Specifies the VPC used for non-EFS traffic. The default value is
        <code>PublicInternetOnly</code>.</p>
         <ul>
            <li>
               <p>
                  <code>PublicInternetOnly</code> - Non-EFS traffic is through a VPC managed by
            Amazon SageMaker, which allows direct internet access</p>
            </li>
            <li>
               <p>
                  <code>VpcOnly</code> - All Studio traffic is through the specified VPC and subnets</p>
            </li>
         </ul>")
    @as("AppNetworkAccessType")
    appNetworkAccessType: option<appNetworkAccessType>,
    @ocaml.doc("<p>Tags to associated with the Domain. Each tag consists of a key and an optional value.
         Tag keys must be unique per resource. Tags are searchable using the
         <code>Search</code> API.</p>
         <p>Tags that you specify for the Domain are also added to all Apps that the
          Domain launches.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc(
      "<p>The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.</p>"
    )
    @as("VpcId")
    vpcId: vpcId,
    @ocaml.doc("<p>The VPC subnets that Studio uses for communication.</p>") @as("SubnetIds")
    subnetIds: subnets,
    @ocaml.doc("<p>The default settings to use to create a user profile when <code>UserSettings</code> isn't specified
         in the call to the <code>CreateUserProfile</code> API.</p>
         <p>
            <code>SecurityGroups</code> is aggregated when specified in both calls. For all other
         settings in <code>UserSettings</code>, the values specified in <code>CreateUserProfile</code>
         take precedence over those specified in <code>CreateDomain</code>.</p>")
    @as("DefaultUserSettings")
    defaultUserSettings: userSettings,
    @ocaml.doc("<p>The mode of authentication that members use to access the domain.</p>")
    @as("AuthMode")
    authMode: authMode,
    @ocaml.doc("<p>A name for the domain.</p>") @as("DomainName") domainName: domainName,
  }
  type response = {
    @ocaml.doc("<p>The URL to the created domain.</p>") @as("Url") url: option<string1024>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the created domain.</p>") @as("DomainArn")
    domainArn: option<domainArn>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateDomainCommand"
  let make = (
    ~vpcId,
    ~subnetIds,
    ~defaultUserSettings,
    ~authMode,
    ~domainName,
    ~domainSettings=?,
    ~appSecurityGroupManagement=?,
    ~kmsKeyId=?,
    ~homeEfsFileSystemKmsKeyId=?,
    ~appNetworkAccessType=?,
    ~tags=?,
    (),
  ) =>
    new({
      domainSettings,
      appSecurityGroupManagement,
      kmsKeyId,
      homeEfsFileSystemKmsKeyId,
      appNetworkAccessType,
      tags,
      vpcId,
      subnetIds,
      defaultUserSettings,
      authMode,
      domainName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateDataQualityJobDefinition = {
  type t
  type request = {
    @ocaml.doc("<p>(Optional) An array of key-value pairs. For more information, see <a href=\"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL\">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
            User Guide</i>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @as("StoppingCondition") stoppingCondition: option<monitoringStoppingCondition>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to
         perform tasks on your behalf.</p>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>Specifies networking configuration for the monitoring job.</p>")
    @as("NetworkConfig")
    networkConfig: option<monitoringNetworkConfig>,
    @as("JobResources") jobResources: monitoringResources,
    @as("DataQualityJobOutputConfig") dataQualityJobOutputConfig: monitoringOutputConfig,
    @ocaml.doc("<p>A list of inputs for the monitoring job. Currently endpoints are supported as monitoring
         inputs.</p>")
    @as("DataQualityJobInput")
    dataQualityJobInput: dataQualityJobInput,
    @ocaml.doc("<p>Specifies the container that runs the monitoring job.</p>")
    @as("DataQualityAppSpecification")
    dataQualityAppSpecification: dataQualityAppSpecification,
    @ocaml.doc("<p>Configures the constraints and baselines for the monitoring job.</p>")
    @as("DataQualityBaselineConfig")
    dataQualityBaselineConfig: option<dataQualityBaselineConfig>,
    @ocaml.doc("<p>The name for the monitoring job definition.</p>") @as("JobDefinitionName")
    jobDefinitionName: monitoringJobDefinitionName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the job definition.</p>")
    @as("JobDefinitionArn")
    jobDefinitionArn: monitoringJobDefinitionArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateDataQualityJobDefinitionCommand"
  let make = (
    ~roleArn,
    ~jobResources,
    ~dataQualityJobOutputConfig,
    ~dataQualityJobInput,
    ~dataQualityAppSpecification,
    ~jobDefinitionName,
    ~tags=?,
    ~stoppingCondition=?,
    ~networkConfig=?,
    ~dataQualityBaselineConfig=?,
    (),
  ) =>
    new({
      tags,
      stoppingCondition,
      roleArn,
      networkConfig,
      jobResources,
      dataQualityJobOutputConfig,
      dataQualityJobInput,
      dataQualityAppSpecification,
      dataQualityBaselineConfig,
      jobDefinitionName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateAutoMLJob = {
  type t
  type request = {
    @ocaml.doc("<p>Specifies how to generate the endpoint name for an automatic one-click Autopilot model
         deployment.</p>")
    @as("ModelDeployConfig")
    modelDeployConfig: option<modelDeployConfig>,
    @ocaml.doc("<p>Each tag consists of a key and an optional value. Tag keys must be unique per
         resource.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>Generates possible candidates without training the models. A candidate is a combination
         of data preprocessors, algorithms, and algorithm parameter settings.</p>")
    @as("GenerateCandidateDefinitionsOnly")
    generateCandidateDefinitionsOnly: option<generateCandidateDefinitionsOnly>,
    @ocaml.doc("<p>The ARN of the role that is used to access the data.</p>") @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>Contains <code>CompletionCriteria</code> and <code>SecurityConfig</code> settings for
         the AutoML job.</p>")
    @as("AutoMLJobConfig")
    autoMLJobConfig: option<autoMLJobConfig>,
    @ocaml.doc("<p>Defines the objective metric used to measure the predictive quality of an AutoML job. You
         provide an <a>AutoMLJobObjective$MetricName</a> and Autopilot infers whether to
         minimize or maximize it.</p>")
    @as("AutoMLJobObjective")
    autoMLJobObjective: option<autoMLJobObjective>,
    @ocaml.doc("<p>Defines the type of supervised learning available for the candidates. Options include:
            <code>BinaryClassification</code>, <code>MulticlassClassification</code>, and
            <code>Regression</code>. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-problem-types.html\">
            Amazon SageMaker Autopilot problem types and algorithm support</a>.</p>")
    @as("ProblemType")
    problemType: option<problemType>,
    @ocaml.doc("<p>Provides information about encryption and the Amazon S3 output path needed to store artifacts
         from an AutoML job. Format(s) supported: CSV.</p>")
    @as("OutputDataConfig")
    outputDataConfig: autoMLOutputDataConfig,
    @ocaml.doc("<p>An array of channel objects that describes the input data and its location. Each channel
         is a named input source. Similar to <code>InputDataConfig</code> supported by . Format(s) supported: CSV. Minimum
         of 500 rows.</p>")
    @as("InputDataConfig")
    inputDataConfig: autoMLInputDataConfig,
    @ocaml.doc("<p>Identifies an Autopilot job. The name must be unique to your account and is
         case-insensitive.</p>")
    @as("AutoMLJobName")
    autoMLJobName: autoMLJobName,
  }
  type response = {
    @ocaml.doc("<p>The unique ARN assigned to the AutoML job when it is created.</p>")
    @as("AutoMLJobArn")
    autoMLJobArn: autoMLJobArn,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateAutoMLJobCommand"
  let make = (
    ~roleArn,
    ~outputDataConfig,
    ~inputDataConfig,
    ~autoMLJobName,
    ~modelDeployConfig=?,
    ~tags=?,
    ~generateCandidateDefinitionsOnly=?,
    ~autoMLJobConfig=?,
    ~autoMLJobObjective=?,
    ~problemType=?,
    (),
  ) =>
    new({
      modelDeployConfig,
      tags,
      generateCandidateDefinitionsOnly,
      roleArn,
      autoMLJobConfig,
      autoMLJobObjective,
      problemType,
      outputDataConfig,
      inputDataConfig,
      autoMLJobName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdateWorkteam = {
  type t
  type request = {
    @ocaml.doc("<p>Configures SNS topic notifications for available or expiring work items</p>")
    @as("NotificationConfiguration")
    notificationConfiguration: option<notificationConfiguration>,
    @ocaml.doc("<p>An updated description for the work team.</p>") @as("Description")
    description: option<string200>,
    @ocaml.doc("<p>A list of <code>MemberDefinition</code> objects that contains objects that identify
            the workers that make up the work team. </p>
        <p>Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). 
            For private workforces created using Amazon Cognito use
            <code>CognitoMemberDefinition</code>. For workforces created using your own OIDC identity
            provider (IdP) use <code>OidcMemberDefinition</code>. You should not provide input
            for both of these parameters in a single request.</p>
        <p>For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito
                <i>user groups</i> within the user pool used to create a workforce. All of the
                <code>CognitoMemberDefinition</code> objects that make up the member definition must
            have the same <code>ClientId</code> and <code>UserPool</code> values. To add a Amazon
            Cognito user group to an existing worker pool, see <a href=\"\">Adding groups to a User
                Pool</a>. For more information about user pools, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html\">Amazon Cognito User
                Pools</a>.</p>
        <p>For workforces created using your own OIDC IdP, specify the user groups that you want
            to include in your private work team in <code>OidcMemberDefinition</code> by listing
            those groups in <code>Groups</code>. Be aware that user groups that are already in the
            work team must also be listed in <code>Groups</code> when you make this request to
            remain on the work team. If you do not include these user groups, they will no longer be
            associated with the work team you update. </p>")
    @as("MemberDefinitions")
    memberDefinitions: option<memberDefinitions>,
    @ocaml.doc("<p>The name of the work team to update.</p>") @as("WorkteamName")
    workteamName: workteamName,
  }
  type response = {
    @ocaml.doc("<p>A <code>Workteam</code> object that describes the updated work team.</p>")
    @as("Workteam")
    workteam: workteam,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "UpdateWorkteamCommand"
  let make = (
    ~workteamName,
    ~notificationConfiguration=?,
    ~description=?,
    ~memberDefinitions=?,
    (),
  ) => new({notificationConfiguration, description, memberDefinitions, workteamName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdateModelPackage = {
  type t
  type request = {
    @ocaml.doc("<p>An array of additional Inference Specification objects to be added to the 
    existing array additional Inference Specification. Total number of additional 
    Inference Specifications can not exceed 15. Each additional Inference Specification 
    specifies artifacts based on this model package that can be used on inference endpoints. 
    Generally used with SageMaker Neo to store the compiled artifacts.</p>")
    @as("AdditionalInferenceSpecificationsToAdd")
    additionalInferenceSpecificationsToAdd: option<additionalInferenceSpecifications>,
    @ocaml.doc(
      "<p>The metadata properties associated with the model package versions to remove.</p>"
    )
    @as("CustomerMetadataPropertiesToRemove")
    customerMetadataPropertiesToRemove: option<customerMetadataKeyList>,
    @ocaml.doc("<p>The metadata properties associated with the model package versions.</p>")
    @as("CustomerMetadataProperties")
    customerMetadataProperties: option<customerMetadataMap>,
    @ocaml.doc("<p>A description for the approval status of the model.</p>")
    @as("ApprovalDescription")
    approvalDescription: option<approvalDescription>,
    @ocaml.doc("<p>The approval status of the model.</p>") @as("ModelApprovalStatus")
    modelApprovalStatus: option<modelApprovalStatus>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model package.</p>") @as("ModelPackageArn")
    modelPackageArn: modelPackageArn,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model.</p>") @as("ModelPackageArn")
    modelPackageArn: modelPackageArn,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "UpdateModelPackageCommand"
  let make = (
    ~modelPackageArn,
    ~additionalInferenceSpecificationsToAdd=?,
    ~customerMetadataPropertiesToRemove=?,
    ~customerMetadataProperties=?,
    ~approvalDescription=?,
    ~modelApprovalStatus=?,
    (),
  ) =>
    new({
      additionalInferenceSpecificationsToAdd,
      customerMetadataPropertiesToRemove,
      customerMetadataProperties,
      approvalDescription,
      modelApprovalStatus,
      modelPackageArn,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListLabelingJobs = {
  type t
  type request = {
    @ocaml.doc("<p>A filter that retrieves only labeling jobs with a specific status.</p>")
    @as("StatusEquals")
    statusEquals: option<labelingJobStatus>,
    @ocaml.doc("<p>The sort order for results. The default is <code>Ascending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>The field to sort results by. The default is <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<sortBy>,
    @ocaml.doc("<p>A string in the labeling job name. This filter returns only labeling jobs whose name
            contains the specified string.</p>")
    @as("NameContains")
    nameContains: option<nameContains>,
    @ocaml.doc("<p>If the result of the previous <code>ListLabelingJobs</code> request was truncated, the
            response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs,
            use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of labeling jobs to return in each page of the response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>A filter that returns only labeling jobs modified before the specified time
            (timestamp).</p>")
    @as("LastModifiedTimeBefore")
    lastModifiedTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only labeling jobs modified after the specified time
            (timestamp).</p>")
    @as("LastModifiedTimeAfter")
    lastModifiedTimeAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only labeling jobs created before the specified time
            (timestamp).</p>")
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only labeling jobs created after the specified time
            (timestamp).</p>")
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
  }
  type response = {
    @ocaml.doc("<p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of
            labeling jobs, use it in the subsequent request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array of <code>LabelingJobSummary</code> objects, each describing a labeling
            job.</p>")
    @as("LabelingJobSummaryList")
    labelingJobSummaryList: option<labelingJobSummaryList>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListLabelingJobsCommand"
  let make = (
    ~statusEquals=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~nameContains=?,
    ~nextToken=?,
    ~maxResults=?,
    ~lastModifiedTimeBefore=?,
    ~lastModifiedTimeAfter=?,
    ~creationTimeBefore=?,
    ~creationTimeAfter=?,
    (),
  ) =>
    new({
      statusEquals,
      sortOrder,
      sortBy,
      nameContains,
      nextToken,
      maxResults,
      lastModifiedTimeBefore,
      lastModifiedTimeAfter,
      creationTimeBefore,
      creationTimeAfter,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListCandidatesForAutoMLJob = {
  type t
  type request = {
    @ocaml.doc("<p>If the previous response was truncated, you receive this token. Use it in your next
         request to receive the next set of results.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>List the job's candidates up to a specified limit.</p>") @as("MaxResults")
    maxResults: option<autoMLMaxResults>,
    @ocaml.doc("<p>The parameter by which to sort the results. The default is
         <code>Descending</code>.</p>")
    @as("SortBy")
    sortBy: option<candidateSortBy>,
    @ocaml.doc("<p>The sort order for the results. The default is <code>Ascending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<autoMLSortOrder>,
    @ocaml.doc("<p>List the candidates for the job and filter by candidate name.</p>")
    @as("CandidateNameEquals")
    candidateNameEquals: option<candidateName>,
    @ocaml.doc("<p>List the candidates for the job and filter by status.</p>") @as("StatusEquals")
    statusEquals: option<candidateStatus>,
    @ocaml.doc("<p>List the candidates created for the job by providing the job's name.</p>")
    @as("AutoMLJobName")
    autoMLJobName: autoMLJobName,
  }
  type response = {
    @ocaml.doc("<p>If the previous response was truncated, you receive this token. Use it in your next
         request to receive the next set of results.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Summaries about the <code>AutoMLCandidates</code>.</p>") @as("Candidates")
    candidates: autoMLCandidates,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListCandidatesForAutoMLJobCommand"
  let make = (
    ~autoMLJobName,
    ~nextToken=?,
    ~maxResults=?,
    ~sortBy=?,
    ~sortOrder=?,
    ~candidateNameEquals=?,
    ~statusEquals=?,
    (),
  ) =>
    new({
      nextToken,
      maxResults,
      sortBy,
      sortOrder,
      candidateNameEquals,
      statusEquals,
      autoMLJobName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListArtifacts = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The maximum number of artifacts to return in the response. The default value is 10.</p>"
    )
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the previous call to <code>ListArtifacts</code> didn't return the full set of artifacts,
        the call returns a token for getting the next set of artifacts.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The sort order. The default value is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc(
      "<p>The property used to sort results. The default value is <code>CreationTime</code>.</p>"
    )
    @as("SortBy")
    sortBy: option<sortArtifactsBy>,
    @ocaml.doc(
      "<p>A filter that returns only artifacts created on or before the specified time.</p>"
    )
    @as("CreatedBefore")
    createdBefore: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only artifacts created on or after the specified time.</p>"
    )
    @as("CreatedAfter")
    createdAfter: option<timestamp_>,
    @ocaml.doc("<p>A filter that returns only artifacts of the specified type.</p>")
    @as("ArtifactType")
    artifactType: option<string256>,
    @ocaml.doc("<p>A filter that returns only artifacts with the specified source URI.</p>")
    @as("SourceUri")
    sourceUri: option<sourceUri>,
  }
  type response = {
    @ocaml.doc("<p>A token for getting the next set of artifacts, if there are any.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of artifacts and their properties.</p>") @as("ArtifactSummaries")
    artifactSummaries: option<artifactSummaries>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListArtifactsCommand"
  let make = (
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~createdBefore=?,
    ~createdAfter=?,
    ~artifactType=?,
    ~sourceUri=?,
    (),
  ) =>
    new({
      maxResults,
      nextToken,
      sortOrder,
      sortBy,
      createdBefore,
      createdAfter,
      artifactType,
      sourceUri,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListAppImageConfigs = {
  type t
  type request = {
    @ocaml.doc("<p>The sort order. The default value is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc(
      "<p>The property used to sort results. The default value is <code>CreationTime</code>.</p>"
    )
    @as("SortBy")
    sortBy: option<appImageConfigSortKey>,
    @ocaml.doc(
      "<p>A filter that returns only AppImageConfigs modified on or after the specified time.</p>"
    )
    @as("ModifiedTimeAfter")
    modifiedTimeAfter: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only AppImageConfigs modified on or before the specified time.</p>"
    )
    @as("ModifiedTimeBefore")
    modifiedTimeBefore: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only AppImageConfigs created on or after the specified time.</p>"
    )
    @as("CreationTimeAfter")
    creationTimeAfter: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only AppImageConfigs created on or before the specified time.</p>"
    )
    @as("CreationTimeBefore")
    creationTimeBefore: option<timestamp_>,
    @ocaml.doc(
      "<p>A filter that returns only AppImageConfigs whose name contains the specified string.</p>"
    )
    @as("NameContains")
    nameContains: option<appImageConfigName>,
    @ocaml.doc("<p>If the previous call to <code>ListImages</code> didn't return the full set of
        AppImageConfigs, the call returns a token for getting the next set of AppImageConfigs.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of AppImageConfigs to return in the response. The default value is
        10. </p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
  }
  type response = {
    @ocaml.doc("<p>A list of AppImageConfigs and their properties.</p>") @as("AppImageConfigs")
    appImageConfigs: option<appImageConfigList>,
    @ocaml.doc("<p>A token for getting the next set of AppImageConfigs, if there are any.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListAppImageConfigsCommand"
  let make = (
    ~sortOrder=?,
    ~sortBy=?,
    ~modifiedTimeAfter=?,
    ~modifiedTimeBefore=?,
    ~creationTimeAfter=?,
    ~creationTimeBefore=?,
    ~nameContains=?,
    ~nextToken=?,
    ~maxResults=?,
    (),
  ) =>
    new({
      sortOrder,
      sortBy,
      modifiedTimeAfter,
      modifiedTimeBefore,
      creationTimeAfter,
      creationTimeBefore,
      nameContains,
      nextToken,
      maxResults,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeWorkteam = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the work team to return a description of.</p>") @as("WorkteamName")
    workteamName: workteamName,
  }
  type response = {
    @ocaml.doc("<p>A <code>Workteam</code> instance that contains information about the work team.
        </p>")
    @as("Workteam")
    workteam: workteam,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DescribeWorkteamCommand"
  let make = (~workteamName, ()) => new({workteamName: workteamName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeTrainingJob = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the training job.</p>") @as("TrainingJobName")
    trainingJobName: trainingJobName,
  }
  type response = {
    @ocaml.doc("<p>The environment variables to set in the Docker container.</p>")
    @as("Environment")
    environment: option<trainingEnvironmentMap>,
    @ocaml.doc("<p>The number of times to retry the job when the job fails due to an
                <code>InternalServerError</code>.</p>")
    @as("RetryStrategy")
    retryStrategy: option<retryStrategy>,
    @ocaml.doc("<p>Profiling status of a training job.</p>") @as("ProfilingStatus")
    profilingStatus: option<profilingStatus>,
    @ocaml.doc("<p>Evaluation status of Debugger rules for profiling on a training job.</p>")
    @as("ProfilerRuleEvaluationStatuses")
    profilerRuleEvaluationStatuses: option<profilerRuleEvaluationStatuses>,
    @ocaml.doc("<p>Configuration information for Debugger rules for profiling system and framework
            metrics.</p>")
    @as("ProfilerRuleConfigurations")
    profilerRuleConfigurations: option<profilerRuleConfigurations>,
    @as("ProfilerConfig") profilerConfig: option<profilerConfig>,
    @ocaml.doc("<p>Evaluation status of Debugger rules for debugging on a training job.</p>")
    @as("DebugRuleEvaluationStatuses")
    debugRuleEvaluationStatuses: option<debugRuleEvaluationStatuses>,
    @as("TensorBoardOutputConfig") tensorBoardOutputConfig: option<tensorBoardOutputConfig>,
    @ocaml.doc("<p>Configuration information for Debugger rules for debugging output tensors.</p>")
    @as("DebugRuleConfigurations")
    debugRuleConfigurations: option<debugRuleConfigurations>,
    @as("ExperimentConfig") experimentConfig: option<experimentConfig>,
    @as("DebugHookConfig") debugHookConfig: option<debugHookConfig>,
    @ocaml.doc("<p>The billable time in seconds. Billable time refers to the absolute wall-clock
            time.</p>
        <p>Multiply <code>BillableTimeInSeconds</code> by the number of instances
                (<code>InstanceCount</code>) in your training cluster to get the total compute time
            SageMaker will bill you if you run distributed training. The formula is as follows:
                <code>BillableTimeInSeconds * InstanceCount</code> .</p>
        <p>You can calculate the savings from using managed spot training using the formula
                <code>(1 - BillableTimeInSeconds / TrainingTimeInSeconds) * 100</code>. For example,
            if <code>BillableTimeInSeconds</code> is 100 and <code>TrainingTimeInSeconds</code> is
            500, the savings is 80%.</p>")
    @as("BillableTimeInSeconds")
    billableTimeInSeconds: option<billableTimeInSeconds>,
    @ocaml.doc("<p>The training time in seconds.</p>") @as("TrainingTimeInSeconds")
    trainingTimeInSeconds: option<trainingTimeInSeconds>,
    @as("CheckpointConfig") checkpointConfig: option<checkpointConfig>,
    @ocaml.doc("<p>A Boolean indicating whether managed spot training is enabled (<code>True</code>) or
            not (<code>False</code>).</p>")
    @as("EnableManagedSpotTraining")
    enableManagedSpotTraining: option<boolean_>,
    @ocaml.doc("<p>To encrypt all communications between ML compute instances in distributed training,
            choose <code>True</code>. Encryption provides greater security for distributed training,
            but training might take longer. How long it takes depends on the amount of communication
            between compute instances, especially if you use a deep learning algorithms in
            distributed training.</p>")
    @as("EnableInterContainerTrafficEncryption")
    enableInterContainerTrafficEncryption: option<boolean_>,
    @ocaml.doc("<p>If you want to allow inbound or outbound network calls, except for calls between peers
            within a training cluster for distributed training, choose <code>True</code>. If you
            enable network isolation for training jobs that are configured to use a VPC, Amazon SageMaker
            downloads and uploads customer data and model artifacts through the specified VPC, but
            the training container does not have network access.</p>")
    @as("EnableNetworkIsolation")
    enableNetworkIsolation: option<boolean_>,
    @ocaml.doc("<p>A collection of <code>MetricData</code> objects that specify the names, values, and
            dates and times that the training algorithm emitted to Amazon CloudWatch.</p>")
    @as("FinalMetricDataList")
    finalMetricDataList: option<finalMetricDataList>,
    @ocaml.doc("<p>A history of all of the secondary statuses that the training job has transitioned
            through.</p>")
    @as("SecondaryStatusTransitions")
    secondaryStatusTransitions: option<secondaryStatusTransitions>,
    @ocaml.doc("<p>A timestamp that indicates when the status of the training job was last
            modified.</p>")
    @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @ocaml.doc("<p>Indicates the time when the training job ends on training instances. You are billed
            for the time interval between the value of <code>TrainingStartTime</code> and this time.
            For successful jobs and stopped jobs, this is the time after model artifacts are
            uploaded. For failed jobs, this is the time when Amazon SageMaker detects a job failure.</p>")
    @as("TrainingEndTime")
    trainingEndTime: option<timestamp_>,
    @ocaml.doc("<p>Indicates the time when the training job starts on training instances. You are
            billed for the time interval between this time and the value of
                <code>TrainingEndTime</code>. The start time in CloudWatch Logs might be later than this time.
            The difference is due to the time it takes to download the training data and to the size
            of the training container.</p>")
    @as("TrainingStartTime")
    trainingStartTime: option<timestamp_>,
    @ocaml.doc("<p>A timestamp that indicates when the training job was created.</p>")
    @as("CreationTime")
    creationTime: timestamp_,
    @ocaml.doc("<p>Specifies a limit to how long a model training job can run. It also specifies how long
            a managed Spot training job has to complete. When the job reaches the time limit, Amazon SageMaker
            ends the training job. Use this API to cap model training costs.</p>
        <p>To stop a job, Amazon SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays
            job termination for 120 seconds. Algorithms can use this 120-second window to save the
            model artifacts, so the results of training are not lost. </p>")
    @as("StoppingCondition")
    stoppingCondition: stoppingCondition,
    @ocaml.doc("<p>A <a>VpcConfig</a> object that specifies the VPC that this training job has
            access to. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html\">Protect Training Jobs by Using an Amazon
                Virtual Private Cloud</a>.</p>")
    @as("VpcConfig")
    vpcConfig: option<vpcConfig>,
    @ocaml.doc("<p>Resources, including ML compute instances and ML storage volumes, that are
            configured for model training. </p>")
    @as("ResourceConfig")
    resourceConfig: resourceConfig,
    @ocaml.doc("<p>The S3 path where model artifacts that you configured when creating the job are
            stored. Amazon SageMaker creates subfolders for model artifacts. </p>")
    @as("OutputDataConfig")
    outputDataConfig: option<outputDataConfig>,
    @ocaml.doc("<p>An array of <code>Channel</code> objects that describes each data input channel.
        </p>")
    @as("InputDataConfig")
    inputDataConfig: option<inputDataConfig>,
    @ocaml.doc(
      "<p>The Amazon Web Services Identity and Access Management (IAM) role configured for the training job. </p>"
    )
    @as("RoleArn")
    roleArn: option<roleArn>,
    @ocaml.doc("<p>Information about the algorithm used for training, and algorithm metadata.
        </p>")
    @as("AlgorithmSpecification")
    algorithmSpecification: algorithmSpecification,
    @ocaml.doc("<p>Algorithm-specific parameters. </p>") @as("HyperParameters")
    hyperParameters: option<hyperParameters>,
    @ocaml.doc("<p>If the training job failed, the reason it failed. </p>") @as("FailureReason")
    failureReason: option<failureReason>,
    @ocaml.doc("<p> Provides detailed information about the state of the training job. For detailed
            information on the secondary status of the training job, see <code>StatusMessage</code>
            under <a>SecondaryStatusTransition</a>.</p>
        <p>Amazon SageMaker provides primary statuses and secondary statuses that apply to each of
            them:</p>
        <dl>
            <dt>InProgress</dt>
            <dd>
                    <ul>
                  <li>
                            <p>
                        <code>Starting</code>
                                - Starting the training job.</p>
                        </li>
                  <li>
                            <p>
                        <code>Downloading</code> - An optional stage for algorithms that
                                support <code>File</code> training input mode. It indicates that
                                data is being downloaded to the ML storage volumes.</p>
                        </li>
                  <li>
                            <p>
                        <code>Training</code> - Training is in progress.</p>
                        </li>
                  <li>
                            <p>
                        <code>Interrupted</code> - The job stopped because the managed
                                spot training instances were interrupted. </p>
                        </li>
                  <li>
                            <p>
                        <code>Uploading</code> - Training is complete and the model
                                artifacts are being uploaded to the S3 location.</p>
                        </li>
               </ul>
                </dd>
            <dt>Completed</dt>
            <dd>
                    <ul>
                  <li>
                            <p>
                        <code>Completed</code> - The training job has completed.</p>
                        </li>
               </ul>
                </dd>
            <dt>Failed</dt>
            <dd>
                    <ul>
                  <li>
                            <p>
                        <code>Failed</code> - The training job has failed. The reason for
                                the failure is returned in the <code>FailureReason</code> field of
                                    <code>DescribeTrainingJobResponse</code>.</p>
                        </li>
               </ul>
                </dd>
            <dt>Stopped</dt>
            <dd>
                    <ul>
                  <li>
                            <p>
                        <code>MaxRuntimeExceeded</code> - The job stopped because it
                                exceeded the maximum allowed runtime.</p>
                        </li>
                  <li>
                            <p>
                        <code>MaxWaitTimeExceeded</code> - The job stopped because it
                                exceeded the maximum allowed wait time.</p>
                        </li>
                  <li>
                            <p>
                        <code>Stopped</code> - The training job has stopped.</p>
                        </li>
               </ul>
                </dd>
            <dt>Stopping</dt>
            <dd>
                    <ul>
                  <li>
                            <p>
                        <code>Stopping</code> - Stopping the training job.</p>
                        </li>
               </ul>
                </dd>
         </dl>
        
        <important>
            <p>Valid values for <code>SecondaryStatus</code> are subject to change. </p>
        </important>
        <p>We no longer support the following secondary statuses:</p>
        <ul>
            <li>
                <p>
                    <code>LaunchingMLInstances</code>
                </p>
            </li>
            <li>
                <p>
                    <code>PreparingTraining</code>
                </p>
            </li>
            <li>
                <p>
                    <code>DownloadingTrainingImage</code>
                </p>
            </li>
         </ul>")
    @as("SecondaryStatus")
    secondaryStatus: secondaryStatus,
    @ocaml.doc("<p>The status of the
            training
            job.</p>
        <p>Amazon SageMaker provides the following training job statuses:</p>
        <ul>
            <li>
                <p>
                  <code>InProgress</code> - The training is in progress.</p>
            </li>
            <li>
                <p>
                  <code>Completed</code> - The training job has completed.</p>
            </li>
            <li>
                <p>
                  <code>Failed</code> - The training job has failed. To see the reason for the
                    failure, see the <code>FailureReason</code> field in the response to a
                        <code>DescribeTrainingJobResponse</code> call.</p>
            </li>
            <li>
                <p>
                  <code>Stopping</code> - The training job is stopping.</p>
            </li>
            <li>
                <p>
                  <code>Stopped</code> - The training job has stopped.</p>
            </li>
         </ul>
        <p>For
            more detailed information, see <code>SecondaryStatus</code>. </p>")
    @as("TrainingJobStatus")
    trainingJobStatus: trainingJobStatus,
    @ocaml.doc("<p>Information about the Amazon S3 location that is configured for storing model artifacts.
        </p>")
    @as("ModelArtifacts")
    modelArtifacts: modelArtifacts,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of an AutoML job.</p>") @as("AutoMLJobArn")
    autoMLJobArn: option<autoMLJobArn>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Amazon SageMaker Ground Truth labeling job that created the
            transform or training job.</p>")
    @as("LabelingJobArn")
    labelingJobArn: option<labelingJobArn>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the associated hyperparameter tuning job if the
            training job was launched by a hyperparameter tuning job.</p>")
    @as("TuningJobArn")
    tuningJobArn: option<hyperParameterTuningJobArn>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the training job.</p>") @as("TrainingJobArn")
    trainingJobArn: trainingJobArn,
    @ocaml.doc("<p> Name of the model training job. </p>") @as("TrainingJobName")
    trainingJobName: trainingJobName,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeTrainingJobCommand"
  let make = (~trainingJobName, ()) => new({trainingJobName: trainingJobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeEndpoint = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the endpoint.</p>") @as("EndpointName") endpointName: endpointName,
  }
  type response = {
    @ocaml.doc("<p>Returns the summary of an in-progress deployment. This field is only returned when the
            endpoint is creating or updating with a new endpoint configuration.</p>")
    @as("PendingDeploymentSummary")
    pendingDeploymentSummary: option<pendingDeploymentSummary>,
    @ocaml.doc("<p>Returns the description of an endpoint configuration created 
            using the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html\">
               <code>CreateEndpointConfig</code>
            </a> API.</p>")
    @as("AsyncInferenceConfig")
    asyncInferenceConfig: option<asyncInferenceConfig>,
    @ocaml.doc("<p>The most recent deployment configuration for the endpoint.</p>")
    @as("LastDeploymentConfig")
    lastDeploymentConfig: option<deploymentConfig>,
    @ocaml.doc("<p>A timestamp that shows when the endpoint was last modified.</p>")
    @as("LastModifiedTime")
    lastModifiedTime: timestamp_,
    @ocaml.doc("<p>A timestamp that shows when the endpoint was created.</p>") @as("CreationTime")
    creationTime: timestamp_,
    @ocaml.doc("<p>If the status of the endpoint is <code>Failed</code>, the reason why it failed.
        </p>")
    @as("FailureReason")
    failureReason: option<failureReason>,
    @ocaml.doc("<p>The status of the endpoint.</p>
        <ul>
            <li>
                <p>
                  <code>OutOfService</code>: Endpoint is not available to take incoming
                    requests.</p>
            </li>
            <li>
                <p>
                  <code>Creating</code>: <a>CreateEndpoint</a> is executing.</p>
            </li>
            <li>
                <p>
                  <code>Updating</code>: <a>UpdateEndpoint</a> or <a>UpdateEndpointWeightsAndCapacities</a> is executing.</p>
            </li>
            <li>
                <p>
                  <code>SystemUpdating</code>: Endpoint is undergoing maintenance and cannot be
                    updated or deleted or re-scaled until it has completed. This maintenance
                    operation does not change any customer-specified values such as VPC config, KMS
                    encryption, model, instance type, or instance count.</p>
            </li>
            <li>
                <p>
                  <code>RollingBack</code>: Endpoint fails to scale up or down or change its
                    variant weight and is in the process of rolling back to its previous
                    configuration. Once the rollback completes, endpoint returns to an
                        <code>InService</code> status. This transitional status only applies to an
                    endpoint that has autoscaling enabled and is undergoing variant weight or
                    capacity changes as part of an <a>UpdateEndpointWeightsAndCapacities</a> call or when the <a>UpdateEndpointWeightsAndCapacities</a> operation is called
                    explicitly.</p>
            </li>
            <li>
                <p>
                  <code>InService</code>: Endpoint is available to process incoming
                    requests.</p>
            </li>
            <li>
                <p>
                  <code>Deleting</code>: <a>DeleteEndpoint</a> is executing.</p>
            </li>
            <li>
                <p>
                  <code>Failed</code>: Endpoint could not be created, updated, or re-scaled. Use
                        <a>DescribeEndpointOutput$FailureReason</a> for information about
                    the failure. <a>DeleteEndpoint</a> is the only operation that can be
                    performed on a failed endpoint.</p>
            </li>
         </ul>")
    @as("EndpointStatus")
    endpointStatus: endpointStatus,
    @as("DataCaptureConfig") dataCaptureConfig: option<dataCaptureConfigSummary>,
    @ocaml.doc("<p> An array of <a>ProductionVariantSummary</a> objects, one for each model
            hosted behind this endpoint. </p>")
    @as("ProductionVariants")
    productionVariants: option<productionVariantSummaryList>,
    @ocaml.doc("<p>The name of the endpoint configuration associated with this endpoint.</p>")
    @as("EndpointConfigName")
    endpointConfigName: endpointConfigName,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the endpoint.</p>") @as("EndpointArn")
    endpointArn: endpointArn,
    @ocaml.doc("<p>Name of the endpoint.</p>") @as("EndpointName") endpointName: endpointName,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DescribeEndpointCommand"
  let make = (~endpointName, ()) => new({endpointName: endpointName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateTrainingJob = {
  type t
  type request = {
    @ocaml.doc("<p>The number of times to retry the job when the job fails due to an
                <code>InternalServerError</code>.</p>")
    @as("RetryStrategy")
    retryStrategy: option<retryStrategy>,
    @ocaml.doc("<p>The environment variables to set in the Docker container.</p>")
    @as("Environment")
    environment: option<trainingEnvironmentMap>,
    @ocaml.doc("<p>Configuration information for Debugger rules for profiling system and framework
            metrics.</p>")
    @as("ProfilerRuleConfigurations")
    profilerRuleConfigurations: option<profilerRuleConfigurations>,
    @as("ProfilerConfig") profilerConfig: option<profilerConfig>,
    @as("ExperimentConfig") experimentConfig: option<experimentConfig>,
    @as("TensorBoardOutputConfig") tensorBoardOutputConfig: option<tensorBoardOutputConfig>,
    @ocaml.doc("<p>Configuration information for Debugger rules for debugging output tensors.</p>")
    @as("DebugRuleConfigurations")
    debugRuleConfigurations: option<debugRuleConfigurations>,
    @as("DebugHookConfig") debugHookConfig: option<debugHookConfig>,
    @ocaml.doc("<p>Contains information about the output location for managed spot training checkpoint
            data.</p>")
    @as("CheckpointConfig")
    checkpointConfig: option<checkpointConfig>,
    @ocaml.doc("<p>To train models using managed spot training, choose <code>True</code>. Managed spot
            training provides a fully managed and scalable infrastructure for training machine
            learning models. this option is useful when training jobs can be interrupted and when
            there is flexibility when the training job is run. </p>
        <p>The complete and intermediate results of jobs are stored in an Amazon S3 bucket, and can be
            used as a starting point to train models incrementally. Amazon SageMaker provides metrics and
            logs in CloudWatch. They can be used to see when managed spot training jobs are running,
            interrupted, resumed, or completed. </p>")
    @as("EnableManagedSpotTraining")
    enableManagedSpotTraining: option<boolean_>,
    @ocaml.doc("<p>To encrypt all communications between ML compute instances in distributed training,
            choose <code>True</code>. Encryption provides greater security for distributed training,
            but training might take longer. How long it takes depends on the amount of communication
            between compute instances, especially if you use a deep learning algorithm in
            distributed training. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/train-encrypt.html\">Protect Communications Between ML
                Compute Instances in a Distributed Training Job</a>.</p>")
    @as("EnableInterContainerTrafficEncryption")
    enableInterContainerTrafficEncryption: option<boolean_>,
    @ocaml.doc("<p>Isolates the training container. No inbound or outbound network calls can be made,
            except for calls between peers within a training cluster for distributed training. If
            you enable network isolation for training jobs that are configured to use a VPC, Amazon SageMaker
            downloads and uploads customer data and model artifacts through the specified VPC, but
            the training container does not have network access.</p>")
    @as("EnableNetworkIsolation")
    enableNetworkIsolation: option<boolean_>,
    @ocaml.doc("<p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
            different ways, for example, by purpose, owner, or environment. For more information,
            see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
                Resources</a>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>Specifies a limit to how long a model training job can run. It also specifies how long
            a managed Spot training job has to complete. When the job reaches the time limit, Amazon SageMaker
            ends the training job. Use this API to cap model training costs.</p>
        <p>To stop a job, Amazon SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays
            job termination for 120 seconds. Algorithms can use this 120-second window to save the
            model artifacts, so the results of training are not lost. </p>")
    @as("StoppingCondition")
    stoppingCondition: stoppingCondition,
    @ocaml.doc("<p>A <a>VpcConfig</a> object that specifies the VPC that you want your
            training job to connect to. Control access to and from your training container by
            configuring the VPC. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html\">Protect Training Jobs by Using an Amazon
                Virtual Private Cloud</a>.</p>")
    @as("VpcConfig")
    vpcConfig: option<vpcConfig>,
    @ocaml.doc("<p>The resources, including the ML compute instances and ML storage volumes, to use
            for model training. </p>
        <p>ML storage volumes store model artifacts and incremental states. Training
            algorithms might also use ML storage volumes for scratch space. If you want Amazon SageMaker to use
            the ML storage volume to store the training data, choose <code>File</code> as the
                <code>TrainingInputMode</code> in the algorithm specification. For distributed
            training algorithms, specify an instance count greater than 1.</p>")
    @as("ResourceConfig")
    resourceConfig: resourceConfig,
    @ocaml.doc("<p>Specifies the path to the S3 location where you want to store model artifacts. Amazon SageMaker
            creates subfolders for the artifacts. </p>")
    @as("OutputDataConfig")
    outputDataConfig: outputDataConfig,
    @ocaml.doc("<p>An array of <code>Channel</code> objects. Each channel is a named input source.
                <code>InputDataConfig</code>
            describes the input data and its location. </p>
        <p>Algorithms can accept input data from one or more channels. For example, an
            algorithm might have two channels of input data, <code>training_data</code> and
                <code>validation_data</code>. The configuration for each channel provides the S3,
            EFS, or FSx location where the input data is stored. It also provides information about
            the stored data: the MIME type, compression method, and whether the data is wrapped in
            RecordIO format. </p>
        <p>Depending on the input mode that the algorithm supports, Amazon SageMaker either copies input
            data files from an S3 bucket to a local directory in the Docker container, or makes it
            available as input streams. For example, if you specify an EFS location, input data
            files will be made available as input streams. They do not need to be
            downloaded.</p>")
    @as("InputDataConfig")
    inputDataConfig: option<inputDataConfig>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform
            tasks on your behalf. </p>
        <p>During model training, Amazon SageMaker needs your permission to read input data from an S3
            bucket, download a Docker image that contains training code, write model artifacts to an
            S3 bucket, write logs to Amazon CloudWatch Logs, and publish metrics to Amazon CloudWatch. You grant
            permissions for all of these tasks to an IAM role. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html\">Amazon SageMaker
                Roles</a>. </p>
        <note>
            <p>To be able to pass this role to Amazon SageMaker, the caller of this API must have the
                    <code>iam:PassRole</code> permission.</p>
        </note>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>The registry path of the Docker image that contains the training algorithm and
            algorithm-specific metadata, including the input mode. For more information about
            algorithms provided by Amazon SageMaker, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html\">Algorithms</a>. For information about
            providing your own algorithms, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html\">Using Your Own Algorithms with Amazon
                SageMaker</a>. </p>")
    @as("AlgorithmSpecification")
    algorithmSpecification: algorithmSpecification,
    @ocaml.doc("<p>Algorithm-specific parameters that influence the quality of the model. You set
            hyperparameters before you start the learning process. For a list of hyperparameters for
            each training algorithm provided by Amazon SageMaker, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html\">Algorithms</a>. </p>
        <p>You can specify a maximum of 100 hyperparameters. Each hyperparameter is a
            key-value pair. Each key and value is limited to 256 characters, as specified by the
                <code>Length Constraint</code>. </p>")
    @as("HyperParameters")
    hyperParameters: option<hyperParameters>,
    @ocaml.doc("<p>The name of the training job. The name must be unique within an Amazon Web Services Region in an
            Amazon Web Services account. </p>")
    @as("TrainingJobName")
    trainingJobName: trainingJobName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the training job.</p>") @as("TrainingJobArn")
    trainingJobArn: trainingJobArn,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateTrainingJobCommand"
  let make = (
    ~stoppingCondition,
    ~resourceConfig,
    ~outputDataConfig,
    ~roleArn,
    ~algorithmSpecification,
    ~trainingJobName,
    ~retryStrategy=?,
    ~environment=?,
    ~profilerRuleConfigurations=?,
    ~profilerConfig=?,
    ~experimentConfig=?,
    ~tensorBoardOutputConfig=?,
    ~debugRuleConfigurations=?,
    ~debugHookConfig=?,
    ~checkpointConfig=?,
    ~enableManagedSpotTraining=?,
    ~enableInterContainerTrafficEncryption=?,
    ~enableNetworkIsolation=?,
    ~tags=?,
    ~vpcConfig=?,
    ~inputDataConfig=?,
    ~hyperParameters=?,
    (),
  ) =>
    new({
      retryStrategy,
      environment,
      profilerRuleConfigurations,
      profilerConfig,
      experimentConfig,
      tensorBoardOutputConfig,
      debugRuleConfigurations,
      debugHookConfig,
      checkpointConfig,
      enableManagedSpotTraining,
      enableInterContainerTrafficEncryption,
      enableNetworkIsolation,
      tags,
      stoppingCondition,
      vpcConfig,
      resourceConfig,
      outputDataConfig,
      inputDataConfig,
      roleArn,
      algorithmSpecification,
      hyperParameters,
      trainingJobName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module UpdateMonitoringSchedule = {
  type t
  type request = {
    @ocaml.doc("<p>The configuration object that specifies the monitoring schedule and defines the
         monitoring job.</p>")
    @as("MonitoringScheduleConfig")
    monitoringScheduleConfig: monitoringScheduleConfig,
    @ocaml.doc("<p>The name of the monitoring schedule. The name must be unique within an Amazon Web Services Region within
         an Amazon Web Services account.</p>")
    @as("MonitoringScheduleName")
    monitoringScheduleName: monitoringScheduleName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>")
    @as("MonitoringScheduleArn")
    monitoringScheduleArn: monitoringScheduleArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "UpdateMonitoringScheduleCommand"
  let make = (~monitoringScheduleConfig, ~monitoringScheduleName, ()) =>
    new({monitoringScheduleConfig, monitoringScheduleName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListWorkteams = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of work teams to return in each page of the response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the result of the previous <code>ListWorkteams</code> request was truncated, the
            response includes a <code>NextToken</code>. To retrieve the next set of labeling jobs,
            use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A string in the work team's name. This filter returns only work teams whose name
            contains the specified string.</p>")
    @as("NameContains")
    nameContains: option<workteamName>,
    @ocaml.doc("<p>The sort order for results. The default is <code>Ascending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>The field to sort results by. The default is <code>CreationTime</code>.</p>")
    @as("SortBy")
    sortBy: option<listWorkteamsSortByOptions>,
  }
  type response = {
    @ocaml.doc("<p>If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of
            work teams, use it in the subsequent request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array of <code>Workteam</code> objects, each describing a work team.</p>")
    @as("Workteams")
    workteams: workteams,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "ListWorkteamsCommand"
  let make = (~maxResults=?, ~nextToken=?, ~nameContains=?, ~sortOrder=?, ~sortBy=?, ()) =>
    new({maxResults, nextToken, nameContains, sortOrder, sortBy})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module ListPipelineExecutionSteps = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The field by which to sort results. The default is <code>CreatedTime</code>.</p>"
    )
    @as("SortOrder")
    sortOrder: option<sortOrder>,
    @ocaml.doc("<p>The maximum number of pipeline execution steps to return in the response.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If the result of the previous <code>ListPipelineExecutionSteps</code> request was truncated,
         the response includes a <code>NextToken</code>. To retrieve the next set of pipeline execution steps, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the pipeline execution.</p>")
    @as("PipelineExecutionArn")
    pipelineExecutionArn: option<pipelineExecutionArn>,
  }
  type response = {
    @ocaml.doc("<p>If the result of the previous <code>ListPipelineExecutionSteps</code> request was truncated,
         the response includes a <code>NextToken</code>. To retrieve the next set of pipeline execution steps, use the token in the next request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of <code>PipeLineExecutionStep</code> objects. Each
            <code>PipeLineExecutionStep</code> consists of StepName, StartTime, EndTime, StepStatus,
         and Metadata. Metadata is an object with properties for each job that contains relevant
         information about the job created by the step.</p>")
    @as("PipelineExecutionSteps")
    pipelineExecutionSteps: option<pipelineExecutionStepList>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "ListPipelineExecutionStepsCommand"
  let make = (~sortOrder=?, ~maxResults=?, ~nextToken=?, ~pipelineExecutionArn=?, ()) =>
    new({sortOrder, maxResults, nextToken, pipelineExecutionArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeMonitoringSchedule = {
  type t
  type request = {
    @ocaml.doc("<p>Name of a previously created monitoring schedule.</p>")
    @as("MonitoringScheduleName")
    monitoringScheduleName: monitoringScheduleName,
  }
  type response = {
    @ocaml.doc("<p>Describes metadata on the last execution to run, if there was one.</p>")
    @as("LastMonitoringExecutionSummary")
    lastMonitoringExecutionSummary: option<monitoringExecutionSummary>,
    @ocaml.doc("<p> The name of the endpoint for the monitoring job.</p>") @as("EndpointName")
    endpointName: option<endpointName>,
    @ocaml.doc("<p>The configuration object that specifies the monitoring schedule and defines the
         monitoring job.</p>")
    @as("MonitoringScheduleConfig")
    monitoringScheduleConfig: monitoringScheduleConfig,
    @ocaml.doc("<p>The time at which the monitoring job was last modified.</p>")
    @as("LastModifiedTime")
    lastModifiedTime: timestamp_,
    @ocaml.doc("<p>The time at which the monitoring job was created.</p>") @as("CreationTime")
    creationTime: timestamp_,
    @ocaml.doc("<p>A string, up to one KB in size, that contains the reason a monitoring job failed, if it
         failed.</p>")
    @as("FailureReason")
    failureReason: option<failureReason>,
    @ocaml.doc("<p>The type of the monitoring job that this schedule runs. This is one of the following
         values.</p>
         <ul>
            <li>
               <p>
                  <code>DATA_QUALITY</code> - The schedule is for a data quality monitoring
               job.</p>
            </li>
            <li>
               <p>
                  <code>MODEL_QUALITY</code> - The schedule is for a model quality monitoring
               job.</p>
            </li>
            <li>
               <p>
                  <code>MODEL_BIAS</code> - The schedule is for a bias monitoring job.</p>
            </li>
            <li>
               <p>
                  <code>MODEL_EXPLAINABILITY</code> - The schedule is for an explainability
               monitoring job.</p>
            </li>
         </ul>")
    @as("MonitoringType")
    monitoringType: option<monitoringType>,
    @ocaml.doc("<p>The status of an monitoring job.</p>") @as("MonitoringScheduleStatus")
    monitoringScheduleStatus: scheduleStatus,
    @ocaml.doc("<p>Name of the monitoring schedule.</p>") @as("MonitoringScheduleName")
    monitoringScheduleName: monitoringScheduleName,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>")
    @as("MonitoringScheduleArn")
    monitoringScheduleArn: monitoringScheduleArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeMonitoringScheduleCommand"
  let make = (~monitoringScheduleName, ()) => new({monitoringScheduleName: monitoringScheduleName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateMonitoringSchedule = {
  type t
  type request = {
    @ocaml.doc("<p>(Optional) An array of key-value pairs. For more information, see <a href=\" https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL\">Using Cost Allocation Tags</a> in the <i>Amazon Web Services Billing and Cost Management
            User Guide</i>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The configuration object that specifies the monitoring schedule and defines the
         monitoring job.</p>")
    @as("MonitoringScheduleConfig")
    monitoringScheduleConfig: monitoringScheduleConfig,
    @ocaml.doc("<p>The name of the monitoring schedule. The name must be unique within an Amazon Web Services Region within
         an Amazon Web Services account.</p>")
    @as("MonitoringScheduleName")
    monitoringScheduleName: monitoringScheduleName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the monitoring schedule.</p>")
    @as("MonitoringScheduleArn")
    monitoringScheduleArn: monitoringScheduleArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateMonitoringScheduleCommand"
  let make = (~monitoringScheduleConfig, ~monitoringScheduleName, ~tags=?, ()) =>
    new({tags, monitoringScheduleConfig, monitoringScheduleName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module BatchDescribeModelPackage = {
  type t
  type request = {
    @ocaml.doc("<p>The list of Amazon Resource Name (ARN) of the model package groups.</p>")
    @as("ModelPackageArnList")
    modelPackageArnList: modelPackageArnList,
  }
  type response = {
    @ocaml.doc("<p>A map of the resource and BatchDescribeModelPackageError objects 
            reporting the error associated with describing the model package.</p>")
    @as("BatchDescribeModelPackageErrorMap")
    batchDescribeModelPackageErrorMap: option<batchDescribeModelPackageErrorMap>,
    @ocaml.doc("<p>The summaries for the model package versions</p>") @as("ModelPackageSummaries")
    modelPackageSummaries: option<modelPackageSummaries>,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "BatchDescribeModelPackageCommand"
  let make = (~modelPackageArnList, ()) => new({modelPackageArnList: modelPackageArnList})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeModelPackage = {
  type t
  type request = {
    @ocaml.doc("<p>The name or Amazon Resource Name (ARN) of the model package to describe.</p>
        <p>When you specify a name, the name must have 1 to 63 characters. Valid
            characters are a-z, A-Z, 0-9, and - (hyphen).</p>")
    @as("ModelPackageName")
    modelPackageName: versionedArnOrName,
  }
  type response = {
    @ocaml.doc("<p>An array of additional Inference Specification objects. Each additional 
    Inference Specification specifies artifacts based on this model package that can 
    be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.</p>")
    @as("AdditionalInferenceSpecifications")
    additionalInferenceSpecifications: option<additionalInferenceSpecifications>,
    @ocaml.doc("<p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored. This path points to a single 
    gzip compressed tar archive (.tar.gz suffix).</p>")
    @as("SamplePayloadUrl")
    samplePayloadUrl: option<string_>,
    @ocaml.doc("<p>The machine learning task you specified that your model package accomplishes. 
     Common machine learning tasks include object detection and image classification.</p>")
    @as("Task")
    task: option<string_>,
    @ocaml.doc("<p>The machine learning domain of the model package you specified. Common machine 
    learning domains include computer vision and natural language processing.</p>")
    @as("Domain")
    domain: option<string_>,
    @ocaml.doc("<p>Represents the drift check baselines that can be used when the model monitor is set using the model package. 
         For more information, see the topic on <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection\">Drift Detection against Previous Baselines in SageMaker Pipelines</a> in the <i>Amazon SageMaker Developer Guide</i>.
      </p>")
    @as("DriftCheckBaselines")
    driftCheckBaselines: option<driftCheckBaselines>,
    @ocaml.doc("<p>The metadata properties associated with the model package versions.</p>")
    @as("CustomerMetadataProperties")
    customerMetadataProperties: option<customerMetadataMap>,
    @ocaml.doc("<p>A description provided for the model approval.</p>") @as("ApprovalDescription")
    approvalDescription: option<approvalDescription>,
    @as("LastModifiedBy") lastModifiedBy: option<userContext>,
    @ocaml.doc("<p>The last time the model package was modified.</p>") @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @ocaml.doc("<p>Metrics for the model.</p>") @as("ModelMetrics")
    modelMetrics: option<modelMetrics>,
    @as("MetadataProperties") metadataProperties: option<metadataProperties>,
    @as("CreatedBy") createdBy: option<userContext>,
    @ocaml.doc("<p>The approval status of the model package.</p>") @as("ModelApprovalStatus")
    modelApprovalStatus: option<modelApprovalStatus>,
    @ocaml.doc(
      "<p>Whether the model package is certified for listing on Amazon Web Services Marketplace.</p>"
    )
    @as("CertifyForMarketplace")
    certifyForMarketplace: option<certifyForMarketplace>,
    @ocaml.doc("<p>Details about the current status of the model package.</p>")
    @as("ModelPackageStatusDetails")
    modelPackageStatusDetails: modelPackageStatusDetails,
    @ocaml.doc("<p>The current status of the model package.</p>") @as("ModelPackageStatus")
    modelPackageStatus: modelPackageStatus,
    @ocaml.doc("<p>Configurations for one or more transform jobs that SageMaker runs to test the model
            package.</p>")
    @as("ValidationSpecification")
    validationSpecification: option<modelPackageValidationSpecification>,
    @ocaml.doc("<p>Details about the algorithm that was used to create the model package.</p>")
    @as("SourceAlgorithmSpecification")
    sourceAlgorithmSpecification: option<sourceAlgorithmSpecification>,
    @ocaml.doc("<p>Details about inference jobs that can be run with models based on this model
            package.</p>")
    @as("InferenceSpecification")
    inferenceSpecification: option<inferenceSpecification>,
    @ocaml.doc("<p>A timestamp specifying when the model package was created.</p>")
    @as("CreationTime")
    creationTime: creationTime,
    @ocaml.doc("<p>A brief summary of the model package.</p>") @as("ModelPackageDescription")
    modelPackageDescription: option<entityDescription>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the model package.</p>") @as("ModelPackageArn")
    modelPackageArn: modelPackageArn,
    @ocaml.doc("<p>The version of the model package.</p>") @as("ModelPackageVersion")
    modelPackageVersion: option<modelPackageVersion>,
    @ocaml.doc("<p>If the model is a versioned model, the name of the model group that the versioned
            model belongs to.</p>")
    @as("ModelPackageGroupName")
    modelPackageGroupName: option<entityName>,
    @ocaml.doc("<p>The name of the model package being described.</p>") @as("ModelPackageName")
    modelPackageName: entityName,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeModelPackageCommand"
  let make = (~modelPackageName, ()) => new({modelPackageName: modelPackageName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeInferenceRecommendationsJob = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the job. The name must be unique within an 
           Amazon Web Services Region in the Amazon Web Services account.</p>")
    @as("JobName")
    jobName: recommendationJobName,
  }
  type response = {
    @ocaml.doc("<p>The recommendations made by Inference Recommender.</p>")
    @as("InferenceRecommendations")
    inferenceRecommendations: option<inferenceRecommendations>,
    @ocaml.doc("<p>The stopping conditions that you provided when you initiated the job.</p>")
    @as("StoppingConditions")
    stoppingConditions: option<recommendationJobStoppingConditions>,
    @ocaml.doc("<p>Returns information about the versioned model package Amazon Resource Name (ARN), 
    the traffic pattern, and endpoint configurations you provided when you initiated the job.</p>")
    @as("InputConfig")
    inputConfig: recommendationJobInputConfig,
    @ocaml.doc("<p>If the job fails, provides information why the job failed.</p>")
    @as("FailureReason")
    failureReason: option<failureReason>,
    @ocaml.doc("<p>A timestamp that shows when the job was last modified.</p>")
    @as("LastModifiedTime")
    lastModifiedTime: lastModifiedTime,
    @ocaml.doc("<p>A timestamp that shows when the job completed.</p>") @as("CompletionTime")
    completionTime: option<timestamp_>,
    @ocaml.doc("<p>A timestamp that shows when the job was created.</p>") @as("CreationTime")
    creationTime: creationTime,
    @ocaml.doc("<p>The status of the job.</p>") @as("Status") status: recommendationJobStatus,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Amazon Web Services 
           Identity and Access Management (IAM) role you provided when you initiated the job.</p>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the job.</p>") @as("JobArn")
    jobArn: recommendationJobArn,
    @ocaml.doc("<p>The job type that you provided when you initiated the job.</p>") @as("JobType")
    jobType: recommendationJobType,
    @ocaml.doc("<p>The job description that you provided when you initiated the job.</p>")
    @as("JobDescription")
    jobDescription: option<recommendationJobDescription>,
    @ocaml.doc("<p>The name of the job. The name must be unique within an 
           Amazon Web Services Region in the Amazon Web Services account.</p>")
    @as("JobName")
    jobName: recommendationJobName,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeInferenceRecommendationsJobCommand"
  let make = (~jobName, ()) => new({jobName: jobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeHyperParameterTuningJob = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the tuning job.</p>") @as("HyperParameterTuningJobName")
    hyperParameterTuningJobName: hyperParameterTuningJobName,
  }
  type response = {
    @ocaml.doc("<p>If the tuning job failed, the reason it failed.</p>") @as("FailureReason")
    failureReason: option<failureReason>,
    @ocaml.doc("<p>The configuration for starting the hyperparameter parameter tuning job using one or
            more previous tuning jobs as a starting point. The results of previous tuning jobs are
            used to inform which combinations of hyperparameters to search over in the new tuning
            job.</p>")
    @as("WarmStartConfig")
    warmStartConfig: option<hyperParameterTuningJobWarmStartConfig>,
    @ocaml.doc("<p>If the hyperparameter tuning job is an warm start tuning job with a
                <code>WarmStartType</code> of <code>IDENTICAL_DATA_AND_ALGORITHM</code>, this is the
                <a>TrainingJobSummary</a> for the training job with the best objective
            metric value of all training jobs launched by this tuning job and all parent jobs
            specified for the warm start tuning job.</p>")
    @as("OverallBestTrainingJob")
    overallBestTrainingJob: option<hyperParameterTrainingJobSummary>,
    @ocaml.doc("<p>A <a>TrainingJobSummary</a> object that describes the training job that
            completed with the best current <a>HyperParameterTuningJobObjective</a>.</p>")
    @as("BestTrainingJob")
    bestTrainingJob: option<hyperParameterTrainingJobSummary>,
    @ocaml.doc("<p>The <a>ObjectiveStatusCounters</a> object that specifies the number of
            training jobs, categorized by the status of their final objective metric, that this
            tuning job launched.</p>")
    @as("ObjectiveStatusCounters")
    objectiveStatusCounters: objectiveStatusCounters,
    @ocaml.doc("<p>The <a>TrainingJobStatusCounters</a> object that specifies the number of
            training jobs, categorized by status, that this tuning job launched.</p>")
    @as("TrainingJobStatusCounters")
    trainingJobStatusCounters: trainingJobStatusCounters,
    @ocaml.doc("<p>The date and time that the status of the tuning job was modified. </p>")
    @as("LastModifiedTime")
    lastModifiedTime: option<timestamp_>,
    @ocaml.doc("<p>The date and time that the tuning job ended.</p>")
    @as("HyperParameterTuningEndTime")
    hyperParameterTuningEndTime: option<timestamp_>,
    @ocaml.doc("<p>The date and time that the tuning job started.</p>") @as("CreationTime")
    creationTime: timestamp_,
    @ocaml.doc("<p>The status of the tuning job: InProgress, Completed, Failed, Stopping, or
            Stopped.</p>")
    @as("HyperParameterTuningJobStatus")
    hyperParameterTuningJobStatus: hyperParameterTuningJobStatus,
    @ocaml.doc("<p>A list of the <a>HyperParameterTrainingJobDefinition</a> objects launched
            for this tuning job.</p>")
    @as("TrainingJobDefinitions")
    trainingJobDefinitions: option<hyperParameterTrainingJobDefinitions>,
    @ocaml.doc("<p>The <a>HyperParameterTrainingJobDefinition</a> object that specifies the
            definition of the training jobs that this tuning job launches.</p>")
    @as("TrainingJobDefinition")
    trainingJobDefinition: option<hyperParameterTrainingJobDefinition>,
    @ocaml.doc("<p>The <a>HyperParameterTuningJobConfig</a> object that specifies the
            configuration of the tuning job.</p>")
    @as("HyperParameterTuningJobConfig")
    hyperParameterTuningJobConfig: hyperParameterTuningJobConfig,
    @ocaml.doc("<p>The
            Amazon Resource Name (ARN) of the tuning job.</p>")
    @as("HyperParameterTuningJobArn")
    hyperParameterTuningJobArn: hyperParameterTuningJobArn,
    @ocaml.doc("<p>The name of the tuning job.</p>") @as("HyperParameterTuningJobName")
    hyperParameterTuningJobName: hyperParameterTuningJobName,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "DescribeHyperParameterTuningJobCommand"
  let make = (~hyperParameterTuningJobName, ()) =>
    new({hyperParameterTuningJobName: hyperParameterTuningJobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateModelPackage = {
  type t
  type request = {
    @ocaml.doc("<p>An array of additional Inference Specification objects. Each additional 
    Inference Specification specifies artifacts based on this model package that can 
    be used on inference endpoints. Generally used with SageMaker Neo to store the 
    compiled artifacts. </p>")
    @as("AdditionalInferenceSpecifications")
    additionalInferenceSpecifications: option<additionalInferenceSpecifications>,
    @ocaml.doc("<p>The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored. This path must point 
    to a single gzip compressed tar archive (.tar.gz suffix).</p>")
    @as("SamplePayloadUrl")
    samplePayloadUrl: option<s3Uri>,
    @ocaml.doc("<p>The machine learning task your model package accomplishes. Common machine 
    learning tasks include object detection and image classification.</p>")
    @as("Task")
    task: option<string_>,
    @ocaml.doc("<p>The machine learning domain of your model package and its components. Common 
    machine learning domains include computer vision and natural language processing.</p>")
    @as("Domain")
    domain: option<string_>,
    @ocaml.doc("<p>Represents the drift check baselines that can be used when the model monitor is set using the model package.
         For more information, see the topic on <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection\">Drift Detection against Previous Baselines in SageMaker Pipelines</a> in the <i>Amazon SageMaker Developer Guide</i>.
      </p>")
    @as("DriftCheckBaselines")
    driftCheckBaselines: option<driftCheckBaselines>,
    @ocaml.doc("<p>The metadata properties associated with the model package versions.</p>")
    @as("CustomerMetadataProperties")
    customerMetadataProperties: option<customerMetadataMap>,
    @ocaml.doc("<p>A unique token that guarantees that the call to this API is idempotent.</p>")
    @as("ClientToken")
    clientToken: option<clientToken>,
    @ocaml.doc("<p>A structure that contains model metrics reports.</p>") @as("ModelMetrics")
    modelMetrics: option<modelMetrics>,
    @as("MetadataProperties") metadataProperties: option<metadataProperties>,
    @ocaml.doc("<p>Whether the model is approved for deployment.</p>
        <p>This parameter is optional for versioned models, and does not apply to unversioned
            models.</p>
        <p>For versioned models, the value of this parameter must be set to <code>Approved</code>
        to deploy the model.</p>")
    @as("ModelApprovalStatus")
    modelApprovalStatus: option<modelApprovalStatus>,
    @ocaml.doc("<p>A list of key value pairs associated with the model. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
            resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>Whether to certify the model package for listing on Amazon Web Services Marketplace.</p>
        <p>This parameter is optional for unversioned models, and does not apply to versioned
            models.</p>")
    @as("CertifyForMarketplace")
    certifyForMarketplace: option<certifyForMarketplace>,
    @ocaml.doc("<p>Details about the algorithm that was used to create the model package.</p>")
    @as("SourceAlgorithmSpecification")
    sourceAlgorithmSpecification: option<sourceAlgorithmSpecification>,
    @ocaml.doc("<p>Specifies configurations for one or more transform jobs that Amazon SageMaker runs to test the
            model package.</p>")
    @as("ValidationSpecification")
    validationSpecification: option<modelPackageValidationSpecification>,
    @ocaml.doc("<p>Specifies details about inference jobs that can be run with models based on this model
            package, including the following:</p>
        <ul>
            <li>
                <p>The Amazon ECR paths of containers that contain the inference code and model
                    artifacts.</p>
            </li>
            <li>
                <p>The instance types that the model package supports for transform jobs and
                    real-time endpoints used for inference.</p>
            </li>
            <li>
                <p>The input and output content formats that the model package supports for
                    inference.</p>
            </li>
         </ul>")
    @as("InferenceSpecification")
    inferenceSpecification: option<inferenceSpecification>,
    @ocaml.doc("<p>A description of the model package.</p>") @as("ModelPackageDescription")
    modelPackageDescription: option<entityDescription>,
    @ocaml.doc("<p>The name or Amazon Resource Name (ARN) of the model package group that this model version belongs to.</p>
        <p>This parameter is required for versioned models, and does not apply to unversioned
            models.</p>")
    @as("ModelPackageGroupName")
    modelPackageGroupName: option<arnOrName>,
    @ocaml.doc("<p>The name of the model package. The name must have 1 to 63 characters. Valid characters
            are a-z, A-Z, 0-9, and - (hyphen).</p>
        <p>This parameter is required for unversioned models. It is not applicable to versioned
            models.</p>")
    @as("ModelPackageName")
    modelPackageName: option<entityName>,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the new model package.</p>")
    @as("ModelPackageArn")
    modelPackageArn: modelPackageArn,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateModelPackageCommand"
  let make = (
    ~additionalInferenceSpecifications=?,
    ~samplePayloadUrl=?,
    ~task=?,
    ~domain=?,
    ~driftCheckBaselines=?,
    ~customerMetadataProperties=?,
    ~clientToken=?,
    ~modelMetrics=?,
    ~metadataProperties=?,
    ~modelApprovalStatus=?,
    ~tags=?,
    ~certifyForMarketplace=?,
    ~sourceAlgorithmSpecification=?,
    ~validationSpecification=?,
    ~inferenceSpecification=?,
    ~modelPackageDescription=?,
    ~modelPackageGroupName=?,
    ~modelPackageName=?,
    (),
  ) =>
    new({
      additionalInferenceSpecifications,
      samplePayloadUrl,
      task,
      domain,
      driftCheckBaselines,
      customerMetadataProperties,
      clientToken,
      modelMetrics,
      metadataProperties,
      modelApprovalStatus,
      tags,
      certifyForMarketplace,
      sourceAlgorithmSpecification,
      validationSpecification,
      inferenceSpecification,
      modelPackageDescription,
      modelPackageGroupName,
      modelPackageName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateInferenceRecommendationsJob = {
  type t
  type request = {
    @ocaml.doc("<p>The metadata that you apply to Amazon Web Services resources to help you 
           categorize and organize them. Each tag consists of a key and a value, both of 
           which you define. For more information, see 
           <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services Resources</a> 
           in the Amazon Web Services General Reference.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>A set of conditions for stopping a recommendation job.  If any of 
          the conditions are met, the job is automatically stopped.</p>")
    @as("StoppingConditions")
    stoppingConditions: option<recommendationJobStoppingConditions>,
    @ocaml.doc("<p>Description of the recommendation job.</p>") @as("JobDescription")
    jobDescription: option<recommendationJobDescription>,
    @ocaml.doc("<p>Provides information about the versioned model package Amazon Resource Name (ARN), 
    the traffic pattern, and endpoint configurations.</p>")
    @as("InputConfig")
    inputConfig: recommendationJobInputConfig,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker 
    to perform tasks on your behalf.</p>")
    @as("RoleArn")
    roleArn: roleArn,
    @ocaml.doc("<p>Defines the type of recommendation job. Specify <code>Default</code> to initiate an instance 
           recommendation and <code>Advanced</code> to initiate a load test. If left unspecified, 
           Amazon SageMaker Inference Recommender will run an instance recommendation (<code>DEFAULT</code>) job.</p>")
    @as("JobType")
    jobType: recommendationJobType,
    @ocaml.doc("<p>A name for the recommendation job. The name must be unique within 
           the Amazon Web Services Region and within your Amazon Web Services account.</p>")
    @as("JobName")
    jobName: recommendationJobName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the recommendation job.</p>") @as("JobArn")
    jobArn: recommendationJobArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateInferenceRecommendationsJobCommand"
  let make = (
    ~inputConfig,
    ~roleArn,
    ~jobType,
    ~jobName,
    ~tags=?,
    ~stoppingConditions=?,
    ~jobDescription=?,
    (),
  ) => new({tags, stoppingConditions, jobDescription, inputConfig, roleArn, jobType, jobName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateHyperParameterTuningJob = {
  type t
  type request = {
    @ocaml.doc("<p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
            different ways, for example, by purpose, owner, or environment. For more information,
            see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
                Resources</a>.</p>
        <p>Tags that you specify for the tuning job are also added to all training jobs that the
            tuning job launches.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>Specifies the configuration for starting the hyperparameter tuning job using one or
            more previous tuning jobs as a starting point. The results of previous tuning jobs are
            used to inform which combinations of hyperparameters to search over in the new tuning
            job.</p>
        <p>All training jobs launched by the new hyperparameter tuning job are evaluated by using
            the objective metric. If you specify <code>IDENTICAL_DATA_AND_ALGORITHM</code> as the
                <code>WarmStartType</code> value for the warm start configuration, the training job
            that performs the best in the new tuning job is compared to the best training jobs from
            the parent tuning jobs. From these, the training job that performs the best as measured
            by the objective metric is returned as the overall best training job.</p>
        <note>
            <p>All training jobs launched by parent hyperparameter tuning jobs and the new
                hyperparameter tuning jobs count against the limit of training jobs for the tuning
                job.</p>
        </note>")
    @as("WarmStartConfig")
    warmStartConfig: option<hyperParameterTuningJobWarmStartConfig>,
    @ocaml.doc("<p>A list of the <a>HyperParameterTrainingJobDefinition</a> objects launched
            for this tuning job.</p>")
    @as("TrainingJobDefinitions")
    trainingJobDefinitions: option<hyperParameterTrainingJobDefinitions>,
    @ocaml.doc("<p>The <a>HyperParameterTrainingJobDefinition</a> object that describes the
            training jobs that this tuning job launches,
            including
            static hyperparameters, input data configuration, output data configuration, resource
            configuration, and stopping condition.</p>")
    @as("TrainingJobDefinition")
    trainingJobDefinition: option<hyperParameterTrainingJobDefinition>,
    @ocaml.doc("<p>The <a>HyperParameterTuningJobConfig</a> object that describes the tuning
            job, including the search strategy, the objective metric used to evaluate training jobs,
            ranges of parameters to search, and resource limits for the tuning job. For more
            information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html\">How
                Hyperparameter Tuning Works</a>.</p>")
    @as("HyperParameterTuningJobConfig")
    hyperParameterTuningJobConfig: hyperParameterTuningJobConfig,
    @ocaml.doc("<p>The name of the tuning job. This name is the prefix for the names of all training jobs
            that this tuning job launches. The name must be unique within the same Amazon Web Services account and
            Amazon Web Services Region. The name must have 1 to 32 characters. Valid characters are a-z, A-Z, 0-9,
            and : + = @ _ % - (hyphen). The name is not case sensitive.</p>")
    @as("HyperParameterTuningJobName")
    hyperParameterTuningJobName: hyperParameterTuningJobName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the tuning job. Amazon SageMaker assigns an ARN to a
            hyperparameter tuning job when you create it.</p>")
    @as("HyperParameterTuningJobArn")
    hyperParameterTuningJobArn: hyperParameterTuningJobArn,
  }
  @module("@aws-sdk/client-sagemaker") @new
  external new: request => t = "CreateHyperParameterTuningJobCommand"
  let make = (
    ~hyperParameterTuningJobConfig,
    ~hyperParameterTuningJobName,
    ~tags=?,
    ~warmStartConfig=?,
    ~trainingJobDefinitions=?,
    ~trainingJobDefinition=?,
    (),
  ) =>
    new({
      tags,
      warmStartConfig,
      trainingJobDefinitions,
      trainingJobDefinition,
      hyperParameterTuningJobConfig,
      hyperParameterTuningJobName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module DescribeAlgorithm = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the algorithm to describe.</p>") @as("AlgorithmName")
    algorithmName: arnOrName,
  }
  type response = {
    @ocaml.doc(
      "<p>Whether the algorithm is certified to be listed in Amazon Web Services Marketplace.</p>"
    )
    @as("CertifyForMarketplace")
    certifyForMarketplace: option<certifyForMarketplace>,
    @ocaml.doc("<p>The product identifier of the algorithm.</p>") @as("ProductId")
    productId: option<productId>,
    @ocaml.doc("<p>Details about the current status of the algorithm.</p>")
    @as("AlgorithmStatusDetails")
    algorithmStatusDetails: algorithmStatusDetails,
    @ocaml.doc("<p>The current status of the algorithm.</p>") @as("AlgorithmStatus")
    algorithmStatus: algorithmStatus,
    @ocaml.doc("<p>Details about configurations for one or more training jobs that Amazon SageMaker runs to test the
            algorithm.</p>")
    @as("ValidationSpecification")
    validationSpecification: option<algorithmValidationSpecification>,
    @ocaml.doc("<p>Details about inference jobs that the algorithm runs.</p>")
    @as("InferenceSpecification")
    inferenceSpecification: option<inferenceSpecification>,
    @ocaml.doc("<p>Details about training jobs run by this algorithm.</p>")
    @as("TrainingSpecification")
    trainingSpecification: trainingSpecification,
    @ocaml.doc("<p>A timestamp specifying when the algorithm was created.</p>") @as("CreationTime")
    creationTime: creationTime,
    @ocaml.doc("<p>A brief summary about the algorithm.</p>") @as("AlgorithmDescription")
    algorithmDescription: option<entityDescription>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the algorithm.</p>") @as("AlgorithmArn")
    algorithmArn: algorithmArn,
    @ocaml.doc("<p>The name of the algorithm being described.</p>") @as("AlgorithmName")
    algorithmName: entityName,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "DescribeAlgorithmCommand"
  let make = (~algorithmName, ()) => new({algorithmName: algorithmName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module CreateAlgorithm = {
  type t
  type request = {
    @ocaml.doc("<p>An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in
            different ways, for example, by purpose, owner, or environment. For more information,
            see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services
                Resources</a>.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc(
      "<p>Whether to certify the algorithm so that it can be listed in Amazon Web Services Marketplace.</p>"
    )
    @as("CertifyForMarketplace")
    certifyForMarketplace: option<certifyForMarketplace>,
    @ocaml.doc("<p>Specifies configurations for one or more training jobs and that Amazon SageMaker runs to test the
            algorithm's training code and, optionally, one or more batch transform jobs that Amazon SageMaker
            runs to test the algorithm's inference code.</p>")
    @as("ValidationSpecification")
    validationSpecification: option<algorithmValidationSpecification>,
    @ocaml.doc("<p>Specifies details about inference jobs that the algorithm runs, including the
            following:</p>
        <ul>
            <li>
                <p>The Amazon ECR paths of containers that contain the inference code and model
                    artifacts.</p>
            </li>
            <li>
                <p>The instance types that the algorithm supports for transform jobs and
                    real-time endpoints used for inference.</p>
            </li>
            <li>
                <p>The input and output content formats that the algorithm supports for
                    inference.</p>
            </li>
         </ul>")
    @as("InferenceSpecification")
    inferenceSpecification: option<inferenceSpecification>,
    @ocaml.doc("<p>Specifies details about training jobs run by this algorithm, including the
            following:</p>
        <ul>
            <li>
                <p>The Amazon ECR path of the container and the version digest of the
                    algorithm.</p>
            </li>
            <li>
                <p>The hyperparameters that the algorithm supports.</p>
            </li>
            <li>
                <p>The instance types that the algorithm supports for training.</p>
            </li>
            <li>
                <p>Whether the algorithm supports distributed training.</p>
            </li>
            <li>
                <p>The metrics that the algorithm emits to Amazon CloudWatch.</p>
            </li>
            <li>
                <p>Which metrics that the algorithm emits can be used as the objective metric for
                    hyperparameter tuning jobs.</p>
            </li>
            <li>
                <p>The input channels that the algorithm supports for training data. For example,
                    an algorithm might support <code>train</code>, <code>validation</code>, and
                        <code>test</code> channels.</p>
            </li>
         </ul>")
    @as("TrainingSpecification")
    trainingSpecification: trainingSpecification,
    @ocaml.doc("<p>A description of the algorithm.</p>") @as("AlgorithmDescription")
    algorithmDescription: option<entityDescription>,
    @ocaml.doc("<p>The name of the algorithm.</p>") @as("AlgorithmName") algorithmName: entityName,
  }
  type response = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the new algorithm.</p>") @as("AlgorithmArn")
    algorithmArn: algorithmArn,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "CreateAlgorithmCommand"
  let make = (
    ~trainingSpecification,
    ~algorithmName,
    ~tags=?,
    ~certifyForMarketplace=?,
    ~validationSpecification=?,
    ~inferenceSpecification=?,
    ~algorithmDescription=?,
    (),
  ) =>
    new({
      tags,
      certifyForMarketplace,
      validationSpecification,
      inferenceSpecification,
      trainingSpecification,
      algorithmDescription,
      algorithmName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
module Search = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of results to return.</p>") @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>If more than <code>MaxResults</code> resources match the specified
      <code>SearchExpression</code>, the response includes a
      <code>NextToken</code>. The <code>NextToken</code> can be passed to the next
      <code>SearchRequest</code> to continue retrieving results.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>How <code>SearchResults</code> are ordered. Valid values are <code>Ascending</code> or
      <code>Descending</code>. The default is <code>Descending</code>.</p>")
    @as("SortOrder")
    sortOrder: option<searchSortOrder>,
    @ocaml.doc("<p>The name of the resource property used to sort the <code>SearchResults</code>. The
      default is <code>LastModifiedTime</code>.</p>")
    @as("SortBy")
    sortBy: option<resourcePropertyName>,
    @ocaml.doc("<p>A Boolean conditional statement. Resources must satisfy this condition to be
      included in search results. You must provide at least one subexpression, filter, or
      nested filter. The maximum number of recursive <code>SubExpressions</code>,
      <code>NestedFilters</code>, and <code>Filters</code> that can be included in a
      <code>SearchExpression</code> object is 50.</p>")
    @as("SearchExpression")
    searchExpression: option<searchExpression>,
    @ocaml.doc("<p>The name of the Amazon SageMaker resource to search for.</p>") @as("Resource")
    resource: resourceType,
  }
  type response = {
    @ocaml.doc("<p>If the result of the previous <code>Search</code> request was truncated, the response
      includes a NextToken. To retrieve the next set of results, use the token in the next
      request.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of <code>SearchRecord</code> objects.</p>") @as("Results")
    results: option<searchResultsList>,
  }
  @module("@aws-sdk/client-sagemaker") @new external new: request => t = "SearchCommand"
  let make = (
    ~resource,
    ~maxResults=?,
    ~nextToken=?,
    ~sortOrder=?,
    ~sortBy=?,
    ~searchExpression=?,
    (),
  ) => new({maxResults, nextToken, sortOrder, sortBy, searchExpression, resource})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
