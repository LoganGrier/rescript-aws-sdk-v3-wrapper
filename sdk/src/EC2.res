type responseMetadata = {
  httpStatusCode: option<float>,
  requestId: option<string>,
  extendedRequestId: option<string>,
  cfId: option<string>,
  attempts: option<int>,
  totalRetryDelay: option<int>,
}
type awsServiceClient
@module("@aws-sdk/client-ec2") @new external createClient: unit => awsServiceClient = "EC2Client"
type baseString = string
type baseBoolean = bool
type baseInteger = int
type baseTimestamp = Js.Date.t
type baseLong = float
type totalGpuMemory = int
type totalFpgaMemory = int
type scope = [@as("Region") #Region | @as("Availability Zone") #Availability_Zone]
type weekDay = [
  | @as("saturday") #Saturday
  | @as("friday") #Friday
  | @as("thursday") #Thursday
  | @as("wednesday") #Wednesday
  | @as("tuesday") #Tuesday
  | @as("monday") #Monday
  | @as("sunday") #Sunday
]
type vpnStaticRouteSource = [@as("Static") #Static]
type vpnState = [
  | @as("deleted") #Deleted
  | @as("deleting") #Deleting
  | @as("available") #Available
  | @as("pending") #Pending
]
type vpnProtocol = [@as("openvpn") #Openvpn]
type vpnGatewayId = string
type vpnEcmpSupportValue = [@as("disable") #Disable | @as("enable") #Enable]
type vpnConnectionId = string
type vpnConnectionDeviceTypeId = string
type vpnConnectionDeviceSampleConfiguration = string
type vpcTenancy = [@as("default") #Default]
type vpcState = [@as("available") #Available | @as("pending") #Pending]
type vpcPeeringConnectionStateReasonCode = [
  | @as("deleting") #Deleting
  | @as("provisioning") #Provisioning
  | @as("expired") #Expired
  | @as("failed") #Failed
  | @as("rejected") #Rejected
  | @as("deleted") #Deleted
  | @as("active") #Active
  | @as("pending-acceptance") #Pending_Acceptance
  | @as("initiating-request") #Initiating_Request
]
type vpcPeeringConnectionId = string
type vpcId = string
type vpcFlowLogId = string
type vpcEndpointType = [
  | @as("GatewayLoadBalancer") #GatewayLoadBalancer
  | @as("Gateway") #Gateway
  | @as("Interface") #Interface
]
type vpcEndpointServiceId = string
type vpcEndpointId = string
type vpcCidrBlockStateCode = [
  | @as("failed") #Failed
  | @as("failing") #Failing
  | @as("disassociated") #Disassociated
  | @as("disassociating") #Disassociating
  | @as("associated") #Associated
  | @as("associating") #Associating
]
type vpcCidrAssociationId = string
type vpcAttributeName = [
  | @as("enableDnsHostnames") #EnableDnsHostnames
  | @as("enableDnsSupport") #EnableDnsSupport
]
type volumeType = [
  | @as("gp3") #Gp3
  | @as("st1") #St1
  | @as("sc1") #Sc1
  | @as("gp2") #Gp2
  | @as("io2") #Io2
  | @as("io1") #Io1
  | @as("standard") #Standard
]
type volumeStatusName = [@as("io-performance") #Io_Performance | @as("io-enabled") #Io_Enabled]
type volumeStatusInfoStatus = [
  | @as("insufficient-data") #Insufficient_Data
  | @as("impaired") #Impaired
  | @as("ok") #Ok
]
type volumeState = [
  | @as("error") #Error
  | @as("deleted") #Deleted
  | @as("deleting") #Deleting
  | @as("in-use") #In_Use
  | @as("available") #Available
  | @as("creating") #Creating
]
type volumeModificationState = [
  | @as("failed") #Failed
  | @as("completed") #Completed
  | @as("optimizing") #Optimizing
  | @as("modifying") #Modifying
]
type volumeId = string
type volumeAttributeName = [@as("productCodes") #ProductCodes | @as("autoEnableIO") #AutoEnableIO]
type volumeAttachmentState = [
  | @as("busy") #Busy
  | @as("detached") #Detached
  | @as("detaching") #Detaching
  | @as("attached") #Attached
  | @as("attaching") #Attaching
]
type virtualizationType = [@as("paravirtual") #Paravirtual | @as("hvm") #Hvm]
type versionDescription = string
type vcpuCount = int
type usageClassType = [@as("on-demand") #On_Demand | @as("spot") #Spot]
type unsuccessfulInstanceCreditSpecificationErrorCode = [
  | @as("InstanceCreditSpecification.NotSupported") #InstanceCreditSpecification_NotSupported
  | @as("IncorrectInstanceState") #IncorrectInstanceState
  | @as("InvalidInstanceID.NotFound") #InvalidInstanceID_NotFound
  | @as("InvalidInstanceID.Malformed") #InvalidInstanceID_Malformed
]
type unlimitedSupportedInstanceFamily = [
  | @as("t4g") #T4g
  | @as("t3a") #T3a
  | @as("t3") #T3
  | @as("t2") #T2
]
type tunnelInsideIpVersion = [@as("ipv6") #Ipv6 | @as("ipv4") #Ipv4]
type trunkInterfaceAssociationId = string
type transportProtocol = [@as("udp") #Udp | @as("tcp") #Tcp]
type transitGatewayState = [
  | @as("deleted") #Deleted
  | @as("deleting") #Deleting
  | @as("modifying") #Modifying
  | @as("available") #Available
  | @as("pending") #Pending
]
type transitGatewayRouteType = [@as("propagated") #Propagated | @as("static") #Static]
type transitGatewayRouteTableState = [
  | @as("deleted") #Deleted
  | @as("deleting") #Deleting
  | @as("available") #Available
  | @as("pending") #Pending
]
type transitGatewayRouteTableId = string
type transitGatewayRouteState = [
  | @as("deleted") #Deleted
  | @as("deleting") #Deleting
  | @as("blackhole") #Blackhole
  | @as("active") #Active
  | @as("pending") #Pending
]
type transitGatewayPropagationState = [
  | @as("disabled") #Disabled
  | @as("disabling") #Disabling
  | @as("enabled") #Enabled
  | @as("enabling") #Enabling
]
type transitGatewayPrefixListReferenceState = [
  | @as("deleting") #Deleting
  | @as("modifying") #Modifying
  | @as("available") #Available
  | @as("pending") #Pending
]
type transitGatewayMulticastDomainState = [
  | @as("deleted") #Deleted
  | @as("deleting") #Deleting
  | @as("available") #Available
  | @as("pending") #Pending
]
type transitGatewayMulticastDomainId = string
type transitGatewayMulitcastDomainAssociationState = [
  | @as("failed") #Failed
  | @as("rejected") #Rejected
  | @as("disassociated") #Disassociated
  | @as("disassociating") #Disassociating
  | @as("associated") #Associated
  | @as("associating") #Associating
  | @as("pendingAcceptance") #PendingAcceptance
]
type transitGatewayMaxResults = int
type transitGatewayId = string
type transitGatewayConnectPeerState = [
  | @as("deleted") #Deleted
  | @as("deleting") #Deleting
  | @as("available") #Available
  | @as("pending") #Pending
]
type transitGatewayConnectPeerId = string
type transitGatewayAttachmentState = [
  | @as("failing") #Failing
  | @as("rejecting") #Rejecting
  | @as("rejected") #Rejected
  | @as("failed") #Failed
  | @as("deleted") #Deleted
  | @as("deleting") #Deleting
  | @as("modifying") #Modifying
  | @as("available") #Available
  | @as("pending") #Pending
  | @as("rollingBack") #RollingBack
  | @as("pendingAcceptance") #PendingAcceptance
  | @as("initiatingRequest") #InitiatingRequest
  | @as("initiating") #Initiating
]
type transitGatewayAttachmentResourceType = [
  | @as("tgw-peering") #Tgw_Peering
  | @as("peering") #Peering
  | @as("connect") #Connect
  | @as("direct-connect-gateway") #Direct_Connect_Gateway
  | @as("vpn") #Vpn
  | @as("vpc") #Vpc
]
type transitGatewayAttachmentId = string
type transitGatewayAssociationState = [
  | @as("disassociated") #Disassociated
  | @as("disassociating") #Disassociating
  | @as("associated") #Associated
  | @as("associating") #Associating
]
type transitAssociationGatewayId = string
type trafficType = [@as("ALL") #ALL | @as("REJECT") #REJECT | @as("ACCEPT") #ACCEPT]
type trafficMirroringMaxResults = int
type trafficMirrorTargetType = [
  | @as("network-load-balancer") #Network_Load_Balancer
  | @as("network-interface") #Network_Interface
]
type trafficMirrorTargetId = string
type trafficMirrorSessionId = string
type trafficMirrorSessionField = [
  | @as("virtual-network-id") #Virtual_Network_Id
  | @as("description") #Description
  | @as("packet-length") #Packet_Length
]
type trafficMirrorRuleAction = [@as("reject") #Reject | @as("accept") #Accept]
type trafficMirrorNetworkService = [@as("amazon-dns") #Amazon_Dns]
type trafficMirrorFilterRuleId = string
type trafficMirrorFilterRuleField = [
  | @as("description") #Description
  | @as("protocol") #Protocol
  | @as("source-port-range") #Source_Port_Range
  | @as("destination-port-range") #Destination_Port_Range
]
type trafficMirrorFilterId = string
type trafficDirection = [@as("egress") #Egress | @as("ingress") #Ingress]
type tieringOperationStatus = [
  | @as("permanent-restore-failed") #Permanent_Restore_Failed
  | @as("permanent-restore-completed") #Permanent_Restore_Completed
  | @as("permanent-restore-in-progress") #Permanent_Restore_In_Progress
  | @as("temporary-restore-failed") #Temporary_Restore_Failed
  | @as("temporary-restore-completed") #Temporary_Restore_Completed
  | @as("temporary-restore-in-progress") #Temporary_Restore_In_Progress
  | @as("archival-failed") #Archival_Failed
  | @as("archival-completed") #Archival_Completed
  | @as("archival-in-progress") #Archival_In_Progress
]
type threadsPerCore = int
type tenancy = [@as("host") #Host | @as("dedicated") #Dedicated | @as("default") #Default]
type telemetryStatus = [@as("DOWN") #DOWN | @as("UP") #UP]
type targetStorageTier = [@as("archive") #Archive]
type targetCapacityUnitType = [
  | @as("units") #Units
  | @as("memory-mib") #Memory_Mib
  | @as("vcpu") #Vcpu
]
type taggableResourceId = string
type summaryStatus = [
  | @as("initializing") #Initializing
  | @as("not-applicable") #Not_Applicable
  | @as("insufficient-data") #Insufficient_Data
  | @as("impaired") #Impaired
  | @as("ok") #Ok
]
type subnetState = [@as("available") #Available | @as("pending") #Pending]
type subnetId = string
type subnetCidrReservationType = [@as("explicit") #Explicit | @as("prefix") #Prefix]
type subnetCidrReservationId = string
type subnetCidrBlockStateCode = [
  | @as("failed") #Failed
  | @as("failing") #Failing
  | @as("disassociated") #Disassociated
  | @as("disassociating") #Disassociating
  | @as("associated") #Associated
  | @as("associating") #Associating
]
type subnetCidrAssociationId = string
type string_ = string
type storageTier = [@as("standard") #Standard | @as("archive") #Archive]
type statusType = [
  | @as("initializing") #Initializing
  | @as("insufficient-data") #Insufficient_Data
  | @as("failed") #Failed
  | @as("passed") #Passed
]
type statusName = [@as("reachability") #Reachability]
type status = [
  | @as("InClassic") #InClassic
  | @as("InVpc") #InVpc
  | @as("MoveInProgress") #MoveInProgress
]
type staticSourcesSupportValue = [@as("disable") #Disable | @as("enable") #Enable]
type state = [
  | @as("Expired") #Expired
  | @as("Failed") #Failed
  | @as("Rejected") #Rejected
  | @as("Deleted") #Deleted
  | @as("Deleting") #Deleting
  | @as("Available") #Available
  | @as("Pending") #Pending
  | @as("PendingAcceptance") #PendingAcceptance
]
type spotPlacementScoresTargetCapacity = int
type spotPlacementScoresMaxResults = int
type spotInstanceType = [@as("persistent") #Persistent | @as("one-time") #One_Time]
type spotInstanceState = [
  | @as("failed") #Failed
  | @as("cancelled") #Cancelled
  | @as("closed") #Closed
  | @as("active") #Active
  | @as("open") #Open
]
type spotInstanceRequestId = string
type spotInstanceInterruptionBehavior = [
  | @as("terminate") #Terminate
  | @as("stop") #Stop
  | @as("hibernate") #Hibernate
]
type spotFleetRequestId = string
type spotAllocationStrategy = [
  | @as("capacity-optimized-prioritized") #Capacity_Optimized_Prioritized
  | @as("capacity-optimized") #Capacity_Optimized
  | @as("diversified") #Diversified
  | @as("lowest-price") #Lowest_Price
]
type snapshotState = [
  | @as("recovering") #Recovering
  | @as("recoverable") #Recoverable
  | @as("error") #Error
  | @as("completed") #Completed
  | @as("pending") #Pending
]
type snapshotId = string
type snapshotAttributeName = [
  | @as("createVolumePermission") #CreateVolumePermission
  | @as("productCodes") #ProductCodes
]
type shutdownBehavior = [@as("terminate") #Terminate | @as("stop") #Stop]
type serviceType = [
  | @as("GatewayLoadBalancer") #GatewayLoadBalancer
  | @as("Gateway") #Gateway
  | @as("Interface") #Interface
]
type serviceState = [
  | @as("Failed") #Failed
  | @as("Deleted") #Deleted
  | @as("Deleting") #Deleting
  | @as("Available") #Available
  | @as("Pending") #Pending
]
type sensitiveUserData = string
type selfServicePortal = [@as("disabled") #Disabled | @as("enabled") #Enabled]
type securityGroupRuleId = string
type securityGroupName = string
type securityGroupId = string
type scheduledInstanceId = string
type ruleAction = [@as("deny") #Deny | @as("allow") #Allow]
type routeTableId = string
type routeTableAssociationStateCode = [
  | @as("failed") #Failed
  | @as("disassociated") #Disassociated
  | @as("disassociating") #Disassociating
  | @as("associated") #Associated
  | @as("associating") #Associating
]
type routeTableAssociationId = string
type routeState = [@as("blackhole") #Blackhole | @as("active") #Active]
type routeOrigin = [
  | @as("EnableVgwRoutePropagation") #EnableVgwRoutePropagation
  | @as("CreateRoute") #CreateRoute
  | @as("CreateRouteTable") #CreateRouteTable
]
type routeGatewayId = string
type rootDeviceType = [@as("instance-store") #Instance_Store | @as("ebs") #Ebs]
type resultRange = int
type restoreSnapshotTierRequestTemporaryRestoreDays = int
type resourceType = [
  | @as("vpc-flow-log") #Vpc_Flow_Log
  | @as("vpn-gateway") #Vpn_Gateway
  | @as("vpn-connection") #Vpn_Connection
  | @as("vpc-peering-connection") #Vpc_Peering_Connection
  | @as("vpc-endpoint-service") #Vpc_Endpoint_Service
  | @as("vpc-endpoint") #Vpc_Endpoint
  | @as("vpc") #Vpc
  | @as("volume") #Volume
  | @as("transit-gateway-route-table") #Transit_Gateway_Route_Table
  | @as("transit-gateway-multicast-domain") #Transit_Gateway_Multicast_Domain
  | @as("transit-gateway-connect-peer") #Transit_Gateway_Connect_Peer
  | @as("transit-gateway-attachment") #Transit_Gateway_Attachment
  | @as("transit-gateway") #Transit_Gateway
  | @as("traffic-mirror-target") #Traffic_Mirror_Target
  | @as("traffic-mirror-session") #Traffic_Mirror_Session
  | @as("traffic-mirror-filter") #Traffic_Mirror_Filter
  | @as("subnet-cidr-reservation") #Subnet_Cidr_Reservation
  | @as("subnet") #Subnet
  | @as("spot-instances-request") #Spot_Instances_Request
  | @as("spot-fleet-request") #Spot_Fleet_Request
  | @as("snapshot") #Snapshot
  | @as("security-group-rule") #Security_Group_Rule
  | @as("security-group") #Security_Group
  | @as("route-table") #Route_Table
  | @as("reserved-instances") #Reserved_Instances
  | @as("replace-root-volume-task") #Replace_Root_Volume_Task
  | @as("prefix-list") #Prefix_List
  | @as("placement-group") #Placement_Group
  | @as("network-insights-access-scope-analysis") #Network_Insights_Access_Scope_Analysis
  | @as("network-insights-access-scope") #Network_Insights_Access_Scope
  | @as("network-insights-path") #Network_Insights_Path
  | @as("network-insights-analysis") #Network_Insights_Analysis
  | @as("network-interface") #Network_Interface
  | @as("network-acl") #Network_Acl
  | @as("natgateway") #Natgateway
  | @as("local-gateway-route-table-virtual-interface-group-association")
  #Local_Gateway_Route_Table_Virtual_Interface_Group_Association
  | @as("local-gateway-route-table-vpc-association") #Local_Gateway_Route_Table_Vpc_Association
  | @as("local-gateway-virtual-interface-group") #Local_Gateway_Virtual_Interface_Group
  | @as("local-gateway-virtual-interface") #Local_Gateway_Virtual_Interface
  | @as("local-gateway-route-table") #Local_Gateway_Route_Table
  | @as("local-gateway") #Local_Gateway
  | @as("launch-template") #Launch_Template
  | @as("key-pair") #Key_Pair
  | @as("ipv6pool-ec2") #Ipv6pool_Ec2
  | @as("ipv4pool-ec2") #Ipv4pool_Ec2
  | @as("ipam-scope") #Ipam_Scope
  | @as("ipam-pool") #Ipam_Pool
  | @as("ipam") #Ipam
  | @as("internet-gateway") #Internet_Gateway
  | @as("instance-event-window") #Instance_Event_Window
  | @as("instance") #Instance
  | @as("import-snapshot-task") #Import_Snapshot_Task
  | @as("import-image-task") #Import_Image_Task
  | @as("image") #Image
  | @as("host-reservation") #Host_Reservation
  | @as("fpga-image") #Fpga_Image
  | @as("fleet") #Fleet
  | @as("export-instance-task") #Export_Instance_Task
  | @as("export-image-task") #Export_Image_Task
  | @as("elastic-gpu") #Elastic_Gpu
  | @as("elastic-ip") #Elastic_Ip
  | @as("egress-only-internet-gateway") #Egress_Only_Internet_Gateway
  | @as("dhcp-options") #Dhcp_Options
  | @as("dedicated-host") #Dedicated_Host
  | @as("carrier-gateway") #Carrier_Gateway
  | @as("customer-gateway") #Customer_Gateway
  | @as("client-vpn-endpoint") #Client_Vpn_Endpoint
  | @as("capacity-reservation") #Capacity_Reservation
]
type resourceArn = string
type resetImageAttributeName = [@as("launchPermission") #LaunchPermission]
type resetFpgaImageAttributeName = [@as("loadPermission") #LoadPermission]
type reservedInstancesOfferingId = string
type reservedInstancesModificationId = string
type reservedInstancesListingId = string
type reservedInstanceState = [
  | @as("queued-deleted") #Queued_Deleted
  | @as("queued") #Queued
  | @as("retired") #Retired
  | @as("payment-failed") #Payment_Failed
  | @as("active") #Active
  | @as("payment-pending") #Payment_Pending
]
type reservationState = [
  | @as("retired") #Retired
  | @as("active") #Active
  | @as("payment-failed") #Payment_Failed
  | @as("payment-pending") #Payment_Pending
]
type reservationId = string
type reportStatusType = [@as("impaired") #Impaired | @as("ok") #Ok]
type reportInstanceReasonCodes = [
  | @as("other") #Other
  | @as("performance-other") #Performance_Other
  | @as("performance-ebs-volume") #Performance_Ebs_Volume
  | @as("performance-instance-store") #Performance_Instance_Store
  | @as("performance-network") #Performance_Network
  | @as("password-not-available") #Password_Not_Available
  | @as("not-accepting-credentials") #Not_Accepting_Credentials
  | @as("unresponsive") #Unresponsive
  | @as("instance-stuck-in-state") #Instance_Stuck_In_State
]
type replacementStrategy = [
  | @as("launch-before-terminate") #Launch_Before_Terminate
  | @as("launch") #Launch
]
type replaceRootVolumeTaskState = [
  | @as("failed-detached") #Failed_Detached
  | @as("failed") #Failed
  | @as("succeeded") #Succeeded
  | @as("failing") #Failing
  | @as("in-progress") #In_Progress
  | @as("pending") #Pending
]
type replaceRootVolumeTaskId = string
type recurringChargeFrequency = [@as("Hourly") #Hourly]
type ramdiskId = string
type riproductDescription = [
  | @as("Windows (Amazon VPC)") #Windows_Amazon_VPC
  | @as("Windows") #Windows
  | @as("Linux/UNIX (Amazon VPC)") #Linux_UNIX_Amazon_VPC
  | @as("Linux/UNIX") #Linux_UNIX
]
type publicIpAddress = string
type protocolValue = [@as("gre") #Gre]
type protocol = [@as("udp") #Udp | @as("tcp") #Tcp]
type productCodeValues = [@as("marketplace") #Marketplace | @as("devpay") #Devpay]
type processorSustainedClockSpeed = float
type principalType = [
  | @as("Role") #Role
  | @as("User") #User
  | @as("Account") #Account
  | @as("OrganizationUnit") #OrganizationUnit
  | @as("Service") #Service
  | @as("All") #All
]
type prefixListState = [
  | @as("delete-failed") #Delete_Failed
  | @as("delete-complete") #Delete_Complete
  | @as("delete-in-progress") #Delete_In_Progress
  | @as("restore-failed") #Restore_Failed
  | @as("restore-complete") #Restore_Complete
  | @as("restore-in-progress") #Restore_In_Progress
  | @as("modify-failed") #Modify_Failed
  | @as("modify-complete") #Modify_Complete
  | @as("modify-in-progress") #Modify_In_Progress
  | @as("create-failed") #Create_Failed
  | @as("create-complete") #Create_Complete
  | @as("create-in-progress") #Create_In_Progress
]
type prefixListResourceId = string
type prefixListMaxResults = int
type port = int
type poolMaxResults = int
type platformValues = [@as("Windows") #Windows]
type placementStrategy = [
  | @as("partition") #Partition
  | @as("spread") #Spread
  | @as("cluster") #Cluster
]
type placementGroupStrategy = [
  | @as("spread") #Spread
  | @as("partition") #Partition
  | @as("cluster") #Cluster
]
type placementGroupState = [
  | @as("deleted") #Deleted
  | @as("deleting") #Deleting
  | @as("available") #Available
  | @as("pending") #Pending
]
type placementGroupName = string
type placementGroupId = string
type placementGroupArn = string
type permissionGroup = [@as("all") #All]
type paymentOption = [
  | @as("NoUpfront") #NoUpfront
  | @as("PartialUpfront") #PartialUpfront
  | @as("AllUpfront") #AllUpfront
]
type payerResponsibility = [@as("ServiceOwner") #ServiceOwner]
type partitionLoadFrequency = [
  | @as("monthly") #Monthly
  | @as("weekly") #Weekly
  | @as("daily") #Daily
  | @as("none") #None
]
type outpostArn = string
type operationType = [@as("remove") #Remove | @as("add") #Add]
type onDemandAllocationStrategy = [
  | @as("prioritized") #Prioritized
  | @as("lowestPrice") #LowestPrice
]
type offeringTypeValues = [
  | @as("All Upfront") #All_Upfront
  | @as("Partial Upfront") #Partial_Upfront
  | @as("No Upfront") #No_Upfront
  | @as("Light Utilization") #Light_Utilization
  | @as("Medium Utilization") #Medium_Utilization
  | @as("Heavy Utilization") #Heavy_Utilization
]
type offeringId = string
type offeringClassType = [@as("convertible") #Convertible | @as("standard") #Standard]
type nextToken = string
type networkPerformance = string
type networkInterfaceType = [
  | @as("aws_codestar_connections_managed") #Aws_Codestar_Connections_Managed
  | @as("iot_rules_managed") #Iot_Rules_Managed
  | @as("gateway_load_balancer_endpoint") #Gateway_Load_Balancer_Endpoint
  | @as("gateway_load_balancer") #Gateway_Load_Balancer
  | @as("api_gateway_managed") #Api_Gateway_Managed
  | @as("global_accelerator_managed") #Global_Accelerator_Managed
  | @as("quicksight") #Quicksight
  | @as("lambda") #Lambda
  | @as("transit_gateway") #Transit_Gateway
  | @as("branch") #Branch
  | @as("vpc_endpoint") #Vpc_Endpoint
  | @as("network_load_balancer") #Network_Load_Balancer
  | @as("load_balancer") #Load_Balancer
  | @as("trunk") #Trunk
  | @as("efa") #Efa
  | @as("natGateway") #NatGateway
  | @as("interface") #Interface
]
type networkInterfaceStatus = [
  | @as("detaching") #Detaching
  | @as("in-use") #In_Use
  | @as("attaching") #Attaching
  | @as("associated") #Associated
  | @as("available") #Available
]
type networkInterfacePermissionStateCode = [
  | @as("revoked") #Revoked
  | @as("revoking") #Revoking
  | @as("granted") #Granted
  | @as("pending") #Pending
]
type networkInterfacePermissionId = string
type networkInterfaceId = string
type networkInterfaceCreationType = [@as("trunk") #Trunk | @as("branch") #Branch | @as("efa") #Efa]
type networkInterfaceAttribute = [
  | @as("attachment") #Attachment
  | @as("sourceDestCheck") #SourceDestCheck
  | @as("groupSet") #GroupSet
  | @as("description") #Description
]
type networkInterfaceAttachmentId = string
type networkInsightsResourceId = string
type networkInsightsPathId = string
type networkInsightsMaxResults = int
type networkInsightsAnalysisId = string
type networkInsightsAccessScopeId = string
type networkInsightsAccessScopeAnalysisId = string
type networkCardIndex = int
type networkAclId = string
type networkAclAssociationId = string
type netmaskLength = int
type natGatewayState = [
  | @as("deleted") #Deleted
  | @as("deleting") #Deleting
  | @as("available") #Available
  | @as("failed") #Failed
  | @as("pending") #Pending
]
type natGatewayId = string
type multicastSupportValue = [@as("disable") #Disable | @as("enable") #Enable]
type moveStatus = [@as("restoringToClassic") #RestoringToClassic | @as("movingToVpc") #MovingToVpc]
type monitoringState = [
  | @as("pending") #Pending
  | @as("enabled") #Enabled
  | @as("disabling") #Disabling
  | @as("disabled") #Disabled
]
type modifyAvailabilityZoneOptInStatus = [
  | @as("not-opted-in") #Not_Opted_In
  | @as("opted-in") #Opted_In
]
type millisecondDateTime = Js.Date.t
type memorySize = float
type membershipType = [@as("igmp") #Igmp | @as("static") #Static]
type maximumThroughputInMBps = float
type maximumNetworkCards = int
type maximumIops = int
type maximumEfaInterfaces = int
type maximumBandwidthInMbps = int
type maxResults = int
type maxNetworkInterfaces = int
type maxIpv6AddrPerInterface = int
type maxIpv4AddrPerInterface = int
type marketType = [@as("spot") #Spot]
type long = float
type logDestinationType = [@as("s3") #S3 | @as("cloud-watch-logs") #Cloud_Watch_Logs]
type locationType = [
  | @as("availability-zone-id") #Availability_Zone_Id
  | @as("availability-zone") #Availability_Zone
  | @as("region") #Region
]
type location = string
type localStorageType = [@as("ssd") #Ssd | @as("hdd") #Hdd]
type localStorage = [
  | @as("excluded") #Excluded
  | @as("required") #Required
  | @as("included") #Included
]
type localGatewayVirtualInterfaceId = string
type localGatewayVirtualInterfaceGroupId = string
type localGatewayRoutetableId = string
type localGatewayRouteType = [@as("propagated") #Propagated | @as("static") #Static]
type localGatewayRouteTableVpcAssociationId = string
type localGatewayRouteTableVirtualInterfaceGroupAssociationId = string
type localGatewayRouteState = [
  | @as("deleted") #Deleted
  | @as("deleting") #Deleting
  | @as("blackhole") #Blackhole
  | @as("active") #Active
  | @as("pending") #Pending
]
type localGatewayMaxResults = int
type localGatewayId = string
type listingStatus = [
  | @as("closed") #Closed
  | @as("cancelled") #Cancelled
  | @as("pending") #Pending
  | @as("active") #Active
]
type listingState = [
  | @as("pending") #Pending
  | @as("cancelled") #Cancelled
  | @as("sold") #Sold
  | @as("available") #Available
]
type listSnapshotsInRecycleBinMaxResults = int
type listImagesInRecycleBinMaxResults = int
type launchTemplateName = string
type launchTemplateInstanceMetadataTagsState = [@as("enabled") #Enabled | @as("disabled") #Disabled]
type launchTemplateInstanceMetadataProtocolIpv6 = [
  | @as("enabled") #Enabled
  | @as("disabled") #Disabled
]
type launchTemplateInstanceMetadataOptionsState = [
  | @as("applied") #Applied
  | @as("pending") #Pending
]
type launchTemplateInstanceMetadataEndpointState = [
  | @as("enabled") #Enabled
  | @as("disabled") #Disabled
]
type launchTemplateId = string
type launchTemplateHttpTokensState = [@as("required") #Required | @as("optional") #Optional]
type launchTemplateErrorCode = [
  | @as("unexpectedError") #UnexpectedError
  | @as("launchTemplateVersionDoesNotExist") #LaunchTemplateVersionDoesNotExist
  | @as("launchTemplateNameMalformed") #LaunchTemplateNameMalformed
  | @as("launchTemplateNameDoesNotExist") #LaunchTemplateNameDoesNotExist
  | @as("launchTemplateIdMalformed") #LaunchTemplateIdMalformed
  | @as("launchTemplateIdDoesNotExist") #LaunchTemplateIdDoesNotExist
]
type launchTemplateElasticInferenceAcceleratorCount = int
type launchTemplateAutoRecoveryState = [@as("disabled") #Disabled | @as("default") #Default]
type kmsKeyId = string
type keyType = [@as("ed25519") #Ed25519 | @as("rsa") #Rsa]
type keyPairName = string
type keyPairId = string
type kernelId = string
type ipv6SupportValue = [@as("disable") #Disable | @as("enable") #Enable]
type ipv6PoolMaxResults = int
type ipv6PoolEc2Id = string
type ipv6Flag = bool
type ipv6Address = string
type ipv4PoolEc2Id = string
type ipv4PoolCoipId = string
type ipamState = [
  | @as("delete-failed") #Delete_Failed
  | @as("delete-complete") #Delete_Complete
  | @as("delete-in-progress") #Delete_In_Progress
  | @as("modify-failed") #Modify_Failed
  | @as("modify-complete") #Modify_Complete
  | @as("modify-in-progress") #Modify_In_Progress
  | @as("create-failed") #Create_Failed
  | @as("create-complete") #Create_Complete
  | @as("create-in-progress") #Create_In_Progress
]
type ipamScopeType = [@as("private") #Private | @as("public") #Public]
type ipamScopeState = [
  | @as("delete-failed") #Delete_Failed
  | @as("delete-complete") #Delete_Complete
  | @as("delete-in-progress") #Delete_In_Progress
  | @as("modify-failed") #Modify_Failed
  | @as("modify-complete") #Modify_Complete
  | @as("modify-in-progress") #Modify_In_Progress
  | @as("create-failed") #Create_Failed
  | @as("create-complete") #Create_Complete
  | @as("create-in-progress") #Create_In_Progress
]
type ipamScopeId = string
type ipamResourceType = [
  | @as("ipv6-pool") #Ipv6_Pool
  | @as("public-ipv4-pool") #Public_Ipv4_Pool
  | @as("eip") #Eip
  | @as("subnet") #Subnet
  | @as("vpc") #Vpc
]
type ipamPoolState = [
  | @as("delete-failed") #Delete_Failed
  | @as("delete-complete") #Delete_Complete
  | @as("delete-in-progress") #Delete_In_Progress
  | @as("modify-failed") #Modify_Failed
  | @as("modify-complete") #Modify_Complete
  | @as("modify-in-progress") #Modify_In_Progress
  | @as("create-failed") #Create_Failed
  | @as("create-complete") #Create_Complete
  | @as("create-in-progress") #Create_In_Progress
]
type ipamPoolId = string
type ipamPoolCidrState = [
  | @as("failed-import") #Failed_Import
  | @as("pending-import") #Pending_Import
  | @as("failed-deprovision") #Failed_Deprovision
  | @as("deprovisioned") #Deprovisioned
  | @as("pending-deprovision") #Pending_Deprovision
  | @as("failed-provision") #Failed_Provision
  | @as("provisioned") #Provisioned
  | @as("pending-provision") #Pending_Provision
]
type ipamPoolCidrFailureCode = [@as("cidr-not-available") #Cidr_Not_Available]
type ipamPoolAwsService = [@as("ec2") #Ec2]
type ipamPoolAllocationResourceType = [
  | @as("custom") #Custom
  | @as("ec2-public-ipv4-pool") #Ec2_Public_Ipv4_Pool
  | @as("vpc") #Vpc
  | @as("ipam-pool") #Ipam_Pool
]
type ipamPoolAllocationId = string
type ipamOverlapStatus = [
  | @as("ignored") #Ignored
  | @as("nonoverlapping") #Nonoverlapping
  | @as("overlapping") #Overlapping
]
type ipamNetmaskLength = int
type ipamMaxResults = int
type ipamManagementState = [
  | @as("ignored") #Ignored
  | @as("unmanaged") #Unmanaged
  | @as("managed") #Managed
]
type ipamId = string
type ipamComplianceStatus = [
  | @as("ignored") #Ignored
  | @as("unmanaged") #Unmanaged
  | @as("noncompliant") #Noncompliant
  | @as("compliant") #Compliant
]
type ipamAddressHistoryResourceType = [
  | @as("instance") #Instance
  | @as("network-interface") #Network_Interface
  | @as("subnet") #Subnet
  | @as("vpc") #Vpc
  | @as("eip") #Eip
]
type ipamAddressHistoryMaxResults = int
type ipAddress = string
type internetGatewayId = string
type interfaceProtocolType = [@as("GRE") #GRE | @as("VLAN") #VLAN]
type interfacePermissionType = [
  | @as("EIP-ASSOCIATE") #EIP_ASSOCIATE
  | @as("INSTANCE-ATTACH") #INSTANCE_ATTACH
]
type integerWithConstraints = int
type integer_ = int
type instanceTypeHypervisor = [@as("xen") #Xen | @as("nitro") #Nitro]
type instanceType = [
  | @as("z1d.metal") #Z1d_Metal
  | @as("z1d.12xlarge") #Z1d_12xlarge
  | @as("z1d.6xlarge") #Z1d_6xlarge
  | @as("z1d.3xlarge") #Z1d_3xlarge
  | @as("z1d.2xlarge") #Z1d_2xlarge
  | @as("z1d.xlarge") #Z1d_Xlarge
  | @as("z1d.large") #Z1d_Large
  | @as("x2gd.metal") #X2gd_Metal
  | @as("x2gd.16xlarge") #X2gd_16xlarge
  | @as("x2gd.12xlarge") #X2gd_12xlarge
  | @as("x2gd.8xlarge") #X2gd_8xlarge
  | @as("x2gd.4xlarge") #X2gd_4xlarge
  | @as("x2gd.2xlarge") #X2gd_2xlarge
  | @as("x2gd.xlarge") #X2gd_Xlarge
  | @as("x2gd.large") #X2gd_Large
  | @as("x2gd.medium") #X2gd_Medium
  | @as("x2iezn.metal") #X2iezn_Metal
  | @as("x2iezn.12xlarge") #X2iezn_12xlarge
  | @as("x2iezn.8xlarge") #X2iezn_8xlarge
  | @as("x2iezn.6xlarge") #X2iezn_6xlarge
  | @as("x2iezn.4xlarge") #X2iezn_4xlarge
  | @as("x2iezn.2xlarge") #X2iezn_2xlarge
  | @as("x1e.32xlarge") #X1e_32xlarge
  | @as("x1e.16xlarge") #X1e_16xlarge
  | @as("x1e.8xlarge") #X1e_8xlarge
  | @as("x1e.4xlarge") #X1e_4xlarge
  | @as("x1e.2xlarge") #X1e_2xlarge
  | @as("x1e.xlarge") #X1e_Xlarge
  | @as("x1.32xlarge") #X1_32xlarge
  | @as("x1.16xlarge") #X1_16xlarge
  | @as("vt1.24xlarge") #Vt1_24xlarge
  | @as("vt1.6xlarge") #Vt1_6xlarge
  | @as("vt1.3xlarge") #Vt1_3xlarge
  | @as("u-24tb1.metal") #U_24tb1_Metal
  | @as("u-18tb1.metal") #U_18tb1_Metal
  | @as("u-12tb1.metal") #U_12tb1_Metal
  | @as("u-9tb1.metal") #U_9tb1_Metal
  | @as("u-6tb1.metal") #U_6tb1_Metal
  | @as("u-12tb1.112xlarge") #U_12tb1_112xlarge
  | @as("u-9tb1.112xlarge") #U_9tb1_112xlarge
  | @as("u-6tb1.112xlarge") #U_6tb1_112xlarge
  | @as("u-6tb1.56xlarge") #U_6tb1_56xlarge
  | @as("t4g.2xlarge") #T4g_2xlarge
  | @as("t4g.xlarge") #T4g_Xlarge
  | @as("t4g.large") #T4g_Large
  | @as("t4g.medium") #T4g_Medium
  | @as("t4g.small") #T4g_Small
  | @as("t4g.micro") #T4g_Micro
  | @as("t4g.nano") #T4g_Nano
  | @as("t3a.2xlarge") #T3a_2xlarge
  | @as("t3a.xlarge") #T3a_Xlarge
  | @as("t3a.large") #T3a_Large
  | @as("t3a.medium") #T3a_Medium
  | @as("t3a.small") #T3a_Small
  | @as("t3a.micro") #T3a_Micro
  | @as("t3a.nano") #T3a_Nano
  | @as("t3.2xlarge") #T3_2xlarge
  | @as("t3.xlarge") #T3_Xlarge
  | @as("t3.large") #T3_Large
  | @as("t3.medium") #T3_Medium
  | @as("t3.small") #T3_Small
  | @as("t3.micro") #T3_Micro
  | @as("t3.nano") #T3_Nano
  | @as("t2.2xlarge") #T2_2xlarge
  | @as("t2.xlarge") #T2_Xlarge
  | @as("t2.large") #T2_Large
  | @as("t2.medium") #T2_Medium
  | @as("t2.small") #T2_Small
  | @as("t2.micro") #T2_Micro
  | @as("t2.nano") #T2_Nano
  | @as("t1.micro") #T1_Micro
  | @as("r6i.metal") #R6i_Metal
  | @as("r6i.32xlarge") #R6i_32xlarge
  | @as("r6i.24xlarge") #R6i_24xlarge
  | @as("r6i.16xlarge") #R6i_16xlarge
  | @as("r6i.12xlarge") #R6i_12xlarge
  | @as("r6i.8xlarge") #R6i_8xlarge
  | @as("r6i.4xlarge") #R6i_4xlarge
  | @as("r6i.2xlarge") #R6i_2xlarge
  | @as("r6i.xlarge") #R6i_Xlarge
  | @as("r6i.large") #R6i_Large
  | @as("r6gd.metal") #R6gd_Metal
  | @as("r6gd.16xlarge") #R6gd_16xlarge
  | @as("r6gd.12xlarge") #R6gd_12xlarge
  | @as("r6gd.8xlarge") #R6gd_8xlarge
  | @as("r6gd.4xlarge") #R6gd_4xlarge
  | @as("r6gd.2xlarge") #R6gd_2xlarge
  | @as("r6gd.xlarge") #R6gd_Xlarge
  | @as("r6gd.large") #R6gd_Large
  | @as("r6gd.medium") #R6gd_Medium
  | @as("r6g.metal") #R6g_Metal
  | @as("r6g.16xlarge") #R6g_16xlarge
  | @as("r6g.12xlarge") #R6g_12xlarge
  | @as("r6g.8xlarge") #R6g_8xlarge
  | @as("r6g.4xlarge") #R6g_4xlarge
  | @as("r6g.2xlarge") #R6g_2xlarge
  | @as("r6g.xlarge") #R6g_Xlarge
  | @as("r6g.large") #R6g_Large
  | @as("r6g.medium") #R6g_Medium
  | @as("r5n.metal") #R5n_Metal
  | @as("r5n.24xlarge") #R5n_24xlarge
  | @as("r5n.16xlarge") #R5n_16xlarge
  | @as("r5n.12xlarge") #R5n_12xlarge
  | @as("r5n.8xlarge") #R5n_8xlarge
  | @as("r5n.4xlarge") #R5n_4xlarge
  | @as("r5n.2xlarge") #R5n_2xlarge
  | @as("r5n.xlarge") #R5n_Xlarge
  | @as("r5n.large") #R5n_Large
  | @as("r5dn.metal") #R5dn_Metal
  | @as("r5dn.24xlarge") #R5dn_24xlarge
  | @as("r5dn.16xlarge") #R5dn_16xlarge
  | @as("r5dn.12xlarge") #R5dn_12xlarge
  | @as("r5dn.8xlarge") #R5dn_8xlarge
  | @as("r5dn.4xlarge") #R5dn_4xlarge
  | @as("r5dn.2xlarge") #R5dn_2xlarge
  | @as("r5dn.xlarge") #R5dn_Xlarge
  | @as("r5dn.large") #R5dn_Large
  | @as("r5d.metal") #R5d_Metal
  | @as("r5d.24xlarge") #R5d_24xlarge
  | @as("r5d.16xlarge") #R5d_16xlarge
  | @as("r5d.12xlarge") #R5d_12xlarge
  | @as("r5d.8xlarge") #R5d_8xlarge
  | @as("r5d.4xlarge") #R5d_4xlarge
  | @as("r5d.2xlarge") #R5d_2xlarge
  | @as("r5d.xlarge") #R5d_Xlarge
  | @as("r5d.large") #R5d_Large
  | @as("r5b.metal") #R5b_Metal
  | @as("r5b.24xlarge") #R5b_24xlarge
  | @as("r5b.16xlarge") #R5b_16xlarge
  | @as("r5b.12xlarge") #R5b_12xlarge
  | @as("r5b.8xlarge") #R5b_8xlarge
  | @as("r5b.4xlarge") #R5b_4xlarge
  | @as("r5b.2xlarge") #R5b_2xlarge
  | @as("r5b.xlarge") #R5b_Xlarge
  | @as("r5b.large") #R5b_Large
  | @as("r5ad.24xlarge") #R5ad_24xlarge
  | @as("r5ad.16xlarge") #R5ad_16xlarge
  | @as("r5ad.12xlarge") #R5ad_12xlarge
  | @as("r5ad.8xlarge") #R5ad_8xlarge
  | @as("r5ad.4xlarge") #R5ad_4xlarge
  | @as("r5ad.2xlarge") #R5ad_2xlarge
  | @as("r5ad.xlarge") #R5ad_Xlarge
  | @as("r5ad.large") #R5ad_Large
  | @as("r5a.24xlarge") #R5a_24xlarge
  | @as("r5a.16xlarge") #R5a_16xlarge
  | @as("r5a.12xlarge") #R5a_12xlarge
  | @as("r5a.8xlarge") #R5a_8xlarge
  | @as("r5a.4xlarge") #R5a_4xlarge
  | @as("r5a.2xlarge") #R5a_2xlarge
  | @as("r5a.xlarge") #R5a_Xlarge
  | @as("r5a.large") #R5a_Large
  | @as("r5.metal") #R5_Metal
  | @as("r5.24xlarge") #R5_24xlarge
  | @as("r5.16xlarge") #R5_16xlarge
  | @as("r5.12xlarge") #R5_12xlarge
  | @as("r5.8xlarge") #R5_8xlarge
  | @as("r5.4xlarge") #R5_4xlarge
  | @as("r5.2xlarge") #R5_2xlarge
  | @as("r5.xlarge") #R5_Xlarge
  | @as("r5.large") #R5_Large
  | @as("r4.16xlarge") #R4_16xlarge
  | @as("r4.8xlarge") #R4_8xlarge
  | @as("r4.4xlarge") #R4_4xlarge
  | @as("r4.2xlarge") #R4_2xlarge
  | @as("r4.xlarge") #R4_Xlarge
  | @as("r4.large") #R4_Large
  | @as("r3.8xlarge") #R3_8xlarge
  | @as("r3.4xlarge") #R3_4xlarge
  | @as("r3.2xlarge") #R3_2xlarge
  | @as("r3.xlarge") #R3_Xlarge
  | @as("r3.large") #R3_Large
  | @as("p4d.24xlarge") #P4d_24xlarge
  | @as("p3dn.24xlarge") #P3dn_24xlarge
  | @as("p3.16xlarge") #P3_16xlarge
  | @as("p3.8xlarge") #P3_8xlarge
  | @as("p3.2xlarge") #P3_2xlarge
  | @as("p2.16xlarge") #P2_16xlarge
  | @as("p2.8xlarge") #P2_8xlarge
  | @as("p2.xlarge") #P2_Xlarge
  | @as("mac1.metal") #Mac1_Metal
  | @as("m6i.metal") #M6i_Metal
  | @as("m6i.32xlarge") #M6i_32xlarge
  | @as("m6i.24xlarge") #M6i_24xlarge
  | @as("m6i.16xlarge") #M6i_16xlarge
  | @as("m6i.12xlarge") #M6i_12xlarge
  | @as("m6i.8xlarge") #M6i_8xlarge
  | @as("m6i.4xlarge") #M6i_4xlarge
  | @as("m6i.2xlarge") #M6i_2xlarge
  | @as("m6i.xlarge") #M6i_Xlarge
  | @as("m6i.large") #M6i_Large
  | @as("m6gd.16xlarge") #M6gd_16xlarge
  | @as("m6gd.12xlarge") #M6gd_12xlarge
  | @as("m6gd.8xlarge") #M6gd_8xlarge
  | @as("m6gd.4xlarge") #M6gd_4xlarge
  | @as("m6gd.2xlarge") #M6gd_2xlarge
  | @as("m6gd.xlarge") #M6gd_Xlarge
  | @as("m6gd.large") #M6gd_Large
  | @as("m6gd.medium") #M6gd_Medium
  | @as("m6gd.metal") #M6gd_Metal
  | @as("m6g.16xlarge") #M6g_16xlarge
  | @as("m6g.12xlarge") #M6g_12xlarge
  | @as("m6g.8xlarge") #M6g_8xlarge
  | @as("m6g.4xlarge") #M6g_4xlarge
  | @as("m6g.2xlarge") #M6g_2xlarge
  | @as("m6g.xlarge") #M6g_Xlarge
  | @as("m6g.large") #M6g_Large
  | @as("m6g.medium") #M6g_Medium
  | @as("m6g.metal") #M6g_Metal
  | @as("m6a.48xlarge") #M6a_48xlarge
  | @as("m6a.32xlarge") #M6a_32xlarge
  | @as("m6a.24xlarge") #M6a_24xlarge
  | @as("m6a.16xlarge") #M6a_16xlarge
  | @as("m6a.12xlarge") #M6a_12xlarge
  | @as("m6a.8xlarge") #M6a_8xlarge
  | @as("m6a.4xlarge") #M6a_4xlarge
  | @as("m6a.2xlarge") #M6a_2xlarge
  | @as("m6a.xlarge") #M6a_Xlarge
  | @as("m6a.large") #M6a_Large
  | @as("m5zn.metal") #M5zn_Metal
  | @as("m5zn.12xlarge") #M5zn_12xlarge
  | @as("m5zn.6xlarge") #M5zn_6xlarge
  | @as("m5zn.3xlarge") #M5zn_3xlarge
  | @as("m5zn.2xlarge") #M5zn_2xlarge
  | @as("m5zn.xlarge") #M5zn_Xlarge
  | @as("m5zn.large") #M5zn_Large
  | @as("m5n.metal") #M5n_Metal
  | @as("m5n.24xlarge") #M5n_24xlarge
  | @as("m5n.16xlarge") #M5n_16xlarge
  | @as("m5n.12xlarge") #M5n_12xlarge
  | @as("m5n.8xlarge") #M5n_8xlarge
  | @as("m5n.4xlarge") #M5n_4xlarge
  | @as("m5n.2xlarge") #M5n_2xlarge
  | @as("m5n.xlarge") #M5n_Xlarge
  | @as("m5n.large") #M5n_Large
  | @as("m5dn.metal") #M5dn_Metal
  | @as("m5dn.24xlarge") #M5dn_24xlarge
  | @as("m5dn.16xlarge") #M5dn_16xlarge
  | @as("m5dn.12xlarge") #M5dn_12xlarge
  | @as("m5dn.8xlarge") #M5dn_8xlarge
  | @as("m5dn.4xlarge") #M5dn_4xlarge
  | @as("m5dn.2xlarge") #M5dn_2xlarge
  | @as("m5dn.xlarge") #M5dn_Xlarge
  | @as("m5dn.large") #M5dn_Large
  | @as("m5d.metal") #M5d_Metal
  | @as("m5d.24xlarge") #M5d_24xlarge
  | @as("m5d.16xlarge") #M5d_16xlarge
  | @as("m5d.12xlarge") #M5d_12xlarge
  | @as("m5d.8xlarge") #M5d_8xlarge
  | @as("m5d.4xlarge") #M5d_4xlarge
  | @as("m5d.2xlarge") #M5d_2xlarge
  | @as("m5d.xlarge") #M5d_Xlarge
  | @as("m5d.large") #M5d_Large
  | @as("m5ad.24xlarge") #M5ad_24xlarge
  | @as("m5ad.16xlarge") #M5ad_16xlarge
  | @as("m5ad.12xlarge") #M5ad_12xlarge
  | @as("m5ad.8xlarge") #M5ad_8xlarge
  | @as("m5ad.4xlarge") #M5ad_4xlarge
  | @as("m5ad.2xlarge") #M5ad_2xlarge
  | @as("m5ad.xlarge") #M5ad_Xlarge
  | @as("m5ad.large") #M5ad_Large
  | @as("m5a.24xlarge") #M5a_24xlarge
  | @as("m5a.16xlarge") #M5a_16xlarge
  | @as("m5a.12xlarge") #M5a_12xlarge
  | @as("m5a.8xlarge") #M5a_8xlarge
  | @as("m5a.4xlarge") #M5a_4xlarge
  | @as("m5a.2xlarge") #M5a_2xlarge
  | @as("m5a.xlarge") #M5a_Xlarge
  | @as("m5a.large") #M5a_Large
  | @as("m5.metal") #M5_Metal
  | @as("m5.24xlarge") #M5_24xlarge
  | @as("m5.16xlarge") #M5_16xlarge
  | @as("m5.12xlarge") #M5_12xlarge
  | @as("m5.8xlarge") #M5_8xlarge
  | @as("m5.4xlarge") #M5_4xlarge
  | @as("m5.2xlarge") #M5_2xlarge
  | @as("m5.xlarge") #M5_Xlarge
  | @as("m5.large") #M5_Large
  | @as("m4.16xlarge") #M4_16xlarge
  | @as("m4.10xlarge") #M4_10xlarge
  | @as("m4.4xlarge") #M4_4xlarge
  | @as("m4.2xlarge") #M4_2xlarge
  | @as("m4.xlarge") #M4_Xlarge
  | @as("m4.large") #M4_Large
  | @as("m3.2xlarge") #M3_2xlarge
  | @as("m3.xlarge") #M3_Xlarge
  | @as("m3.large") #M3_Large
  | @as("m3.medium") #M3_Medium
  | @as("m2.4xlarge") #M2_4xlarge
  | @as("m2.2xlarge") #M2_2xlarge
  | @as("m2.xlarge") #M2_Xlarge
  | @as("m1.xlarge") #M1_Xlarge
  | @as("m1.large") #M1_Large
  | @as("m1.medium") #M1_Medium
  | @as("m1.small") #M1_Small
  | @as("is4gen.8xlarge") #Is4gen_8xlarge
  | @as("is4gen.4xlarge") #Is4gen_4xlarge
  | @as("is4gen.2xlarge") #Is4gen_2xlarge
  | @as("is4gen.xlarge") #Is4gen_Xlarge
  | @as("is4gen.large") #Is4gen_Large
  | @as("is4gen.medium") #Is4gen_Medium
  | @as("inf1.24xlarge") #Inf1_24xlarge
  | @as("inf1.6xlarge") #Inf1_6xlarge
  | @as("inf1.2xlarge") #Inf1_2xlarge
  | @as("inf1.xlarge") #Inf1_Xlarge
  | @as("im4gn.16xlarge") #Im4gn_16xlarge
  | @as("im4gn.8xlarge") #Im4gn_8xlarge
  | @as("im4gn.4xlarge") #Im4gn_4xlarge
  | @as("im4gn.2xlarge") #Im4gn_2xlarge
  | @as("im4gn.xlarge") #Im4gn_Xlarge
  | @as("im4gn.large") #Im4gn_Large
  | @as("i3en.metal") #I3en_Metal
  | @as("i3en.24xlarge") #I3en_24xlarge
  | @as("i3en.12xlarge") #I3en_12xlarge
  | @as("i3en.6xlarge") #I3en_6xlarge
  | @as("i3en.3xlarge") #I3en_3xlarge
  | @as("i3en.2xlarge") #I3en_2xlarge
  | @as("i3en.xlarge") #I3en_Xlarge
  | @as("i3en.large") #I3en_Large
  | @as("i3.metal") #I3_Metal
  | @as("i3.16xlarge") #I3_16xlarge
  | @as("i3.8xlarge") #I3_8xlarge
  | @as("i3.4xlarge") #I3_4xlarge
  | @as("i3.2xlarge") #I3_2xlarge
  | @as("i3.xlarge") #I3_Xlarge
  | @as("i3.large") #I3_Large
  | @as("i2.8xlarge") #I2_8xlarge
  | @as("i2.4xlarge") #I2_4xlarge
  | @as("i2.2xlarge") #I2_2xlarge
  | @as("i2.xlarge") #I2_Xlarge
  | @as("h1.16xlarge") #H1_16xlarge
  | @as("h1.8xlarge") #H1_8xlarge
  | @as("h1.4xlarge") #H1_4xlarge
  | @as("h1.2xlarge") #H1_2xlarge
  | @as("hs1.8xlarge") #Hs1_8xlarge
  | @as("hpc6a.48xlarge") #Hpc6a_48xlarge
  | @as("hi1.4xlarge") #Hi1_4xlarge
  | @as("g5g.metal") #G5g_Metal
  | @as("g5g.16xlarge") #G5g_16xlarge
  | @as("g5g.8xlarge") #G5g_8xlarge
  | @as("g5g.4xlarge") #G5g_4xlarge
  | @as("g5g.2xlarge") #G5g_2xlarge
  | @as("g5g.xlarge") #G5g_Xlarge
  | @as("g5.48xlarge") #G5_48xlarge
  | @as("g5.24xlarge") #G5_24xlarge
  | @as("g5.16xlarge") #G5_16xlarge
  | @as("g5.12xlarge") #G5_12xlarge
  | @as("g5.8xlarge") #G5_8xlarge
  | @as("g5.4xlarge") #G5_4xlarge
  | @as("g5.2xlarge") #G5_2xlarge
  | @as("g5.xlarge") #G5_Xlarge
  | @as("g4dn.metal") #G4dn_Metal
  | @as("g4dn.16xlarge") #G4dn_16xlarge
  | @as("g4dn.12xlarge") #G4dn_12xlarge
  | @as("g4dn.8xlarge") #G4dn_8xlarge
  | @as("g4dn.4xlarge") #G4dn_4xlarge
  | @as("g4dn.2xlarge") #G4dn_2xlarge
  | @as("g4dn.xlarge") #G4dn_Xlarge
  | @as("g4ad.16xlarge") #G4ad_16xlarge
  | @as("g4ad.8xlarge") #G4ad_8xlarge
  | @as("g4ad.4xlarge") #G4ad_4xlarge
  | @as("g4ad.2xlarge") #G4ad_2xlarge
  | @as("g4ad.xlarge") #G4ad_Xlarge
  | @as("g3s.xlarge") #G3s_Xlarge
  | @as("g3.16xlarge") #G3_16xlarge
  | @as("g3.8xlarge") #G3_8xlarge
  | @as("g3.4xlarge") #G3_4xlarge
  | @as("g2.8xlarge") #G2_8xlarge
  | @as("g2.2xlarge") #G2_2xlarge
  | @as("f1.16xlarge") #F1_16xlarge
  | @as("f1.4xlarge") #F1_4xlarge
  | @as("f1.2xlarge") #F1_2xlarge
  | @as("dl1.24xlarge") #Dl1_24xlarge
  | @as("d3en.12xlarge") #D3en_12xlarge
  | @as("d3en.8xlarge") #D3en_8xlarge
  | @as("d3en.6xlarge") #D3en_6xlarge
  | @as("d3en.4xlarge") #D3en_4xlarge
  | @as("d3en.2xlarge") #D3en_2xlarge
  | @as("d3en.xlarge") #D3en_Xlarge
  | @as("d3.8xlarge") #D3_8xlarge
  | @as("d3.4xlarge") #D3_4xlarge
  | @as("d3.2xlarge") #D3_2xlarge
  | @as("d3.xlarge") #D3_Xlarge
  | @as("d2.8xlarge") #D2_8xlarge
  | @as("d2.4xlarge") #D2_4xlarge
  | @as("d2.2xlarge") #D2_2xlarge
  | @as("d2.xlarge") #D2_Xlarge
  | @as("cr1.8xlarge") #Cr1_8xlarge
  | @as("cg1.4xlarge") #Cg1_4xlarge
  | @as("cc2.8xlarge") #Cc2_8xlarge
  | @as("cc1.4xlarge") #Cc1_4xlarge
  | @as("c6i.metal") #C6i_Metal
  | @as("c6i.32xlarge") #C6i_32xlarge
  | @as("c6i.24xlarge") #C6i_24xlarge
  | @as("c6i.16xlarge") #C6i_16xlarge
  | @as("c6i.12xlarge") #C6i_12xlarge
  | @as("c6i.8xlarge") #C6i_8xlarge
  | @as("c6i.4xlarge") #C6i_4xlarge
  | @as("c6i.2xlarge") #C6i_2xlarge
  | @as("c6i.xlarge") #C6i_Xlarge
  | @as("c6i.large") #C6i_Large
  | @as("c6gn.16xlarge") #C6gn_16xlarge
  | @as("c6gn.12xlarge") #C6gn_12xlarge
  | @as("c6gn.8xlarge") #C6gn_8xlarge
  | @as("c6gn.4xlarge") #C6gn_4xlarge
  | @as("c6gn.2xlarge") #C6gn_2xlarge
  | @as("c6gn.xlarge") #C6gn_Xlarge
  | @as("c6gn.large") #C6gn_Large
  | @as("c6gn.medium") #C6gn_Medium
  | @as("c6gd.metal") #C6gd_Metal
  | @as("c6gd.16xlarge") #C6gd_16xlarge
  | @as("c6gd.12xlarge") #C6gd_12xlarge
  | @as("c6gd.8xlarge") #C6gd_8xlarge
  | @as("c6gd.4xlarge") #C6gd_4xlarge
  | @as("c6gd.2xlarge") #C6gd_2xlarge
  | @as("c6gd.xlarge") #C6gd_Xlarge
  | @as("c6gd.large") #C6gd_Large
  | @as("c6gd.medium") #C6gd_Medium
  | @as("c6g.metal") #C6g_Metal
  | @as("c6g.16xlarge") #C6g_16xlarge
  | @as("c6g.12xlarge") #C6g_12xlarge
  | @as("c6g.8xlarge") #C6g_8xlarge
  | @as("c6g.4xlarge") #C6g_4xlarge
  | @as("c6g.2xlarge") #C6g_2xlarge
  | @as("c6g.xlarge") #C6g_Xlarge
  | @as("c6g.large") #C6g_Large
  | @as("c6g.medium") #C6g_Medium
  | @as("c5n.metal") #C5n_Metal
  | @as("c5n.18xlarge") #C5n_18xlarge
  | @as("c5n.9xlarge") #C5n_9xlarge
  | @as("c5n.4xlarge") #C5n_4xlarge
  | @as("c5n.2xlarge") #C5n_2xlarge
  | @as("c5n.xlarge") #C5n_Xlarge
  | @as("c5n.large") #C5n_Large
  | @as("c5d.metal") #C5d_Metal
  | @as("c5d.24xlarge") #C5d_24xlarge
  | @as("c5d.18xlarge") #C5d_18xlarge
  | @as("c5d.12xlarge") #C5d_12xlarge
  | @as("c5d.9xlarge") #C5d_9xlarge
  | @as("c5d.4xlarge") #C5d_4xlarge
  | @as("c5d.2xlarge") #C5d_2xlarge
  | @as("c5d.xlarge") #C5d_Xlarge
  | @as("c5d.large") #C5d_Large
  | @as("c5ad.24xlarge") #C5ad_24xlarge
  | @as("c5ad.16xlarge") #C5ad_16xlarge
  | @as("c5ad.12xlarge") #C5ad_12xlarge
  | @as("c5ad.8xlarge") #C5ad_8xlarge
  | @as("c5ad.4xlarge") #C5ad_4xlarge
  | @as("c5ad.2xlarge") #C5ad_2xlarge
  | @as("c5ad.xlarge") #C5ad_Xlarge
  | @as("c5ad.large") #C5ad_Large
  | @as("c5a.24xlarge") #C5a_24xlarge
  | @as("c5a.16xlarge") #C5a_16xlarge
  | @as("c5a.12xlarge") #C5a_12xlarge
  | @as("c5a.8xlarge") #C5a_8xlarge
  | @as("c5a.4xlarge") #C5a_4xlarge
  | @as("c5a.2xlarge") #C5a_2xlarge
  | @as("c5a.xlarge") #C5a_Xlarge
  | @as("c5a.large") #C5a_Large
  | @as("c5.metal") #C5_Metal
  | @as("c5.24xlarge") #C5_24xlarge
  | @as("c5.18xlarge") #C5_18xlarge
  | @as("c5.12xlarge") #C5_12xlarge
  | @as("c5.9xlarge") #C5_9xlarge
  | @as("c5.4xlarge") #C5_4xlarge
  | @as("c5.2xlarge") #C5_2xlarge
  | @as("c5.xlarge") #C5_Xlarge
  | @as("c5.large") #C5_Large
  | @as("c4.8xlarge") #C4_8xlarge
  | @as("c4.4xlarge") #C4_4xlarge
  | @as("c4.2xlarge") #C4_2xlarge
  | @as("c4.xlarge") #C4_Xlarge
  | @as("c4.large") #C4_Large
  | @as("c3.8xlarge") #C3_8xlarge
  | @as("c3.4xlarge") #C3_4xlarge
  | @as("c3.2xlarge") #C3_2xlarge
  | @as("c3.xlarge") #C3_Xlarge
  | @as("c3.large") #C3_Large
  | @as("c1.xlarge") #C1_Xlarge
  | @as("c1.medium") #C1_Medium
  | @as("a1.metal") #A1_Metal
  | @as("a1.4xlarge") #A1_4xlarge
  | @as("a1.2xlarge") #A1_2xlarge
  | @as("a1.xlarge") #A1_Xlarge
  | @as("a1.large") #A1_Large
  | @as("a1.medium") #A1_Medium
]
type instanceStorageFlag = bool
type instanceStorageEncryptionSupport = [
  | @as("required") #Required
  | @as("unsupported") #Unsupported
]
type instanceStateName = [
  | @as("stopped") #Stopped
  | @as("stopping") #Stopping
  | @as("terminated") #Terminated
  | @as("shutting-down") #Shutting_Down
  | @as("running") #Running
  | @as("pending") #Pending
]
type instanceMetadataTagsState = [@as("enabled") #Enabled | @as("disabled") #Disabled]
type instanceMetadataProtocolState = [@as("enabled") #Enabled | @as("disabled") #Disabled]
type instanceMetadataOptionsState = [@as("applied") #Applied | @as("pending") #Pending]
type instanceMetadataEndpointState = [@as("enabled") #Enabled | @as("disabled") #Disabled]
type instanceMatchCriteria = [@as("targeted") #Targeted | @as("open") #Open]
type instanceLifecycleType = [@as("scheduled") #Scheduled | @as("spot") #Spot]
type instanceLifecycle = [@as("on-demand") #On_Demand | @as("spot") #Spot]
type instanceInterruptionBehavior = [
  | @as("terminate") #Terminate
  | @as("stop") #Stop
  | @as("hibernate") #Hibernate
]
type instanceId = string
type instanceHealthStatus = [@as("unhealthy") #Unhealthy | @as("healthy") #Healthy]
type instanceGeneration = [@as("previous") #Previous | @as("current") #Current]
type instanceEventWindowState = [
  | @as("deleted") #Deleted
  | @as("active") #Active
  | @as("deleting") #Deleting
  | @as("creating") #Creating
]
type instanceEventWindowId = string
type instanceEventWindowCronExpression = string
type instanceEventId = string
type instanceAutoRecoveryState = [@as("default") #Default | @as("disabled") #Disabled]
type instanceAttributeName = [
  | @as("enclaveOptions") #EnclaveOptions
  | @as("enaSupport") #EnaSupport
  | @as("sriovNetSupport") #SriovNetSupport
  | @as("ebsOptimized") #EbsOptimized
  | @as("groupSet") #GroupSet
  | @as("sourceDestCheck") #SourceDestCheck
  | @as("productCodes") #ProductCodes
  | @as("blockDeviceMapping") #BlockDeviceMapping
  | @as("rootDeviceName") #RootDeviceName
  | @as("instanceInitiatedShutdownBehavior") #InstanceInitiatedShutdownBehavior
  | @as("disableApiTermination") #DisableApiTermination
  | @as("userData") #UserData
  | @as("ramdisk") #Ramdisk
  | @as("kernel") #Kernel
  | @as("instanceType") #InstanceType
]
type inferenceDeviceName = string
type inferenceDeviceManufacturerName = string
type inferenceDeviceCount = int
type importTaskId = string
type importSnapshotTaskId = string
type importImageTaskId = string
type imageTypeValues = [@as("ramdisk") #Ramdisk | @as("kernel") #Kernel | @as("machine") #Machine]
type imageState = [
  | @as("error") #Error
  | @as("failed") #Failed
  | @as("transient") #Transient
  | @as("deregistered") #Deregistered
  | @as("invalid") #Invalid
  | @as("available") #Available
  | @as("pending") #Pending
]
type imageId = string
type imageAttributeName = [
  | @as("lastLaunchedTime") #LastLaunchedTime
  | @as("bootMode") #BootMode
  | @as("sriovNetSupport") #SriovNetSupport
  | @as("blockDeviceMapping") #BlockDeviceMapping
  | @as("productCodes") #ProductCodes
  | @as("launchPermission") #LaunchPermission
  | @as("ramdisk") #Ramdisk
  | @as("kernel") #Kernel
  | @as("description") #Description
]
type igmpv2SupportValue = [@as("disable") #Disable | @as("enable") #Enable]
type iamInstanceProfileAssociationState = [
  | @as("disassociated") #Disassociated
  | @as("disassociating") #Disassociating
  | @as("associated") #Associated
  | @as("associating") #Associating
]
type iamInstanceProfileAssociationId = string
type hypervisorType = [@as("xen") #Xen | @as("ovm") #Ovm]
type httpTokensState = [@as("required") #Required | @as("optional") #Optional]
type hour = int
type hostnameType = [@as("resource-name") #Resource_Name | @as("ip-name") #Ip_Name]
type hostTenancy = [@as("host") #Host | @as("dedicated") #Dedicated]
type hostReservationId = string
type hostRecovery = [@as("off") #Off | @as("on") #On]
type hibernationFlag = bool
type gpuDeviceName = string
type gpuDeviceMemorySize = int
type gpuDeviceManufacturerName = string
type gpuDeviceCount = int
type getSubnetCidrReservationsMaxResults = int
type getManagedPrefixListAssociationsMaxResults = int
type getIpamPoolAllocationsMaxResults = int
type getGroupsForCapacityReservationRequestMaxResults = int
type getCapacityReservationUsageRequestMaxResults = int
type gatewayType = [@as("ipsec.1") #Ipsec_1]
type gatewayAssociationState = [
  | @as("disassociating") #Disassociating
  | @as("associating") #Associating
  | @as("not-associated") #Not_Associated
  | @as("associated") #Associated
]
type gvcdmaxResults = int
type freeTierEligibleFlag = bool
type fpgaImageStateCode = [
  | @as("unavailable") #Unavailable
  | @as("available") #Available
  | @as("failed") #Failed
  | @as("pending") #Pending
]
type fpgaImageId = string
type fpgaImageAttributeName = [
  | @as("productCodes") #ProductCodes
  | @as("loadPermission") #LoadPermission
  | @as("name") #Name
  | @as("description") #Description
]
type fpgaDeviceName = string
type fpgaDeviceMemorySize = int
type fpgaDeviceManufacturerName = string
type fpgaDeviceCount = int
type flowLogsResourceType = [
  | @as("NetworkInterface") #NetworkInterface
  | @as("Subnet") #Subnet
  | @as("VPC") #VPC
]
type flowLogResourceId = string
type float_ = float
type fleetType = [@as("instant") #Instant | @as("maintain") #Maintain | @as("request") #Request]
type fleetStateCode = [
  | @as("modifying") #Modifying
  | @as("deleted_terminating") #Deleted_Terminating
  | @as("deleted_running") #Deleted_Running
  | @as("failed") #Failed
  | @as("deleted") #Deleted
  | @as("active") #Active
  | @as("submitted") #Submitted
]
type fleetReplacementStrategy = [
  | @as("launch-before-terminate") #Launch_Before_Terminate
  | @as("launch") #Launch
]
type fleetOnDemandAllocationStrategy = [
  | @as("prioritized") #Prioritized
  | @as("lowest-price") #Lowest_Price
]
type fleetInstanceMatchCriteria = [@as("open") #Open]
type fleetId = string
type fleetExcessCapacityTerminationPolicy = [
  | @as("termination") #Termination
  | @as("no-termination") #No_Termination
]
type fleetEventType = [
  | @as("service-error") #Service_Error
  | @as("fleet-change") #Fleet_Change
  | @as("instance-change") #Instance_Change
]
type fleetCapacityReservationUsageStrategy = [
  | @as("use-capacity-reservations-first") #Use_Capacity_Reservations_First
]
type fleetCapacityReservationTenancy = [@as("default") #Default]
type fleetActivityStatus = [
  | @as("fulfilled") #Fulfilled
  | @as("pending_termination") #Pending_Termination
  | @as("pending_fulfillment") #Pending_Fulfillment
  | @as("error") #Error
]
type findingsFound = [@as("unknown") #Unknown | @as("false") #False | @as("true") #True]
type fastSnapshotRestoreStateCode = [
  | @as("disabled") #Disabled
  | @as("disabling") #Disabling
  | @as("enabled") #Enabled
  | @as("optimizing") #Optimizing
  | @as("enabling") #Enabling
]
type fastLaunchStateCode = [
  | @as("disabling-failed") #Disabling_Failed
  | @as("disabling") #Disabling
  | @as("enabled-failed") #Enabled_Failed
  | @as("enabled") #Enabled
  | @as("enabling-failed") #Enabling_Failed
  | @as("enabling") #Enabling
]
type fastLaunchResourceType = [@as("snapshot") #Snapshot]
type exportVmTaskId = string
type exportTaskState = [
  | @as("completed") #Completed
  | @as("cancelled") #Cancelled
  | @as("cancelling") #Cancelling
  | @as("active") #Active
]
type exportTaskId = string
type exportImageTaskId = string
type exportEnvironment = [
  | @as("microsoft") #Microsoft
  | @as("vmware") #Vmware
  | @as("citrix") #Citrix
]
type excludedInstanceType = string
type excessCapacityTerminationPolicy = [
  | @as("default") #Default
  | @as("noTermination") #NoTermination
]
type eventType = [
  | @as("information") #Information
  | @as("error") #Error
  | @as("fleetRequestChange") #FleetRequestChange
  | @as("instanceChange") #InstanceChange
]
type eventCode = [
  | @as("instance-stop") #Instance_Stop
  | @as("instance-retirement") #Instance_Retirement
  | @as("system-maintenance") #System_Maintenance
  | @as("system-reboot") #System_Reboot
  | @as("instance-reboot") #Instance_Reboot
]
type ephemeralNvmeSupport = [
  | @as("required") #Required
  | @as("supported") #Supported
  | @as("unsupported") #Unsupported
]
type endDateType = [@as("limited") #Limited | @as("unlimited") #Unlimited]
type encryptionInTransitSupported = bool
type enaSupport = [
  | @as("required") #Required
  | @as("supported") #Supported
  | @as("unsupported") #Unsupported
]
type elasticIpAssociationId = string
type elasticInferenceAcceleratorCount = int
type elasticGpuStatus = [@as("IMPAIRED") #IMPAIRED | @as("OK") #OK]
type elasticGpuState = [@as("ATTACHED") #ATTACHED]
type elasticGpuId = string
type egressOnlyInternetGatewayId = string
type efaSupportedFlag = bool
type ebsOptimizedSupport = [
  | @as("default") #Default
  | @as("supported") #Supported
  | @as("unsupported") #Unsupported
]
type ebsNvmeSupport = [
  | @as("required") #Required
  | @as("supported") #Supported
  | @as("unsupported") #Unsupported
]
type ebsEncryptionSupport = [@as("supported") #Supported | @as("unsupported") #Unsupported]
type doubleWithConstraints = float
type double = float
type domainType = [@as("standard") #Standard | @as("vpc") #Vpc]
type dnsSupportValue = [@as("disable") #Disable | @as("enable") #Enable]
type dnsNameState = [
  | @as("failed") #Failed
  | @as("verified") #Verified
  | @as("pendingVerification") #PendingVerification
]
type diskType = [@as("ssd") #Ssd | @as("hdd") #Hdd]
type diskSize = float
type diskImageFormat = [@as("VHD") #VHD | @as("RAW") #RAW | @as("VMDK") #VMDK]
type diskCount = int
type dhcpOptionsId = string
type deviceType = [@as("instance-store") #Instance_Store | @as("ebs") #Ebs]
type destinationFileFormat = [@as("parquet") #Parquet | @as("plain-text") #Plain_Text]
type describeVpcsMaxResults = int
type describeVpcPeeringConnectionsMaxResults = int
type describeVpcClassicLinkDnsSupportNextToken = string
type describeVpcClassicLinkDnsSupportMaxResults = int
type describeTrunkInterfaceAssociationsMaxResults = int
type describeSubnetsMaxResults = int
type describeStoreImageTasksRequestMaxResults = int
type describeStaleSecurityGroupsNextToken = string
type describeStaleSecurityGroupsMaxResults = int
type describeSpotFleetRequestHistoryMaxResults = int
type describeSpotFleetInstancesMaxResults = int
type describeSnapshotTierStatusMaxResults = int
type describeSecurityGroupsMaxResults = int
type describeSecurityGroupRulesMaxResults = int
type describeScheduledInstanceAvailabilityMaxResults = int
type describeRouteTablesMaxResults = int
type describeReplaceRootVolumeTasksMaxResults = int
type describePrincipalIdFormatMaxResults = int
type describeNetworkInterfacesMaxResults = int
type describeNetworkInterfacePermissionsMaxResults = int
type describeNetworkAclsMaxResults = int
type describeNatGatewaysMaxResults = int
type describeMovingAddressesMaxResults = int
type describeLaunchTemplatesMaxResults = int
type describeInternetGatewaysMaxResults = int
type describeInstanceCreditSpecificationsMaxResults = int
type describeIamInstanceProfileAssociationsMaxResults = int
type describeHostReservationsMaxResults = int
type describeFpgaImagesMaxResults = int
type describeFastSnapshotRestoresMaxResults = int
type describeFastLaunchImagesRequestMaxResults = int
type describeExportImageTasksMaxResults = int
type describeElasticGpusMaxResults = int
type describeEgressOnlyInternetGatewaysMaxResults = int
type describeDhcpOptionsMaxResults = int
type describeClientVpnTargetNetworksMaxResults = int
type describeClientVpnRoutesMaxResults = int
type describeClientVpnEndpointMaxResults = int
type describeClientVpnConnectionsMaxResults = int
type describeClientVpnAuthorizationRulesMaxResults = int
type describeClassicLinkInstancesMaxResults = int
type describeCapacityReservationsMaxResults = int
type describeCapacityReservationFleetsMaxResults = int
type describeByoipCidrsMaxResults = int
type deleteQueuedReservedInstancesErrorCode = [
  | @as("unexpected-error") #Unexpected_Error
  | @as("reserved-instances-not-in-queued-state") #Reserved_Instances_Not_In_Queued_State
  | @as("reserved-instances-id-invalid") #Reserved_Instances_Id_Invalid
]
type deleteFleetErrorCode = [
  | @as("unexpectedError") #UnexpectedError
  | @as("fleetNotInDeletableState") #FleetNotInDeletableState
  | @as("fleetIdMalformed") #FleetIdMalformed
  | @as("fleetIdDoesNotExist") #FleetIdDoesNotExist
]
type defaultingDhcpOptionsId = string
type defaultTargetCapacityType = [@as("on-demand") #On_Demand | @as("spot") #Spot]
type defaultRouteTablePropagationValue = [@as("disable") #Disable | @as("enable") #Enable]
type defaultRouteTableAssociationValue = [@as("disable") #Disable | @as("enable") #Enable]
type defaultNetworkCardIndex = int
type dedicatedHostId = string
type dedicatedHostFlag = bool
type dateTime = Js.Date.t
type datafeedSubscriptionState = [@as("Inactive") #Inactive | @as("Active") #Active]
type ditomaxResults = int
type ditmaxResults = int
type customerGatewayId = string
type currentGenerationFlag = bool
type currencyCodeValues = [@as("USD") #USD]
type cpuManufacturer = [
  | @as("amazon-web-services") #Amazon_Web_Services
  | @as("amd") #Amd
  | @as("intel") #Intel
]
type coreNetworkArn = string
type coreCount = int
type copyTagsFromSource = [@as("volume") #Volume]
type conversionTaskState = [
  | @as("completed") #Completed
  | @as("cancelled") #Cancelled
  | @as("cancelling") #Cancelling
  | @as("active") #Active
]
type conversionTaskId = string
type containerFormat = [@as("ova") #Ova]
type connectivityType = [@as("public") #Public | @as("private") #Private]
type connectionNotificationType = [@as("Topic") #Topic]
type connectionNotificationState = [@as("Disabled") #Disabled | @as("Enabled") #Enabled]
type connectionNotificationId = string
type coipPoolMaxResults = int
type coipPoolId = string
type clientVpnRouteStatusCode = [
  | @as("deleting") #Deleting
  | @as("failed") #Failed
  | @as("active") #Active
  | @as("creating") #Creating
]
type clientVpnEndpointStatusCode = [
  | @as("deleted") #Deleted
  | @as("deleting") #Deleting
  | @as("available") #Available
  | @as("pending-associate") #Pending_Associate
]
type clientVpnEndpointId = string
type clientVpnEndpointAttributeStatusCode = [@as("applied") #Applied | @as("applying") #Applying]
type clientVpnConnectionStatusCode = [
  | @as("terminated") #Terminated
  | @as("terminating") #Terminating
  | @as("failed-to-terminate") #Failed_To_Terminate
  | @as("active") #Active
]
type clientVpnAuthorizationRuleStatusCode = [
  | @as("revoking") #Revoking
  | @as("failed") #Failed
  | @as("active") #Active
  | @as("authorizing") #Authorizing
]
type clientVpnAuthenticationType = [
  | @as("federated-authentication") #Federated_Authentication
  | @as("directory-service-authentication") #Directory_Service_Authentication
  | @as("certificate-authentication") #Certificate_Authentication
]
type clientVpnAssociationId = string
type clientCertificateRevocationListStatusCode = [@as("active") #Active | @as("pending") #Pending]
type carrierGatewayState = [
  | @as("deleted") #Deleted
  | @as("deleting") #Deleting
  | @as("available") #Available
  | @as("pending") #Pending
]
type carrierGatewayMaxResults = int
type carrierGatewayId = string
type capacityReservationTenancy = [@as("dedicated") #Dedicated | @as("default") #Default]
type capacityReservationState = [
  | @as("failed") #Failed
  | @as("pending") #Pending
  | @as("cancelled") #Cancelled
  | @as("expired") #Expired
  | @as("active") #Active
]
type capacityReservationPreference = [@as("none") #None | @as("open") #Open]
type capacityReservationInstancePlatform = [
  | @as("RHEL with HA and SQL Server Enterprise") #RHEL_With_HA_And_SQL_Server_Enterprise
  | @as("RHEL with HA and SQL Server Standard") #RHEL_With_HA_And_SQL_Server_Standard
  | @as("RHEL with HA") #RHEL_With_HA
  | @as("RHEL with SQL Server Web") #RHEL_With_SQL_Server_Web
  | @as("RHEL with SQL Server Enterprise") #RHEL_With_SQL_Server_Enterprise
  | @as("RHEL with SQL Server Standard") #RHEL_With_SQL_Server_Standard
  | @as("Linux with SQL Server Enterprise") #Linux_With_SQL_Server_Enterprise
  | @as("Linux with SQL Server Web") #Linux_With_SQL_Server_Web
  | @as("Linux with SQL Server Standard") #Linux_With_SQL_Server_Standard
  | @as("Windows with SQL Server Web") #Windows_With_SQL_Server_Web
  | @as("Windows with SQL Server Standard") #Windows_With_SQL_Server_Standard
  | @as("Windows with SQL Server Enterprise") #Windows_With_SQL_Server_Enterprise
  | @as("Windows with SQL Server") #Windows_With_SQL_Server
  | @as("Windows") #Windows
  | @as("SUSE Linux") #SUSE_Linux
  | @as("Red Hat Enterprise Linux") #Red_Hat_Enterprise_Linux
  | @as("Linux/UNIX") #Linux_UNIX
]
type capacityReservationId = string
type capacityReservationFleetState = [
  | @as("failed") #Failed
  | @as("cancelled") #Cancelled
  | @as("cancelling") #Cancelling
  | @as("expired") #Expired
  | @as("expiring") #Expiring
  | @as("partially_fulfilled") #Partially_Fulfilled
  | @as("active") #Active
  | @as("modifying") #Modifying
  | @as("submitted") #Submitted
]
type capacityReservationFleetId = string
type cancelSpotInstanceRequestState = [
  | @as("completed") #Completed
  | @as("cancelled") #Cancelled
  | @as("closed") #Closed
  | @as("open") #Open
  | @as("active") #Active
]
type cancelCapacityReservationFleetErrorMessage = string
type cancelCapacityReservationFleetErrorCode = string
type cancelBatchErrorCode = [
  | @as("unexpectedError") #UnexpectedError
  | @as("fleetRequestNotInCancellableState") #FleetRequestNotInCancellableState
  | @as("fleetRequestIdMalformed") #FleetRequestIdMalformed
  | @as("fleetRequestIdDoesNotExist") #FleetRequestIdDoesNotExist
]
type byoipCidrState = [
  | @as("provisioned-not-publicly-advertisable") #Provisioned_Not_Publicly_Advertisable
  | @as("provisioned") #Provisioned
  | @as("pending-provision") #Pending_Provision
  | @as("pending-deprovision") #Pending_Deprovision
  | @as("failed-provision") #Failed_Provision
  | @as("failed-deprovision") #Failed_Deprovision
  | @as("deprovisioned") #Deprovisioned
  | @as("advertised") #Advertised
]
type burstablePerformanceFlag = bool
type burstablePerformance = [
  | @as("excluded") #Excluded
  | @as("required") #Required
  | @as("included") #Included
]
type bundleTaskState = [
  | @as("failed") #Failed
  | @as("complete") #Complete
  | @as("cancelling") #Cancelling
  | @as("storing") #Storing
  | @as("bundling") #Bundling
  | @as("waiting-for-shutdown") #Waiting_For_Shutdown
  | @as("pending") #Pending
]
type bundleId = string
type boxedDouble = float
type bootModeValues = [@as("uefi") #Uefi | @as("legacy-bios") #Legacy_Bios]
type bootModeType = [@as("uefi") #Uefi | @as("legacy-bios") #Legacy_Bios]
type boolean_ = bool
type blob = NodeJs.Buffer.t
type bgpStatus = [@as("down") #Down | @as("up") #Up]
type batchState = [
  | @as("modifying") #Modifying
  | @as("cancelled_terminating") #Cancelled_Terminating
  | @as("cancelled_running") #Cancelled_Running
  | @as("failed") #Failed
  | @as("cancelled") #Cancelled
  | @as("active") #Active
  | @as("submitted") #Submitted
]
type baselineThroughputInMBps = float
type baselineIops = int
type baselineBandwidthInMbps = int
type bareMetalFlag = bool
type bareMetal = [@as("excluded") #Excluded | @as("required") #Required | @as("included") #Included]
type availabilityZoneState = [
  | @as("unavailable") #Unavailable
  | @as("impaired") #Impaired
  | @as("information") #Information
  | @as("available") #Available
]
type availabilityZoneOptInStatus = [
  | @as("not-opted-in") #Not_Opted_In
  | @as("opted-in") #Opted_In
  | @as("opt-in-not-required") #Opt_In_Not_Required
]
type autoRecoveryFlag = bool
type autoPlacement = [@as("off") #Off | @as("on") #On]
type autoAcceptSharedAttachmentsValue = [@as("disable") #Disable | @as("enable") #Enable]
type autoAcceptSharedAssociationsValue = [@as("disable") #Disable | @as("enable") #Enable]
type attachmentStatus = [
  | @as("detached") #Detached
  | @as("detaching") #Detaching
  | @as("attached") #Attached
  | @as("attaching") #Attaching
]
type associationStatusCode = [
  | @as("disassociated") #Disassociated
  | @as("disassociating") #Disassociating
  | @as("association-failed") #Association_Failed
  | @as("associated") #Associated
  | @as("associating") #Associating
]
type associatedNetworkType = [@as("vpc") #Vpc]
type architectureValues = [
  | @as("x86_64_mac") #X86_64_Mac
  | @as("arm64") #Arm64
  | @as("x86_64") #X86_64
  | @as("i386") #I386
]
type architectureType = [
  | @as("x86_64_mac") #X86_64_Mac
  | @as("arm64") #Arm64
  | @as("x86_64") #X86_64
  | @as("i386") #I386
]
type applianceModeSupportValue = [@as("disable") #Disable | @as("enable") #Enable]
type analysisStatus = [
  | @as("failed") #Failed
  | @as("succeeded") #Succeeded
  | @as("running") #Running
]
type allowsMultipleInstanceTypes = [@as("off") #Off | @as("on") #On]
type allocationStrategy = [
  | @as("capacityOptimizedPrioritized") #CapacityOptimizedPrioritized
  | @as("capacityOptimized") #CapacityOptimized
  | @as("diversified") #Diversified
  | @as("lowestPrice") #LowestPrice
]
type allocationState = [
  | @as("pending") #Pending
  | @as("released-permanent-failure") #Released_Permanent_Failure
  | @as("released") #Released
  | @as("permanent-failure") #Permanent_Failure
  | @as("under-assessment") #Under_Assessment
  | @as("available") #Available
]
type allocationId = string
type affinity = [@as("host") #Host | @as("default") #Default]
type addressMaxResults = int
type addressFamily = [@as("ipv6") #Ipv6 | @as("ipv4") #Ipv4]
type addressAttributeName = [@as("domain-name") #Domain_Name]
type activityStatus = [
  | @as("fulfilled") #Fulfilled
  | @as("pending_termination") #Pending_Termination
  | @as("pending_fulfillment") #Pending_Fulfillment
  | @as("error") #Error
]
type accountAttributeName = [
  | @as("default-vpc") #Default_Vpc
  | @as("supported-platforms") #Supported_Platforms
]
type acceleratorType = [@as("inference") #Inference | @as("fpga") #Fpga | @as("gpu") #Gpu]
type acceleratorName = [
  | @as("vu9p") #Vu9p
  | @as("radeon-pro-v520") #Radeon_Pro_V520
  | @as("m60") #M60
  | @as("t4") #T4
  | @as("k80") #K80
  | @as("v100") #V100
  | @as("a100") #A100
]
type acceleratorManufacturer = [
  | @as("xilinx") #Xilinx
  | @as("amazon-web-services") #Amazon_Web_Services
  | @as("amd") #Amd
  | @as("nvidia") #Nvidia
]
type zoneNameStringList = array<string_>
type zoneIdStringList = array<string_>
@ocaml.doc("<p>Describes a static route for a VPN connection.</p>")
type vpnStaticRoute = {
  @ocaml.doc("<p>The current state of the static route.</p>") @as("State") state: option<vpnState>,
  @ocaml.doc("<p>Indicates how the routes were provided.</p>") @as("Source")
  source: option<vpnStaticRouteSource>,
  @ocaml.doc("<p>The CIDR block associated with the local subnet of the customer data center.</p>")
  @as("DestinationCidrBlock")
  destinationCidrBlock: option<string_>,
}
type vpnGatewayIdStringList = array<vpnGatewayId>
type vpnConnectionIdStringList = array<vpnConnectionId>
@ocaml.doc("<p>List of customer gateway devices that have a sample configuration file available for
            use. You can also see the list of device types with sample configuration files available
            under <a href=\"https://docs.aws.amazon.com/vpn/latest/s2svpn/your-cgw.html\">Your customer
                gateway device</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p>")
type vpnConnectionDeviceType = {
  @ocaml.doc("<p>Customer gateway device software version.</p>") @as("Software")
  software: option<string_>,
  @ocaml.doc("<p>Customer gateway device platform.</p>") @as("Platform") platform: option<string_>,
  @ocaml.doc("<p>Customer gateway device vendor.</p>") @as("Vendor") vendor: option<string_>,
  @ocaml.doc("<p>Customer gateway device identifier.</p>") @as("VpnConnectionDeviceTypeId")
  vpnConnectionDeviceTypeId: option<string_>,
}
@ocaml.doc("<p>Describes the status of a VPC peering connection.</p>")
type vpcPeeringConnectionStateReason = {
  @ocaml.doc("<p>A message that provides more information about the status, if applicable.</p>")
  @as("Message")
  message: option<string_>,
  @ocaml.doc("<p>The status of the VPC peering connection.</p>") @as("Code")
  code: option<vpcPeeringConnectionStateReasonCode>,
}
@ocaml.doc("<p>Describes the VPC peering connection options.</p>")
type vpcPeeringConnectionOptionsDescription = {
  @ocaml.doc(
    "<p>Indicates whether a local VPC can communicate with a ClassicLink connection in the peer VPC over the VPC peering connection.</p>"
  )
  @as("AllowEgressFromLocalVpcToRemoteClassicLink")
  allowEgressFromLocalVpcToRemoteClassicLink: option<boolean_>,
  @ocaml.doc(
    "<p>Indicates whether a local ClassicLink connection can communicate with the peer VPC over the VPC peering connection.</p>"
  )
  @as("AllowEgressFromLocalClassicLinkToRemoteVpc")
  allowEgressFromLocalClassicLinkToRemoteVpc: option<boolean_>,
  @ocaml.doc(
    "<p>Indicates whether a local VPC can resolve public DNS hostnames to private IP addresses when queried from instances in a peer VPC.</p>"
  )
  @as("AllowDnsResolutionFromRemoteVpc")
  allowDnsResolutionFromRemoteVpc: option<boolean_>,
}
type vpcPeeringConnectionIdList = array<vpcPeeringConnectionId>
type vpcIdStringList = array<vpcId>
type vpcEndpointSubnetIdList = array<subnetId>
type vpcEndpointServiceIdList = array<vpcEndpointServiceId>
type vpcEndpointSecurityGroupIdList = array<securityGroupId>
type vpcEndpointRouteTableIdList = array<routeTableId>
type vpcEndpointIdList = array<vpcEndpointId>
type vpcClassicLinkIdList = array<vpcId>
@ocaml.doc("<p>Describes the state of a CIDR block.</p>")
type vpcCidrBlockState = {
  @ocaml.doc("<p>A message about the status of the CIDR block, if applicable.</p>")
  @as("StatusMessage")
  statusMessage: option<string_>,
  @ocaml.doc("<p>The state of the CIDR block.</p>") @as("State")
  state: option<vpcCidrBlockStateCode>,
}
@ocaml.doc("<p>Describes an attachment between a virtual private gateway and a VPC.</p>")
type vpcAttachment = {
  @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<string_>,
  @ocaml.doc("<p>The current state of the attachment.</p>") @as("State")
  state: option<attachmentStatus>,
}
@ocaml.doc("<p>Describes a volume status event.</p>")
type volumeStatusEvent = {
  @ocaml.doc("<p>The ID of the instance associated with the event.</p>") @as("InstanceId")
  instanceId: option<string_>,
  @ocaml.doc("<p>The earliest start time of the event.</p>") @as("NotBefore")
  notBefore: option<millisecondDateTime>,
  @ocaml.doc("<p>The latest end time of the event.</p>") @as("NotAfter")
  notAfter: option<millisecondDateTime>,
  @ocaml.doc("<p>The type of this event.</p>") @as("EventType") eventType: option<string_>,
  @ocaml.doc("<p>The ID of this event.</p>") @as("EventId") eventId: option<string_>,
  @ocaml.doc("<p>A description of the event.</p>") @as("Description") description: option<string_>,
}
@ocaml.doc("<p>Describes a volume status.</p>")
type volumeStatusDetails = {
  @ocaml.doc("<p>The intended status of the volume status.</p>") @as("Status")
  status: option<string_>,
  @ocaml.doc("<p>The name of the volume status.</p>") @as("Name") name: option<volumeStatusName>,
}
@ocaml.doc("<p>Information about the instances to which the volume is attached.</p>")
type volumeStatusAttachmentStatus = {
  @ocaml.doc("<p>The ID of the attached instance.</p>") @as("InstanceId")
  instanceId: option<string_>,
  @ocaml.doc("<p>The maximum IOPS supported by the attached instance.</p>") @as("IoPerformance")
  ioPerformance: option<string_>,
}
@ocaml.doc("<p>Describes a volume status operation code.</p>")
type volumeStatusAction = {
  @ocaml.doc("<p>The event type associated with this operation.</p>") @as("EventType")
  eventType: option<string_>,
  @ocaml.doc("<p>The ID of the event associated with this operation.</p>") @as("EventId")
  eventId: option<string_>,
  @ocaml.doc("<p>A description of the operation.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc(
    "<p>The code identifying the operation, for example, <code>enable-volume-io</code>.</p>"
  )
  @as("Code")
  code: option<string_>,
}
@ocaml.doc("<p>Describes the modification status of an EBS volume.</p>
         <p>If the volume has never been modified, some element values will be null.</p>")
type volumeModification = {
  @ocaml.doc("<p>The modification completion or failure time.</p>") @as("EndTime")
  endTime: option<dateTime>,
  @ocaml.doc("<p>The modification start time.</p>") @as("StartTime") startTime: option<dateTime>,
  @ocaml.doc("<p>The modification progress, from 0 to 100 percent complete.</p>") @as("Progress")
  progress: option<long>,
  @ocaml.doc("<p>The original setting for Amazon EBS Multi-Attach.</p>")
  @as("OriginalMultiAttachEnabled")
  originalMultiAttachEnabled: option<boolean_>,
  @ocaml.doc("<p>The original throughput of the volume, in MiB/s.</p>") @as("OriginalThroughput")
  originalThroughput: option<integer_>,
  @ocaml.doc("<p>The original EBS volume type of the volume.</p>") @as("OriginalVolumeType")
  originalVolumeType: option<volumeType>,
  @ocaml.doc("<p>The original IOPS rate of the volume.</p>") @as("OriginalIops")
  originalIops: option<integer_>,
  @ocaml.doc("<p>The original size of the volume, in GiB.</p>") @as("OriginalSize")
  originalSize: option<integer_>,
  @ocaml.doc("<p>The target setting for Amazon EBS Multi-Attach.</p>")
  @as("TargetMultiAttachEnabled")
  targetMultiAttachEnabled: option<boolean_>,
  @ocaml.doc("<p>The target throughput of the volume, in MiB/s.</p>") @as("TargetThroughput")
  targetThroughput: option<integer_>,
  @ocaml.doc("<p>The target EBS volume type of the volume.</p>") @as("TargetVolumeType")
  targetVolumeType: option<volumeType>,
  @ocaml.doc("<p>The target IOPS rate of the volume.</p>") @as("TargetIops")
  targetIops: option<integer_>,
  @ocaml.doc("<p>The target size of the volume, in GiB.</p>") @as("TargetSize")
  targetSize: option<integer_>,
  @ocaml.doc("<p>A status message about the modification progress or failure.</p>")
  @as("StatusMessage")
  statusMessage: option<string_>,
  @ocaml.doc("<p>The current modification state. The modification state is null for unmodified
      volumes.</p>")
  @as("ModificationState")
  modificationState: option<volumeModificationState>,
  @ocaml.doc("<p>The ID of the volume.</p>") @as("VolumeId") volumeId: option<string_>,
}
type volumeIdStringList = array<volumeId>
@ocaml.doc("<p>Describes an EBS volume.</p>")
type volumeDetail = {@ocaml.doc("<p>The size of the volume, in GiB.</p>") @as("Size") size: long}
@ocaml.doc("<p>Describes volume attachment details.</p>")
type volumeAttachment = {
  @ocaml.doc("<p>Indicates whether the EBS volume is deleted on instance termination.</p>")
  @as("DeleteOnTermination")
  deleteOnTermination: option<boolean_>,
  @ocaml.doc("<p>The ID of the volume.</p>") @as("VolumeId") volumeId: option<string_>,
  @ocaml.doc("<p>The attachment state of the volume.</p>") @as("State")
  state: option<volumeAttachmentState>,
  @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<string_>,
  @ocaml.doc("<p>The device name.</p>") @as("Device") device: option<string_>,
  @ocaml.doc("<p>The time stamp when the attachment initiated.</p>") @as("AttachTime")
  attachTime: option<dateTime>,
}
type virtualizationTypeSet = array<virtualizationType>
type virtualizationTypeList = array<virtualizationType>
@ocaml.doc("<p>Describes telemetry for a VPN tunnel.</p>")
type vgwTelemetry = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the VPN tunnel endpoint certificate.</p>")
  @as("CertificateArn")
  certificateArn: option<string_>,
  @ocaml.doc("<p>If an error occurs, a description of the error.</p>") @as("StatusMessage")
  statusMessage: option<string_>,
  @ocaml.doc("<p>The status of the VPN tunnel.</p>") @as("Status") status: option<telemetryStatus>,
  @ocaml.doc("<p>The Internet-routable IP address of the virtual private gateway's outside
            interface.</p>")
  @as("OutsideIpAddress")
  outsideIpAddress: option<string_>,
  @ocaml.doc("<p>The date and time of the last change in status.</p>") @as("LastStatusChange")
  lastStatusChange: option<dateTime>,
  @ocaml.doc("<p>The number of accepted routes.</p>") @as("AcceptedRouteCount")
  acceptedRouteCount: option<integer_>,
}
type versionStringList = array<string_>
type valueStringList = array<string_>
@ocaml.doc("<p>The error code and error message that is returned for a parameter or parameter
            combination that is not valid when a new launch template or new version of a launch
            template is created.</p>")
type validationError = {
  @ocaml.doc("<p>The error message that describes why the parameter or parameter combination is not
            valid. For more information about error messages, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html\">Error
            Codes</a>.</p>")
  @as("Message")
  message: option<string_>,
  @ocaml.doc("<p>The error code that indicates why the parameter or parameter combination is not valid.
            For more information about error codes, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html\">Error
            Codes</a>.</p>")
  @as("Code")
  code: option<string_>,
}
@ocaml.doc("<p>The minimum and maximum number of vCPUs.</p>")
type vcpuCountRangeRequest = {
  @ocaml.doc(
    "<p>The maximum number of vCPUs. To specify no maximum limit, omit this parameter.</p>"
  )
  @as("Max")
  max: option<integer_>,
  @ocaml.doc(
    "<p>The minimum number of vCPUs. To specify no minimum limit, specify <code>0</code>.</p>"
  )
  @as("Min")
  min: integer_,
}
@ocaml.doc("<p>The minimum and maximum number of vCPUs.</p>")
type vcpuCountRange = {
  @ocaml.doc("<p>The maximum number of vCPUs. If this parameter is not specified, there is no maximum
         limit.</p>")
  @as("Max")
  max: option<integer_>,
  @ocaml.doc("<p>The minimum number of vCPUs. If the value is <code>0</code>, there is no minimum
         limit.</p>")
  @as("Min")
  min: option<integer_>,
}
type userIdStringList = array<string_>
@ocaml.doc("<p>Describes a security group and Amazon Web Services account ID pair.</p>")
type userIdGroupPair = {
  @ocaml.doc("<p>The ID of the VPC peering connection, if applicable.</p>")
  @as("VpcPeeringConnectionId")
  vpcPeeringConnectionId: option<string_>,
  @ocaml.doc("<p>The ID of the VPC for the referenced security group, if applicable.</p>")
  @as("VpcId")
  vpcId: option<string_>,
  @ocaml.doc("<p>The ID of an Amazon Web Services account.</p>
        <p>For a referenced security group in another VPC, the account ID of the referenced
            security group is returned in the response. If the referenced security group is deleted,
            this value is not returned.</p>
         <p>[EC2-Classic] Required when adding or removing rules that reference a security group
            in another Amazon Web Services account.</p>")
  @as("UserId")
  userId: option<string_>,
  @ocaml.doc("<p>The status of a VPC peering connection, if applicable.</p>") @as("PeeringStatus")
  peeringStatus: option<string_>,
  @ocaml.doc("<p>The name of the security group. In a request, use this parameter for a security group
            in EC2-Classic or a default VPC only. For a security group in a nondefault VPC, use the
            security group ID. </p>
        <p>For a referenced security group in another VPC, this value is not returned if the
            referenced security group is deleted.</p>")
  @as("GroupName")
  groupName: option<string_>,
  @ocaml.doc("<p>The ID of the security group.</p>") @as("GroupId") groupId: option<string_>,
  @ocaml.doc("<p>A description for the security group rule that references this user ID group
			pair.</p>
         <p>Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9,
      spaces, and ._-:/()#,@[]+=;{}!$*</p>")
  @as("Description")
  description: option<string_>,
}
type userGroupStringList = array<string_>
@ocaml.doc("<p>Describes the user data for an instance.</p>")
type userData = {
  @ocaml.doc("<p>The user data. If you are using an Amazon Web Services SDK or command line tool, Base64-encoding is performed for you, and you
   can load the text from a file. Otherwise, you must provide Base64-encoded text.</p>")
  @as("Data")
  data: option<string_>,
}
@ocaml.doc("<p>Describes the Amazon S3 bucket for the disk image.</p>")
type userBucketDetails = {
  @ocaml.doc("<p>The file name of the disk image.</p>") @as("S3Key") s3Key: option<string_>,
  @ocaml.doc("<p>The Amazon S3 bucket from which the disk image was created.</p>") @as("S3Bucket")
  s3Bucket: option<string_>,
}
@ocaml.doc("<p>Describes the Amazon S3 bucket for the disk image.</p>")
type userBucket = {
  @ocaml.doc("<p>The file name of the disk image.</p>") @as("S3Key") s3Key: option<string_>,
  @ocaml.doc("<p>The name of the Amazon S3 bucket where the disk image is located.</p>")
  @as("S3Bucket")
  s3Bucket: option<string_>,
}
type usageClassTypeList = array<usageClassType>
@ocaml.doc(
  "<p>Information about the error that occurred. For more information about errors, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html\">Error codes</a>.</p>"
)
type unsuccessfulItemError = {
  @ocaml.doc("<p>The error message accompanying the error code.</p>") @as("Message")
  message: option<string_>,
  @ocaml.doc("<p>The error code.</p>") @as("Code") code: option<string_>,
}
@ocaml.doc("<p>Information about the error for the burstable performance instance whose credit option
            for CPU usage was not modified.</p>")
type unsuccessfulInstanceCreditSpecificationItemError = {
  @ocaml.doc("<p>The applicable error message.</p>") @as("Message") message: option<string_>,
  @ocaml.doc("<p>The error code.</p>") @as("Code")
  code: option<unsuccessfulInstanceCreditSpecificationErrorCode>,
}
type trunkInterfaceAssociationIdList = array<trunkInterfaceAssociationId>
@ocaml.doc("<p>Describes the VPC attachment options.</p>")
type transitGatewayVpcAttachmentOptions = {
  @ocaml.doc("<p>Indicates whether appliance mode support is enabled.</p>")
  @as("ApplianceModeSupport")
  applianceModeSupport: option<applianceModeSupportValue>,
  @ocaml.doc("<p>Indicates whether IPv6 support is disabled.</p>") @as("Ipv6Support")
  ipv6Support: option<ipv6SupportValue>,
  @ocaml.doc("<p>Indicates whether DNS support is enabled.</p>") @as("DnsSupport")
  dnsSupport: option<dnsSupportValue>,
}
type transitGatewaySubnetIdList = array<subnetId>
@ocaml.doc("<p>Describes a route in a transit gateway route table.</p>")
type transitGatewayRouteTableRoute = {
  @ocaml.doc("<p>The resource type for the route attachment.</p>") @as("ResourceType")
  resourceType: option<string_>,
  @ocaml.doc("<p>The ID of the resource for the route attachment.</p>") @as("ResourceId")
  resourceId: option<string_>,
  @ocaml.doc("<p>The ID of the route attachment.</p>") @as("AttachmentId")
  attachmentId: option<string_>,
  @ocaml.doc("<p>The ID of the prefix list.</p>") @as("PrefixListId") prefixListId: option<string_>,
  @ocaml.doc("<p>The route origin. The following are the possible values:</p>
         <ul>
            <li>
               <p>static</p>
            </li>
            <li>
               <p>propagated</p>
            </li>
         </ul>")
  @as("RouteOrigin")
  routeOrigin: option<string_>,
  @ocaml.doc("<p>The state of the route.</p>") @as("State") state: option<string_>,
  @ocaml.doc("<p>The CIDR block used for destination matches.</p>") @as("DestinationCidr")
  destinationCidr: option<string_>,
}
@ocaml.doc("<p>Describes a route table propagation.</p>")
type transitGatewayRouteTablePropagation = {
  @ocaml.doc("<p>The state of the resource.</p>") @as("State")
  state: option<transitGatewayPropagationState>,
  @ocaml.doc(
    "<p>The type of resource. Note that the <code>tgw-peering</code> resource type has been deprecated.</p>"
  )
  @as("ResourceType")
  resourceType: option<transitGatewayAttachmentResourceType>,
  @ocaml.doc("<p>The ID of the resource.</p>") @as("ResourceId") resourceId: option<string_>,
  @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
  transitGatewayAttachmentId: option<string_>,
}
type transitGatewayRouteTableIdStringList = array<transitGatewayRouteTableId>
@ocaml.doc("<p>Describes an association between a route table and a resource attachment.</p>")
type transitGatewayRouteTableAssociation = {
  @ocaml.doc("<p>The state of the association.</p>") @as("State")
  state: option<transitGatewayAssociationState>,
  @ocaml.doc(
    "<p>The resource type. Note that the <code>tgw-peering</code> resource type has been deprecated.</p>"
  )
  @as("ResourceType")
  resourceType: option<transitGatewayAttachmentResourceType>,
  @ocaml.doc("<p>The ID of the resource.</p>") @as("ResourceId") resourceId: option<string_>,
  @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
  transitGatewayAttachmentId: option<string_>,
}
@ocaml.doc("<p>Describes a route attachment.</p>")
type transitGatewayRouteAttachment = {
  @ocaml.doc(
    "<p>The resource type. Note that the <code>tgw-peering</code> resource type has been deprecated. </p>"
  )
  @as("ResourceType")
  resourceType: option<transitGatewayAttachmentResourceType>,
  @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
  transitGatewayAttachmentId: option<string_>,
  @ocaml.doc("<p>The ID of the resource.</p>") @as("ResourceId") resourceId: option<string_>,
}
@ocaml.doc("<p>Describes route propagation.</p>")
type transitGatewayPropagation = {
  @ocaml.doc("<p>The state.</p>") @as("State") state: option<transitGatewayPropagationState>,
  @ocaml.doc("<p>The ID of the transit gateway route table.</p>") @as("TransitGatewayRouteTableId")
  transitGatewayRouteTableId: option<string_>,
  @ocaml.doc(
    "<p>The resource type. Note that the <code>tgw-peering</code> resource type has been deprecated.</p>"
  )
  @as("ResourceType")
  resourceType: option<transitGatewayAttachmentResourceType>,
  @ocaml.doc("<p>The ID of the resource.</p>") @as("ResourceId") resourceId: option<string_>,
  @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
  transitGatewayAttachmentId: option<transitGatewayAttachmentId>,
}
@ocaml.doc("<p>Describes a transit gateway prefix list attachment.</p>")
type transitGatewayPrefixListAttachment = {
  @ocaml.doc("<p>The ID of the resource.</p>") @as("ResourceId") resourceId: option<string_>,
  @ocaml.doc(
    "<p>The resource type. Note that the <code>tgw-peering</code> resource type has been deprecated.</p>"
  )
  @as("ResourceType")
  resourceType: option<transitGatewayAttachmentResourceType>,
  @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
  transitGatewayAttachmentId: option<transitGatewayAttachmentId>,
}
type transitGatewayNetworkInterfaceIdList = array<networkInterfaceId>
@ocaml.doc("<p>Describes the  transit gateway multicast group resources.</p>")
type transitGatewayMulticastGroup = {
  @ocaml.doc("<p>The source type.</p>") @as("SourceType") sourceType: option<membershipType>,
  @ocaml.doc("<p>The member type (for example, <code>static</code>).</p>") @as("MemberType")
  memberType: option<membershipType>,
  @ocaml.doc("<p>Indicates that the resource is a  transit gateway multicast group member.</p>")
  @as("GroupSource")
  groupSource: option<boolean_>,
  @ocaml.doc("<p>Indicates that the resource is a  transit gateway multicast group member.</p>")
  @as("GroupMember")
  groupMember: option<boolean_>,
  @ocaml.doc("<p>The ID of the transit gateway attachment.</p>") @as("NetworkInterfaceId")
  networkInterfaceId: option<string_>,
  @ocaml.doc(
    "<p> The ID of the Amazon Web Services account that owns the transit gateway multicast domain group resource.</p>"
  )
  @as("ResourceOwnerId")
  resourceOwnerId: option<string_>,
  @ocaml.doc("<p>The type of resource, for example a VPC attachment.</p>") @as("ResourceType")
  resourceType: option<transitGatewayAttachmentResourceType>,
  @ocaml.doc("<p>The ID of the resource.</p>") @as("ResourceId") resourceId: option<string_>,
  @ocaml.doc("<p>The ID of the subnet.</p>") @as("SubnetId") subnetId: option<string_>,
  @ocaml.doc("<p>The ID of the transit gateway attachment.</p>") @as("TransitGatewayAttachmentId")
  transitGatewayAttachmentId: option<string_>,
  @ocaml.doc("<p>The IP address assigned to the  transit gateway multicast group.</p>")
  @as("GroupIpAddress")
  groupIpAddress: option<string_>,
}
@ocaml.doc("<p>Describes the options for a transit gateway multicast domain.</p>")
type transitGatewayMulticastDomainOptions = {
  @ocaml.doc(
    "<p>Indicates whether to automatically cross-account subnet associations that are associated with the transit gateway multicast domain.</p>"
  )
  @as("AutoAcceptSharedAssociations")
  autoAcceptSharedAssociations: option<autoAcceptSharedAssociationsValue>,
  @ocaml.doc(
    "<p>Indicates whether support for statically configuring transit gateway multicast group sources is turned on.</p>"
  )
  @as("StaticSourcesSupport")
  staticSourcesSupport: option<staticSourcesSupportValue>,
  @ocaml.doc(
    "<p>Indicates whether Internet Group Management Protocol (IGMP) version 2 is turned on for the transit gateway multicast domain.</p>"
  )
  @as("Igmpv2Support")
  igmpv2Support: option<igmpv2SupportValue>,
}
type transitGatewayMulticastDomainIdStringList = array<transitGatewayMulticastDomainId>
type transitGatewayIdStringList = array<transitGatewayId>
@ocaml.doc("<p>The BGP options for the Connect attachment.</p>")
type transitGatewayConnectRequestBgpOptions = {
  @ocaml.doc("<p>The peer Autonomous System Number (ASN).</p>") @as("PeerAsn")
  peerAsn: option<long>,
}
type transitGatewayConnectPeerIdStringList = array<transitGatewayConnectPeerId>
@ocaml.doc("<p>Describes the Connect attachment options.</p>")
type transitGatewayConnectOptions = {
  @ocaml.doc("<p>The tunnel protocol.</p>") @as("Protocol") protocol: option<protocolValue>,
}
type transitGatewayCidrBlockStringList = array<string_>
@ocaml.doc("<p>Describes a propagation route table.</p>")
type transitGatewayAttachmentPropagation = {
  @ocaml.doc("<p>The state of the propagation route table.</p>") @as("State")
  state: option<transitGatewayPropagationState>,
  @ocaml.doc("<p>The ID of the propagation route table.</p>") @as("TransitGatewayRouteTableId")
  transitGatewayRouteTableId: option<string_>,
}
type transitGatewayAttachmentIdStringList = array<transitGatewayAttachmentId>
@ocaml.doc("<p>The BGP configuration information.</p>")
type transitGatewayAttachmentBgpConfiguration = {
  @ocaml.doc("<p>The BGP status.</p>") @as("BgpStatus") bgpStatus: option<bgpStatus>,
  @ocaml.doc("<p>The interior BGP peer IP address for the appliance.</p>") @as("PeerAddress")
  peerAddress: option<string_>,
  @ocaml.doc("<p>The interior BGP peer IP address for the transit gateway.</p>")
  @as("TransitGatewayAddress")
  transitGatewayAddress: option<string_>,
  @ocaml.doc("<p>The peer Autonomous System Number (ASN).</p>") @as("PeerAsn")
  peerAsn: option<long>,
  @ocaml.doc("<p>The transit gateway Autonomous System Number (ASN).</p>") @as("TransitGatewayAsn")
  transitGatewayAsn: option<long>,
}
@ocaml.doc("<p>Describes an association.</p>")
type transitGatewayAttachmentAssociation = {
  @ocaml.doc("<p>The state of the association.</p>") @as("State")
  state: option<transitGatewayAssociationState>,
  @ocaml.doc("<p>The ID of the route table for the transit gateway.</p>")
  @as("TransitGatewayRouteTableId")
  transitGatewayRouteTableId: option<string_>,
}
@ocaml.doc(
  "<p>Describes an association between a resource attachment and a transit gateway route table.</p>"
)
type transitGatewayAssociation = {
  @ocaml.doc("<p>The state of the association.</p>") @as("State")
  state: option<transitGatewayAssociationState>,
  @ocaml.doc(
    "<p>The resource type. Note that the <code>tgw-peering</code> resource type has been deprecated.</p>"
  )
  @as("ResourceType")
  resourceType: option<transitGatewayAttachmentResourceType>,
  @ocaml.doc("<p>The ID of the resource.</p>") @as("ResourceId") resourceId: option<string_>,
  @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
  transitGatewayAttachmentId: option<transitGatewayAttachmentId>,
  @ocaml.doc("<p>The ID of the transit gateway route table.</p>") @as("TransitGatewayRouteTableId")
  transitGatewayRouteTableId: option<transitGatewayRouteTableId>,
}
type trafficMirrorTargetIdList = array<trafficMirrorTargetId>
type trafficMirrorSessionIdList = array<trafficMirrorSessionId>
type trafficMirrorSessionFieldList = array<trafficMirrorSessionField>
@ocaml.doc("<p>Information about the Traffic Mirror filter rule port range.</p>")
type trafficMirrorPortRangeRequest = {
  @ocaml.doc(
    "<p>The last port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.</p>"
  )
  @as("ToPort")
  toPort: option<integer_>,
  @ocaml.doc(
    "<p>The first port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.</p>"
  )
  @as("FromPort")
  fromPort: option<integer_>,
}
@ocaml.doc("<p>Describes the Traffic Mirror port range.</p>")
type trafficMirrorPortRange = {
  @ocaml.doc(
    "<p>The end of the Traffic Mirror port range. This applies to the TCP and UDP protocols.</p>"
  )
  @as("ToPort")
  toPort: option<integer_>,
  @ocaml.doc(
    "<p>The start of the Traffic Mirror port range. This applies to the TCP and UDP protocols.</p>"
  )
  @as("FromPort")
  fromPort: option<integer_>,
}
type trafficMirrorNetworkServiceList = array<trafficMirrorNetworkService>
type trafficMirrorFilterRuleFieldList = array<trafficMirrorFilterRuleField>
type trafficMirrorFilterIdList = array<trafficMirrorFilterId>
@ocaml.doc("<p>The minimum and maximum amount of total local storage, in GB.</p>")
type totalLocalStorageGBRequest = {
  @ocaml.doc("<p>The maximum amount of total local storage, in GB. To specify no maximum limit, omit this
         parameter.</p>")
  @as("Max")
  max: option<double>,
  @ocaml.doc("<p>The minimum amount of total local storage, in GB. To specify no minimum limit, omit this
         parameter.</p>")
  @as("Min")
  min: option<double>,
}
@ocaml.doc("<p>The minimum and maximum amount of total local storage, in GB.</p>")
type totalLocalStorageGB = {
  @ocaml.doc("<p>The maximum amount of total local storage, in GB. If this parameter is not specified, there is
         no maximum limit.</p>")
  @as("Max")
  max: option<double>,
  @ocaml.doc("<p>The minimum amount of total local storage, in GB. If this parameter is not specified, there is
         no minimum limit.</p>")
  @as("Min")
  min: option<double>,
}
type threadsPerCoreList = array<threadsPerCore>
@ocaml.doc("<p>Describes a load balancer target group.</p>")
type targetGroup = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the target group.</p>") @as("Arn")
  arn: option<string_>,
}
@ocaml.doc("<p>Details about the target configuration.</p>")
type targetConfigurationRequest = {
  @ocaml.doc("<p>The Convertible Reserved Instance offering ID.</p>") @as("OfferingId")
  offeringId: reservedInstancesOfferingId,
  @ocaml.doc("<p>The number of instances the Convertible Reserved Instance offering can be applied to. This parameter is reserved and cannot 
      be specified in a request</p>")
  @as("InstanceCount")
  instanceCount: option<integer_>,
}
@ocaml.doc("<p>Information about the Convertible Reserved Instance offering.</p>")
type targetConfiguration = {
  @ocaml.doc("<p>The ID of the Convertible Reserved Instance offering.</p>") @as("OfferingId")
  offeringId: option<string_>,
  @ocaml.doc("<p>The number of instances the Convertible Reserved Instance offering can be applied to. This parameter is 
      reserved and cannot be specified in a request</p>")
  @as("InstanceCount")
  instanceCount: option<integer_>,
}
@ocaml.doc("<p>The number of units to request. You can choose to set the target capacity as the number of 
         instances. Or you can set the target capacity to a performance characteristic that is important to your application workload,
         such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can
         specify a target capacity of 0 and add capacity later.</p>
         <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance
            <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost
         does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances
         in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're
         willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops
         launching instances even if it hasn’t met the target capacity. The
         <code>MaxTotalPrice</code> parameters are located in <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_OnDemandOptionsRequest\">OnDemandOptionsRequest</a> 
         and <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotOptionsRequest\">SpotOptionsRequest</a>.</p>")
type targetCapacitySpecificationRequest = {
  @ocaml.doc("<p>The unit for the target capacity.</p>
         <p>Default: <code>units</code> (translates to number of instances)</p>")
  @as("TargetCapacityUnitType")
  targetCapacityUnitType: option<targetCapacityUnitType>,
  @ocaml.doc("<p>The default <code>TotalTargetCapacity</code>, which is either <code>Spot</code> or
            <code>On-Demand</code>.</p>")
  @as("DefaultTargetCapacityType")
  defaultTargetCapacityType: option<defaultTargetCapacityType>,
  @ocaml.doc("<p>The number of Spot units to request.</p>") @as("SpotTargetCapacity")
  spotTargetCapacity: option<integer_>,
  @ocaml.doc("<p>The number of On-Demand units to request.</p>") @as("OnDemandTargetCapacity")
  onDemandTargetCapacity: option<integer_>,
  @ocaml.doc("<p>The number of units to request, filled using
         <code>DefaultTargetCapacityType</code>.</p>")
  @as("TotalTargetCapacity")
  totalTargetCapacity: integer_,
}
@ocaml.doc("<p>The number of units to request. You can choose to set the target capacity in terms of
         instances or a performance characteristic that is important to your application workload,
         such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can
         specify a target capacity of 0 and add capacity later.</p>
         <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance
            <code>MaxTotalPrice</code>, or both to ensure that your fleet cost does not exceed your
         budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet
         will launch instances until it reaches the maximum amount that you're willing to pay. When
         the maximum amount you're willing to pay is reached, the fleet stops launching instances
         even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are
         located in <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_OnDemandOptions.html\">OnDemandOptions</a> 
         and <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotOptions\">SpotOptions</a>.</p>")
type targetCapacitySpecification = {
  @ocaml.doc("<p>The unit for the target capacity.</p>
         <p>Default: <code>units</code> (translates to number of instances)</p>")
  @as("TargetCapacityUnitType")
  targetCapacityUnitType: option<targetCapacityUnitType>,
  @ocaml.doc("<p>The default <code>TotalTargetCapacity</code>, which is either <code>Spot</code> or
            <code>On-Demand</code>.</p>")
  @as("DefaultTargetCapacityType")
  defaultTargetCapacityType: option<defaultTargetCapacityType>,
  @ocaml.doc(
    "<p>The maximum number of Spot units to launch. If you specify a target capacity for On-Demand units, you cannot specify a target capacity for Spot units.</p>"
  )
  @as("SpotTargetCapacity")
  spotTargetCapacity: option<integer_>,
  @ocaml.doc(
    "<p>The number of On-Demand units to request. If you specify a target capacity for Spot units, you cannot specify a target capacity for On-Demand units.</p>"
  )
  @as("OnDemandTargetCapacity")
  onDemandTargetCapacity: option<integer_>,
  @ocaml.doc("<p>The number of units to request, filled using
         <code>DefaultTargetCapacityType</code>.</p>")
  @as("TotalTargetCapacity")
  totalTargetCapacity: option<integer_>,
}
@ocaml.doc("<p>Describes a tag.</p>")
type tagDescription = {
  @ocaml.doc("<p>The tag value.</p>") @as("Value") value: option<string_>,
  @ocaml.doc("<p>The resource type.</p>") @as("ResourceType") resourceType: option<resourceType>,
  @ocaml.doc("<p>The ID of the resource.</p>") @as("ResourceId") resourceId: option<string_>,
  @ocaml.doc("<p>The tag key.</p>") @as("Key") key: option<string_>,
}
@ocaml.doc("<p>Describes a tag.</p>")
type tag = {
  @ocaml.doc("<p>The value of the tag.</p>
         <p>Constraints: Tag values are case-sensitive and accept a maximum of 256 Unicode characters.</p>")
  @as("Value")
  value: option<string_>,
  @ocaml.doc("<p>The key of the tag.</p>
         <p>Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. 
         May not begin with <code>aws:</code>.</p>")
  @as("Key")
  key: option<string_>,
}
@ocaml.doc("<p>Describes a Reserved Instance whose queued purchase was successfully deleted.</p>")
type successfulQueuedPurchaseDeletion = {
  @ocaml.doc("<p>The ID of the Reserved Instance.</p>") @as("ReservedInstancesId")
  reservedInstancesId: option<string_>,
}
@ocaml.doc("<p>Describes the burstable performance instance whose credit option for CPU usage was
            successfully modified.</p>")
type successfulInstanceCreditSpecificationItem = {
  @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<string_>,
}
type subnetIdStringList = array<subnetId>
@ocaml.doc("<p>Describes the state of a CIDR block.</p>")
type subnetCidrBlockState = {
  @ocaml.doc("<p>A message about the status of the CIDR block, if applicable.</p>")
  @as("StatusMessage")
  statusMessage: option<string_>,
  @ocaml.doc("<p>The state of a CIDR block.</p>") @as("State")
  state: option<subnetCidrBlockStateCode>,
}
@ocaml.doc("<p>Describes the subnet association with the transit gateway multicast domain.</p>")
type subnetAssociation = {
  @ocaml.doc("<p>The state of the subnet association.</p>") @as("State")
  state: option<transitGatewayMulitcastDomainAssociationState>,
  @ocaml.doc("<p>The ID of the subnet.</p>") @as("SubnetId") subnetId: option<string_>,
}
type stringList = array<string_>
@ocaml.doc("<p>The information about the AMI store task, including the progress of the task.</p>")
type storeImageTaskResult = {
  @ocaml.doc("<p>If the tasks fails, the reason for the failure is returned. If the task succeeds,
        <code>null</code> is returned.</p>")
  @as("StoreTaskFailureReason")
  storeTaskFailureReason: option<string_>,
  @ocaml.doc("<p>The state of the store task (<code>InProgress</code>, <code>Completed</code>, or
        <code>Failed</code>).</p>")
  @as("StoreTaskState")
  storeTaskState: option<string_>,
  @ocaml.doc("<p>The progress of the task as a percentage.</p>") @as("ProgressPercentage")
  progressPercentage: option<integer_>,
  @ocaml.doc("<p>The name of the stored AMI object in the bucket.</p>") @as("S3objectKey")
  s3objectKey: option<string_>,
  @ocaml.doc("<p>The name of the Amazon S3 bucket that contains the stored AMI object.</p>")
  @as("Bucket")
  bucket: option<string_>,
  @ocaml.doc("<p>The time the task started.</p>") @as("TaskStartTime")
  taskStartTime: option<millisecondDateTime>,
  @ocaml.doc("<p>The ID of the AMI that is being stored.</p>") @as("AmiId") amiId: option<string_>,
}
@ocaml.doc("<p>Describes a storage location in Amazon S3.</p>")
type storageLocation = {
  @ocaml.doc("<p>The key.</p>") @as("Key") key: option<string_>,
  @ocaml.doc("<p>The name of the S3 bucket.</p>") @as("Bucket") bucket: option<string_>,
}
@ocaml.doc("<p>Describes a state change.</p>")
type stateReason = {
  @ocaml.doc("<p>The message for the state change.</p>
        <ul>
            <li>
                <p>
                  <code>Server.InsufficientInstanceCapacity</code>: There was insufficient
                    capacity available to satisfy the launch request.</p>
            </li>
            <li>
                <p>
                  <code>Server.InternalError</code>: An internal error caused the instance to
                    terminate during launch.</p>
            </li>
            <li>
                <p>
                  <code>Server.ScheduledStop</code>: The instance was stopped due to a scheduled
                    retirement.</p>
            </li>
            <li>
                <p>
                  <code>Server.SpotInstanceShutdown</code>: The instance was stopped because the
                    number of Spot requests with a maximum price equal to or higher than the Spot
                    price exceeded available capacity or because of an increase in the Spot
                    price.</p>
            </li>
            <li>
                <p>
                  <code>Server.SpotInstanceTermination</code>: The instance was terminated
                    because the number of Spot requests with a maximum price equal to or higher than
                    the Spot price exceeded available capacity or because of an increase in the Spot
                    price.</p>
            </li>
            <li>
                <p>
                  <code>Client.InstanceInitiatedShutdown</code>: The instance was shut down
                    using the <code>shutdown -h</code> command from the instance.</p>
            </li>
            <li>
                <p>
                  <code>Client.InstanceTerminated</code>: The instance was terminated or
                    rebooted during AMI creation.</p>
            </li>
            <li>
                <p>
                  <code>Client.InternalError</code>: A client error caused the instance to
                    terminate during launch.</p>
            </li>
            <li>
                <p>
                  <code>Client.InvalidSnapshot.NotFound</code>: The specified snapshot was not
                    found.</p>
            </li>
            <li>
                <p>
                  <code>Client.UserInitiatedHibernate</code>: Hibernation was initiated on the
                    instance.</p>
            </li>
            <li>
                <p>
                  <code>Client.UserInitiatedShutdown</code>: The instance was shut down using
                    the Amazon EC2 API.</p>
            </li>
            <li>
                <p>
                  <code>Client.VolumeLimitExceeded</code>: The limit on the number of EBS
                    volumes or total storage was exceeded. Decrease usage or request an increase in
                    your account limits.</p>
            </li>
         </ul>")
  @as("Message")
  message: option<string_>,
  @ocaml.doc("<p>The reason code for the state change.</p>") @as("Code") code: option<string_>,
}
@ocaml.doc("<p>Describes the maximum price per hour that you are willing to pay for a Spot
            Instance.</p>")
type spotPrice = {
  @ocaml.doc("<p>The date and time the request was created, in UTC format (for example,
                <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>")
  @as("Timestamp")
  timestamp_: option<dateTime>,
  @ocaml.doc("<p>The maximum price per hour that you are willing to pay for a Spot Instance.</p>")
  @as("SpotPrice")
  spotPrice: option<string_>,
  @ocaml.doc("<p>A general description of the AMI.</p>") @as("ProductDescription")
  productDescription: option<riproductDescription>,
  @ocaml.doc("<p>The instance type.</p>") @as("InstanceType") instanceType: option<instanceType>,
  @ocaml.doc("<p>The Availability Zone.</p>") @as("AvailabilityZone")
  availabilityZone: option<string_>,
}
@ocaml.doc("<p>The Spot placement score for this Region or Availability Zone. The score is calculated
         based on the assumption that the <code>capacity-optimized</code> allocation strategy is
         used and that all of the Availability Zones in the Region can be used.</p>")
type spotPlacementScore = {
  @ocaml.doc("<p>The placement score, on a scale from <code>1</code> to <code>10</code>. A score of
            <code>10</code> indicates that your Spot request is highly likely to succeed in this
         Region or Availability Zone. A score of <code>1</code> indicates that your Spot request is
         not likely to succeed. </p>")
  @as("Score")
  score: option<integer_>,
  @ocaml.doc("<p>The Availability Zone.</p>") @as("AvailabilityZoneId")
  availabilityZoneId: option<string_>,
  @ocaml.doc("<p>The Region.</p>") @as("Region") region: option<string_>,
}
@ocaml.doc("<p>Describes Spot Instance placement.</p>")
type spotPlacement = {
  @ocaml.doc("<p>The tenancy of the instance (if the instance is running in a VPC). An instance with a
            tenancy of <code>dedicated</code> runs on single-tenant hardware. The <code>host</code>
            tenancy is not supported for Spot Instances.</p>")
  @as("Tenancy")
  tenancy: option<tenancy>,
  @ocaml.doc("<p>The name of the placement group.</p>") @as("GroupName")
  groupName: option<placementGroupName>,
  @ocaml.doc("<p>The Availability Zone.</p>
        <p>[Spot Fleet only] To specify multiple Availability Zones, separate them using commas;
            for example, \"us-west-2a, us-west-2b\".</p>")
  @as("AvailabilityZone")
  availabilityZone: option<string_>,
}
@ocaml.doc("<p>The options for Spot Instances.</p>")
type spotMarketOptions = {
  @ocaml.doc("<p>The behavior when a Spot Instance is interrupted. The default is
                <code>terminate</code>.</p>")
  @as("InstanceInterruptionBehavior")
  instanceInterruptionBehavior: option<instanceInterruptionBehavior>,
  @ocaml.doc("<p>The end date of the request, in UTC format
                (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
            Supported only for persistent requests.</p>
        <ul>
            <li>
                <p>For a persistent request, the request remains active until the
                        <code>ValidUntil</code> date and time is reached. Otherwise, the request
                    remains active until you cancel it.</p>
            </li>
            <li>
                <p>For a one-time request, <code>ValidUntil</code> is not supported. The request
                    remains active until all instances launch or you cancel the request.</p>
            </li>
         </ul>")
  @as("ValidUntil")
  validUntil: option<dateTime>,
  @ocaml.doc("<p>Deprecated.</p>") @as("BlockDurationMinutes")
  blockDurationMinutes: option<integer_>,
  @ocaml.doc("<p>The Spot Instance request type. For <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances\">RunInstances</a>, persistent
            Spot Instance requests are only supported when the instance interruption behavior is
            either <code>hibernate</code> or <code>stop</code>.</p>")
  @as("SpotInstanceType")
  spotInstanceType: option<spotInstanceType>,
  @ocaml.doc("<p>The maximum hourly price you're willing to pay for the Spot Instances. The default is
            the On-Demand price.</p>")
  @as("MaxPrice")
  maxPrice: option<string_>,
}
@ocaml.doc("<p>Describes the status of a Spot Instance request.</p>")
type spotInstanceStatus = {
  @ocaml.doc("<p>The date and time of the most recent status update, in UTC format (for example,
                <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>")
  @as("UpdateTime")
  updateTime: option<dateTime>,
  @ocaml.doc("<p>The description for the status code.</p>") @as("Message") message: option<string_>,
  @ocaml.doc(
    "<p>The status code. For a list of status codes, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html#spot-instance-bid-status-understand\">Spot status codes</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>"
  )
  @as("Code")
  code: option<string_>,
}
@ocaml.doc("<p>Describes a Spot Instance state change.</p>")
type spotInstanceStateFault = {
  @ocaml.doc("<p>The message for the Spot Instance state change.</p>") @as("Message")
  message: option<string_>,
  @ocaml.doc("<p>The reason code for the Spot Instance state change.</p>") @as("Code")
  code: option<string_>,
}
type spotInstanceRequestIdList = array<spotInstanceRequestId>
type spotFleetRequestIdList = array<spotFleetRequestId>
@ocaml.doc("<p>Describes whether monitoring is enabled.</p>")
type spotFleetMonitoring = {
  @ocaml.doc("<p>Enables monitoring for the instance.</p>
         <p>Default: <code>false</code>
         </p>")
  @as("Enabled")
  enabled: option<boolean_>,
}
@ocaml.doc("<p>The Spot Instance replacement strategy to use when Amazon EC2 emits a signal that your
            Spot Instance is at an elevated risk of being interrupted. For more information, see
                <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-capacity-rebalance.html\">Capacity rebalancing</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>")
type spotCapacityRebalance = {
  @ocaml.doc("<p>The amount of time (in seconds) that Amazon EC2 waits before terminating the old Spot
            Instance after launching a new replacement Spot Instance.</p>
        <p>Required when <code>ReplacementStrategy</code> is set to <code>launch-before-terminate</code>.</p>
        <p>Not valid when <code>ReplacementStrategy</code> is set to <code>launch</code>.</p>
        <p>Valid values: Minimum value of <code>120</code> seconds. Maximum value of <code>7200</code> seconds.</p>")
  @as("TerminationDelay")
  terminationDelay: option<integer_>,
  @ocaml.doc("<p>The replacement strategy to use. Only available for fleets of type
            <code>maintain</code>.</p>
        <p>
            <code>launch</code> - Spot Fleet launches a new replacement Spot Instance when a
            rebalance notification is emitted for an existing Spot Instance in the fleet. Spot Fleet
            does not terminate the instances that receive a rebalance notification. You can
            terminate the old instances, or you can leave them running. You are charged for all
            instances while they are running. </p>
        <p>
            <code>launch-before-terminate</code> - Spot Fleet launches a new replacement Spot
            Instance when a rebalance notification is emitted for an existing Spot Instance in the
            fleet, and then, after a delay that you specify (in <code>TerminationDelay</code>),
            terminates the instances that received a rebalance notification.</p>")
  @as("ReplacementStrategy")
  replacementStrategy: option<replacementStrategy>,
}
@ocaml.doc("<p>Information about a snapshot that is currently in the Recycle Bin.</p>")
type snapshotRecycleBinInfo = {
  @ocaml.doc("<p>The ID of the volume from which the snapshot was created.</p>") @as("VolumeId")
  volumeId: option<string_>,
  @ocaml.doc("<p>The description for the snapshot.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc(
    "<p>The date and time when the snapshot is to be permanently deleted from the Recycle Bin.</p>"
  )
  @as("RecycleBinExitTime")
  recycleBinExitTime: option<millisecondDateTime>,
  @ocaml.doc("<p>The date and time when the snaphsot entered the Recycle Bin.</p>")
  @as("RecycleBinEnterTime")
  recycleBinEnterTime: option<millisecondDateTime>,
  @ocaml.doc("<p>The ID of the snapshot.</p>") @as("SnapshotId") snapshotId: option<string_>,
}
type snapshotIdStringList = array<snapshotId>
@ocaml.doc("<p>Describes the time period for a Scheduled Instance to start its first schedule.</p>")
type slotStartTimeRangeRequest = {
  @ocaml.doc("<p>The latest date and time, in UTC, for the Scheduled Instance to start.</p>")
  @as("LatestTime")
  latestTime: option<dateTime>,
  @ocaml.doc("<p>The earliest date and time, in UTC, for the Scheduled Instance to start.</p>")
  @as("EarliestTime")
  earliestTime: option<dateTime>,
}
@ocaml.doc(
  "<p>Describes the time period for a Scheduled Instance to start its first schedule. The time period must span less than one day.</p>"
)
type slotDateTimeRangeRequest = {
  @ocaml.doc(
    "<p>The latest date and time, in UTC, for the Scheduled Instance to start. This value must be later than or equal to the earliest date and at most three months in the future.</p>"
  )
  @as("LatestTime")
  latestTime: dateTime,
  @ocaml.doc("<p>The earliest date and time, in UTC, for the Scheduled Instance to start.</p>")
  @as("EarliestTime")
  earliestTime: dateTime,
}
@ocaml.doc("<p>Describes the type of service for a VPC endpoint.</p>")
type serviceTypeDetail = {
  @ocaml.doc("<p>The type of service.</p>") @as("ServiceType") serviceType: option<serviceType>,
}
type securityGroupStringList = array<securityGroupName>
@ocaml.doc("<p>Describes a security group rule.</p>
        <p>You must specify exactly one of the following parameters, based on the rule type:</p>
        <ul>
            <li>
               <p>CidrIpv4</p>
            </li>
            <li>
               <p>CidrIpv6</p>
            </li>
            <li>
               <p>PrefixListId</p>
            </li>
            <li>
               <p>ReferencedGroupId</p>
            </li>
         </ul>
        <p>When you modify a rule, you cannot change the rule type. For example, if the rule  
            uses an IPv4 address range, you must use <code>CidrIpv4</code> to specify a new IPv4 
            address range.</p>")
type securityGroupRuleRequest = {
  @ocaml.doc("<p>The description of the security group rule.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The ID of the security group that is referenced in the security group rule.</p>")
  @as("ReferencedGroupId")
  referencedGroupId: option<securityGroupId>,
  @ocaml.doc("<p>The ID of the prefix list.</p>") @as("PrefixListId")
  prefixListId: option<prefixListResourceId>,
  @ocaml.doc(
    "<p>The IPv6 CIDR range. To specify a single IPv6 address, use the /128 prefix length.</p>"
  )
  @as("CidrIpv6")
  cidrIpv6: option<string_>,
  @ocaml.doc(
    "<p>The IPv4 CIDR range. To specify a single IPv4 address, use the /32 prefix length. </p>"
  )
  @as("CidrIpv4")
  cidrIpv4: option<string_>,
  @ocaml.doc(
    "<p>The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of <code>-1</code> indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes. </p>"
  )
  @as("ToPort")
  toPort: option<integer_>,
  @ocaml.doc(
    "<p>The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.</p>"
  )
  @as("FromPort")
  fromPort: option<integer_>,
  @ocaml.doc("<p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>,
                <code>icmpv6</code>) or number (see <a href=\"http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\">Protocol Numbers</a>). </p> 
        <p>Use <code>-1</code> to specify all protocols.</p>")
  @as("IpProtocol")
  ipProtocol: option<string_>,
}
type securityGroupRuleIdList = array<string_>
@ocaml.doc("<p>Describes the description of a security group rule.</p>
        <p>You can use this when you want to update the security group rule description for either an inbound or outbound rule.</p>")
type securityGroupRuleDescription = {
  @ocaml.doc("<p>The description of the security group rule.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The ID of the security group rule.</p>") @as("SecurityGroupRuleId")
  securityGroupRuleId: option<string_>,
}
@ocaml.doc("<p>Describes a VPC with a security group that references your security group.</p>")
type securityGroupReference = {
  @ocaml.doc("<p>The ID of the VPC peering connection.</p>") @as("VpcPeeringConnectionId")
  vpcPeeringConnectionId: option<string_>,
  @ocaml.doc("<p>The ID of the VPC with the referencing security group.</p>")
  @as("ReferencingVpcId")
  referencingVpcId: option<string_>,
  @ocaml.doc("<p>The ID of your security group.</p>") @as("GroupId") groupId: option<string_>,
}
@ocaml.doc("<p>Describes a security group.</p>")
type securityGroupIdentifier = {
  @ocaml.doc("<p>The name of the security group.</p>") @as("GroupName") groupName: option<string_>,
  @ocaml.doc("<p>The ID of the security group.</p>") @as("GroupId") groupId: option<string_>,
}
type securityGroupIdStringList = array<securityGroupId>
type scheduledInstancesSecurityGroupIdSet = array<securityGroupId>
@ocaml.doc("<p>Describes a private IPv4 address for a Scheduled Instance.</p>")
type scheduledInstancesPrivateIpAddressConfig = {
  @ocaml.doc("<p>The IPv4 address.</p>") @as("PrivateIpAddress") privateIpAddress: option<string_>,
  @ocaml.doc(
    "<p>Indicates whether this is a primary IPv4 address. Otherwise, this is a secondary IPv4 address.</p>"
  )
  @as("Primary")
  primary: option<boolean_>,
}
@ocaml.doc("<p>Describes the placement for a Scheduled Instance.</p>")
type scheduledInstancesPlacement = {
  @ocaml.doc("<p>The name of the placement group.</p>") @as("GroupName")
  groupName: option<placementGroupName>,
  @ocaml.doc("<p>The Availability Zone.</p>") @as("AvailabilityZone")
  availabilityZone: option<string_>,
}
@ocaml.doc("<p>Describes whether monitoring is enabled for a Scheduled Instance.</p>")
type scheduledInstancesMonitoring = {
  @ocaml.doc("<p>Indicates whether monitoring is enabled.</p>") @as("Enabled")
  enabled: option<boolean_>,
}
@ocaml.doc("<p>Describes an IPv6 address.</p>")
type scheduledInstancesIpv6Address = {
  @ocaml.doc("<p>The IPv6 address.</p>") @as("Ipv6Address") ipv6Address: option<ipv6Address>,
}
@ocaml.doc("<p>Describes an IAM instance profile for a Scheduled Instance.</p>")
type scheduledInstancesIamInstanceProfile = {
  @ocaml.doc("<p>The name.</p>") @as("Name") name: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN).</p>") @as("Arn") arn: option<string_>,
}
@ocaml.doc("<p>Describes an EBS volume for a Scheduled Instance.</p>")
type scheduledInstancesEbs = {
  @ocaml.doc("<p>The volume type. <code>gp2</code> for General Purpose SSD, <code>io1</code> or <code> io2</code> for Provisioned IOPS SSD, Throughput Optimized HDD
         for <code>st1</code>, Cold HDD for <code>sc1</code>, or <code>standard</code> for
         Magnetic.</p>
         <p>Default: <code>gp2</code>
         </p>")
  @as("VolumeType")
  volumeType: option<string_>,
  @ocaml.doc("<p>The size of the volume, in GiB.</p>
         <p>Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.</p>")
  @as("VolumeSize")
  volumeSize: option<integer_>,
  @ocaml.doc("<p>The ID of the snapshot.</p>") @as("SnapshotId") snapshotId: option<snapshotId>,
  @ocaml.doc("<p>The number of I/O operations per second (IOPS) to provision for an <code>io1</code> or <code>io2</code> volume, with a maximum
   		ratio of 50 IOPS/GiB for <code>io1</code>, and 500 IOPS/GiB for <code>io2</code>. Range is 100 to 64,000 IOPS for
   		volumes in most Regions. Maximum IOPS of 64,000 is guaranteed only on
   		<a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances\">instances built on the Nitro System</a>. Other instance families guarantee performance up to
   		32,000 IOPS. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html\">Amazon EBS volume types</a> in the
   		<i>Amazon EC2 User Guide</i>.</p>
   	     <p>This parameter is valid only for Provisioned IOPS SSD (<code>io1</code> and <code>io2</code>) volumes.</p>")
  @as("Iops")
  iops: option<integer_>,
  @ocaml.doc(
    "<p>Indicates whether the volume is encrypted. You can attached encrypted volumes only to instances that support them.</p>"
  )
  @as("Encrypted")
  encrypted: option<boolean_>,
  @ocaml.doc("<p>Indicates whether the volume is deleted on instance termination.</p>")
  @as("DeleteOnTermination")
  deleteOnTermination: option<boolean_>,
}
type scheduledInstanceIdRequestSet = array<scheduledInstanceId>
@ocaml.doc(
  "<p>Describes the storage parameters for Amazon S3 and Amazon S3 buckets for an instance store-backed AMI.</p>"
)
type s3Storage = {
  @ocaml.doc("<p>The signature of the JSON document.</p>") @as("UploadPolicySignature")
  uploadPolicySignature: option<string_>,
  @ocaml.doc(
    "<p>An Amazon S3 upload policy that gives Amazon EC2 permission to upload items into Amazon S3 on your behalf.</p>"
  )
  @as("UploadPolicy")
  uploadPolicy: option<blob>,
  @ocaml.doc("<p>The beginning of the file name of the AMI.</p>") @as("Prefix")
  prefix: option<string_>,
  @ocaml.doc(
    "<p>The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.</p>"
  )
  @as("Bucket")
  bucket: option<string_>,
  @ocaml.doc("<p>The access key ID of the owner of the bucket. Before you specify a value for your access key ID, review and follow the guidance  
       in <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html\">Best Practices for Managing Amazon Web Services Access Keys</a>.</p>")
  @as("AWSAccessKeyId")
  awsaccessKeyId: option<string_>,
}
@ocaml.doc("<p>The tags to apply to the AMI object that will be stored in the Amazon S3 bucket. For more
      information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-tagging.html\">Categorizing your storage using
        tags</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p>")
type s3ObjectTag = {
  @ocaml.doc("<p>The value of the tag.</p>
         <p>Constraints: Tag values are case-sensitive and can be up to 256 Unicode characters in
      length.</p>")
  @as("Value")
  value: option<string_>,
  @ocaml.doc("<p>The key of the tag.</p>
         <p>Constraints: Tag keys are case-sensitive and can be up to 128 Unicode characters in
      length. May not begin with <code>aws</code>:.</p>")
  @as("Key")
  key: option<string_>,
}
@ocaml.doc("<p>Describes the monitoring of an instance.</p>")
type runInstancesMonitoringEnabled = {
  @ocaml.doc("<p>Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is
            enabled.</p>")
  @as("Enabled")
  enabled: boolean_,
}
type routeTableIdStringList = array<routeTableId>
@ocaml.doc(
  "<p>Describes the state of an association between a route table and a subnet or gateway.</p>"
)
type routeTableAssociationState = {
  @ocaml.doc("<p>The status message, if applicable.</p>") @as("StatusMessage")
  statusMessage: option<string_>,
  @ocaml.doc("<p>The state of the association.</p>") @as("State")
  state: option<routeTableAssociationStateCode>,
}
@ocaml.doc("<p>Describes a route in a route table.</p>")
type route = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the core network.</p>") @as("CoreNetworkArn")
  coreNetworkArn: option<coreNetworkArn>,
  @ocaml.doc("<p>The ID of a VPC peering connection.</p>") @as("VpcPeeringConnectionId")
  vpcPeeringConnectionId: option<string_>,
  @ocaml.doc("<p>The state of the route. The <code>blackhole</code> state indicates that the
				route's target isn't available (for example, the specified gateway isn't attached to the
				VPC, or the specified NAT instance has been terminated).</p>")
  @as("State")
  state: option<routeState>,
  @ocaml.doc("<p>Describes how the route was created.</p>
         <ul>
            <li>
               <p>
                  <code>CreateRouteTable</code> - The route was automatically created when the route table was created.</p>
            </li>
            <li>
               <p>
                  <code>CreateRoute</code> - The route was manually added to the route table.</p>
            </li>
            <li>
               <p>
                  <code>EnableVgwRoutePropagation</code> - The route was propagated by route propagation.</p>
            </li>
         </ul>")
  @as("Origin")
  origin: option<routeOrigin>,
  @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
  networkInterfaceId: option<string_>,
  @ocaml.doc("<p>The ID of the carrier gateway.</p>") @as("CarrierGatewayId")
  carrierGatewayId: option<carrierGatewayId>,
  @ocaml.doc("<p>The ID of the local gateway.</p>") @as("LocalGatewayId")
  localGatewayId: option<string_>,
  @ocaml.doc("<p>The ID of a transit gateway.</p>") @as("TransitGatewayId")
  transitGatewayId: option<string_>,
  @ocaml.doc("<p>The ID of a NAT gateway.</p>") @as("NatGatewayId") natGatewayId: option<string_>,
  @ocaml.doc("<p>The ID of Amazon Web Services account that owns the instance.</p>")
  @as("InstanceOwnerId")
  instanceOwnerId: option<string_>,
  @ocaml.doc("<p>The ID of a NAT instance in your VPC.</p>") @as("InstanceId")
  instanceId: option<string_>,
  @ocaml.doc("<p>The ID of a gateway attached to your VPC.</p>") @as("GatewayId")
  gatewayId: option<string_>,
  @ocaml.doc("<p>The ID of the egress-only internet gateway.</p>")
  @as("EgressOnlyInternetGatewayId")
  egressOnlyInternetGatewayId: option<string_>,
  @ocaml.doc("<p>The prefix of the Amazon Web Service.</p>") @as("DestinationPrefixListId")
  destinationPrefixListId: option<string_>,
  @ocaml.doc("<p>The IPv6 CIDR block used for the destination match.</p>")
  @as("DestinationIpv6CidrBlock")
  destinationIpv6CidrBlock: option<string_>,
  @ocaml.doc("<p>The IPv4 CIDR block used for the destination match.</p>")
  @as("DestinationCidrBlock")
  destinationCidrBlock: option<string_>,
}
type rootDeviceTypeList = array<rootDeviceType>
type restorableByStringList = array<string_>
type responseHostIdSet = array<string_>
type responseHostIdList = array<string_>
@ocaml.doc("<p>Describes the error that's returned when you cannot delete a launch template
            version.</p>")
type responseError = {
  @ocaml.doc("<p>The error message, if applicable.</p>") @as("Message") message: option<string_>,
  @ocaml.doc("<p>The error code.</p>") @as("Code") code: option<launchTemplateErrorCode>,
}
type resourceList = array<string_>
type resourceIdList = array<taggableResourceId>
type reservedInstancesOfferingIdStringList = array<reservedInstancesOfferingId>
type reservedInstancesModificationIdStringList = array<reservedInstancesModificationId>
type reservedInstancesIdStringList = array<reservationId>
@ocaml.doc("<p>Describes the ID of a Reserved Instance.</p>")
type reservedInstancesId = {
  @ocaml.doc("<p>The ID of the Reserved Instance.</p>") @as("ReservedInstancesId")
  reservedInstancesId: option<string_>,
}
@ocaml.doc("<p>Describes the configuration settings for the modified Reserved Instances.</p>")
type reservedInstancesConfiguration = {
  @ocaml.doc(
    "<p>Whether the Reserved Instance is applied to instances in a Region or instances in a specific Availability Zone.</p>"
  )
  @as("Scope")
  scope: option<scope>,
  @ocaml.doc(
    "<p>The network platform of the modified Reserved Instances, which is either EC2-Classic or EC2-VPC.</p>"
  )
  @as("Platform")
  platform: option<string_>,
  @ocaml.doc("<p>The instance type for the modified Reserved Instances.</p>") @as("InstanceType")
  instanceType: option<instanceType>,
  @ocaml.doc("<p>The number of modified Reserved Instances.</p>
         <note>
            <p>This is a required field for a request.</p>
         </note>")
  @as("InstanceCount")
  instanceCount: option<integer_>,
  @ocaml.doc("<p>The Availability Zone for the modified Reserved Instances.</p>")
  @as("AvailabilityZone")
  availabilityZone: option<string_>,
}
@ocaml.doc("<p>Describes the limit price of a Reserved Instance offering.</p>")
type reservedInstanceLimitPrice = {
  @ocaml.doc("<p>The currency in which the <code>limitPrice</code> amount is specified.
				At this time, the only supported currency is <code>USD</code>.</p>")
  @as("CurrencyCode")
  currencyCode: option<currencyCodeValues>,
  @ocaml.doc(
    "<p>Used for Reserved Instance Marketplace offerings. Specifies the limit price on the total order (instanceCount * price).</p>"
  )
  @as("Amount")
  amount: option<double>,
}
type reservedInstanceIdSet = array<reservationId>
@ocaml.doc("<p>The cost associated with the Reserved Instance.</p>")
type reservationValue = {
  @ocaml.doc("<p>The remaining upfront cost of the reservation.</p>") @as("RemainingUpfrontValue")
  remainingUpfrontValue: option<string_>,
  @ocaml.doc(
    "<p>The balance of the total value (the sum of remainingUpfrontValue + hourlyPrice * number of hours remaining).</p>"
  )
  @as("RemainingTotalValue")
  remainingTotalValue: option<string_>,
  @ocaml.doc("<p>The hourly rate of the reservation.</p>") @as("HourlyPrice")
  hourlyPrice: option<string_>,
}
@ocaml.doc("<p>Information about an instance type to use in a Capacity Reservation Fleet.</p>")
type reservationFleetInstanceSpecification = {
  @ocaml.doc("<p>The priority to assign to the instance type. This value is used to determine which of the instance types 
			specified for the Fleet should be prioritized for use. A lower value indicates a high priority. For more 
			information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#instance-priority\">Instance type priority</a> 
			in the Amazon EC2 User Guide.</p>")
  @as("Priority")
  priority: option<integerWithConstraints>,
  @ocaml.doc("<p>Indicates whether the Capacity Reservation Fleet supports EBS-optimized instances types. This 
			optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack 
			to provide optimal I/O performance. This optimization isn't available with all instance types. Additional 
			usage charges apply when using EBS-optimized instance types.</p>")
  @as("EbsOptimized")
  ebsOptimized: option<boolean_>,
  @ocaml.doc("<p>The ID of the Availability Zone in which the Capacity Reservation Fleet reserves the capacity. A 
			Capacity Reservation Fleet can't span Availability Zones. All instance type specifications that you 
			specify for the Fleet must use the same Availability Zone.</p>")
  @as("AvailabilityZoneId")
  availabilityZoneId: option<string_>,
  @ocaml.doc("<p>The Availability Zone in which the Capacity Reservation Fleet reserves the capacity. A Capacity 
			Reservation Fleet can't span Availability Zones. All instance type specifications that you specify 
			for the Fleet must use the same Availability Zone.</p>")
  @as("AvailabilityZone")
  availabilityZone: option<string_>,
  @ocaml.doc("<p>The number of capacity units provided by the specified instance type. This value, together with the 
			total target capacity that you specify for the Fleet determine the number of instances for which the 
			Fleet reserves capacity. Both values are based on units that make sense for your workload. For more 
			information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity\">Total target capacity</a> 
			in the Amazon EC2 User Guide.</p>")
  @as("Weight")
  weight: option<doubleWithConstraints>,
  @ocaml.doc(
    "<p>The type of operating system for which the Capacity Reservation Fleet reserves capacity.</p>"
  )
  @as("InstancePlatform")
  instancePlatform: option<capacityReservationInstancePlatform>,
  @ocaml.doc("<p>The instance type for which the Capacity Reservation Fleet reserves capacity.</p>")
  @as("InstanceType")
  instanceType: option<instanceType>,
}
type requestSpotLaunchSpecificationSecurityGroupList = array<string_>
type requestSpotLaunchSpecificationSecurityGroupIdList = array<securityGroupId>
@ocaml.doc("<p>A tag on an IPAM resource.</p>")
type requestIpamResourceTag = {
  @ocaml.doc("<p>The value for the tag.</p>") @as("Value") value: option<string_>,
  @ocaml.doc(
    "<p>The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>"
  )
  @as("Key")
  key: option<string_>,
}
type requestInstanceTypeList = array<instanceType>
type requestHostIdSet = array<dedicatedHostId>
type requestHostIdList = array<dedicatedHostId>
type replaceRootVolumeTaskIds = array<replaceRootVolumeTaskId>
@ocaml.doc("<p>An entry for a prefix list.</p>")
type removePrefixListEntry = {@ocaml.doc("<p>The CIDR block.</p>") @as("Cidr") cidr: string_}
@ocaml.doc("<p>Remove an operating Region from an IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only
         discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.</p>
         <p>For more information about operating Regions, see <a href=\"/vpc/latest/ipam/create-ipam.html\">Create an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>
         </p>")
type removeIpamOperatingRegion = {
  @ocaml.doc("<p>The name of the operating Region you want to remove.</p>") @as("RegionName")
  regionName: option<string_>,
}
type regionNames = array<string_>
type regionNameStringList = array<string_>
@ocaml.doc("<p>Describes a Region.</p>")
type region = {
  @ocaml.doc("<p>The Region opt-in status. The possible values are <code>opt-in-not-required</code>, <code>opted-in</code>, and 
        <code>not-opted-in</code>.</p>")
  @as("OptInStatus")
  optInStatus: option<string_>,
  @ocaml.doc("<p>The name of the Region.</p>") @as("RegionName") regionName: option<string_>,
  @ocaml.doc("<p>The Region service endpoint.</p>") @as("Endpoint") endpoint: option<string_>,
}
@ocaml.doc("<p> Describes the security group that is referenced in the security group rule.</p>")
type referencedSecurityGroup = {
  @ocaml.doc("<p>The ID of the VPC peering connection.</p>") @as("VpcPeeringConnectionId")
  vpcPeeringConnectionId: option<string_>,
  @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<string_>,
  @ocaml.doc("<p>The Amazon Web Services account ID.</p>") @as("UserId") userId: option<string_>,
  @ocaml.doc("<p>The status of a VPC peering connection, if applicable.</p>") @as("PeeringStatus")
  peeringStatus: option<string_>,
  @ocaml.doc("<p>The ID of the security group.</p>") @as("GroupId") groupId: option<string_>,
}
@ocaml.doc("<p>Describes a recurring charge.</p>")
type recurringCharge = {
  @ocaml.doc("<p>The frequency of the recurring charge.</p>") @as("Frequency")
  frequency: option<recurringChargeFrequency>,
  @ocaml.doc("<p>The amount of the recurring charge.</p>") @as("Amount") amount: option<double>,
}
type reasonCodesList = array<reportInstanceReasonCodes>
@ocaml.doc("<p>Describes a request to purchase Scheduled Instances.</p>")
type purchaseRequest = {
  @ocaml.doc("<p>The purchase token.</p>") @as("PurchaseToken") purchaseToken: string_,
  @ocaml.doc("<p>The number of instances.</p>") @as("InstanceCount") instanceCount: integer_,
}
@ocaml.doc("<p>Describes an address range of an IPv4 address pool.</p>")
type publicIpv4PoolRange = {
  @ocaml.doc("<p>The number of available addresses in the range.</p>") @as("AvailableAddressCount")
  availableAddressCount: option<integer_>,
  @ocaml.doc("<p>The number of addresses in the range.</p>") @as("AddressCount")
  addressCount: option<integer_>,
  @ocaml.doc("<p>The last IP address in the range.</p>") @as("LastAddress")
  lastAddress: option<string_>,
  @ocaml.doc("<p>The first IP address in the range.</p>") @as("FirstAddress")
  firstAddress: option<string_>,
}
type publicIpv4PoolIdStringList = array<ipv4PoolEc2Id>
type publicIpStringList = array<string_>
@ocaml.doc("<p>The status of an updated pointer (PTR) record for an Elastic IP address.</p>")
type ptrUpdateStatus = {
  @ocaml.doc("<p>The reason for the PTR record update.</p>") @as("Reason") reason: option<string_>,
  @ocaml.doc("<p>The status of the PTR record update.</p>") @as("Status") status: option<string_>,
  @ocaml.doc("<p>The value for the PTR record update.</p>") @as("Value") value: option<string_>,
}
@ocaml.doc(
  "<p>Reserved. If you need to sustain traffic greater than the <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html\">documented limits</a>, contact us through the <a href=\"https://console.aws.amazon.com/support/home?\">Support Center</a>.</p>"
)
type provisionedBandwidth = {
  @ocaml.doc(
    "<p>Reserved. If you need to sustain traffic greater than the <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html\">documented limits</a>, contact us through the <a href=\"https://console.aws.amazon.com/support/home?\">Support Center</a>.</p>"
  )
  @as("Status")
  status: option<string_>,
  @ocaml.doc(
    "<p>Reserved. If you need to sustain traffic greater than the <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html\">documented limits</a>, contact us through the <a href=\"https://console.aws.amazon.com/support/home?\">Support Center</a>.</p>"
  )
  @as("Requested")
  requested: option<string_>,
  @ocaml.doc(
    "<p>Reserved. If you need to sustain traffic greater than the <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html\">documented limits</a>, contact us through the <a href=\"https://console.aws.amazon.com/support/home?\">Support Center</a>.</p>"
  )
  @as("RequestTime")
  requestTime: option<dateTime>,
  @ocaml.doc(
    "<p>Reserved. If you need to sustain traffic greater than the <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html\">documented limits</a>, contact us through the <a href=\"https://console.aws.amazon.com/support/home?\">Support Center</a>.</p>"
  )
  @as("Provisioned")
  provisioned: option<string_>,
  @ocaml.doc(
    "<p>Reserved. If you need to sustain traffic greater than the <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html\">documented limits</a>, contact us through the <a href=\"https://console.aws.amazon.com/support/home?\">Support Center</a>.</p>"
  )
  @as("ProvisionTime")
  provisionTime: option<dateTime>,
}
type protocolList = array<protocol>
@ocaml.doc("<p>Describes a virtual private gateway propagating route.</p>")
type propagatingVgw = {
  @ocaml.doc("<p>The ID of the virtual private gateway.</p>") @as("GatewayId")
  gatewayId: option<string_>,
}
type productDescriptionList = array<string_>
type productCodeStringList = array<string_>
@ocaml.doc("<p>Describes a product code.</p>")
type productCode = {
  @ocaml.doc("<p>The type of product code.</p>") @as("ProductCodeType")
  productCodeType: option<productCodeValues>,
  @ocaml.doc("<p>The product code.</p>") @as("ProductCodeId") productCodeId: option<string_>,
}
type privateIpAddressStringList = array<string_>
@ocaml.doc("<p>Describes a secondary private IPv4 address for a network interface.</p>")
type privateIpAddressSpecification = {
  @ocaml.doc("<p>The private IPv4 addresses.</p>") @as("PrivateIpAddress")
  privateIpAddress: option<string_>,
  @ocaml.doc("<p>Indicates whether the private IPv4 address is the primary private IPv4 address. Only
            one IPv4 address can be designated as primary.</p>")
  @as("Primary")
  primary: option<boolean_>,
}
@ocaml.doc("<p>Describes the options for instance hostnames.</p>")
type privateDnsNameOptionsResponse = {
  @ocaml.doc("<p>Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA
            records.</p>")
  @as("EnableResourceNameDnsAAAARecord")
  enableResourceNameDnsAAAARecord: option<boolean_>,
  @ocaml.doc("<p>Indicates whether to respond to DNS queries for instance hostnames with DNS A
            records.</p>")
  @as("EnableResourceNameDnsARecord")
  enableResourceNameDnsARecord: option<boolean_>,
  @ocaml.doc("<p>The type of hostname to assign to an instance.</p>") @as("HostnameType")
  hostnameType: option<hostnameType>,
}
@ocaml.doc("<p>Describes the options for instance hostnames.</p>")
type privateDnsNameOptionsRequest = {
  @ocaml.doc("<p>Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA
            records.</p>")
  @as("EnableResourceNameDnsAAAARecord")
  enableResourceNameDnsAAAARecord: option<boolean_>,
  @ocaml.doc("<p>Indicates whether to respond to DNS queries for instance hostnames with DNS A
            records.</p>")
  @as("EnableResourceNameDnsARecord")
  enableResourceNameDnsARecord: option<boolean_>,
  @ocaml.doc("<p>The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name
            must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name
            must be based on the instance ID. For dual-stack subnets, you can specify whether DNS
            names use the instance IPv4 address or the instance ID.</p>")
  @as("HostnameType")
  hostnameType: option<hostnameType>,
}
@ocaml.doc("<p>Describes the options for instance hostnames.</p>")
type privateDnsNameOptionsOnLaunch = {
  @ocaml.doc("<p>Indicates whether to respond to DNS queries for instance hostname with DNS AAAA
            records.</p>")
  @as("EnableResourceNameDnsAAAARecord")
  enableResourceNameDnsAAAARecord: option<boolean_>,
  @ocaml.doc("<p>Indicates whether to respond to DNS queries for instance hostnames with DNS A
            records.</p>")
  @as("EnableResourceNameDnsARecord")
  enableResourceNameDnsARecord: option<boolean_>,
  @ocaml.doc("<p>The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name
            must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name
            must be based on the instance ID. For dual-stack subnets, you can specify whether DNS
            names use the instance IPv4 address or the instance ID.</p>")
  @as("HostnameType")
  hostnameType: option<hostnameType>,
}
@ocaml.doc("<p>Information about the private DNS name for the service endpoint. For more information
            about these parameters, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/ndpoint-services-dns-validation.html\">VPC Endpoint Service
                Private DNS Name Verification</a> in the
            <i>Amazon Virtual Private Cloud User Guide</i>.</p>")
type privateDnsNameConfiguration = {
  @ocaml.doc(
    "<p>The name of the record subdomain the service provider needs to create. The service provider adds the <code>value</code> text to the <code>name</code>.</p>"
  )
  @as("Name")
  name: option<string_>,
  @ocaml.doc(
    "<p>The value the service provider adds to the private DNS name domain record before verification.</p>"
  )
  @as("Value")
  value: option<string_>,
  @ocaml.doc("<p>The endpoint service verification type, for example TXT.</p>") @as("Type")
  type_: option<string_>,
  @ocaml.doc("<p>The verification state of the VPC endpoint service.</p>
        <p>>Consumers
            of the endpoint service can use the private name only when the state is
                <code>verified</code>.</p>")
  @as("State")
  state: option<dnsNameState>,
}
@ocaml.doc("<p>Information about the Private DNS name for interface endpoints.</p>")
type privateDnsDetails = {
  @ocaml.doc("<p>The private DNS name assigned to the VPC endpoint service.</p>")
  @as("PrivateDnsName")
  privateDnsName: option<string_>,
}
@ocaml.doc("<p>Describes a Reserved Instance offering.</p>")
type pricingDetail = {
  @ocaml.doc("<p>The price per instance.</p>") @as("Price") price: option<double>,
  @ocaml.doc("<p>The number of reservations available for the price.</p>") @as("Count")
  count: option<integer_>,
}
@ocaml.doc("<p>Describes the price for a Reserved Instance.</p>")
type priceScheduleSpecification = {
  @ocaml.doc(
    "<p>The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.</p>"
  )
  @as("Term")
  term: option<long>,
  @ocaml.doc("<p>The fixed price for the term.</p>") @as("Price") price: option<double>,
  @ocaml.doc("<p>The currency for transacting the Reserved Instance resale.
				At this time, the only supported currency is <code>USD</code>.</p>")
  @as("CurrencyCode")
  currencyCode: option<currencyCodeValues>,
}
@ocaml.doc("<p>Describes the price for a Reserved Instance.</p>")
type priceSchedule = {
  @ocaml.doc(
    "<p>The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.</p>"
  )
  @as("Term")
  term: option<long>,
  @ocaml.doc("<p>The fixed price for the term.</p>") @as("Price") price: option<double>,
  @ocaml.doc("<p>The currency for transacting the Reserved Instance resale.
				At this time, the only supported currency is <code>USD</code>.</p>")
  @as("CurrencyCode")
  currencyCode: option<currencyCodeValues>,
  @ocaml.doc("<p>The current price schedule, as determined by the term remaining for the Reserved Instance in the listing.</p>
         <p>A specific price schedule is always in effect, but only one price schedule can be active at any time. Take, for example, a Reserved Instance listing that has five months remaining in its term. When you specify price schedules for five months and two months, this means that schedule 1, covering the first three months of the remaining term, will be active during months 5, 4, and 3. Then schedule 2, covering the last two months of the term, will be active for months 2 and 1.</p>")
  @as("Active")
  active: option<boolean_>,
}
type prefixListResourceIdStringList = array<prefixListResourceId>
type prefixListIdSet = array<string_>
@ocaml.doc("<p>Describes a prefix list ID.</p>")
type prefixListId = {
  @ocaml.doc("<p>The ID of the prefix.</p>") @as("PrefixListId") prefixListId: option<string_>,
  @ocaml.doc("<p>A description for the security group rule that references this prefix list ID.</p>
         <p>Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9,
      spaces, and ._-:/()#,@[]+=;{}!$*</p>")
  @as("Description")
  description: option<string_>,
}
@ocaml.doc("<p>Describes a prefix list entry.</p>")
type prefixListEntry = {
  @ocaml.doc("<p>The description.</p>") @as("Description") description: option<string_>,
  @ocaml.doc("<p>The CIDR block.</p>") @as("Cidr") cidr: option<string_>,
}
@ocaml.doc("<p>Describes the resource with which a prefix list is associated.</p>")
type prefixListAssociation = {
  @ocaml.doc("<p>The owner of the resource.</p>") @as("ResourceOwner")
  resourceOwner: option<string_>,
  @ocaml.doc("<p>The ID of the resource.</p>") @as("ResourceId") resourceId: option<string_>,
}
@ocaml.doc("<p>Describes a range of ports.</p>")
type portRange = {
  @ocaml.doc("<p>The last port in the range.</p>") @as("To") to: option<integer_>,
  @ocaml.doc("<p>The first port in the range.</p>") @as("From") from: option<integer_>,
}
@ocaml.doc("<p>Describes a CIDR block for an address pool.</p>")
type poolCidrBlock = {@ocaml.doc("<p>The CIDR block.</p>") @as("Cidr") cidr: option<string_>}
@ocaml.doc("<p>Describes the placement of an instance.</p>")
type placementResponse = {
  @ocaml.doc("<p>The name of the placement group that the instance is in.</p>") @as("GroupName")
  groupName: option<placementGroupName>,
}
type placementGroupStringList = array<placementGroupName>
type placementGroupStrategyList = array<placementGroupStrategy>
type placementGroupIdStringList = array<placementGroupId>
@ocaml.doc("<p>Describes the placement of an instance.</p>")
type placement = {
  @ocaml.doc("<p>The ARN of the host resource group in which to launch the instances. If you specify a
            host resource group ARN, omit the <b>Tenancy</b> parameter or
            set it to <code>host</code>.</p>
        <p>This parameter is not supported by <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet\">CreateFleet</a>.</p>")
  @as("HostResourceGroupArn")
  hostResourceGroupArn: option<string_>,
  @ocaml.doc("<p>Reserved for future use.</p>
        <p>This parameter is not supported by <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet\">CreateFleet</a>.</p>")
  @as("SpreadDomain")
  spreadDomain: option<string_>,
  @ocaml.doc("<p>The tenancy of the instance (if the instance is running in a VPC). An instance with a
            tenancy of <code>dedicated</code> runs on single-tenant hardware. The <code>host</code>
            tenancy is not supported for the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html\">ImportInstance</a>
            command.</p>
        <p>This parameter is not supported by <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet\">CreateFleet</a>.</p>

        <p>T3 instances that use the <code>unlimited</code> CPU credit option do not support
                <code>host</code> tenancy.</p>")
  @as("Tenancy")
  tenancy: option<tenancy>,
  @ocaml.doc("<p>The ID of the Dedicated Host on which the instance resides. This parameter is not
            supported for the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html\">ImportInstance</a>
            command.</p>
        <p>This parameter is not supported by <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet\">CreateFleet</a>.</p>")
  @as("HostId")
  hostId: option<string_>,
  @ocaml.doc("<p>The number of the partition that the instance is in. Valid only if the placement group
            strategy is set to <code>partition</code>.</p>
        <p>This parameter is not supported by <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet\">CreateFleet</a>.</p>")
  @as("PartitionNumber")
  partitionNumber: option<integer_>,
  @ocaml.doc("<p>The name of the placement group the instance is in.</p>") @as("GroupName")
  groupName: option<placementGroupName>,
  @ocaml.doc("<p>The affinity setting for the instance on the Dedicated Host. This parameter is not
            supported for the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html\">ImportInstance</a>
            command.</p>
        <p>This parameter is not supported by <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet\">CreateFleet</a>.</p>")
  @as("Affinity")
  affinity: option<string_>,
  @ocaml.doc("<p>The Availability Zone of the instance.</p>
        <p>If not specified, an Availability Zone will be automatically chosen for you based on
            the load balancing criteria for the Region.</p>
        <p>This parameter is not supported by <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet\">CreateFleet</a>.</p>")
  @as("AvailabilityZone")
  availabilityZone: option<string_>,
}
@ocaml.doc("<p>Specifies the integrity algorithm for the VPN tunnel for phase 2 IKE
            negotiations.</p>")
type phase2IntegrityAlgorithmsRequestListValue = {
  @ocaml.doc("<p>The integrity algorithm.</p>") @as("Value") value: option<string_>,
}
@ocaml.doc("<p>The integrity algorithm for phase 2 IKE negotiations.</p>")
type phase2IntegrityAlgorithmsListValue = {
  @ocaml.doc("<p>The integrity algorithm.</p>") @as("Value") value: option<string_>,
}
@ocaml.doc("<p>Specifies the encryption algorithm for the VPN tunnel for phase 2 IKE
            negotiations.</p>")
type phase2EncryptionAlgorithmsRequestListValue = {
  @ocaml.doc("<p>The encryption algorithm.</p>") @as("Value") value: option<string_>,
}
@ocaml.doc("<p>The encryption algorithm for phase 2 IKE negotiations.</p>")
type phase2EncryptionAlgorithmsListValue = {
  @ocaml.doc("<p>The encryption algorithm.</p>") @as("Value") value: option<string_>,
}
@ocaml.doc("<p>Specifies a Diffie-Hellman group number for the VPN tunnel for phase 2 IKE
            negotiations.</p>")
type phase2DHGroupNumbersRequestListValue = {
  @ocaml.doc("<p>The Diffie-Hellmann group number.</p>") @as("Value") value: option<integer_>,
}
@ocaml.doc("<p>The Diffie-Hellmann group number for phase 2 IKE negotiations.</p>")
type phase2DHGroupNumbersListValue = {
  @ocaml.doc("<p>The Diffie-Hellmann group number.</p>") @as("Value") value: option<integer_>,
}
@ocaml.doc("<p>Specifies the integrity algorithm for the VPN tunnel for phase 1 IKE
            negotiations.</p>")
type phase1IntegrityAlgorithmsRequestListValue = {
  @ocaml.doc("<p>The value for the integrity algorithm.</p>") @as("Value") value: option<string_>,
}
@ocaml.doc("<p>The integrity algorithm for phase 1 IKE negotiations.</p>")
type phase1IntegrityAlgorithmsListValue = {
  @ocaml.doc("<p>The value for the integrity algorithm.</p>") @as("Value") value: option<string_>,
}
@ocaml.doc("<p>Specifies the encryption algorithm for the VPN tunnel for phase 1 IKE
            negotiations.</p>")
type phase1EncryptionAlgorithmsRequestListValue = {
  @ocaml.doc("<p>The value for the encryption algorithm.</p>") @as("Value") value: option<string_>,
}
@ocaml.doc("<p>The encryption algorithm for phase 1 IKE negotiations.</p>")
type phase1EncryptionAlgorithmsListValue = {
  @ocaml.doc("<p>The value for the encryption algorithm.</p>") @as("Value") value: option<string_>,
}
@ocaml.doc("<p>Specifies a Diffie-Hellman group number for the VPN tunnel for phase 1 IKE
            negotiations.</p>")
type phase1DHGroupNumbersRequestListValue = {
  @ocaml.doc("<p>The Diffie-Hellmann group number.</p>") @as("Value") value: option<integer_>,
}
@ocaml.doc("<p>The Diffie-Hellmann group number for phase 1 IKE negotiations.</p>")
type phase1DHGroupNumbersListValue = {
  @ocaml.doc("<p>The Diffie-Hellmann group number.</p>") @as("Value") value: option<integer_>,
}
@ocaml.doc("<p>Information about the transit gateway in the peering attachment.</p>")
type peeringTgwInfo = {
  @ocaml.doc("<p>The Region of the transit gateway.</p>") @as("Region") region: option<string_>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the transit gateway.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The ID of the transit gateway.</p>") @as("TransitGatewayId")
  transitGatewayId: option<string_>,
}
@ocaml.doc("<p>The VPC peering connection options.</p>")
type peeringConnectionOptionsRequest = {
  @ocaml.doc("<p>If true, enables outbound communication from instances in a local VPC to an
            EC2-Classic instance that's linked to a peer VPC using ClassicLink.</p>")
  @as("AllowEgressFromLocalVpcToRemoteClassicLink")
  allowEgressFromLocalVpcToRemoteClassicLink: option<boolean_>,
  @ocaml.doc("<p>If true, enables outbound communication from an EC2-Classic instance that's linked to
            a local VPC using ClassicLink to instances in a peer VPC.</p>")
  @as("AllowEgressFromLocalClassicLinkToRemoteVpc")
  allowEgressFromLocalClassicLinkToRemoteVpc: option<boolean_>,
  @ocaml.doc(
    "<p>If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.</p>"
  )
  @as("AllowDnsResolutionFromRemoteVpc")
  allowDnsResolutionFromRemoteVpc: option<boolean_>,
}
@ocaml.doc("<p>Describes the VPC peering connection options.</p>")
type peeringConnectionOptions = {
  @ocaml.doc("<p>If true, enables outbound communication from instances in a local VPC to an
            EC2-Classic instance that's linked to a peer VPC using ClassicLink.</p>")
  @as("AllowEgressFromLocalVpcToRemoteClassicLink")
  allowEgressFromLocalVpcToRemoteClassicLink: option<boolean_>,
  @ocaml.doc("<p>If true, enables outbound communication from an EC2-Classic instance that's linked to
            a local VPC using ClassicLink to instances in a peer VPC.</p>")
  @as("AllowEgressFromLocalClassicLinkToRemoteVpc")
  allowEgressFromLocalClassicLinkToRemoteVpc: option<boolean_>,
  @ocaml.doc("<p>If true, the public DNS hostnames of instances in the specified VPC resolve to private
            IP addresses when queried from instances in the peer VPC.</p>")
  @as("AllowDnsResolutionFromRemoteVpc")
  allowDnsResolutionFromRemoteVpc: option<boolean_>,
}
@ocaml.doc("<p>The status of the transit gateway peering attachment.</p>")
type peeringAttachmentStatus = {
  @ocaml.doc("<p>The status message, if applicable.</p>") @as("Message") message: option<string_>,
  @ocaml.doc("<p>The status code.</p>") @as("Code") code: option<string_>,
}
@ocaml.doc("<p>Describes the data that identifies an Amazon FPGA image (AFI) on the PCI bus.</p>")
type pciId = {
  @ocaml.doc("<p>The ID of the vendor for the subsystem.</p>") @as("SubsystemVendorId")
  subsystemVendorId: option<string_>,
  @ocaml.doc("<p>The ID of the subsystem.</p>") @as("SubsystemId") subsystemId: option<string_>,
  @ocaml.doc("<p>The ID of the vendor.</p>") @as("VendorId") vendorId: option<string_>,
  @ocaml.doc("<p>The ID of the device.</p>") @as("DeviceId") deviceId: option<string_>,
}
type ownerStringList = array<string_>
type organizationalUnitArnStringList = array<string_>
type organizationArnStringList = array<string_>
type occurrenceDaySet = array<integer_>
type occurrenceDayRequestSet = array<integer_>
@ocaml.doc("<p>Describes the state of a network interface permission.</p>")
type networkInterfacePermissionState = {
  @ocaml.doc("<p>A status message, if applicable.</p>") @as("StatusMessage")
  statusMessage: option<string_>,
  @ocaml.doc("<p>The state of the permission.</p>") @as("State")
  state: option<networkInterfacePermissionStateCode>,
}
type networkInterfacePermissionIdList = array<networkInterfacePermissionId>
@ocaml.doc("<p>Describes an IPv6 address associated with a network interface.</p>")
type networkInterfaceIpv6Address = {
  @ocaml.doc("<p>The IPv6 address.</p>") @as("Ipv6Address") ipv6Address: option<string_>,
}
type networkInterfaceIdList = array<networkInterfaceId>
@ocaml.doc("<p>The minimum and maximum number of network interfaces.</p>")
type networkInterfaceCountRequest = {
  @ocaml.doc("<p>The maximum number of network interfaces. To specify no maximum limit, omit this
         parameter.</p>")
  @as("Max")
  max: option<integer_>,
  @ocaml.doc("<p>The minimum number of network interfaces. To specify no minimum limit, omit this
         parameter.</p>")
  @as("Min")
  min: option<integer_>,
}
@ocaml.doc("<p>The minimum and maximum number of network interfaces.</p>")
type networkInterfaceCount = {
  @ocaml.doc("<p>The maximum number of network interfaces. If this parameter is not specified, there is no
         maximum limit.</p>")
  @as("Max")
  max: option<integer_>,
  @ocaml.doc("<p>The minimum number of network interfaces. If this parameter is not specified, there is no
         minimum limit.</p>")
  @as("Min")
  min: option<integer_>,
}
@ocaml.doc("<p>Describes an attachment change.</p>")
type networkInterfaceAttachmentChanges = {
  @ocaml.doc(
    "<p>Indicates whether the network interface is deleted when the instance is terminated.</p>"
  )
  @as("DeleteOnTermination")
  deleteOnTermination: option<boolean_>,
  @ocaml.doc("<p>The ID of the network interface attachment.</p>") @as("AttachmentId")
  attachmentId: option<networkInterfaceAttachmentId>,
}
@ocaml.doc("<p>Describes a network interface attachment.</p>")
type networkInterfaceAttachment = {
  @ocaml.doc("<p>The attachment state.</p>") @as("Status") status: option<attachmentStatus>,
  @ocaml.doc("<p>The Amazon Web Services account ID of the owner of the instance.</p>")
  @as("InstanceOwnerId")
  instanceOwnerId: option<string_>,
  @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<string_>,
  @ocaml.doc("<p>The index of the network card.</p>") @as("NetworkCardIndex")
  networkCardIndex: option<integer_>,
  @ocaml.doc("<p>The device index of the network interface attachment on the instance.</p>")
  @as("DeviceIndex")
  deviceIndex: option<integer_>,
  @ocaml.doc(
    "<p>Indicates whether the network interface is deleted when the instance is terminated.</p>"
  )
  @as("DeleteOnTermination")
  deleteOnTermination: option<boolean_>,
  @ocaml.doc("<p>The ID of the network interface attachment.</p>") @as("AttachmentId")
  attachmentId: option<string_>,
  @ocaml.doc("<p>The timestamp indicating when the attachment initiated.</p>") @as("AttachTime")
  attachTime: option<dateTime>,
}
@ocaml.doc("<p>Describes association information for an Elastic IP address (IPv4 only), or a Carrier
            IP address (for a network interface which resides in a subnet in a Wavelength
            Zone).</p>")
type networkInterfaceAssociation = {
  @ocaml.doc("<p>The carrier IP address associated with the network interface.</p>
        <p>This option is only available when the network interface is in a subnet which is associated with a Wavelength Zone.</p>")
  @as("CarrierIp")
  carrierIp: option<string_>,
  @ocaml.doc("<p>The customer-owned IP address associated with the network interface.</p>")
  @as("CustomerOwnedIp")
  customerOwnedIp: option<string_>,
  @ocaml.doc("<p>The address of the Elastic IP address bound to the network
            interface.</p>")
  @as("PublicIp")
  publicIp: option<string_>,
  @ocaml.doc("<p>The public DNS name.</p>") @as("PublicDnsName") publicDnsName: option<string_>,
  @ocaml.doc("<p>The ID of the Elastic IP address owner.</p>") @as("IpOwnerId")
  ipOwnerId: option<string_>,
  @ocaml.doc("<p>The association ID.</p>") @as("AssociationId") associationId: option<string_>,
  @ocaml.doc("<p>The allocation ID.</p>") @as("AllocationId") allocationId: option<string_>,
}
type networkInsightsPathIdList = array<networkInsightsPathId>
type networkInsightsAnalysisIdList = array<networkInsightsAnalysisId>
type networkInsightsAccessScopeIdList = array<networkInsightsAccessScopeId>
type networkInsightsAccessScopeAnalysisIdList = array<networkInsightsAccessScopeAnalysisId>
@ocaml.doc("<p>Describes the network card support of the instance type.</p>")
type networkCardInfo = {
  @ocaml.doc("<p>The maximum number of network interfaces for the network card.</p>")
  @as("MaximumNetworkInterfaces")
  maximumNetworkInterfaces: option<maxNetworkInterfaces>,
  @ocaml.doc("<p>The network performance of the network card.</p>") @as("NetworkPerformance")
  networkPerformance: option<networkPerformance>,
  @ocaml.doc("<p>The index of the network card.</p>") @as("NetworkCardIndex")
  networkCardIndex: option<networkCardIndex>,
}
type networkAclIdStringList = array<networkAclId>
@ocaml.doc("<p>Describes an association between a network ACL and a subnet.</p>")
type networkAclAssociation = {
  @ocaml.doc("<p>The ID of the subnet.</p>") @as("SubnetId") subnetId: option<string_>,
  @ocaml.doc("<p>The ID of the network ACL.</p>") @as("NetworkAclId") networkAclId: option<string_>,
  @ocaml.doc("<p>The ID of the association between a network ACL and a subnet.</p>")
  @as("NetworkAclAssociationId")
  networkAclAssociationId: option<string_>,
}
type natGatewayIdStringList = array<natGatewayId>
@ocaml.doc("<p>Describes the IP addresses and network interface associated with a NAT gateway.</p>")
type natGatewayAddress = {
  @ocaml.doc(
    "<p>[Public NAT gateway only] The Elastic IP address associated with the NAT gateway.</p>"
  )
  @as("PublicIp")
  publicIp: option<string_>,
  @ocaml.doc("<p>The private IP address associated with the NAT gateway.</p>") @as("PrivateIp")
  privateIp: option<string_>,
  @ocaml.doc("<p>The ID of the network interface associated with the NAT gateway.</p>")
  @as("NetworkInterfaceId")
  networkInterfaceId: option<string_>,
  @ocaml.doc(
    "<p>[Public NAT gateway only] The allocation ID of the Elastic IP address that's associated with the NAT gateway.</p>"
  )
  @as("AllocationId")
  allocationId: option<string_>,
}
@ocaml.doc("<p>Describes the status of a moving Elastic IP address.</p>")
type movingAddressStatus = {
  @ocaml.doc("<p>The Elastic IP address.</p>") @as("PublicIp") publicIp: option<string_>,
  @ocaml.doc(
    "<p>The status of the Elastic IP address that's being moved to the EC2-VPC platform, or restored to the EC2-Classic platform.</p>"
  )
  @as("MoveStatus")
  moveStatus: option<moveStatus>,
}
@ocaml.doc("<p>Describes the monitoring of an instance.</p>")
type monitoring = {
  @ocaml.doc("<p>Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is
            enabled.</p>")
  @as("State")
  state: option<monitoringState>,
}
@ocaml.doc("<p>Describes the options for a VPC attachment.</p>")
type modifyTransitGatewayVpcAttachmentRequestOptions = {
  @ocaml.doc(
    "<p>Enable or disable support for appliance mode. If enabled, a traffic flow between a source and destination uses the same Availability Zone for the VPC attachment for the lifetime of that flow. The default is <code>disable</code>.</p>"
  )
  @as("ApplianceModeSupport")
  applianceModeSupport: option<applianceModeSupportValue>,
  @ocaml.doc("<p>Enable or disable IPv6 support. The default is <code>enable</code>.</p>")
  @as("Ipv6Support")
  ipv6Support: option<ipv6SupportValue>,
  @ocaml.doc("<p>Enable or disable DNS support. The default is <code>enable</code>.</p>")
  @as("DnsSupport")
  dnsSupport: option<dnsSupportValue>,
}
@ocaml.doc("<p>The minimum and maximum amount of memory, in MiB.</p>")
type memoryMiBRequest = {
  @ocaml.doc("<p>The maximum amount of memory, in MiB. To specify no maximum limit, omit this
         parameter.</p>")
  @as("Max")
  max: option<integer_>,
  @ocaml.doc("<p>The minimum amount of memory, in MiB. To specify no minimum limit, specify
         <code>0</code>.</p>")
  @as("Min")
  min: integer_,
}
@ocaml.doc("<p>The minimum and maximum amount of memory, in MiB.</p>")
type memoryMiB = {
  @ocaml.doc("<p>The maximum amount of memory, in MiB. If this parameter is not specified, there is no
         maximum limit.</p>")
  @as("Max")
  max: option<integer_>,
  @ocaml.doc("<p>The minimum amount of memory, in MiB. If this parameter is not specified, there is no minimum
         limit.</p>")
  @as("Min")
  min: option<integer_>,
}
@ocaml.doc("<p>Describes the memory for the instance type.</p>")
type memoryInfo = {
  @ocaml.doc("<p>The size of the memory, in MiB.</p>") @as("SizeInMiB")
  sizeInMiB: option<memorySize>,
}
@ocaml.doc("<p>The minimum and maximum amount of memory per vCPU, in GiB.</p>")
type memoryGiBPerVCpuRequest = {
  @ocaml.doc("<p>The maximum amount of memory per vCPU, in GiB. To specify no maximum limit, omit this
         parameter.</p>")
  @as("Max")
  max: option<double>,
  @ocaml.doc("<p>The minimum amount of memory per vCPU, in GiB. To specify no minimum limit, omit this
         parameter.</p>")
  @as("Min")
  min: option<double>,
}
@ocaml.doc("<p>The minimum and maximum amount of memory per vCPU, in GiB.</p>
         <p></p>")
type memoryGiBPerVCpu = {
  @ocaml.doc("<p>The maximum amount of memory per vCPU, in GiB. If this parameter is not specified, there is
         no maximum limit.</p>")
  @as("Max")
  max: option<double>,
  @ocaml.doc("<p>The minimum amount of memory per vCPU, in GiB. If this parameter is not specified, there is
         no minimum limit.</p>")
  @as("Min")
  min: option<double>,
}
type localStorageTypeSet = array<localStorageType>
type localGatewayVirtualInterfaceIdSet = array<localGatewayVirtualInterfaceId>
type localGatewayVirtualInterfaceGroupIdSet = array<localGatewayVirtualInterfaceGroupId>
type localGatewayRouteTableVpcAssociationIdSet = array<localGatewayRouteTableVpcAssociationId>
type localGatewayRouteTableVirtualInterfaceGroupAssociationIdSet = array<
  localGatewayRouteTableVirtualInterfaceGroupAssociationId,
>
type localGatewayRouteTableIdSet = array<localGatewayRoutetableId>
@ocaml.doc("<p>Describes a route for a local gateway route table.</p>")
type localGatewayRoute = {
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the local gateway route.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the local gateway route table.</p>")
  @as("LocalGatewayRouteTableArn")
  localGatewayRouteTableArn: option<resourceArn>,
  @ocaml.doc("<p>The ID of the local gateway route table.</p>") @as("LocalGatewayRouteTableId")
  localGatewayRouteTableId: option<localGatewayRoutetableId>,
  @ocaml.doc("<p>The state of the route.</p>") @as("State") state: option<localGatewayRouteState>,
  @ocaml.doc("<p>The route type.</p>") @as("Type") type_: option<localGatewayRouteType>,
  @ocaml.doc("<p>The ID of the virtual interface group.</p>")
  @as("LocalGatewayVirtualInterfaceGroupId")
  localGatewayVirtualInterfaceGroupId: option<localGatewayVirtualInterfaceGroupId>,
  @ocaml.doc("<p>The CIDR block used for destination matches.</p>") @as("DestinationCidrBlock")
  destinationCidrBlock: option<string_>,
}
type localGatewayIdSet = array<localGatewayId>
@ocaml.doc("<p>Describes a load permission.</p>")
type loadPermissionRequest = {
  @ocaml.doc("<p>The Amazon Web Services account ID.</p>") @as("UserId") userId: option<string_>,
  @ocaml.doc("<p>The name of the group.</p>") @as("Group") group: option<permissionGroup>,
}
@ocaml.doc("<p>Describes a load permission.</p>")
type loadPermission = {
  @ocaml.doc("<p>The name of the group.</p>") @as("Group") group: option<permissionGroup>,
  @ocaml.doc("<p>The Amazon Web Services account ID.</p>") @as("UserId") userId: option<string_>,
}
@ocaml.doc("<p>Describes a license configuration.</p>")
type licenseConfigurationRequest = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the license configuration.</p>")
  @as("LicenseConfigurationArn")
  licenseConfigurationArn: option<string_>,
}
@ocaml.doc("<p>Describes a license configuration.</p>")
type licenseConfiguration = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the license configuration.</p>")
  @as("LicenseConfigurationArn")
  licenseConfigurationArn: option<string_>,
}
@ocaml.doc("<p>Describes the monitoring for the instance.</p>")
type launchTemplatesMonitoringRequest = {
  @ocaml.doc("<p>Specify <code>true</code> to enable detailed monitoring. Otherwise, basic monitoring
            is enabled.</p>")
  @as("Enabled")
  enabled: option<boolean_>,
}
@ocaml.doc("<p>Describes the monitoring for the instance.</p>")
type launchTemplatesMonitoring = {
  @ocaml.doc("<p>Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is
            enabled.</p>")
  @as("Enabled")
  enabled: option<boolean_>,
}
@ocaml.doc("<p>The options for Spot Instances.</p>")
type launchTemplateSpotMarketOptionsRequest = {
  @ocaml.doc("<p>The behavior when a Spot Instance is interrupted. The default is
                <code>terminate</code>.</p>")
  @as("InstanceInterruptionBehavior")
  instanceInterruptionBehavior: option<instanceInterruptionBehavior>,
  @ocaml.doc("<p>The end date of the request. For a one-time request, the request remains active until
            all instances launch, the request is canceled, or this date is reached. If the request
            is persistent, it remains active until it is canceled or this date and time is reached.
            The default end date is 7 days from the current date.</p>")
  @as("ValidUntil")
  validUntil: option<dateTime>,
  @ocaml.doc("<p>The required duration for the Spot Instances (also known as Spot blocks), in minutes.
            This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).</p>")
  @as("BlockDurationMinutes")
  blockDurationMinutes: option<integer_>,
  @ocaml.doc("<p>The Spot Instance request type.</p>") @as("SpotInstanceType")
  spotInstanceType: option<spotInstanceType>,
  @ocaml.doc("<p>The maximum hourly price you're willing to pay for the Spot Instances.</p>")
  @as("MaxPrice")
  maxPrice: option<string_>,
}
@ocaml.doc("<p>The options for Spot Instances.</p>")
type launchTemplateSpotMarketOptions = {
  @ocaml.doc("<p>The behavior when a Spot Instance is interrupted.</p>")
  @as("InstanceInterruptionBehavior")
  instanceInterruptionBehavior: option<instanceInterruptionBehavior>,
  @ocaml.doc("<p>The end date of the request. For a one-time request, the request remains active until
            all instances launch, the request is canceled, or this date is reached. If the request
            is persistent, it remains active until it is canceled or this date and time is
            reached.</p>")
  @as("ValidUntil")
  validUntil: option<dateTime>,
  @ocaml.doc("<p>The required duration for the Spot Instances (also known as Spot blocks), in minutes.
            This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).</p>")
  @as("BlockDurationMinutes")
  blockDurationMinutes: option<integer_>,
  @ocaml.doc("<p>The Spot Instance request type.</p>") @as("SpotInstanceType")
  spotInstanceType: option<spotInstanceType>,
  @ocaml.doc("<p>The maximum hourly price you're willing to pay for the Spot Instances.</p>")
  @as("MaxPrice")
  maxPrice: option<string_>,
}
@ocaml.doc("<p>The launch template to use. You must specify either the launch template ID or launch
            template name in the request, but not both.</p>")
type launchTemplateSpecification = {
  @ocaml.doc("<p>The version number of the launch template.</p>
        <p>Default: The default version for the launch template.</p>")
  @as("Version")
  version: option<string_>,
  @ocaml.doc("<p>The name of the launch template.</p>") @as("LaunchTemplateName")
  launchTemplateName: option<string_>,
  @ocaml.doc("<p>The ID of the launch template.</p>") @as("LaunchTemplateId")
  launchTemplateId: option<launchTemplateId>,
}
@ocaml.doc("<p>Describes the options for instance hostnames.</p>")
type launchTemplatePrivateDnsNameOptionsRequest = {
  @ocaml.doc("<p>Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA
            records.</p>")
  @as("EnableResourceNameDnsAAAARecord")
  enableResourceNameDnsAAAARecord: option<boolean_>,
  @ocaml.doc("<p>Indicates whether to respond to DNS queries for instance hostnames with DNS A
            records.</p>")
  @as("EnableResourceNameDnsARecord")
  enableResourceNameDnsARecord: option<boolean_>,
  @ocaml.doc("<p>The type of hostname for Amazon EC2 instances. For IPv4 only subnets, an instance DNS name
            must be based on the instance IPv4 address. For IPv6 native subnets, an instance DNS
            name must be based on the instance ID. For dual-stack subnets, you can specify whether
            DNS names use the instance IPv4 address or the instance ID.</p>")
  @as("HostnameType")
  hostnameType: option<hostnameType>,
}
@ocaml.doc("<p>Describes the options for instance hostnames.</p>")
type launchTemplatePrivateDnsNameOptions = {
  @ocaml.doc("<p>Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA
            records.</p>")
  @as("EnableResourceNameDnsAAAARecord")
  enableResourceNameDnsAAAARecord: option<boolean_>,
  @ocaml.doc("<p>Indicates whether to respond to DNS queries for instance hostnames with DNS A
            records.</p>")
  @as("EnableResourceNameDnsARecord")
  enableResourceNameDnsARecord: option<boolean_>,
  @ocaml.doc("<p>The type of hostname to assign to an instance.</p>") @as("HostnameType")
  hostnameType: option<hostnameType>,
}
@ocaml.doc("<p>Describes the placement of an instance.</p>")
type launchTemplatePlacementRequest = {
  @ocaml.doc("<p>The number of the partition the instance should launch in. Valid only if the placement
            group strategy is set to <code>partition</code>.</p>")
  @as("PartitionNumber")
  partitionNumber: option<integer_>,
  @ocaml.doc("<p>The ARN of the host resource group in which to launch the instances. If you specify a
            host resource group ARN, omit the <b>Tenancy</b> parameter or
            set it to <code>host</code>.</p>")
  @as("HostResourceGroupArn")
  hostResourceGroupArn: option<string_>,
  @ocaml.doc("<p>Reserved for future use.</p>") @as("SpreadDomain") spreadDomain: option<string_>,
  @ocaml.doc("<p>The tenancy of the instance (if the instance is running in a VPC). An instance with a
            tenancy of dedicated runs on single-tenant hardware.</p>")
  @as("Tenancy")
  tenancy: option<tenancy>,
  @ocaml.doc("<p>The ID of the Dedicated Host for the instance.</p>") @as("HostId")
  hostId: option<dedicatedHostId>,
  @ocaml.doc("<p>The name of the placement group for the instance.</p>") @as("GroupName")
  groupName: option<placementGroupName>,
  @ocaml.doc("<p>The affinity setting for an instance on a Dedicated Host.</p>") @as("Affinity")
  affinity: option<string_>,
  @ocaml.doc("<p>The Availability Zone for the instance.</p>") @as("AvailabilityZone")
  availabilityZone: option<string_>,
}
@ocaml.doc("<p>Describes the placement of an instance.</p>")
type launchTemplatePlacement = {
  @ocaml.doc("<p>The number of the partition the instance should launch in. Valid only if the placement
            group strategy is set to <code>partition</code>.</p>")
  @as("PartitionNumber")
  partitionNumber: option<integer_>,
  @ocaml.doc("<p>The ARN of the host resource group in which to launch the instances. </p>")
  @as("HostResourceGroupArn")
  hostResourceGroupArn: option<string_>,
  @ocaml.doc("<p>Reserved for future use.</p>") @as("SpreadDomain") spreadDomain: option<string_>,
  @ocaml.doc("<p>The tenancy of the instance (if the instance is running in a VPC). An instance with a
            tenancy of <code>dedicated</code> runs on single-tenant hardware. </p>")
  @as("Tenancy")
  tenancy: option<tenancy>,
  @ocaml.doc("<p>The ID of the Dedicated Host for the instance.</p>") @as("HostId")
  hostId: option<string_>,
  @ocaml.doc("<p>The name of the placement group for the instance.</p>") @as("GroupName")
  groupName: option<string_>,
  @ocaml.doc("<p>The affinity setting for the instance on the Dedicated Host.</p>") @as("Affinity")
  affinity: option<string_>,
  @ocaml.doc("<p>The Availability Zone of the instance.</p>") @as("AvailabilityZone")
  availabilityZone: option<string_>,
}
type launchTemplateNameStringList = array<launchTemplateName>
@ocaml.doc("<p>Describes a license configuration.</p>")
type launchTemplateLicenseConfigurationRequest = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the license configuration.</p>")
  @as("LicenseConfigurationArn")
  licenseConfigurationArn: option<string_>,
}
@ocaml.doc("<p>Describes a license configuration.</p>")
type launchTemplateLicenseConfiguration = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the license configuration.</p>")
  @as("LicenseConfigurationArn")
  licenseConfigurationArn: option<string_>,
}
@ocaml.doc("<p>The metadata options for the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\">Instance Metadata and User Data</a> in the
                <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
type launchTemplateInstanceMetadataOptionsRequest = {
  @ocaml.doc("<p>Set to <code>enabled</code> to allow access to instance tags from the instance
            metadata. Set to <code>disabled</code> to turn off access to instance tags from the
            instance metadata. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS\">Work with
                instance tags using the instance metadata</a>.</p>
        <p>Default: <code>disabled</code>
         </p>")
  @as("InstanceMetadataTags")
  instanceMetadataTags: option<launchTemplateInstanceMetadataTagsState>,
  @ocaml.doc("<p>Enables or disables the IPv6 endpoint for the instance metadata service.</p>
        <p>Default: <code>disabled</code>
         </p>")
  @as("HttpProtocolIpv6")
  httpProtocolIpv6: option<launchTemplateInstanceMetadataProtocolIpv6>,
  @ocaml.doc("<p>Enables or disables the HTTP metadata endpoint on your instances. If the parameter is
            not specified, the default state is <code>enabled</code>.</p>
        <note>
            <p>If you specify a value of <code>disabled</code>, you will not be able to access
                your instance metadata. </p>
        </note>")
  @as("HttpEndpoint")
  httpEndpoint: option<launchTemplateInstanceMetadataEndpointState>,
  @ocaml.doc("<p>The desired HTTP PUT response hop limit for instance metadata requests. The larger the
            number, the further instance metadata requests can travel.</p>
        <p>Default: 1</p>
        <p>Possible values: Integers from 1 to 64</p>")
  @as("HttpPutResponseHopLimit")
  httpPutResponseHopLimit: option<integer_>,
  @ocaml.doc("<p>The state of token usage for your instance metadata requests. If the parameter is not
            specified in the request, the default state is <code>optional</code>.</p>
        <p>If the state is <code>optional</code>, you can choose to retrieve instance metadata
            with or without a signed token header on your request. If you retrieve the IAM role
            credentials without a token, the version 1.0 role credentials are returned. If you
            retrieve the IAM role credentials using a valid signed token, the version 2.0 role
            credentials are returned.</p>
        <p>If the state is <code>required</code>, you must send a signed token header with any
            instance metadata retrieval requests. In this state, retrieving the IAM role credentials
            always returns the version 2.0 credentials; the version 1.0 credentials are not
            available.</p>")
  @as("HttpTokens")
  httpTokens: option<launchTemplateHttpTokensState>,
}
@ocaml.doc("<p>The metadata options for the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\">Instance Metadata and User Data</a> in the
                <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
type launchTemplateInstanceMetadataOptions = {
  @ocaml.doc("<p>Set to <code>enabled</code> to allow access to instance tags from the instance
            metadata. Set to <code>disabled</code> to turn off access to instance tags from the
            instance metadata. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS\">Work with
                instance tags using the instance metadata</a>.</p>
        <p>Default: <code>disabled</code>
         </p>")
  @as("InstanceMetadataTags")
  instanceMetadataTags: option<launchTemplateInstanceMetadataTagsState>,
  @ocaml.doc("<p>Enables or disables the IPv6 endpoint for the instance metadata service.</p>
        <p>Default: <code>disabled</code>
         </p>")
  @as("HttpProtocolIpv6")
  httpProtocolIpv6: option<launchTemplateInstanceMetadataProtocolIpv6>,
  @ocaml.doc("<p>Enables or disables the HTTP metadata endpoint on your instances. If the parameter is
            not specified, the default state is <code>enabled</code>.</p>
        <note>
            <p>If you specify a value of <code>disabled</code>, you will not be able to access
                your instance metadata. </p>
        </note>")
  @as("HttpEndpoint")
  httpEndpoint: option<launchTemplateInstanceMetadataEndpointState>,
  @ocaml.doc("<p>The desired HTTP PUT response hop limit for instance metadata requests. The larger the
            number, the further instance metadata requests can travel.</p>
        <p>Default: 1</p>
        <p>Possible values: Integers from 1 to 64</p>")
  @as("HttpPutResponseHopLimit")
  httpPutResponseHopLimit: option<integer_>,
  @ocaml.doc("<p>The state of token usage for your instance metadata requests. If the parameter is not
            specified in the request, the default state is <code>optional</code>.</p>
        <p>If the state is <code>optional</code>, you can choose to retrieve instance metadata
            with or without a signed token header on your request. If you retrieve the IAM role
            credentials without a token, the version 1.0 role credentials are returned. If you
            retrieve the IAM role credentials using a valid signed token, the version 2.0 role
            credentials are returned.</p>
        <p>If the state is <code>required</code>, you must send a signed token header with any
            instance metadata retrieval requests. In this state, retrieving the IAM role credentials
            always returns the version 2.0 credentials; the version 1.0 credentials are not
            available.</p>")
  @as("HttpTokens")
  httpTokens: option<launchTemplateHttpTokensState>,
  @ocaml.doc("<p>The state of the metadata option changes.</p>
        <p>
            <code>pending</code> - The metadata options are being updated and the instance is not
            ready to process metadata traffic with the new selection.</p>
        <p>
            <code>applied</code> - The metadata options have been successfully applied on the
            instance.</p>")
  @as("State")
  state: option<launchTemplateInstanceMetadataOptionsState>,
}
@ocaml.doc("<p>The maintenance options of your instance.</p>")
type launchTemplateInstanceMaintenanceOptionsRequest = {
  @ocaml.doc("<p>Disables the automatic recovery behavior of your instance or sets it to default. For
            more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-recover.html#instance-configuration-recovery\">Simplified automatic recovery</a>.</p>")
  @as("AutoRecovery")
  autoRecovery: option<launchTemplateAutoRecoveryState>,
}
@ocaml.doc("<p>The maintenance options of your instance.</p>")
type launchTemplateInstanceMaintenanceOptions = {
  @ocaml.doc("<p>Disables the automatic recovery behavior of your instance or sets it to
            default.</p>")
  @as("AutoRecovery")
  autoRecovery: option<launchTemplateAutoRecoveryState>,
}
type launchTemplateIdStringList = array<launchTemplateId>
@ocaml.doc("<p>An IAM instance profile.</p>")
type launchTemplateIamInstanceProfileSpecificationRequest = {
  @ocaml.doc("<p>The name of the instance profile.</p>") @as("Name") name: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the instance profile.</p>") @as("Arn")
  arn: option<string_>,
}
@ocaml.doc("<p>Describes an IAM instance profile.</p>")
type launchTemplateIamInstanceProfileSpecification = {
  @ocaml.doc("<p>The name of the instance profile.</p>") @as("Name") name: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the instance profile.</p>") @as("Arn")
  arn: option<string_>,
}
@ocaml.doc("<p>Indicates whether the instance is configured for hibernation. This parameter is valid
            only if the instance meets the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites\">hibernation
                prerequisites</a>.</p>")
type launchTemplateHibernationOptionsRequest = {
  @ocaml.doc("<p>If you set this parameter to <code>true</code>, the instance is enabled for
            hibernation.</p>
        <p>Default: <code>false</code>
         </p>")
  @as("Configured")
  configured: option<boolean_>,
}
@ocaml.doc("<p>Indicates whether an instance is configured for hibernation.</p>")
type launchTemplateHibernationOptions = {
  @ocaml.doc("<p>If this parameter is set to <code>true</code>, the instance is enabled for
            hibernation; otherwise, it is not enabled for hibernation.</p>")
  @as("Configured")
  configured: option<boolean_>,
}
@ocaml.doc("<p>Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For more
            information, see <a href=\"https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html\"> What is Amazon Web Services Nitro Enclaves?</a>
            in the <i>Amazon Web Services Nitro Enclaves User Guide</i>.</p>")
type launchTemplateEnclaveOptionsRequest = {
  @ocaml.doc("<p>To enable the instance for Amazon Web Services Nitro Enclaves, set this parameter to
                <code>true</code>.</p>")
  @as("Enabled")
  enabled: option<boolean_>,
}
@ocaml.doc(
  "<p>Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.</p>"
)
type launchTemplateEnclaveOptions = {
  @ocaml.doc("<p>If this parameter is set to <code>true</code>, the instance is enabled for Amazon Web Services Nitro
            Enclaves; otherwise, it is not enabled for Amazon Web Services Nitro Enclaves.</p>")
  @as("Enabled")
  enabled: option<boolean_>,
}
@ocaml.doc("<p> Describes an elastic inference accelerator. </p>")
type launchTemplateElasticInferenceAcceleratorResponse = {
  @ocaml.doc("<p> The number of elastic inference accelerators to attach to the instance. </p>
        <p>Default: 1</p>")
  @as("Count")
  count: option<integer_>,
  @ocaml.doc("<p> The type of elastic inference accelerator. The possible values are eia1.medium,
            eia1.large, and eia1.xlarge. </p>")
  @as("Type")
  type_: option<string_>,
}
@ocaml.doc("<p> Describes an elastic inference accelerator. </p>")
type launchTemplateElasticInferenceAccelerator = {
  @ocaml.doc("<p> The number of elastic inference accelerators to attach to the instance. </p>
        <p>Default: 1</p>")
  @as("Count")
  count: option<launchTemplateElasticInferenceAcceleratorCount>,
  @ocaml.doc("<p> The type of elastic inference accelerator. The possible values are eia1.medium,
            eia1.large, and eia1.xlarge. </p>")
  @as("Type")
  type_: string_,
}
@ocaml.doc("<p>The parameters for a block device for an EBS volume.</p>")
type launchTemplateEbsBlockDeviceRequest = {
  @ocaml.doc("<p>The throughput to provision for a <code>gp3</code> volume, with a maximum of 1,000
            MiB/s.</p>
        <p>Valid Range: Minimum value of 125. Maximum value of 1000.</p>")
  @as("Throughput")
  throughput: option<integer_>,
  @ocaml.doc("<p>The volume type. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html\">Amazon EBS volume types</a> in the
                <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
  @as("VolumeType")
  volumeType: option<volumeType>,
  @ocaml.doc("<p>The size of the volume, in GiBs. You must specify either a snapshot ID or a volume
            size. The following are the supported volumes sizes for each volume type:</p>
        <ul>
            <li>
                <p>
                  <code>gp2</code> and <code>gp3</code>: 1-16,384</p>
            </li>
            <li>
                <p>
                  <code>io1</code> and <code>io2</code>: 4-16,384</p>
            </li>
            <li>
                <p>
                  <code>st1</code> and <code>sc1</code>: 125-16,384</p>
            </li>
            <li>
                <p>
                  <code>standard</code>: 1-1,024</p>
            </li>
         </ul>")
  @as("VolumeSize")
  volumeSize: option<integer_>,
  @ocaml.doc("<p>The ID of the snapshot.</p>") @as("SnapshotId") snapshotId: option<snapshotId>,
  @ocaml.doc(
    "<p>The ARN of the symmetric Key Management Service (KMS) CMK used for encryption.</p>"
  )
  @as("KmsKeyId")
  kmsKeyId: option<kmsKeyId>,
  @ocaml.doc("<p>The number of I/O operations per second (IOPS). For <code>gp3</code>,
            <code>io1</code>, and <code>io2</code> volumes, this represents the number of IOPS that
            are provisioned for the volume. For <code>gp2</code> volumes, this represents the
            baseline performance of the volume and the rate at which the volume accumulates I/O
            credits for bursting.</p>
        <p>The following are the supported values for each volume type:</p>
        <ul>
            <li>
                <p>
                  <code>gp3</code>: 3,000-16,000 IOPS</p>
            </li>
            <li>
                <p>
                  <code>io1</code>: 100-64,000 IOPS</p>
            </li>
            <li>
                <p>
                  <code>io2</code>: 100-64,000 IOPS</p>
            </li>
         </ul>
        <p>For <code>io1</code> and <code>io2</code> volumes, we guarantee
            64,000 IOPS only for <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances\">Instances built on the
                Nitro System</a>. Other instance families guarantee performance up to
            32,000 IOPS.</p>
        <p>This parameter is supported for <code>io1</code>, <code>io2</code>, and <code>gp3</code> volumes only. This parameter
            is not supported for <code>gp2</code>, <code>st1</code>, <code>sc1</code>, or <code>standard</code> volumes.</p>")
  @as("Iops")
  iops: option<integer_>,
  @ocaml.doc("<p>Indicates whether the EBS volume is deleted on instance termination.</p>")
  @as("DeleteOnTermination")
  deleteOnTermination: option<boolean_>,
  @ocaml.doc("<p>Indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached
            to instances that support Amazon EBS encryption. If you are creating a volume from a
            snapshot, you can't specify an encryption value.</p>")
  @as("Encrypted")
  encrypted: option<boolean_>,
}
@ocaml.doc("<p>Describes a block device for an EBS volume.</p>")
type launchTemplateEbsBlockDevice = {
  @ocaml.doc("<p>The throughput that the volume supports, in MiB/s.</p>") @as("Throughput")
  throughput: option<integer_>,
  @ocaml.doc("<p>The volume type.</p>") @as("VolumeType") volumeType: option<volumeType>,
  @ocaml.doc("<p>The size of the volume, in GiB.</p>") @as("VolumeSize")
  volumeSize: option<integer_>,
  @ocaml.doc("<p>The ID of the snapshot.</p>") @as("SnapshotId") snapshotId: option<snapshotId>,
  @ocaml.doc("<p>The ARN of the Key Management Service (KMS) CMK used for encryption.</p>")
  @as("KmsKeyId")
  kmsKeyId: option<kmsKeyId>,
  @ocaml.doc("<p>The number of I/O operations per second (IOPS) that the volume supports. </p>")
  @as("Iops")
  iops: option<integer_>,
  @ocaml.doc("<p>Indicates whether the EBS volume is deleted on instance termination.</p>")
  @as("DeleteOnTermination")
  deleteOnTermination: option<boolean_>,
  @ocaml.doc("<p>Indicates whether the EBS volume is encrypted.</p>") @as("Encrypted")
  encrypted: option<boolean_>,
}
@ocaml.doc("<p>The CPU options for the instance. Both the core count and threads per core must be
            specified in the request.</p>")
type launchTemplateCpuOptionsRequest = {
  @ocaml.doc("<p>The number of threads per CPU core. To disable multithreading for the instance,
            specify a value of 1. Otherwise, specify the default value of 2.</p>")
  @as("ThreadsPerCore")
  threadsPerCore: option<integer_>,
  @ocaml.doc("<p>The number of CPU cores for the instance.</p>") @as("CoreCount")
  coreCount: option<integer_>,
}
@ocaml.doc("<p>The CPU options for the instance.</p>")
type launchTemplateCpuOptions = {
  @ocaml.doc("<p>The number of threads per CPU core.</p>") @as("ThreadsPerCore")
  threadsPerCore: option<integer_>,
  @ocaml.doc("<p>The number of CPU cores for the instance.</p>") @as("CoreCount")
  coreCount: option<integer_>,
}
@ocaml.doc("<p>Describes a launch permission.</p>")
type launchPermission = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of an organizational unit (OU).</p>")
  @as("OrganizationalUnitArn")
  organizationalUnitArn: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of an organization.</p>") @as("OrganizationArn")
  organizationArn: option<string_>,
  @ocaml.doc("<p>The Amazon Web Services account ID.</p>
         <p>Constraints: Up to 10 000 account IDs can be specified in a single request.</p>")
  @as("UserId")
  userId: option<string_>,
  @ocaml.doc("<p>The name of the group.</p>") @as("Group") group: option<permissionGroup>,
}
@ocaml.doc("<p>The last error that occurred for a VPC endpoint.</p>")
type lastError = {
  @ocaml.doc("<p>The error code for the VPC endpoint error.</p>") @as("Code") code: option<string_>,
  @ocaml.doc("<p>The error message for the VPC endpoint error.</p>") @as("Message")
  message: option<string_>,
}
type keyPairIdStringList = array<keyPairId>
type keyNameStringList = array<keyPairName>
@ocaml.doc("<p>[EC2-VPC only] Describes an IPv6 range.</p>")
type ipv6Range = {
  @ocaml.doc("<p>A description for the security group rule that references this IPv6 address range.</p>
         <p>Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9,
        spaces, and ._-:/()#,@[]+=&;{}!$*</p>")
  @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The IPv6 CIDR range. You can either specify a CIDR range or a source security group,
        not both. To specify a single IPv6 address, use the /128 prefix length.</p>")
  @as("CidrIpv6")
  cidrIpv6: option<string_>,
}
@ocaml.doc("<p>Information about the IPv6 delegated prefixes assigned 
            to a network interface.</p>")
type ipv6PrefixSpecificationResponse = {
  @ocaml.doc("<p>One or more IPv6 delegated prefixes assigned to the network interface.</p>")
  @as("Ipv6Prefix")
  ipv6Prefix: option<string_>,
}
@ocaml.doc("<p>Describes the IPv4 prefix option for a network interface.</p>")
type ipv6PrefixSpecificationRequest = {
  @ocaml.doc("<p>The IPv6 prefix.</p>") @as("Ipv6Prefix") ipv6Prefix: option<string_>,
}
@ocaml.doc("<p>Describes the IPv6 prefix.</p>")
type ipv6PrefixSpecification = {
  @ocaml.doc("<p>The IPv6 prefix.</p>") @as("Ipv6Prefix") ipv6Prefix: option<string_>,
}
type ipv6PoolIdList = array<ipv6PoolEc2Id>
@ocaml.doc("<p>Describes an IPv6 CIDR block.</p>")
type ipv6CidrBlock = {
  @ocaml.doc("<p>The IPv6 CIDR block.</p>") @as("Ipv6CidrBlock") ipv6CidrBlock: option<string_>,
}
@ocaml.doc("<p>Describes an IPv6 CIDR block association.</p>")
type ipv6CidrAssociation = {
  @ocaml.doc("<p>The resource that's associated with the IPv6 CIDR block.</p>")
  @as("AssociatedResource")
  associatedResource: option<string_>,
  @ocaml.doc("<p>The IPv6 CIDR block.</p>") @as("Ipv6Cidr") ipv6Cidr: option<string_>,
}
type ipv6AddressList = array<string_>
@ocaml.doc("<p>Information about the IPv4 delegated prefixes assigned 
            to a network interface.</p>")
type ipv4PrefixSpecificationResponse = {
  @ocaml.doc("<p>One or more IPv4 delegated prefixes assigned to the network interface.</p>")
  @as("Ipv4Prefix")
  ipv4Prefix: option<string_>,
}
@ocaml.doc("<p>Describes the IPv4 prefix option for a network interface.</p>")
type ipv4PrefixSpecificationRequest = {
  @ocaml.doc("<p>The IPv4 prefix. For information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html\">
            Assigning prefixes to Amazon EC2 network interfaces</a> in the
                <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
  @as("Ipv4Prefix")
  ipv4Prefix: option<string_>,
}
@ocaml.doc("<p>Describes an IPv4 prefix.</p>")
type ipv4PrefixSpecification = {
  @ocaml.doc("<p>The IPv4 prefix. For information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html\">
            Assigning prefixes to Amazon EC2 network interfaces</a> in the
                <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
  @as("Ipv4Prefix")
  ipv4Prefix: option<string_>,
}
@ocaml.doc("<p>The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>")
type ipamResourceTag = {
  @ocaml.doc("<p>The value of the tag.</p>") @as("Value") value: option<string_>,
  @ocaml.doc(
    "<p>The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>"
  )
  @as("Key")
  key: option<string_>,
}
@ocaml.doc("<p>Details related to why an IPAM pool CIDR failed to be provisioned.</p>")
type ipamPoolCidrFailureReason = {
  @ocaml.doc("<p>A message related to why an IPAM pool CIDR failed to be provisioned.</p>")
  @as("Message")
  message: option<string_>,
  @ocaml.doc("<p>An error code related to why an IPAM pool CIDR failed to be provisioned.</p>")
  @as("Code")
  code: option<ipamPoolCidrFailureCode>,
}
type ipamPoolAllocationDisallowedCidrs = array<string_>
@ocaml.doc(
  "<p>In IPAM, an allocation is a CIDR assignment from an IPAM pool to another resource or IPAM pool.</p>"
)
type ipamPoolAllocation = {
  @ocaml.doc("<p>The owner of the resource.</p>") @as("ResourceOwner")
  resourceOwner: option<string_>,
  @ocaml.doc("<p>The Amazon Web Services Region of the resource.</p>") @as("ResourceRegion")
  resourceRegion: option<string_>,
  @ocaml.doc("<p>The type of the resource.</p>") @as("ResourceType")
  resourceType: option<ipamPoolAllocationResourceType>,
  @ocaml.doc("<p>The ID of the resource.</p>") @as("ResourceId") resourceId: option<string_>,
  @ocaml.doc("<p>A description of the pool allocation.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The ID of an allocation.</p>") @as("IpamPoolAllocationId")
  ipamPoolAllocationId: option<ipamPoolAllocationId>,
  @ocaml.doc("<p>The CIDR for the allocation. A CIDR is a representation of an IP address and its associated network mask (or netmask) and 
         refers to a range of IP addresses. An IPv4 CIDR example is <code>10.24.34.0/23</code>. An IPv6 CIDR example is <code>2001:DB8::/32</code>.</p>")
  @as("Cidr")
  cidr: option<string_>,
}
@ocaml.doc("<p>The operating Regions for an IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only
         discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.</p>
         <p>For more information about operating Regions, see <a href=\"/vpc/latest/ipam/create-ipam.html\">Create an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>")
type ipamOperatingRegion = {
  @ocaml.doc("<p>The name of the operating Region.</p>") @as("RegionName")
  regionName: option<string_>,
}
@ocaml.doc(
  "<p>A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP.</p>"
)
type ipamCidrAuthorizationContext = {
  @ocaml.doc("<p>The signed authorization message for the prefix and account.</p>") @as("Signature")
  signature: option<string_>,
  @ocaml.doc("<p>The plain-text authorization message for the prefix and account.</p>")
  @as("Message")
  message: option<string_>,
}
@ocaml.doc("<p>The historical record of a CIDR within an IPAM scope. For more information, see <a href=\"/vpc/latest/ipam/view-history-cidr-ipam.html\">View the history of IP addresses</a> in the <i>Amazon VPC IPAM User Guide</i>.
      </p>")
type ipamAddressHistoryRecord = {
  @ocaml.doc(
    "<p>Sampled end time of the resource-to-CIDR association within the IPAM scope. Changes are picked up in periodic snapshots, so the end time may have occurred before this specific time.</p>"
  )
  @as("SampledEndTime")
  sampledEndTime: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>Sampled start time of the resource-to-CIDR association within the IPAM scope. Changes are picked up in periodic snapshots, so the start time may have occurred before this specific time.</p>"
  )
  @as("SampledStartTime")
  sampledStartTime: option<millisecondDateTime>,
  @ocaml.doc("<p>The VPC ID of the resource.</p>") @as("VpcId") vpcId: option<string_>,
  @ocaml.doc(
    "<p>The overlap status of an IPAM resource. The overlap status tells you if the CIDR for a resource overlaps with another CIDR in the scope. For more information on overlap statuses, see <a href=\"/vpc/latest/ipam/monitor-cidr-compliance-ipam.html\">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>"
  )
  @as("ResourceOverlapStatus")
  resourceOverlapStatus: option<ipamOverlapStatus>,
  @ocaml.doc(
    "<p>The compliance status of a resource. For more information on compliance statuses, see <a href=\"/vpc/latest/ipam/monitor-cidr-compliance-ipam.html\">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>"
  )
  @as("ResourceComplianceStatus")
  resourceComplianceStatus: option<ipamComplianceStatus>,
  @ocaml.doc("<p>The name of the resource.</p>") @as("ResourceName") resourceName: option<string_>,
  @ocaml.doc("<p>The CIDR of the resource.</p>") @as("ResourceCidr") resourceCidr: option<string_>,
  @ocaml.doc("<p>The ID of the resource.</p>") @as("ResourceId") resourceId: option<string_>,
  @ocaml.doc("<p>The type of the resource.</p>") @as("ResourceType")
  resourceType: option<ipamAddressHistoryResourceType>,
  @ocaml.doc("<p>The Amazon Web Services Region of the resource.</p>") @as("ResourceRegion")
  resourceRegion: option<string_>,
  @ocaml.doc("<p>The ID of the resource owner.</p>") @as("ResourceOwnerId")
  resourceOwnerId: option<string_>,
}
type ipRanges = array<string_>
@ocaml.doc("<p>Describes an IPv4 range.</p>")
type ipRange = {
  @ocaml.doc("<p>A description for the security group rule that references this IPv4 address range.</p>
         <p>Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9,
        spaces, and ._-:/()#,@[]+=&;{}!$*</p>")
  @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The IPv4 CIDR range. You can either specify a CIDR range or a source security group,
            not both. To specify a single IPv4 address, use the /32 prefix length.</p>")
  @as("CidrIp")
  cidrIp: option<string_>,
}
type ipPrefixList = array<string_>
type ipAddressList = array<ipAddress>
type internetGatewayIdList = array<internetGatewayId>
@ocaml.doc("<p>Describes the attachment of a VPC to an internet gateway or an egress-only internet
			gateway.</p>")
type internetGatewayAttachment = {
  @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<string_>,
  @ocaml.doc("<p>The current state of the attachment. For an internet gateway, the state is
				<code>available</code> when attached to a VPC; otherwise, this value is not
			returned.</p>")
  @as("State")
  state: option<attachmentStatus>,
}
@ocaml.doc("<p>Information about the Capacity Reservation usage.</p>")
type instanceUsage = {
  @ocaml.doc(
    "<p>The number of instances the Amazon Web Services account currently has in the Capacity Reservation.</p>"
  )
  @as("UsedInstanceCount")
  usedInstanceCount: option<integer_>,
  @ocaml.doc(
    "<p>The ID of the Amazon Web Services account that is making use of the Capacity Reservation.</p>"
  )
  @as("AccountId")
  accountId: option<string_>,
}
type instanceTypes = array<string_>
@ocaml.doc("<p>The instance types offered.</p>")
type instanceTypeOffering = {
  @ocaml.doc("<p>The identifier for the location. This depends on the location type. For example, if the location type is
    <code>region</code>, the location is the Region code (for example, <code>us-east-2</code>.)</p>")
  @as("Location")
  location: option<location>,
  @ocaml.doc("<p>The location type.</p>") @as("LocationType") locationType: option<locationType>,
  @ocaml.doc(
    "<p>The instance type. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p>"
  )
  @as("InstanceType")
  instanceType: option<instanceType>,
}
type instanceTypeList = array<instanceType>
@ocaml.doc("<p>The list of instance types with the specified instance attributes.</p>")
type instanceTypeInfoFromInstanceRequirements = {
  @ocaml.doc("<p>The matching instance type.</p>") @as("InstanceType")
  instanceType: option<string_>,
}
type instanceTagKeySet = array<string_>
@ocaml.doc("<p>Describes a scheduled event for an instance.</p>")
type instanceStatusEvent = {
  @ocaml.doc("<p>The deadline for starting the event.</p>") @as("NotBeforeDeadline")
  notBeforeDeadline: option<dateTime>,
  @ocaml.doc("<p>The earliest scheduled start time for the event.</p>") @as("NotBefore")
  notBefore: option<dateTime>,
  @ocaml.doc("<p>The latest scheduled end time for the event.</p>") @as("NotAfter")
  notAfter: option<dateTime>,
  @ocaml.doc("<p>A description of the event.</p>
        <p>After a scheduled event is completed, it can still be described for up to a week. If
            the event has been completed, this description starts with the following text:
            [Completed].</p>")
  @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The event code.</p>") @as("Code") code: option<eventCode>,
  @ocaml.doc("<p>The ID of the event.</p>") @as("InstanceEventId")
  instanceEventId: option<instanceEventId>,
}
@ocaml.doc("<p>Describes the instance status.</p>")
type instanceStatusDetails = {
  @ocaml.doc("<p>The status.</p>") @as("Status") status: option<statusType>,
  @ocaml.doc("<p>The type of instance status.</p>") @as("Name") name: option<statusName>,
  @ocaml.doc("<p>The time when a status check failed. For an instance that was launched and impaired,
            this is the time when the instance was launched.</p>")
  @as("ImpairedSince")
  impairedSince: option<dateTime>,
}
@ocaml.doc("<p>Describes the current state of an instance.</p>")
type instanceState = {
  @ocaml.doc("<p>The current state of the instance.</p>") @as("Name")
  name: option<instanceStateName>,
  @ocaml.doc("<p>The state of the instance as a 16-bit unsigned integer. </p>
        <p>The high byte is all of the bits between 2^8 and (2^16)-1, which equals decimal values
            between 256 and 65,535. These numerical values are used for internal purposes and should
            be ignored.</p>
        <p>The low byte is all of the bits between 2^0 and (2^8)-1, which equals decimal values
            between 0 and 255. </p>
        <p>The valid values for instance-state-code will all be in the range of the low byte and
            they are:</p>
        <ul>
            <li>
                <p>
                    <code>0</code> : <code>pending</code>
                </p>
            </li>
            <li>
                <p>
                    <code>16</code> : <code>running</code>
                </p>
            </li>
            <li>
                <p>
                    <code>32</code> : <code>shutting-down</code>
                </p>
            </li>
            <li>
                <p>
                    <code>48</code> : <code>terminated</code>
                </p>
            </li>
            <li>
                <p>
                    <code>64</code> : <code>stopping</code>
                </p>
            </li>
            <li>
                <p>
                    <code>80</code> : <code>stopped</code>
                </p>
            </li>
         </ul>
        <p>You can ignore the high byte value by zeroing out all of the bits above 2^8 or 256 in
            decimal.</p>")
  @as("Code")
  code: option<integer_>,
}
@ocaml.doc("<p>The instance details to specify which volumes should be snapshotted.</p>")
type instanceSpecification = {
  @ocaml.doc("<p>Excludes the root volume from being snapshotted.</p>") @as("ExcludeBootVolume")
  excludeBootVolume: option<boolean_>,
  @ocaml.doc("<p>The instance to specify which volumes should be snapshotted.</p>")
  @as("InstanceId")
  instanceId: option<instanceId>,
}
@ocaml.doc("<p>Describes a network interface attachment.</p>")
type instanceNetworkInterfaceAttachment = {
  @ocaml.doc("<p>The index of the network card.</p>") @as("NetworkCardIndex")
  networkCardIndex: option<integer_>,
  @ocaml.doc("<p>The attachment state.</p>") @as("Status") status: option<attachmentStatus>,
  @ocaml.doc("<p>The index of the device on the instance for the network interface attachment.</p>")
  @as("DeviceIndex")
  deviceIndex: option<integer_>,
  @ocaml.doc(
    "<p>Indicates whether the network interface is deleted when the instance is terminated.</p>"
  )
  @as("DeleteOnTermination")
  deleteOnTermination: option<boolean_>,
  @ocaml.doc("<p>The ID of the network interface attachment.</p>") @as("AttachmentId")
  attachmentId: option<string_>,
  @ocaml.doc("<p>The time stamp when the attachment initiated.</p>") @as("AttachTime")
  attachTime: option<dateTime>,
}
@ocaml.doc("<p>Describes association information for an Elastic IP address (IPv4).</p>")
type instanceNetworkInterfaceAssociation = {
  @ocaml.doc("<p>The public IP address or Elastic IP address bound to the network interface.</p>")
  @as("PublicIp")
  publicIp: option<string_>,
  @ocaml.doc("<p>The public DNS name.</p>") @as("PublicDnsName") publicDnsName: option<string_>,
  @ocaml.doc("<p>The ID of the owner of the Elastic IP address.</p>") @as("IpOwnerId")
  ipOwnerId: option<string_>,
  @ocaml.doc("<p>The customer-owned IP address associated with the network interface.</p>")
  @as("CustomerOwnedIp")
  customerOwnedIp: option<string_>,
  @ocaml.doc("<p>The carrier IP address associated with the network interface.</p>")
  @as("CarrierIp")
  carrierIp: option<string_>,
}
@ocaml.doc("<p>The metadata options for the instance.</p>")
type instanceMetadataOptionsResponse = {
  @ocaml.doc("<p>Indicates whether access to instance tags from the instance metadata is enabled or
            disabled. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS\">Work with
                instance tags using the instance metadata</a>.</p>")
  @as("InstanceMetadataTags")
  instanceMetadataTags: option<instanceMetadataTagsState>,
  @ocaml.doc("<p>Indicates whether the IPv6 endpoint for the instance metadata service is enabled or
            disabled.</p>")
  @as("HttpProtocolIpv6")
  httpProtocolIpv6: option<instanceMetadataProtocolState>,
  @ocaml.doc("<p>Indicates whether the HTTP metadata endpoint on your instances is enabled or
            disabled.</p>
        <p>If the value is <code>disabled</code>, you cannot access your instance
            metadata.</p>")
  @as("HttpEndpoint")
  httpEndpoint: option<instanceMetadataEndpointState>,
  @ocaml.doc("<p>The desired HTTP PUT response hop limit for instance metadata requests. The larger the
            number, the further instance metadata requests can travel.</p>
        <p>Default: 1</p>
        <p>Possible values: Integers from 1 to 64</p>")
  @as("HttpPutResponseHopLimit")
  httpPutResponseHopLimit: option<integer_>,
  @ocaml.doc("<p>The state of token usage for your instance metadata requests.</p>
        <p>If the state is <code>optional</code>, you can choose to retrieve instance metadata
            with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are
            returned. If you retrieve the IAM role credentials using a valid signed
            token, the version 2.0 role credentials are returned.</p>
        <p>If the state is <code>required</code>, you must send a signed token header with any
            instance metadata retrieval requests. In this state, retrieving the IAM
            role credential always returns the version 2.0 credentials; the version 1.0 credentials
            are not available.</p>
        <p>Default: <code>optional</code>
         </p>")
  @as("HttpTokens")
  httpTokens: option<httpTokensState>,
  @ocaml.doc("<p>The state of the metadata option changes.</p>
        <p>
            <code>pending</code> - The metadata options are being updated and the instance is not
            ready to process metadata traffic with the new selection.</p>
        <p>
            <code>applied</code> - The metadata options have been successfully applied on the
            instance.</p>")
  @as("State")
  state: option<instanceMetadataOptionsState>,
}
@ocaml.doc("<p>The metadata options for the instance.</p>")
type instanceMetadataOptionsRequest = {
  @ocaml.doc("<p>Set to <code>enabled</code> to allow access to instance tags from the instance
            metadata. Set to <code>disabled</code> to turn off access to instance tags from the
            instance metadata. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS\">Work with
                instance tags using the instance metadata</a>.</p>
        <p>Default: <code>disabled</code>
         </p>")
  @as("InstanceMetadataTags")
  instanceMetadataTags: option<instanceMetadataTagsState>,
  @ocaml.doc("<p>Enables or disables the IPv6 endpoint for the instance metadata service.</p>")
  @as("HttpProtocolIpv6")
  httpProtocolIpv6: option<instanceMetadataProtocolState>,
  @ocaml.doc("<p>Enables or disables the HTTP metadata endpoint on your instances.</p>
        <p>If you specify a value of <code>disabled</code>, you cannot access your instance
            metadata.</p>
        <p>Default: <code>enabled</code>
         </p>")
  @as("HttpEndpoint")
  httpEndpoint: option<instanceMetadataEndpointState>,
  @ocaml.doc("<p>The desired HTTP PUT response hop limit for instance metadata requests. The larger the
            number, the further instance metadata requests can travel.</p>
        <p>Default: 1</p>
        <p>Possible values: Integers from 1 to 64</p>")
  @as("HttpPutResponseHopLimit")
  httpPutResponseHopLimit: option<integer_>,
  @ocaml.doc("<p>The state of token usage for your instance metadata requests.</p>
        <p>If the state is <code>optional</code>, you can choose to retrieve instance metadata
            with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are
            returned. If you retrieve the IAM role credentials using a valid signed
            token, the version 2.0 role credentials are returned.</p>
        <p>If the state is <code>required</code>, you must send a signed token header with any
            instance metadata retrieval requests. In this state, retrieving the IAM
            role credentials always returns the version 2.0 credentials; the version 1.0 credentials
            are not available.</p>
        <p>Default: <code>optional</code>
         </p>")
  @as("HttpTokens")
  httpTokens: option<httpTokensState>,
}
@ocaml.doc("<p>The maintenance options for the instance.</p>")
type instanceMaintenanceOptionsRequest = {
  @ocaml.doc("<p>Disables the automatic recovery behavior of your instance or sets it to default. For
            more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-recover.html#instance-configuration-recovery\">Simplified automatic recovery</a>.</p>")
  @as("AutoRecovery")
  autoRecovery: option<instanceAutoRecoveryState>,
}
@ocaml.doc("<p>The maintenance options for the instance.</p>")
type instanceMaintenanceOptions = {
  @ocaml.doc("<p>Provides information on the current automatic recovery behavior of your
            instance.</p>")
  @as("AutoRecovery")
  autoRecovery: option<instanceAutoRecoveryState>,
}
@ocaml.doc("<p>Information about an IPv6 prefix.</p>")
type instanceIpv6Prefix = {
  @ocaml.doc("<p>One or more IPv6 prefixes assigned to the network interface.</p>")
  @as("Ipv6Prefix")
  ipv6Prefix: option<string_>,
}
@ocaml.doc("<p>Describes an IPv6 address.</p>")
type instanceIpv6AddressRequest = {
  @ocaml.doc("<p>The IPv6 address.</p>") @as("Ipv6Address") ipv6Address: option<string_>,
}
@ocaml.doc("<p>Describes an IPv6 address.</p>")
type instanceIpv6Address = {
  @ocaml.doc("<p>The IPv6 address.</p>") @as("Ipv6Address") ipv6Address: option<string_>,
}
@ocaml.doc("<p>Information about an IPv4 prefix.</p>")
type instanceIpv4Prefix = {
  @ocaml.doc("<p>One or more IPv4 prefixes assigned to the network interface.</p>")
  @as("Ipv4Prefix")
  ipv4Prefix: option<string_>,
}
type instanceIdsSet = array<instanceId>
type instanceIdStringList = array<instanceId>
type instanceIdSet = array<instanceId>
type instanceIdList = array<instanceId>
type instanceGenerationSet = array<instanceGeneration>
@ocaml.doc("<p>Describes the default credit option for CPU usage of a burstable performance instance
            family.</p>")
type instanceFamilyCreditSpecification = {
  @ocaml.doc("<p>The default credit option for CPU usage of the instance family. Valid values are
                <code>standard</code> and <code>unlimited</code>.</p>")
  @as("CpuCredits")
  cpuCredits: option<string_>,
  @ocaml.doc("<p>The instance family.</p>") @as("InstanceFamily")
  instanceFamily: option<unlimitedSupportedInstanceFamily>,
}
@ocaml.doc("<p>Describes an instance to export.</p>")
type instanceExportDetails = {
  @ocaml.doc("<p>The target virtualization environment.</p>") @as("TargetEnvironment")
  targetEnvironment: option<exportEnvironment>,
  @ocaml.doc("<p>The ID of the resource being exported.</p>") @as("InstanceId")
  instanceId: option<string_>,
}
@ocaml.doc("<p>The start day and time and the end day and time of the time range, in UTC.</p>")
type instanceEventWindowTimeRangeRequest = {
  @ocaml.doc("<p>The hour when the time range ends.</p>") @as("EndHour") endHour: option<hour>,
  @ocaml.doc("<p>The day on which the time range ends.</p>") @as("EndWeekDay")
  endWeekDay: option<weekDay>,
  @ocaml.doc("<p>The hour when the time range begins.</p>") @as("StartHour")
  startHour: option<hour>,
  @ocaml.doc("<p>The day on which the time range begins.</p>") @as("StartWeekDay")
  startWeekDay: option<weekDay>,
}
@ocaml.doc("<p>The start day and time and the end day and time of the time range, in UTC.</p>")
type instanceEventWindowTimeRange = {
  @ocaml.doc("<p>The hour when the time range ends.</p>") @as("EndHour") endHour: option<hour>,
  @ocaml.doc("<p>The day on which the time range ends.</p>") @as("EndWeekDay")
  endWeekDay: option<weekDay>,
  @ocaml.doc("<p>The hour when the time range begins.</p>") @as("StartHour")
  startHour: option<hour>,
  @ocaml.doc("<p>The day on which the time range begins.</p>") @as("StartWeekDay")
  startWeekDay: option<weekDay>,
}
@ocaml.doc("<p>The state of the event window.</p>")
type instanceEventWindowStateChange = {
  @ocaml.doc("<p>The current state of the event window.</p>") @as("State")
  state: option<instanceEventWindowState>,
  @ocaml.doc("<p>The ID of the event window.</p>") @as("InstanceEventWindowId")
  instanceEventWindowId: option<instanceEventWindowId>,
}
type instanceEventWindowIdSet = array<instanceEventWindowId>
@ocaml.doc("<p>Describes the credit option for CPU usage of a burstable performance instance.</p>")
type instanceCreditSpecificationRequest = {
  @ocaml.doc("<p>The credit option for CPU usage of the instance. Valid values are
                <code>standard</code> and <code>unlimited</code>.</p>
        <p>T3 instances with <code>host</code> tenancy do not support the <code>unlimited</code>
            CPU credit option.</p>")
  @as("CpuCredits")
  cpuCredits: option<string_>,
  @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<instanceId>,
}
@ocaml.doc("<p>Describes the credit option for CPU usage of a burstable performance instance. </p>")
type instanceCreditSpecification = {
  @ocaml.doc("<p>The credit option for CPU usage of the instance. Valid values are
                <code>standard</code> and <code>unlimited</code>.</p>")
  @as("CpuCredits")
  cpuCredits: option<string_>,
  @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<string_>,
}
@ocaml.doc("<p>Describes a Reserved Instance listing state.</p>")
type instanceCount = {
  @ocaml.doc("<p>The states of the listed Reserved Instances.</p>") @as("State")
  state: option<listingState>,
  @ocaml.doc(
    "<p>The number of listed Reserved Instances in the state specified by the <code>state</code>.</p>"
  )
  @as("InstanceCount")
  instanceCount: option<integer_>,
}
@ocaml.doc("<p>Information about the number of instances that can be launched onto the Dedicated 
    		Host.</p>")
type instanceCapacity = {
  @ocaml.doc("<p>The total number of instances that can be launched onto the Dedicated Host if there 
    		are no instances running on it.</p>")
  @as("TotalCapacity")
  totalCapacity: option<integer_>,
  @ocaml.doc("<p>The instance type supported by the Dedicated Host.</p>") @as("InstanceType")
  instanceType: option<string_>,
  @ocaml.doc("<p>The number of instances that can be launched onto the Dedicated Host based on the 
    		host's available capacity.</p>")
  @as("AvailableCapacity")
  availableCapacity: option<integer_>,
}
type insideCidrBlocksStringList = array<string_>
@ocaml.doc("<p>Describes the Inference accelerators for the instance type.</p>")
type inferenceDeviceInfo = {
  @ocaml.doc("<p>The manufacturer of the Inference accelerator.</p>") @as("Manufacturer")
  manufacturer: option<inferenceDeviceManufacturerName>,
  @ocaml.doc("<p>The name of the Inference accelerator.</p>") @as("Name")
  name: option<inferenceDeviceName>,
  @ocaml.doc("<p>The number of Inference accelerators for the instance type.</p>") @as("Count")
  count: option<inferenceDeviceCount>,
}
type importTaskIdList = array<importImageTaskId>
type importSnapshotTaskIdList = array<importSnapshotTaskId>
@ocaml.doc("<p> The response information for license configurations.</p>")
type importImageLicenseConfigurationResponse = {
  @ocaml.doc("<p>The ARN of a license configuration.</p>") @as("LicenseConfigurationArn")
  licenseConfigurationArn: option<string_>,
}
@ocaml.doc("<p>The request information of license configurations.</p>")
type importImageLicenseConfigurationRequest = {
  @ocaml.doc("<p>The ARN of a license configuration.</p>") @as("LicenseConfigurationArn")
  licenseConfigurationArn: option<string_>,
}
@ocaml.doc("<p>Information about an AMI that is currently in the Recycle Bin.</p>")
type imageRecycleBinInfo = {
  @ocaml.doc(
    "<p>The date and time when the AMI is to be permanently deleted from the Recycle Bin.</p>"
  )
  @as("RecycleBinExitTime")
  recycleBinExitTime: option<millisecondDateTime>,
  @ocaml.doc("<p>The date and time when the AMI entered the Recycle Bin.</p>")
  @as("RecycleBinEnterTime")
  recycleBinEnterTime: option<millisecondDateTime>,
  @ocaml.doc("<p>The description of the AMI.</p>") @as("Description") description: option<string_>,
  @ocaml.doc("<p>The name of the AMI.</p>") @as("Name") name: option<string_>,
  @ocaml.doc("<p>The ID of the AMI.</p>") @as("ImageId") imageId: option<string_>,
}
type imageIdStringList = array<imageId>
type imageIdList = array<imageId>
@ocaml.doc("<p>Describes the ID format for a resource.</p>")
type idFormat = {
  @ocaml.doc("<p>Indicates whether longer IDs (17-character IDs) are enabled for the resource.</p>")
  @as("UseLongIds")
  useLongIds: option<boolean_>,
  @ocaml.doc("<p>The type of resource.</p>") @as("Resource") resource: option<string_>,
  @ocaml.doc(
    "<p>The date in UTC at which you are permanently switched over to using longer IDs. If a deadline is not yet available for this resource type, this field is not returned.</p>"
  )
  @as("Deadline")
  deadline: option<dateTime>,
}
@ocaml.doc("<p>Describes the ICMP type and code.</p>")
type icmpTypeCode = {
  @ocaml.doc("<p>The ICMP type. A value of -1 means all types.</p>") @as("Type")
  type_: option<integer_>,
  @ocaml.doc("<p>The ICMP code. A value of -1 means all codes for the specified ICMP type.</p>")
  @as("Code")
  code: option<integer_>,
}
@ocaml.doc("<p>Describes an IAM instance profile.</p>")
type iamInstanceProfileSpecification = {
  @ocaml.doc("<p>The name of the instance profile.</p>") @as("Name") name: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the instance profile.</p>") @as("Arn")
  arn: option<string_>,
}
@ocaml.doc("<p>Describes an IAM instance profile.</p>")
type iamInstanceProfile = {
  @ocaml.doc("<p>The ID of the instance profile.</p>") @as("Id") id: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the instance profile.</p>") @as("Arn")
  arn: option<string_>,
}
@ocaml.doc("<p>The IKE version that is permitted for the VPN tunnel.</p>")
type ikeversionsRequestListValue = {
  @ocaml.doc("<p>The IKE version.</p>") @as("Value") value: option<string_>,
}
@ocaml.doc("<p>The internet key exchange (IKE) version permitted for the VPN tunnel.</p>")
type ikeversionsListValue = {
  @ocaml.doc("<p>The IKE version.</p>") @as("Value") value: option<string_>,
}
type hostReservationIdSet = array<hostReservationId>
@ocaml.doc("<p>Describes the properties of a Dedicated Host.</p>")
type hostProperties = {
  @ocaml.doc("<p>The total number of vCPUs on the Dedicated Host.</p>") @as("TotalVCpus")
  totalVCpus: option<integer_>,
  @ocaml.doc("<p>The number of sockets on the Dedicated Host.</p>") @as("Sockets")
  sockets: option<integer_>,
  @ocaml.doc(
    "<p>The instance family supported by the Dedicated Host. For example, <code>m5</code>.</p>"
  )
  @as("InstanceFamily")
  instanceFamily: option<string_>,
  @ocaml.doc("<p>The instance type supported by the Dedicated Host. For example, <code>m5.large</code>. 
        	If the host supports multiple instance types, no <b>instanceType</b>
        	is returned.</p>")
  @as("InstanceType")
  instanceType: option<string_>,
  @ocaml.doc("<p>The number of cores on the Dedicated Host.</p>") @as("Cores")
  cores: option<integer_>,
}
@ocaml.doc("<p>Details about the Dedicated Host Reservation offering.</p>")
type hostOffering = {
  @ocaml.doc("<p>The upfront price of the offering. Does not apply to No Upfront
            offerings.</p>")
  @as("UpfrontPrice")
  upfrontPrice: option<string_>,
  @ocaml.doc("<p>The available payment option.</p>") @as("PaymentOption")
  paymentOption: option<paymentOption>,
  @ocaml.doc("<p>The ID of the offering.</p>") @as("OfferingId") offeringId: option<offeringId>,
  @ocaml.doc("<p>The instance family of the offering.</p>") @as("InstanceFamily")
  instanceFamily: option<string_>,
  @ocaml.doc("<p>The hourly price of the offering.</p>") @as("HourlyPrice")
  hourlyPrice: option<string_>,
  @ocaml.doc("<p>The duration of the offering (in seconds).</p>") @as("Duration")
  duration: option<integer_>,
  @ocaml.doc("<p>The currency of the offering.</p>") @as("CurrencyCode")
  currencyCode: option<currencyCodeValues>,
}
@ocaml.doc("<p>Describes an instance running on a Dedicated Host.</p>")
type hostInstance = {
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the instance.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc(
    "<p>The instance type (for example, <code>m3.medium</code>) of the running instance.</p>"
  )
  @as("InstanceType")
  instanceType: option<string_>,
  @ocaml.doc("<p>The ID of instance that is running on the Dedicated Host.</p>") @as("InstanceId")
  instanceId: option<string_>,
}
@ocaml.doc("<p>Indicates whether your instance is configured for hibernation. This parameter is valid
            only if the instance meets the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites\">hibernation
                prerequisites</a>. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html\">Hibernate your instance</a> in the
                <i>Amazon EC2 User Guide</i>.</p>")
type hibernationOptionsRequest = {
  @ocaml.doc("<p>If you set this parameter to <code>true</code>, your instance is enabled for
            hibernation.</p>
        <p>Default: <code>false</code>
         </p>")
  @as("Configured")
  configured: option<boolean_>,
}
@ocaml.doc("<p>Indicates whether your instance is configured for hibernation. This parameter is valid
            only if the instance meets the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites\">hibernation
                prerequisites</a>. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html\">Hibernate your instance</a> in the
                <i>Amazon EC2 User Guide</i>.</p>")
type hibernationOptions = {
  @ocaml.doc("<p>If this parameter is set to <code>true</code>, your instance is enabled for
            hibernation; otherwise, it is not enabled for hibernation.</p>")
  @as("Configured")
  configured: option<boolean_>,
}
type groupNameStringList = array<securityGroupName>
type groupIds = array<securityGroupId>
@ocaml.doc("<p>Describes a security group.</p>")
type groupIdentifier = {
  @ocaml.doc("<p>The ID of the security group.</p>") @as("GroupId") groupId: option<string_>,
  @ocaml.doc("<p>The name of the security group.</p>") @as("GroupName") groupName: option<string_>,
}
type groupIdStringList = array<securityGroupId>
@ocaml.doc("<p>Describes the memory available to the GPU accelerator.</p>")
type gpuDeviceMemoryInfo = {
  @ocaml.doc("<p>The size of the memory available to the GPU accelerator, in MiB.</p>")
  @as("SizeInMiB")
  sizeInMiB: option<gpuDeviceMemorySize>,
}
@ocaml.doc(
  "<p>Describes the state of the bitstream generation process for an Amazon FPGA image (AFI).</p>"
)
type fpgaImageState = {
  @ocaml.doc("<p>If the state is <code>failed</code>, this is the error message.</p>")
  @as("Message")
  message: option<string_>,
  @ocaml.doc("<p>The state. The following are the possible values:</p>
		       <ul>
            <li>
               <p>
                  <code>pending</code> - AFI bitstream generation is in progress.</p>
            </li>
            <li>
               <p>
                  <code>available</code> - The AFI is available for use.</p>
            </li>
            <li>
               <p>
                  <code>failed</code> - AFI bitstream generation failed.</p>
            </li>
            <li>
               <p>
                  <code>unavailable</code> - The AFI is no longer available for use.</p>
            </li>
         </ul>")
  @as("Code")
  code: option<fpgaImageStateCode>,
}
type fpgaImageIdList = array<fpgaImageId>
@ocaml.doc("<p>Describes the memory for the FPGA accelerator for the instance type.</p>")
type fpgaDeviceMemoryInfo = {
  @ocaml.doc("<p>The size of the memory available to the FPGA accelerator, in MiB.</p>")
  @as("SizeInMiB")
  sizeInMiB: option<fpgaDeviceMemorySize>,
}
type flowLogResourceIds = array<flowLogResourceId>
type flowLogIdList = array<vpcFlowLogId>
@ocaml.doc("<p>The Spot Instance replacement strategy to use when Amazon EC2 emits a rebalance
         notification signal that your Spot Instance is at an elevated risk of being interrupted.
         For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-capacity-rebalance.html\">Capacity rebalancing</a> in the <i>Amazon EC2 User Guide</i>.</p>")
type fleetSpotCapacityRebalanceRequest = {
  @ocaml.doc("<p>The amount of time (in seconds) that Amazon EC2 waits before terminating the old Spot
         Instance after launching a new replacement Spot Instance.</p>
         <p>Required when <code>ReplacementStrategy</code> is set to <code>launch-before-terminate</code>.</p>
         <p>Not valid when <code>ReplacementStrategy</code> is set to <code>launch</code>.</p>
         <p>Valid values: Minimum value of <code>120</code> seconds. Maximum value of <code>7200</code> seconds.</p>")
  @as("TerminationDelay")
  terminationDelay: option<integer_>,
  @ocaml.doc("<p>The replacement strategy to use. Only available for fleets of type
         <code>maintain</code>.</p>
         <p>
            <code>launch</code> - EC2 Fleet launches a replacement Spot Instance when a rebalance
         notification is emitted for an existing Spot Instance in the fleet. EC2 Fleet does not
         terminate the instances that receive a rebalance notification. You can terminate the old
         instances, or you can leave them running. You are charged for all instances while they are
         running. </p>
         <p>
            <code>launch-before-terminate</code> - EC2 Fleet launches a replacement Spot Instance
         when a rebalance notification is emitted for an existing Spot Instance in the fleet, and
         then, after a delay that you specify (in <code>TerminationDelay</code>), terminates the
         instances that received a rebalance notification.</p>")
  @as("ReplacementStrategy")
  replacementStrategy: option<fleetReplacementStrategy>,
}
@ocaml.doc("<p>The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an
         elevated risk of being interrupted.</p>")
type fleetSpotCapacityRebalance = {
  @ocaml.doc("<p>The amount of time (in seconds) that Amazon EC2 waits before terminating the old Spot
         Instance after launching a new replacement Spot Instance.</p>
         <p>Required when <code>ReplacementStrategy</code> is set to <code>launch-before-terminate</code>.</p>
         <p>Not valid when <code>ReplacementStrategy</code> is set to <code>launch</code>.</p>
         <p>Valid values: Minimum value of <code>120</code> seconds. Maximum value of <code>7200</code> seconds.</p>")
  @as("TerminationDelay")
  terminationDelay: option<integer_>,
  @ocaml.doc("<p>The replacement strategy to use. Only available for fleets of type
         <code>maintain</code>.</p>
         <p>
            <code>launch</code> - EC2 Fleet launches a new replacement Spot Instance when a
         rebalance notification is emitted for an existing Spot Instance in the fleet. EC2 Fleet
         does not terminate the instances that receive a rebalance notification. You can terminate
         the old instances, or you can leave them running. You are charged for all instances while
         they are running. </p>
         <p>
            <code>launch-before-terminate</code> - EC2 Fleet launches a new replacement Spot
         Instance when a rebalance notification is emitted for an existing Spot Instance in the
         fleet, and then, after a delay that you specify (in <code>TerminationDelay</code>),
         terminates the instances that received a rebalance notification.</p>")
  @as("ReplacementStrategy")
  replacementStrategy: option<fleetReplacementStrategy>,
}
@ocaml.doc("<p>Describes the Amazon EC2 launch template and the launch template version that can be used by
         an EC2 Fleet to configure Amazon EC2 instances. For information about launch templates, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html\">Launching
            an instance from a launch template</a> in the
         <i>Amazon EC2 User Guide</i>.</p>")
type fleetLaunchTemplateSpecificationRequest = {
  @ocaml.doc("<p>The launch template version number, <code>$Latest</code>, or <code>$Default</code>. You must specify a value, otherwise the request fails.</p>
         <p>If the value is <code>$Latest</code>, Amazon EC2 uses the latest version of the launch template.</p>
         <p>If the value is <code>$Default</code>, Amazon EC2 uses the default version of the launch template.</p>")
  @as("Version")
  version: option<string_>,
  @ocaml.doc(
    "<p>The name of the launch template. If you specify the template name, you can't specify the template ID.</p>"
  )
  @as("LaunchTemplateName")
  launchTemplateName: option<launchTemplateName>,
  @ocaml.doc(
    "<p>The ID of the launch template. If you specify the template ID, you can't specify the template name.</p>"
  )
  @as("LaunchTemplateId")
  launchTemplateId: option<launchTemplateId>,
}
@ocaml.doc("<p>Describes the Amazon EC2 launch template and the launch template version that can be used
            by a Spot Fleet request to configure Amazon EC2 instances. For information about launch templates,
            see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html\">Launching an instance from a launch template</a> in the
                <i>Amazon EC2 User Guide for Linux Instances</i>.</p>")
type fleetLaunchTemplateSpecification = {
  @ocaml.doc("<p>The launch template version number, <code>$Latest</code>, or <code>$Default</code>.
            You must specify a value, otherwise the request fails.</p>
        <p>If the value is <code>$Latest</code>, Amazon EC2 uses the latest version of the launch
            template.</p>
        <p>If the value is <code>$Default</code>, Amazon EC2 uses the default version of the launch
            template.</p>")
  @as("Version")
  version: option<string_>,
  @ocaml.doc("<p>The name of the launch template. If you specify the template name, you can't specify
            the template ID.</p>")
  @as("LaunchTemplateName")
  launchTemplateName: option<launchTemplateName>,
  @ocaml.doc("<p>The ID of the launch template. If you specify the template ID, you can't specify the
            template name.</p>")
  @as("LaunchTemplateId")
  launchTemplateId: option<string_>,
}
type fleetIdSet = array<fleetId>
@ocaml.doc("<p>Information about a Capacity Reservation in a Capacity Reservation Fleet.</p>")
type fleetCapacityReservation = {
  @ocaml.doc("<p>The priority of the instance type in the Capacity Reservation Fleet. For more information, 
			see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#instance-priority\">
				Instance type priority</a> in the Amazon EC2 User Guide.</p>")
  @as("Priority")
  priority: option<integerWithConstraints>,
  @ocaml.doc("<p>The weight of the instance type in the Capacity Reservation Fleet. For more information, 
			see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#instance-weight\">
				Instance type weight</a> in the Amazon EC2 User Guide.</p>")
  @as("Weight")
  weight: option<doubleWithConstraints>,
  @ocaml.doc("<p>The date and time at which the Capacity Reservation was created.</p>")
  @as("CreateDate")
  createDate: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>Indicates whether the Capacity Reservation reserves capacity for EBS-optimized instance types.</p>"
  )
  @as("EbsOptimized")
  ebsOptimized: option<boolean_>,
  @ocaml.doc("<p>The number of capacity units fulfilled by the Capacity Reservation. For more information, see 
			<a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity\">
				Total target capacity</a> in the Amazon EC2 User Guide.</p>")
  @as("FulfilledCapacity")
  fulfilledCapacity: option<double>,
  @ocaml.doc(
    "<p>The total number of instances for which the Capacity Reservation reserves capacity.</p>"
  )
  @as("TotalInstanceCount")
  totalInstanceCount: option<integer_>,
  @ocaml.doc("<p>The Availability Zone in which the Capacity Reservation reserves capacity.</p>")
  @as("AvailabilityZone")
  availabilityZone: option<string_>,
  @ocaml.doc(
    "<p>The type of operating system for which the Capacity Reservation reserves capacity.</p>"
  )
  @as("InstancePlatform")
  instancePlatform: option<capacityReservationInstancePlatform>,
  @ocaml.doc("<p>The instance type for which the Capacity Reservation reserves capacity.</p>")
  @as("InstanceType")
  instanceType: option<instanceType>,
  @ocaml.doc(
    "<p>The ID of the Availability Zone in which the Capacity Reservation reserves capacity.</p>"
  )
  @as("AvailabilityZoneId")
  availabilityZoneId: option<string_>,
  @ocaml.doc("<p>The ID of the Capacity Reservation.</p>") @as("CapacityReservationId")
  capacityReservationId: option<capacityReservationId>,
}
@ocaml.doc("<p>The IAM SAML identity provider used for federated authentication.</p>")
type federatedAuthenticationRequest = {
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the IAM SAML identity provider for the self-service portal.</p>"
  )
  @as("SelfServiceSAMLProviderArn")
  selfServiceSAMLProviderArn: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the IAM SAML identity provider.</p>")
  @as("SAMLProviderArn")
  samlproviderArn: option<string_>,
}
@ocaml.doc("<p>Describes the IAM SAML identity providers used for federated authentication.</p>")
type federatedAuthentication = {
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the IAM SAML identity provider for the self-service portal.</p>"
  )
  @as("SelfServiceSamlProviderArn")
  selfServiceSamlProviderArn: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the IAM SAML identity provider.</p>")
  @as("SamlProviderArn")
  samlProviderArn: option<string_>,
}
@ocaml.doc(
  "<p>Configuration settings for creating and managing pre-provisioned snapshots for a fast-launch enabled Windows AMI.</p>"
)
type fastLaunchSnapshotConfigurationResponse = {
  @ocaml.doc(
    "<p>The number of pre-provisioned snapshots requested to keep on hand for a fast-launch enabled Windows AMI.</p>"
  )
  @as("TargetResourceCount")
  targetResourceCount: option<integer_>,
}
@ocaml.doc(
  "<p>Configuration settings for creating and managing pre-provisioned snapshots for a fast-launch enabled Windows AMI.</p>"
)
type fastLaunchSnapshotConfigurationRequest = {
  @ocaml.doc(
    "<p>The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.</p>"
  )
  @as("TargetResourceCount")
  targetResourceCount: option<integer_>,
}
@ocaml.doc("<p>Identifies the launch template to use for faster launching of the Windows AMI.</p>")
type fastLaunchLaunchTemplateSpecificationResponse = {
  @ocaml.doc(
    "<p>The version of the launch template for faster launching of the associated Windows AMI.</p>"
  )
  @as("Version")
  version: option<string_>,
  @ocaml.doc(
    "<p>The name of the launch template for faster launching of the associated Windows AMI.</p>"
  )
  @as("LaunchTemplateName")
  launchTemplateName: option<string_>,
  @ocaml.doc(
    "<p>The ID of the launch template for faster launching of the associated Windows AMI.</p>"
  )
  @as("LaunchTemplateId")
  launchTemplateId: option<launchTemplateId>,
}
@ocaml.doc("<p>Request to create a launch template for a fast-launch enabled Windows AMI.</p>
		       <note>
			         <p>Note - You can specify either the <code>LaunchTemplateName</code> or the 
				<code>LaunchTemplateId</code>, but not both.</p>
		       </note>")
type fastLaunchLaunchTemplateSpecificationRequest = {
  @ocaml.doc(
    "<p>The version of the launch template to use for faster launching for a Windows AMI.</p>"
  )
  @as("Version")
  version: string_,
  @ocaml.doc(
    "<p>The name of the launch template to use for faster launching for a Windows AMI.</p>"
  )
  @as("LaunchTemplateName")
  launchTemplateName: option<string_>,
  @ocaml.doc("<p>The ID of the launch template to use for faster launching for a Windows AMI.</p>")
  @as("LaunchTemplateId")
  launchTemplateId: option<launchTemplateId>,
}
type fastLaunchImageIdList = array<imageId>
@ocaml.doc("<p>Describes an export instance task.</p>")
type exportToS3TaskSpecification = {
  @ocaml.doc("<p>The image is written to a single object in the Amazon S3 bucket at the S3 key s3prefix +
   exportTaskId + '.' + diskImageFormat.</p>")
  @as("S3Prefix")
  s3Prefix: option<string_>,
  @ocaml.doc("<p>The Amazon S3 bucket for the destination image. The destination bucket must exist and grant
   WRITE and READ_ACP permissions to the Amazon Web Services account <code>vm-import-export@amazon.com</code>.</p>")
  @as("S3Bucket")
  s3Bucket: option<string_>,
  @ocaml.doc("<p>The format for the exported image.</p>") @as("DiskImageFormat")
  diskImageFormat: option<diskImageFormat>,
  @ocaml.doc("<p>The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is
   exported.</p>")
  @as("ContainerFormat")
  containerFormat: option<containerFormat>,
}
@ocaml.doc("<p>Describes the format and location for the export task.</p>")
type exportToS3Task = {
  @ocaml.doc("<p>The encryption key for your S3 bucket.</p>") @as("S3Key") s3Key: option<string_>,
  @ocaml.doc("<p>The Amazon S3 bucket for the destination image. The destination bucket must exist and grant
   WRITE and READ_ACP permissions to the Amazon Web Services account <code>vm-import-export@amazon.com</code>.</p>")
  @as("S3Bucket")
  s3Bucket: option<string_>,
  @ocaml.doc("<p>The format for the exported image.</p>") @as("DiskImageFormat")
  diskImageFormat: option<diskImageFormat>,
  @ocaml.doc("<p>The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is
   exported.</p>")
  @as("ContainerFormat")
  containerFormat: option<containerFormat>,
}
@ocaml.doc("<p>Describes the destination for an export image task.</p>")
type exportTaskS3LocationRequest = {
  @ocaml.doc("<p>The prefix (logical hierarchy) in the bucket.</p>") @as("S3Prefix")
  s3Prefix: option<string_>,
  @ocaml.doc("<p>The destination Amazon S3 bucket.</p>") @as("S3Bucket") s3Bucket: string_,
}
@ocaml.doc("<p>Describes the destination for an export image task.</p>")
type exportTaskS3Location = {
  @ocaml.doc("<p>The prefix (logical hierarchy) in the bucket.</p>") @as("S3Prefix")
  s3Prefix: option<string_>,
  @ocaml.doc("<p>The destination Amazon S3 bucket.</p>") @as("S3Bucket") s3Bucket: option<string_>,
}
type exportTaskIdStringList = array<exportTaskId>
type exportImageTaskIdList = array<exportImageTaskId>
type executableByStringList = array<string_>
type excludedInstanceTypeSet = array<excludedInstanceType>
@ocaml.doc("<p>Describes an EC2 Fleet or Spot Fleet event.</p>")
type eventInformation = {
  @ocaml.doc("<p>The ID of the instance. This information is available only for
                <code>instanceChange</code> events.</p>")
  @as("InstanceId")
  instanceId: option<string_>,
  @ocaml.doc("<p>The event.</p>
        
        <p>
            <code>error</code> events:</p>
        <ul>
            <li>
                <p>
                    <code>iamFleetRoleInvalid</code> - The EC2 Fleet or Spot Fleet does not have the required
                    permissions either to launch or terminate an instance.</p>
            </li>
            <li>
                <p>
                  <code>allLaunchSpecsTemporarilyBlacklisted</code> - None of the configurations
                    are valid, and several attempts to launch instances have failed. For more
                    information, see the description of the event.</p>
            </li>
            <li>
                <p>
                    <code>spotInstanceCountLimitExceeded</code> - You've reached the limit on the
                    number of Spot Instances that you can launch.</p>
            </li>
            <li>
                <p>
                    <code>spotFleetRequestConfigurationInvalid</code> - The configuration is not
                    valid. For more information, see the description of the event.</p>
            </li>
         </ul>

        <p>
            <code>fleetRequestChange</code> events:</p>
        <ul>
            <li>
                <p>
                    <code>active</code> - The EC2 Fleet or Spot Fleet request has been validated and Amazon EC2 is
                    attempting to maintain the target number of running instances.</p>
            </li>
            <li>
                <p>
                    <code>cancelled</code> - The EC2 Fleet or Spot Fleet request is canceled and has no running
                    instances. The EC2 Fleet or Spot Fleet will be deleted two days after its instances are
                    terminated.</p>
            </li>
            <li>
                <p>
                    <code>cancelled_running</code> - The EC2 Fleet or Spot Fleet request is canceled and does
                    not launch additional instances. Its existing instances continue to run until
                    they are interrupted or terminated. The request remains in this state until all
                    instances are interrupted or terminated.</p>
            </li>
            <li>
                <p>
                    <code>cancelled_terminating</code> - The EC2 Fleet or Spot Fleet request is canceled and
                    its instances are terminating. The request remains in this state until all
                    instances are terminated.</p>
            </li>
            <li>
                <p>
                    <code>expired</code> - The EC2 Fleet or Spot Fleet request has expired. If the request was
                    created with <code>TerminateInstancesWithExpiration</code> set, a subsequent
                        <code>terminated</code> event indicates that the instances are
                    terminated.</p>
            </li>
            <li>
                <p>
                    <code>modify_in_progress</code> - The EC2 Fleet or Spot Fleet request is being modified.
                    The request remains in this state until the modification is fully
                    processed.</p>
            </li>
            <li>
                <p>
                    <code>modify_succeeded</code> - The EC2 Fleet or Spot Fleet request was modified.</p>
            </li>
            <li>
                <p>
                    <code>submitted</code> - The EC2 Fleet or Spot Fleet request is being evaluated and Amazon EC2
                    is preparing to launch the target number of instances.</p>
            </li>
            <li>
                <p>
                  <code>progress</code> - The EC2 Fleet or Spot Fleet request is in the process of being fulfilled.</p>
            </li>
         </ul>

        <p>
            <code>instanceChange</code> events:</p>
        <ul>
            <li>
                <p>
                  <code>launched</code> - A new instance was launched.</p>
            </li>
            <li>
                <p>
                  <code>terminated</code> - An instance was terminated by the user.</p>
            </li>
            <li>
                <p>
                  <code>termination_notified</code> - An instance termination notification was
                    sent when a Spot Instance was terminated by Amazon EC2 during scale-down, when the target
                    capacity of the fleet was modified down, for example, from a target capacity of
                    4 to a target capacity of 3.</p>
            </li>
         </ul>

        <p>
            <code>Information</code> events:</p>
        <ul>
            <li>
                <p>
                  <code>fleetProgressHalted</code> - The price in every launch specification is
                    not valid because it is below the Spot price (all the launch specifications have
                    produced <code>launchSpecUnusable</code> events). A launch specification might
                    become valid if the Spot price changes.</p>
            </li>
            <li>
                <p>
                  <code>launchSpecTemporarilyBlacklisted</code> - The configuration is not valid
                    and several attempts to launch instances have failed. For more information, see
                    the description of the event.</p>
            </li>
            <li>
                <p>
                  <code>launchSpecUnusable</code> - The price in a launch specification is not
                    valid because it is below the Spot price.</p>
            </li>
            <li>
                <p>
                  <code>registerWithLoadBalancersFailed</code> - An attempt to register
                    instances with load balancers failed. For more information, see the description
                    of the event.</p>
            </li>
         </ul>")
  @as("EventSubType")
  eventSubType: option<string_>,
  @ocaml.doc("<p>The description of the event.</p>") @as("EventDescription")
  eventDescription: option<string_>,
}
@ocaml.doc("<p>Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For
            more information, see <a href=\"https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html\"> What is Amazon Web Services Nitro
                Enclaves?</a> in the <i>Amazon Web Services Nitro Enclaves User
                Guide</i>.</p>")
type enclaveOptionsRequest = {
  @ocaml.doc("<p>To enable the instance for Amazon Web Services Nitro Enclaves, set this parameter to
                <code>true</code>.</p>")
  @as("Enabled")
  enabled: option<boolean_>,
}
@ocaml.doc("<p>Indicates whether the instance is enabled for Amazon Web Services Nitro
            Enclaves.</p>")
type enclaveOptions = {
  @ocaml.doc("<p>If this parameter is set to <code>true</code>, the instance is enabled for Amazon Web Services Nitro Enclaves; otherwise, it is not enabled for Amazon Web Services Nitro
            Enclaves.</p>")
  @as("Enabled")
  enabled: option<boolean_>,
}
@ocaml.doc("<p>Describes fast snapshot restores that were successfully enabled.</p>")
type enableFastSnapshotRestoreSuccessItem = {
  @ocaml.doc(
    "<p>The time at which fast snapshot restores entered the <code>disabled</code> state.</p>"
  )
  @as("DisabledTime")
  disabledTime: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>The time at which fast snapshot restores entered the <code>disabling</code> state.</p>"
  )
  @as("DisablingTime")
  disablingTime: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>The time at which fast snapshot restores entered the <code>enabled</code> state.</p>"
  )
  @as("EnabledTime")
  enabledTime: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>The time at which fast snapshot restores entered the <code>optimizing</code> state.</p>"
  )
  @as("OptimizingTime")
  optimizingTime: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>The time at which fast snapshot restores entered the <code>enabling</code> state.</p>"
  )
  @as("EnablingTime")
  enablingTime: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>The Amazon Web Services owner alias that enabled fast snapshot restores on the snapshot. This is intended for future use.</p>"
  )
  @as("OwnerAlias")
  ownerAlias: option<string_>,
  @ocaml.doc(
    "<p>The ID of the Amazon Web Services account that enabled fast snapshot restores on the snapshot.</p>"
  )
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The reason for the state transition. The possible values are as follows:</p>
         <ul>
            <li>
               <p>
                  <code>Client.UserInitiated</code> - The state successfully transitioned to <code>enabling</code> or
          <code>disabling</code>.</p>
            </li>
            <li>
               <p>
                  <code>Client.UserInitiated - Lifecycle state transition</code> - The state successfully transitioned 
          to <code>optimizing</code>, <code>enabled</code>, or <code>disabled</code>.</p>
            </li>
         </ul>")
  @as("StateTransitionReason")
  stateTransitionReason: option<string_>,
  @ocaml.doc("<p>The state of fast snapshot restores.</p>") @as("State")
  state: option<fastSnapshotRestoreStateCode>,
  @ocaml.doc("<p>The Availability Zone.</p>") @as("AvailabilityZone")
  availabilityZone: option<string_>,
  @ocaml.doc("<p>The ID of the snapshot.</p>") @as("SnapshotId") snapshotId: option<string_>,
}
@ocaml.doc("<p>Describes an error that occurred when enabling fast snapshot restores.</p>")
type enableFastSnapshotRestoreStateError = {
  @ocaml.doc("<p>The error message.</p>") @as("Message") message: option<string_>,
  @ocaml.doc("<p>The error code.</p>") @as("Code") code: option<string_>,
}
@ocaml.doc("<p>
            Describes the association between an instance and an elastic inference accelerator. 
        </p>")
type elasticInferenceAcceleratorAssociation = {
  @ocaml.doc("<p>
            The time at which the elastic inference accelerator is associated with an instance.
        </p>")
  @as("ElasticInferenceAcceleratorAssociationTime")
  elasticInferenceAcceleratorAssociationTime: option<dateTime>,
  @ocaml.doc("<p>
            The state of the elastic inference accelerator.
        </p>")
  @as("ElasticInferenceAcceleratorAssociationState")
  elasticInferenceAcceleratorAssociationState: option<string_>,
  @ocaml.doc("<p>
            The ID of the association. 
        </p>")
  @as("ElasticInferenceAcceleratorAssociationId")
  elasticInferenceAcceleratorAssociationId: option<string_>,
  @ocaml.doc("<p>
            The Amazon Resource Name (ARN) of the elastic inference accelerator. 
        </p>")
  @as("ElasticInferenceAcceleratorArn")
  elasticInferenceAcceleratorArn: option<string_>,
}
@ocaml.doc("<p>
           Describes an elastic inference accelerator. 
        </p>")
type elasticInferenceAccelerator = {
  @ocaml.doc("<p>
            The number of elastic inference accelerators to attach to the instance. 
        </p>
         <p>Default: 1</p>")
  @as("Count")
  count: option<elasticInferenceAcceleratorCount>,
  @ocaml.doc("<p>
        	The type of elastic inference accelerator. The possible values are <code>eia1.medium</code>, <code>eia1.large</code>, <code>eia1.xlarge</code>, <code>eia2.medium</code>, <code>eia2.large</code>, and <code>eia2.xlarge</code>.
        </p>")
  @as("Type")
  type_: string_,
}
@ocaml.doc("<p>Describes an elastic GPU.</p>")
type elasticGpuSpecificationResponse = {
  @ocaml.doc("<p>The elastic GPU type.</p>") @as("Type") type_: option<string_>,
}
@ocaml.doc("<p>A specification for an Elastic Graphics accelerator.</p>")
type elasticGpuSpecification = {
  @ocaml.doc("<p>The type of Elastic Graphics accelerator. For more information about the values to specify for
            <code>Type</code>, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html#elastic-graphics-basics\">Elastic Graphics Basics</a>, specifically the Elastic Graphics accelerator column, in the 
            <i>Amazon Elastic Compute Cloud User Guide for Windows Instances</i>.</p>")
  @as("Type")
  type_: string_,
}
type elasticGpuIdSet = array<elasticGpuId>
@ocaml.doc("<p>Describes the status of an Elastic Graphics accelerator.</p>")
type elasticGpuHealth = {
  @ocaml.doc("<p>The health status.</p>") @as("Status") status: option<elasticGpuStatus>,
}
@ocaml.doc(
  "<p>Describes the association between an instance and an Elastic Graphics accelerator.</p>"
)
type elasticGpuAssociation = {
  @ocaml.doc("<p>The time the Elastic Graphics accelerator was associated with the instance.</p>")
  @as("ElasticGpuAssociationTime")
  elasticGpuAssociationTime: option<string_>,
  @ocaml.doc("<p>The state of the association between the instance and the
            Elastic Graphics accelerator.</p>")
  @as("ElasticGpuAssociationState")
  elasticGpuAssociationState: option<string_>,
  @ocaml.doc("<p>The ID of the association.</p>") @as("ElasticGpuAssociationId")
  elasticGpuAssociationId: option<string_>,
  @ocaml.doc("<p>The ID of the Elastic Graphics accelerator.</p>") @as("ElasticGpuId")
  elasticGpuId: option<elasticGpuId>,
}
type egressOnlyInternetGatewayIdList = array<egressOnlyInternetGatewayId>
@ocaml.doc("<p>Describes the Elastic Fabric Adapters for the instance type.</p>")
type efaInfo = {
  @ocaml.doc("<p>The maximum number of Elastic Fabric Adapters for the instance type.</p>")
  @as("MaximumEfaInterfaces")
  maximumEfaInterfaces: option<maximumEfaInterfaces>,
}
@ocaml.doc("<p>Describes the optimized EBS performance for supported instance types.</p>")
type ebsOptimizedInfo = {
  @ocaml.doc(
    "<p>The maximum input/output storage operations per second for an EBS-optimized instance type.</p>"
  )
  @as("MaximumIops")
  maximumIops: option<maximumIops>,
  @ocaml.doc(
    "<p>The maximum throughput performance for an EBS-optimized instance type, in MB/s.</p>"
  )
  @as("MaximumThroughputInMBps")
  maximumThroughputInMBps: option<maximumThroughputInMBps>,
  @ocaml.doc(
    "<p>The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.</p>"
  )
  @as("MaximumBandwidthInMbps")
  maximumBandwidthInMbps: option<maximumBandwidthInMbps>,
  @ocaml.doc(
    "<p>The baseline input/output storage operations per seconds for an EBS-optimized instance type.</p>"
  )
  @as("BaselineIops")
  baselineIops: option<baselineIops>,
  @ocaml.doc(
    "<p>The baseline throughput performance for an EBS-optimized instance type, in MB/s.</p>"
  )
  @as("BaselineThroughputInMBps")
  baselineThroughputInMBps: option<baselineThroughputInMBps>,
  @ocaml.doc(
    "<p>The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.</p>"
  )
  @as("BaselineBandwidthInMbps")
  baselineBandwidthInMbps: option<baselineBandwidthInMbps>,
}
@ocaml.doc("<p>Describes information used to set up an EBS volume specified in a block device
            mapping.</p>")
type ebsInstanceBlockDeviceSpecification = {
  @ocaml.doc("<p>The ID of the EBS volume.</p>") @as("VolumeId") volumeId: option<volumeId>,
  @ocaml.doc("<p>Indicates whether the volume is deleted on instance termination.</p>")
  @as("DeleteOnTermination")
  deleteOnTermination: option<boolean_>,
}
@ocaml.doc("<p>Describes a parameter used to set up an EBS volume in a block device mapping.</p>")
type ebsInstanceBlockDevice = {
  @ocaml.doc("<p>The ID of the EBS volume.</p>") @as("VolumeId") volumeId: option<string_>,
  @ocaml.doc("<p>The attachment state.</p>") @as("Status") status: option<attachmentStatus>,
  @ocaml.doc("<p>Indicates whether the volume is deleted on instance termination.</p>")
  @as("DeleteOnTermination")
  deleteOnTermination: option<boolean_>,
  @ocaml.doc("<p>The time stamp when the attachment initiated.</p>") @as("AttachTime")
  attachTime: option<dateTime>,
}
@ocaml.doc("<p>Describes a block device for an EBS volume.</p>")
type ebsBlockDevice = {
  @ocaml.doc("<p>Indicates whether the encryption state of an EBS volume is changed while being
            restored from a backing snapshot. The effect of setting the encryption state to <code>true</code> depends on 
the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-parameters\">Amazon EBS encryption</a> in the <i>Amazon EC2 User Guide</i>.</p>
        <p>In no case can you remove encryption from an encrypted volume.</p>
        <p>Encrypted volumes can only be attached to instances that support Amazon EBS encryption. For
            more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances\">Supported instance types</a>.</p>
        <p>This parameter is not returned by <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeImageAttribute.html\">DescribeImageAttribute</a>.</p>")
  @as("Encrypted")
  encrypted: option<boolean_>,
  @ocaml.doc("<p>The ARN of the Outpost on which the snapshot is stored.</p>") @as("OutpostArn")
  outpostArn: option<string_>,
  @ocaml.doc("<p>The throughput that the volume supports, in MiB/s.</p>
        <p>This parameter is valid only for <code>gp3</code> volumes.</p>
        <p>Valid Range: Minimum value of 125. Maximum value of 1000.</p>")
  @as("Throughput")
  throughput: option<integer_>,
  @ocaml.doc("<p>Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under
            which the EBS volume is encrypted.</p>
        <p>This parameter is only supported on <code>BlockDeviceMapping</code> objects called by
                <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html\">RunInstances</a>, <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotFleet.html\">RequestSpotFleet</a>,
            and <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotInstances.html\">RequestSpotInstances</a>.</p>")
  @as("KmsKeyId")
  kmsKeyId: option<string_>,
  @ocaml.doc("<p>The volume type. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html\">Amazon EBS volume types</a> in the
                <i>Amazon EC2 User Guide</i>. If the volume type is <code>io1</code> or
                <code>io2</code>, you must specify the IOPS that the volume supports.</p>")
  @as("VolumeType")
  volumeType: option<volumeType>,
  @ocaml.doc("<p>The size of the volume, in GiBs. You must specify either a snapshot ID or a volume
            size. If you specify a snapshot, the default is the snapshot size. You can specify a
            volume size that is equal to or larger than the snapshot size.</p>
        <p>The following are the supported volumes sizes for each volume type:</p>
        <ul>
            <li>
                <p>
                  <code>gp2</code> and <code>gp3</code>:1-16,384</p>
            </li>
            <li>
                <p>
                  <code>io1</code> and <code>io2</code>: 4-16,384</p>
            </li>
            <li>
                <p>
                  <code>st1</code> and <code>sc1</code>: 125-16,384</p>
            </li>
            <li>
                <p>
                  <code>standard</code>: 1-1,024</p>
            </li>
         </ul>")
  @as("VolumeSize")
  volumeSize: option<integer_>,
  @ocaml.doc("<p>The ID of the snapshot.</p>") @as("SnapshotId") snapshotId: option<snapshotId>,
  @ocaml.doc("<p>The number of I/O operations per second (IOPS). For <code>gp3</code>, <code>io1</code>, and <code>io2</code> volumes,
            this represents the number of IOPS that are provisioned for the volume. For <code>gp2</code>
            volumes, this represents the baseline performance of the volume and the rate at which
            the volume accumulates I/O credits for bursting.</p>
        <p>The following are the supported values for each volume type:</p>
        <ul>
            <li>
                <p>
                  <code>gp3</code>: 3,000-16,000 IOPS</p>
            </li>
            <li>
                <p>
                  <code>io1</code>: 100-64,000 IOPS</p>
            </li>
            <li>
                <p>
                  <code>io2</code>: 100-64,000 IOPS</p>
            </li>
         </ul>
        <p>For <code>io1</code> and <code>io2</code> volumes, we guarantee 64,000 IOPS only for
                <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances\">Instances built on the
                Nitro System</a>. Other instance families guarantee performance up to
            32,000 IOPS.</p>
        <p>This parameter is required for <code>io1</code> and <code>io2</code> volumes. The default for <code>gp3</code> volumes
            is 3,000 IOPS. This parameter is not supported for <code>gp2</code>, <code>st1</code>, <code>sc1</code>, or <code>standard</code>
            volumes.</p>")
  @as("Iops")
  iops: option<integer_>,
  @ocaml.doc("<p>Indicates whether the EBS volume is deleted on instance termination. For more
            information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#preserving-volumes-on-termination\">Preserving Amazon EBS volumes on instance termination</a> in the
                <i>Amazon EC2 User Guide</i>.</p>")
  @as("DeleteOnTermination")
  deleteOnTermination: option<boolean_>,
}
@ocaml.doc("<p>Describes a DNS entry.</p>")
type dnsEntry = {
  @ocaml.doc("<p>The ID of the private hosted zone.</p>") @as("HostedZoneId")
  hostedZoneId: option<string_>,
  @ocaml.doc("<p>The DNS name.</p>") @as("DnsName") dnsName: option<string_>,
}
@ocaml.doc("<p>Describes a disk.</p>")
type diskInfo = {
  @ocaml.doc("<p>The type of disk.</p>") @as("Type") type_: option<diskType>,
  @ocaml.doc("<p>The number of disks with this configuration.</p>") @as("Count")
  count: option<diskCount>,
  @ocaml.doc("<p>The size of the disk in GB.</p>") @as("SizeInGB") sizeInGB: option<diskSize>,
}
@ocaml.doc("<p>Describes a disk image volume.</p>")
type diskImageVolumeDescription = {
  @ocaml.doc("<p>The size of the volume, in GiB.</p>") @as("Size") size: option<long>,
  @ocaml.doc("<p>The volume identifier.</p>") @as("Id") id: option<string_>,
}
@ocaml.doc("<p>Describes a disk image.</p>")
type diskImageDetail = {
  @ocaml.doc("<p>A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL.
   For information about creating a presigned URL for an Amazon S3 object, read the \"Query String Request Authentication
   Alternative\" section of the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html\">Authenticating REST Requests</a> topic in the <i>Amazon Simple Storage Service Developer
    Guide</i>.</p>
         <p>For information about the import manifest referenced by this API action, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html\">VM Import Manifest</a>.</p>")
  @as("ImportManifestUrl")
  importManifestUrl: string_,
  @ocaml.doc("<p>The disk image format.</p>") @as("Format") format: diskImageFormat,
  @ocaml.doc("<p>The size of the disk image, in GiB.</p>") @as("Bytes") bytes: long,
}
@ocaml.doc("<p>Describes a disk image.</p>")
type diskImageDescription = {
  @ocaml.doc("<p>The size of the disk image, in GiB.</p>") @as("Size") size: option<long>,
  @ocaml.doc("<p>A presigned URL for the import manifest stored in Amazon S3. For information about creating a presigned URL for
   an Amazon S3 object, read the \"Query String Request Authentication Alternative\" section of the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html\">Authenticating REST Requests</a> topic in
   the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
         <p>For information about the import manifest referenced by this API action, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html\">VM Import Manifest</a>.</p>")
  @as("ImportManifestUrl")
  importManifestUrl: option<string_>,
  @ocaml.doc("<p>The disk image format.</p>") @as("Format") format: option<diskImageFormat>,
  @ocaml.doc("<p>The checksum computed for the disk image.</p>") @as("Checksum")
  checksum: option<string_>,
}
@ocaml.doc("<p>Describes fast snapshot restores that were successfully disabled.</p>")
type disableFastSnapshotRestoreSuccessItem = {
  @ocaml.doc(
    "<p>The time at which fast snapshot restores entered the <code>disabled</code> state.</p>"
  )
  @as("DisabledTime")
  disabledTime: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>The time at which fast snapshot restores entered the <code>disabling</code> state.</p>"
  )
  @as("DisablingTime")
  disablingTime: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>The time at which fast snapshot restores entered the <code>enabled</code> state.</p>"
  )
  @as("EnabledTime")
  enabledTime: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>The time at which fast snapshot restores entered the <code>optimizing</code> state.</p>"
  )
  @as("OptimizingTime")
  optimizingTime: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>The time at which fast snapshot restores entered the <code>enabling</code> state.</p>"
  )
  @as("EnablingTime")
  enablingTime: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>The Amazon Web Services owner alias that enabled fast snapshot restores on the snapshot. This is intended for future use.</p>"
  )
  @as("OwnerAlias")
  ownerAlias: option<string_>,
  @ocaml.doc(
    "<p>The ID of the Amazon Web Services account that enabled fast snapshot restores on the snapshot.</p>"
  )
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The reason for the state transition. The possible values are as follows:</p>
         <ul>
            <li>
               <p>
                  <code>Client.UserInitiated</code> - The state successfully transitioned to <code>enabling</code> or
          <code>disabling</code>.</p>
            </li>
            <li>
               <p>
                  <code>Client.UserInitiated - Lifecycle state transition</code> - The state successfully transitioned 
          to <code>optimizing</code>, <code>enabled</code>, or <code>disabled</code>.</p>
            </li>
         </ul>")
  @as("StateTransitionReason")
  stateTransitionReason: option<string_>,
  @ocaml.doc("<p>The state of fast snapshot restores for the snapshot.</p>") @as("State")
  state: option<fastSnapshotRestoreStateCode>,
  @ocaml.doc("<p>The Availability Zone.</p>") @as("AvailabilityZone")
  availabilityZone: option<string_>,
  @ocaml.doc("<p>The ID of the snapshot.</p>") @as("SnapshotId") snapshotId: option<string_>,
}
@ocaml.doc("<p>Describes an error that occurred when disabling fast snapshot restores.</p>")
type disableFastSnapshotRestoreStateError = {
  @ocaml.doc("<p>The error message.</p>") @as("Message") message: option<string_>,
  @ocaml.doc("<p>The error code.</p>") @as("Code") code: option<string_>,
}
@ocaml.doc("<p>Describes the Active Directory to be used for client authentication.</p>")
type directoryServiceAuthenticationRequest = {
  @ocaml.doc("<p>The ID of the Active Directory to be used for authentication.</p>")
  @as("DirectoryId")
  directoryId: option<string_>,
}
@ocaml.doc("<p>Describes an Active Directory.</p>")
type directoryServiceAuthentication = {
  @ocaml.doc("<p>The ID of the Active Directory used for authentication.</p>") @as("DirectoryId")
  directoryId: option<string_>,
}
type dhcpOptionsIdStringList = array<dhcpOptionsId>
@ocaml.doc("<p>Describes the destination options for a flow log.</p>")
type destinationOptionsResponse = {
  @ocaml.doc("<p>Indicates whether to partition the flow log per hour.</p>") @as("PerHourPartition")
  perHourPartition: option<boolean_>,
  @ocaml.doc(
    "<p>Indicates whether to use Hive-compatible prefixes for flow logs stored in Amazon S3.</p>"
  )
  @as("HiveCompatiblePartitions")
  hiveCompatiblePartitions: option<boolean_>,
  @ocaml.doc("<p>The format for the flow log.</p>") @as("FileFormat")
  fileFormat: option<destinationFileFormat>,
}
@ocaml.doc("<p>Describes the destination options for a flow log.</p>")
type destinationOptionsRequest = {
  @ocaml.doc("<p>Indicates whether to partition the flow log per hour. This reduces the cost and response 
            time for queries. The default is <code>false</code>.</p>")
  @as("PerHourPartition")
  perHourPartition: option<boolean_>,
  @ocaml.doc("<p>Indicates whether to use Hive-compatible prefixes for flow logs stored in Amazon S3.
            The default is <code>false</code>.</p>")
  @as("HiveCompatiblePartitions")
  hiveCompatiblePartitions: option<boolean_>,
  @ocaml.doc("<p>The format for the flow log. The default is <code>plain-text</code>.</p>")
  @as("FileFormat")
  fileFormat: option<destinationFileFormat>,
}
@ocaml.doc("<p>Describes fast snapshot restores for a snapshot.</p>")
type describeFastSnapshotRestoreSuccessItem = {
  @ocaml.doc(
    "<p>The time at which fast snapshot restores entered the <code>disabled</code> state.</p>"
  )
  @as("DisabledTime")
  disabledTime: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>The time at which fast snapshot restores entered the <code>disabling</code> state.</p>"
  )
  @as("DisablingTime")
  disablingTime: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>The time at which fast snapshot restores entered the <code>enabled</code> state.</p>"
  )
  @as("EnabledTime")
  enabledTime: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>The time at which fast snapshot restores entered the <code>optimizing</code> state.</p>"
  )
  @as("OptimizingTime")
  optimizingTime: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>The time at which fast snapshot restores entered the <code>enabling</code> state.</p>"
  )
  @as("EnablingTime")
  enablingTime: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>The Amazon Web Services owner alias that enabled fast snapshot restores on the snapshot. This is intended for future use.</p>"
  )
  @as("OwnerAlias")
  ownerAlias: option<string_>,
  @ocaml.doc(
    "<p>The ID of the Amazon Web Services account that enabled fast snapshot restores on the snapshot.</p>"
  )
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The reason for the state transition. The possible values are as follows:</p>
         <ul>
            <li>
               <p>
                  <code>Client.UserInitiated</code> - The state successfully transitioned to <code>enabling</code> or
          <code>disabling</code>.</p>
            </li>
            <li>
               <p>
                  <code>Client.UserInitiated - Lifecycle state transition</code> - The state successfully transitioned 
          to <code>optimizing</code>, <code>enabled</code>, or <code>disabled</code>.</p>
            </li>
         </ul>")
  @as("StateTransitionReason")
  stateTransitionReason: option<string_>,
  @ocaml.doc("<p>The state of fast snapshot restores.</p>") @as("State")
  state: option<fastSnapshotRestoreStateCode>,
  @ocaml.doc("<p>The Availability Zone.</p>") @as("AvailabilityZone")
  availabilityZone: option<string_>,
  @ocaml.doc("<p>The ID of the snapshot.</p>") @as("SnapshotId") snapshotId: option<string_>,
}
type deprovisionedAddressSet = array<string_>
type deleteQueuedReservedInstancesIdList = array<reservationId>
@ocaml.doc(
  "<p>Describes the error for a Reserved Instance whose queued purchase could not be deleted.</p>"
)
type deleteQueuedReservedInstancesError = {
  @ocaml.doc("<p>The error message.</p>") @as("Message") message: option<string_>,
  @ocaml.doc("<p>The error code.</p>") @as("Code")
  code: option<deleteQueuedReservedInstancesErrorCode>,
}
@ocaml.doc("<p>Describes a launch template version that was successfully deleted.</p>")
type deleteLaunchTemplateVersionsResponseSuccessItem = {
  @ocaml.doc("<p>The version number of the launch template.</p>") @as("VersionNumber")
  versionNumber: option<long>,
  @ocaml.doc("<p>The name of the launch template.</p>") @as("LaunchTemplateName")
  launchTemplateName: option<string_>,
  @ocaml.doc("<p>The ID of the launch template.</p>") @as("LaunchTemplateId")
  launchTemplateId: option<string_>,
}
@ocaml.doc("<p>Describes an EC2 Fleet that was successfully deleted.</p>")
type deleteFleetSuccessItem = {
  @ocaml.doc("<p>The ID of the EC2 Fleet.</p>") @as("FleetId") fleetId: option<fleetId>,
  @ocaml.doc("<p>The previous state of the EC2 Fleet.</p>") @as("PreviousFleetState")
  previousFleetState: option<fleetStateCode>,
  @ocaml.doc("<p>The current state of the EC2 Fleet.</p>") @as("CurrentFleetState")
  currentFleetState: option<fleetStateCode>,
}
@ocaml.doc("<p>Describes an EC2 Fleet error.</p>")
type deleteFleetError = {
  @ocaml.doc("<p>The description for the error code.</p>") @as("Message") message: option<string_>,
  @ocaml.doc("<p>The error code.</p>") @as("Code") code: option<deleteFleetErrorCode>,
}
type dedicatedHostIdList = array<dedicatedHostId>
type customerGatewayIdStringList = array<customerGatewayId>
@ocaml.doc("<p>The credit option for CPU usage of a T2, T3, or T3a instance.</p>")
type creditSpecificationRequest = {
  @ocaml.doc("<p>The credit option for CPU usage of a T2, T3, or T3a instance. Valid values are
                <code>standard</code> and <code>unlimited</code>.</p>")
  @as("CpuCredits")
  cpuCredits: string_,
}
@ocaml.doc("<p>Describes the credit option for CPU usage of a T2, T3, or T3a instance.</p>")
type creditSpecification = {
  @ocaml.doc("<p>The credit option for CPU usage of a T2, T3, or T3a instance. Valid values are
                <code>standard</code> and <code>unlimited</code>.</p>")
  @as("CpuCredits")
  cpuCredits: option<string_>,
}
@ocaml.doc("<p>Describes the user or group to be added or removed from the list of create volume
      permissions for a volume.</p>")
type createVolumePermission = {
  @ocaml.doc("<p>The ID of the Amazon Web Services account to be added or removed.</p>")
  @as("UserId")
  userId: option<string_>,
  @ocaml.doc("<p>The group to be added or removed. The possible value is <code>all</code>.</p>")
  @as("Group")
  group: option<permissionGroup>,
}
@ocaml.doc("<p>Describes the options for a VPC attachment.</p>")
type createTransitGatewayVpcAttachmentRequestOptions = {
  @ocaml.doc(
    "<p>Enable or disable support for appliance mode. If enabled, a traffic flow between a source and destination uses the same Availability Zone for the VPC attachment for the lifetime of that flow. The default is <code>disable</code>.</p>"
  )
  @as("ApplianceModeSupport")
  applianceModeSupport: option<applianceModeSupportValue>,
  @ocaml.doc("<p>Enable or disable IPv6 support.  The default is <code>disable</code>.</p>")
  @as("Ipv6Support")
  ipv6Support: option<ipv6SupportValue>,
  @ocaml.doc("<p>Enable or disable DNS support. The default is <code>enable</code>.</p>")
  @as("DnsSupport")
  dnsSupport: option<dnsSupportValue>,
}
@ocaml.doc("<p>The options for the transit gateway multicast domain.</p>")
type createTransitGatewayMulticastDomainRequestOptions = {
  @ocaml.doc(
    "<p>Indicates whether to automatically accept cross-account subnet associations that are associated with the transit gateway multicast domain.</p>"
  )
  @as("AutoAcceptSharedAssociations")
  autoAcceptSharedAssociations: option<autoAcceptSharedAssociationsValue>,
  @ocaml.doc(
    "<p>Specify whether to enable support for statically configuring multicast group sources for a domain.</p>"
  )
  @as("StaticSourcesSupport")
  staticSourcesSupport: option<staticSourcesSupportValue>,
  @ocaml.doc(
    "<p>Specify whether to enable Internet Group Management Protocol (IGMP) version 2 for the transit gateway multicast domain.</p>"
  )
  @as("Igmpv2Support")
  igmpv2Support: option<igmpv2SupportValue>,
}
@ocaml.doc("<p>The options for a Connect attachment.</p>")
type createTransitGatewayConnectRequestOptions = {
  @ocaml.doc("<p>The tunnel protocol.</p>") @as("Protocol") protocol: protocolValue,
}
@ocaml.doc("<p>The CPU options for the instance. Both the core count and threads per core must be
            specified in the request.</p>")
type cpuOptionsRequest = {
  @ocaml.doc("<p>The number of threads per CPU core. To disable multithreading for the instance,
            specify a value of <code>1</code>. Otherwise, specify the default value of
                <code>2</code>.</p>")
  @as("ThreadsPerCore")
  threadsPerCore: option<integer_>,
  @ocaml.doc("<p>The number of CPU cores for the instance.</p>") @as("CoreCount")
  coreCount: option<integer_>,
}
@ocaml.doc("<p>The CPU options for the instance.</p>")
type cpuOptions = {
  @ocaml.doc("<p>The number of threads per CPU core.</p>") @as("ThreadsPerCore")
  threadsPerCore: option<integer_>,
  @ocaml.doc("<p>The number of CPU cores for the instance.</p>") @as("CoreCount")
  coreCount: option<integer_>,
}
type cpuManufacturerSet = array<cpuManufacturer>
type coreCountList = array<coreCount>
type conversionIdStringList = array<conversionTaskId>
type connectionNotificationIdsList = array<connectionNotificationId>
@ocaml.doc(
  "<p>Information about the client connection logging options for a Client VPN endpoint.</p>"
)
type connectionLogResponseOptions = {
  @ocaml.doc(
    "<p>The name of the Amazon CloudWatch Logs log stream to which connection logging data is published.</p>"
  )
  @as("CloudwatchLogStream")
  cloudwatchLogStream: option<string_>,
  @ocaml.doc(
    "<p>The name of the Amazon CloudWatch Logs log group to which connection logging data is published.</p>"
  )
  @as("CloudwatchLogGroup")
  cloudwatchLogGroup: option<string_>,
  @ocaml.doc(
    "<p>Indicates whether client connection logging is enabled for the Client VPN endpoint.</p>"
  )
  @as("Enabled")
  enabled: option<boolean_>,
}
@ocaml.doc("<p>Describes the client connection logging options for the Client VPN endpoint.</p>")
type connectionLogOptions = {
  @ocaml.doc(
    "<p>The name of the CloudWatch Logs log stream to which the connection data is published.</p>"
  )
  @as("CloudwatchLogStream")
  cloudwatchLogStream: option<string_>,
  @ocaml.doc(
    "<p>The name of the CloudWatch Logs log group. Required if connection logging is enabled.</p>"
  )
  @as("CloudwatchLogGroup")
  cloudwatchLogGroup: option<string_>,
  @ocaml.doc("<p>Indicates whether connection logging is enabled.</p>") @as("Enabled")
  enabled: option<boolean_>,
}
type coipPoolIdSet = array<ipv4PoolCoipId>
@ocaml.doc("<p>Describes address usage for a customer-owned address pool.</p>")
type coipAddressUsage = {
  @ocaml.doc("<p>The customer-owned IP address.</p>") @as("CoIp") coIp: option<string_>,
  @ocaml.doc("<p>The Amazon Web Services service.</p>") @as("AwsService")
  awsService: option<string_>,
  @ocaml.doc("<p>The Amazon Web Services account ID.</p>") @as("AwsAccountId")
  awsAccountId: option<string_>,
  @ocaml.doc("<p>The allocation ID of the address.</p>") @as("AllocationId")
  allocationId: option<string_>,
}
type clientVpnSecurityGroupIdSet = array<securityGroupId>
@ocaml.doc("<p>Describes the state of a Client VPN endpoint route.</p>")
type clientVpnRouteStatus = {
  @ocaml.doc("<p>A message about the status of the Client VPN endpoint route, if applicable.</p>")
  @as("Message")
  message: option<string_>,
  @ocaml.doc("<p>The state of the Client VPN endpoint route.</p>") @as("Code")
  code: option<clientVpnRouteStatusCode>,
}
@ocaml.doc("<p>Describes the state of a Client VPN endpoint.</p>")
type clientVpnEndpointStatus = {
  @ocaml.doc("<p>A message about the status of the Client VPN endpoint.</p>") @as("Message")
  message: option<string_>,
  @ocaml.doc("<p>The state of the Client VPN endpoint. Possible states include:</p>
		       <ul>
            <li>
				           <p>
                  <code>pending-associate</code> - The Client VPN endpoint has been created but no target networks 
					have been associated. The Client VPN endpoint cannot accept connections.</p>
			         </li>
            <li>
				           <p>
                  <code>available</code> - The Client VPN endpoint has been created and a target network has been
					associated. The Client VPN endpoint can accept connections.</p>
			         </li>
            <li>
				           <p>
                  <code>deleting</code> - The Client VPN endpoint is being deleted. The Client VPN endpoint cannot accept
					connections.</p>
            </li>
            <li>
				           <p>
                  <code>deleted</code> - The Client VPN endpoint has been deleted. The Client VPN endpoint cannot accept
					connections.</p>
			         </li>
         </ul>")
  @as("Code")
  code: option<clientVpnEndpointStatusCode>,
}
type clientVpnEndpointIdList = array<clientVpnEndpointId>
@ocaml.doc("<p>Describes the status of the Client VPN endpoint attribute.</p>")
type clientVpnEndpointAttributeStatus = {
  @ocaml.doc("<p>The status message.</p>") @as("Message") message: option<string_>,
  @ocaml.doc("<p>The status code.</p>") @as("Code")
  code: option<clientVpnEndpointAttributeStatusCode>,
}
@ocaml.doc("<p>Describes the status of a client connection.</p>")
type clientVpnConnectionStatus = {
  @ocaml.doc("<p>A message about the status of the client connection, if applicable.</p>")
  @as("Message")
  message: option<string_>,
  @ocaml.doc("<p>The state of the client connection.</p>") @as("Code")
  code: option<clientVpnConnectionStatusCode>,
}
@ocaml.doc("<p>Describes the state of an authorization rule.</p>")
type clientVpnAuthorizationRuleStatus = {
  @ocaml.doc("<p>A message about the status of the authorization rule, if applicable.</p>")
  @as("Message")
  message: option<string_>,
  @ocaml.doc("<p>The state of the authorization rule.</p>") @as("Code")
  code: option<clientVpnAuthorizationRuleStatusCode>,
}
@ocaml.doc("<p>Current state of options for customizable text banner that will be displayed on
			Amazon Web Services provided clients when a VPN session is established.</p>")
type clientLoginBannerResponseOptions = {
  @ocaml.doc("<p>Customizable text that will be displayed in a banner on Amazon Web Services provided
			clients when a VPN session is established. UTF-8 encoded
			characters only. Maximum of 1400 characters.</p>")
  @as("BannerText")
  bannerText: option<string_>,
  @ocaml.doc("<p>Current state of text banner feature.</p>
		       <p>Valid values: <code>true | false</code>
         </p>")
  @as("Enabled")
  enabled: option<boolean_>,
}
@ocaml.doc("<p>Options for enabling a customizable text banner that will be displayed on
			Amazon Web Services provided clients when a VPN session is established.</p>")
type clientLoginBannerOptions = {
  @ocaml.doc("<p>Customizable text that will be displayed in a banner on Amazon Web Services provided
			clients when a VPN session is established. UTF-8 encoded characters only. Maximum of
			1400 characters.</p>")
  @as("BannerText")
  bannerText: option<string_>,
  @ocaml.doc("<p>Enable or disable a customizable text banner that will be displayed on
			Amazon Web Services provided clients when a VPN session is established.</p>
		       <p>Valid values: <code>true | false</code>
         </p>
		       <p>Default value: <code>false</code>
         </p>")
  @as("Enabled")
  enabled: option<boolean_>,
}
@ocaml.doc("<p>Describes the client-specific data.</p>")
type clientData = {
  @ocaml.doc("<p>The time that the disk upload starts.</p>") @as("UploadStart")
  uploadStart: option<dateTime>,
  @ocaml.doc("<p>The size of the uploaded disk image, in GiB.</p>") @as("UploadSize")
  uploadSize: option<double>,
  @ocaml.doc("<p>The time that the disk upload ends.</p>") @as("UploadEnd")
  uploadEnd: option<dateTime>,
  @ocaml.doc("<p>A user-defined comment about the disk upload.</p>") @as("Comment")
  comment: option<string_>,
}
@ocaml.doc("<p>The options for managing connection authorization for new client connections.</p>")
type clientConnectOptions = {
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the Lambda function used for connection authorization.</p>"
  )
  @as("LambdaFunctionArn")
  lambdaFunctionArn: option<string_>,
  @ocaml.doc(
    "<p>Indicates whether client connect options are enabled. The default is <code>false</code> (not enabled).</p>"
  )
  @as("Enabled")
  enabled: option<boolean_>,
}
@ocaml.doc("<p>Describes the state of a client certificate revocation list.</p>")
type clientCertificateRevocationListStatus = {
  @ocaml.doc(
    "<p>A message about the status of the client certificate revocation list, if applicable.</p>"
  )
  @as("Message")
  message: option<string_>,
  @ocaml.doc("<p>The state of the client certificate revocation list.</p>") @as("Code")
  code: option<clientCertificateRevocationListStatusCode>,
}
@ocaml.doc("<p>Describes a Classic Load Balancer.</p>")
type classicLoadBalancer = {
  @ocaml.doc("<p>The name of the load balancer.</p>") @as("Name") name: option<string_>,
}
@ocaml.doc("<p>Describes the ClassicLink DNS support status of a VPC.</p>")
type classicLinkDnsSupport = {
  @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<string_>,
  @ocaml.doc("<p>Indicates whether ClassicLink DNS support is enabled for the VPC.</p>")
  @as("ClassicLinkDnsSupported")
  classicLinkDnsSupported: option<boolean_>,
}
@ocaml.doc("<p>Describes an IPv4 CIDR block.</p>")
type cidrBlock = {
  @ocaml.doc("<p>The IPv4 CIDR block.</p>") @as("CidrBlock") cidrBlock: option<string_>,
}
@ocaml.doc("<p>Provides authorization for Amazon to bring a specific IP address range to a specific
          Amazon Web Services account using bring your own IP addresses (BYOIP). For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html#prepare-for-byoip\">Configuring your BYOIP address range</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
type cidrAuthorizationContext = {
  @ocaml.doc("<p>The signed authorization message for the prefix and account.</p>") @as("Signature")
  signature: string_,
  @ocaml.doc("<p>The plain-text authorization message for the prefix and account.</p>")
  @as("Message")
  message: string_,
}
@ocaml.doc("<p>Information about the client certificate to be used for authentication.</p>")
type certificateAuthenticationRequest = {
  @ocaml.doc("<p>The ARN of the client certificate. The certificate must be signed by a certificate 
			authority (CA) and it must be provisioned in Certificate Manager (ACM).</p>")
  @as("ClientRootCertificateChainArn")
  clientRootCertificateChainArn: option<string_>,
}
@ocaml.doc("<p>Information about the client certificate used for authentication.</p>")
type certificateAuthentication = {
  @ocaml.doc("<p>The ARN of the client certificate. </p>") @as("ClientRootCertificateChain")
  clientRootCertificateChain: option<string_>,
}
type carrierGatewayIdSet = array<carrierGatewayId>
@ocaml.doc("<p>Describes a target Capacity Reservation or Capacity Reservation group.</p>")
type capacityReservationTargetResponse = {
  @ocaml.doc("<p>The ARN of the targeted Capacity Reservation group.</p>")
  @as("CapacityReservationResourceGroupArn")
  capacityReservationResourceGroupArn: option<string_>,
  @ocaml.doc("<p>The ID of the targeted Capacity Reservation.</p>") @as("CapacityReservationId")
  capacityReservationId: option<string_>,
}
@ocaml.doc("<p>Describes a target Capacity Reservation or Capacity Reservation group.</p>")
type capacityReservationTarget = {
  @ocaml.doc(
    "<p>The ARN of the Capacity Reservation resource group in which to run the instance.</p>"
  )
  @as("CapacityReservationResourceGroupArn")
  capacityReservationResourceGroupArn: option<string_>,
  @ocaml.doc("<p>The ID of the Capacity Reservation in which to run the instance.</p>")
  @as("CapacityReservationId")
  capacityReservationId: option<capacityReservationId>,
}
@ocaml.doc("<p>Describes the strategy for using unused Capacity Reservations for fulfilling On-Demand
         capacity.</p>
         <note>
            <p>This strategy can only be used if the EC2 Fleet is of type <code>instant</code>.</p>
         </note>
         <p>For more information about Capacity Reservations, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html\">On-Demand Capacity
            Reservations</a> in the <i>Amazon EC2 User Guide</i>. For examples of using
         Capacity Reservations in an EC2 Fleet, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-examples.html\">EC2 Fleet example
            configurations</a> in the <i>Amazon EC2 User Guide</i>.</p>")
type capacityReservationOptionsRequest = {
  @ocaml.doc("<p>Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity.</p>
         <p>If you specify <code>use-capacity-reservations-first</code>, the fleet uses unused
         Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If
         multiple instance pools have unused Capacity Reservations, the On-Demand allocation
         strategy (<code>lowest-price</code> or <code>prioritized</code>) is applied. If the number
         of unused Capacity Reservations is less than the On-Demand target capacity, the remaining
         On-Demand target capacity is launched according to the On-Demand allocation strategy
            (<code>lowest-price</code> or <code>prioritized</code>).</p>
         <p>If you do not specify a value, the fleet fulfils the On-Demand capacity according to the
         chosen On-Demand allocation strategy.</p>")
  @as("UsageStrategy")
  usageStrategy: option<fleetCapacityReservationUsageStrategy>,
}
@ocaml.doc("<p>Describes the strategy for using unused Capacity Reservations for fulfilling On-Demand
         capacity.</p>
         <note>
            <p>This strategy can only be used if the EC2 Fleet is of type
            <code>instant</code>.</p>
         </note>
         <p>For more information about Capacity Reservations, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html\">On-Demand Capacity
            Reservations</a> in the <i>Amazon EC2 User Guide</i>. For examples of using
         Capacity Reservations in an EC2 Fleet, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-examples.html\">EC2 Fleet example
            configurations</a> in the <i>Amazon EC2 User Guide</i>.</p>")
type capacityReservationOptions = {
  @ocaml.doc("<p>Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity.</p>
         <p>If you specify <code>use-capacity-reservations-first</code>, the fleet uses unused
         Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If
         multiple instance pools have unused Capacity Reservations, the On-Demand allocation
         strategy (<code>lowest-price</code> or <code>prioritized</code>) is applied. If the number
         of unused Capacity Reservations is less than the On-Demand target capacity, the remaining
         On-Demand target capacity is launched according to the On-Demand allocation strategy
            (<code>lowest-price</code> or <code>prioritized</code>).</p>
         <p>If you do not specify a value, the fleet fulfils the On-Demand capacity according to the
         chosen On-Demand allocation strategy.</p>")
  @as("UsageStrategy")
  usageStrategy: option<fleetCapacityReservationUsageStrategy>,
}
type capacityReservationIdSet = array<capacityReservationId>
@ocaml.doc("<p>Describes a resource group to which a Capacity Reservation has been added.</p>")
type capacityReservationGroup = {
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the resource group.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The ARN of the resource group.</p>") @as("GroupArn") groupArn: option<string_>,
}
type capacityReservationFleetIdSet = array<capacityReservationFleetId>
@ocaml.doc("<p>Describes a Capacity Reservation Fleet that was successfully cancelled.</p>")
type capacityReservationFleetCancellationState = {
  @ocaml.doc("<p>The ID of the Capacity Reservation Fleet that was successfully cancelled.</p>")
  @as("CapacityReservationFleetId")
  capacityReservationFleetId: option<capacityReservationFleetId>,
  @ocaml.doc("<p>The previous state of the Capacity Reservation Fleet.</p>")
  @as("PreviousFleetState")
  previousFleetState: option<capacityReservationFleetState>,
  @ocaml.doc("<p>The current state of the Capacity Reservation Fleet.</p>") @as("CurrentFleetState")
  currentFleetState: option<capacityReservationFleetState>,
}
@ocaml.doc("<p>Describes a request to cancel a Spot Instance.</p>")
type cancelledSpotInstanceRequest = {
  @ocaml.doc("<p>The state of the Spot Instance request.</p>") @as("State")
  state: option<cancelSpotInstanceRequestState>,
  @ocaml.doc("<p>The ID of the Spot Instance request.</p>") @as("SpotInstanceRequestId")
  spotInstanceRequestId: option<string_>,
}
@ocaml.doc("<p>Describes a Spot Fleet request that was successfully canceled.</p>")
type cancelSpotFleetRequestsSuccessItem = {
  @ocaml.doc("<p>The ID of the Spot Fleet request.</p>") @as("SpotFleetRequestId")
  spotFleetRequestId: option<string_>,
  @ocaml.doc("<p>The previous state of the Spot Fleet request.</p>")
  @as("PreviousSpotFleetRequestState")
  previousSpotFleetRequestState: option<batchState>,
  @ocaml.doc("<p>The current state of the Spot Fleet request.</p>")
  @as("CurrentSpotFleetRequestState")
  currentSpotFleetRequestState: option<batchState>,
}
@ocaml.doc("<p>Describes a Spot Fleet error.</p>")
type cancelSpotFleetRequestsError = {
  @ocaml.doc("<p>The description for the error code.</p>") @as("Message") message: option<string_>,
  @ocaml.doc("<p>The error code.</p>") @as("Code") code: option<cancelBatchErrorCode>,
}
@ocaml.doc("<p>Describes a Capacity Reservation Fleet cancellation error.</p>")
type cancelCapacityReservationFleetError = {
  @ocaml.doc("<p>The error message.</p>") @as("Message")
  message: option<cancelCapacityReservationFleetErrorMessage>,
  @ocaml.doc("<p>The error code.</p>") @as("Code")
  code: option<cancelCapacityReservationFleetErrorCode>,
}
@ocaml.doc("<p>Information about an address range that is provisioned for use with your Amazon Web Services resources 
         through bring your own IP addresses (BYOIP).</p>")
type byoipCidr = {
  @ocaml.doc("<p>The state of the address pool.</p>") @as("State") state: option<byoipCidrState>,
  @ocaml.doc(
    "<p>Upon success, contains the ID of the address pool. Otherwise, contains an error message.</p>"
  )
  @as("StatusMessage")
  statusMessage: option<string_>,
  @ocaml.doc("<p>The description of the address range.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The address range, in CIDR notation.</p>") @as("Cidr") cidr: option<string_>,
}
@ocaml.doc("<p>Describes an error for <a>BundleInstance</a>.</p>")
type bundleTaskError = {
  @ocaml.doc("<p>The error message.</p>") @as("Message") message: option<string_>,
  @ocaml.doc("<p>The error code.</p>") @as("Code") code: option<string_>,
}
type bundleIdStringList = array<bundleId>
type bootModeTypeList = array<bootModeType>
type blobAttributeValue = {@as("Value") value: option<blob>}
type billingProductList = array<string_>
@ocaml.doc("<p>The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps. For more information, see
            <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html\">Amazon
            EBS–optimized instances</a> in the <i>Amazon EC2 User Guide</i>.</p>")
type baselineEbsBandwidthMbpsRequest = {
  @ocaml.doc("<p>The maximum baseline bandwidth, in Mbps. To specify no maximum limit, omit
         this parameter.</p>")
  @as("Max")
  max: option<integer_>,
  @ocaml.doc("<p>The minimum baseline bandwidth, in Mbps. To specify no minimum limit, omit
         this parameter.</p>")
  @as("Min")
  min: option<integer_>,
}
@ocaml.doc("<p>The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps. For more information, see
            <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html\">Amazon
            EBS–optimized instances</a> in the <i>Amazon EC2 User Guide</i>.</p>")
type baselineEbsBandwidthMbps = {
  @ocaml.doc("<p>The maximum baseline bandwidth, in Mbps. If this parameter is not specified, there is no
         maximum limit.</p>")
  @as("Max")
  max: option<integer_>,
  @ocaml.doc("<p>The minimum baseline bandwidth, in Mbps. If this parameter is not specified, there is no
         minimum limit.</p>")
  @as("Min")
  min: option<integer_>,
}
type availabilityZoneStringList = array<string_>
@ocaml.doc("<p>Describes a message about an Availability Zone, Local Zone, or Wavelength Zone.</p>")
type availabilityZoneMessage = {
  @ocaml.doc("<p>The message about the Availability Zone, Local Zone, or Wavelength Zone.</p>")
  @as("Message")
  message: option<string_>,
}
@ocaml.doc("<p>Describes a value for a resource attribute that is a String.</p>")
type attributeValue = {
  @ocaml.doc("<p>The attribute value. The value is case-sensitive.</p>") @as("Value")
  value: option<string_>,
}
@ocaml.doc("<p>Describes a value for a resource attribute that is a Boolean value.</p>")
type attributeBooleanValue = {
  @ocaml.doc(
    "<p>The attribute value. The valid values are <code>true</code> or <code>false</code>.</p>"
  )
  @as("Value")
  value: option<boolean_>,
}
@ocaml.doc("<p>Describes integration options for Amazon Athena.</p>")
type athenaIntegration = {
  @ocaml.doc("<p>The end date for the partition.</p>") @as("PartitionEndDate")
  partitionEndDate: option<millisecondDateTime>,
  @ocaml.doc("<p>The start date for the partition.</p>") @as("PartitionStartDate")
  partitionStartDate: option<millisecondDateTime>,
  @ocaml.doc("<p>The schedule for adding new partitions to the table.</p>")
  @as("PartitionLoadFrequency")
  partitionLoadFrequency: partitionLoadFrequency,
  @ocaml.doc("<p>The location in Amazon S3 to store the generated CloudFormation template.</p>")
  @as("IntegrationResultS3DestinationArn")
  integrationResultS3DestinationArn: string_,
}
@ocaml.doc("<p>Describes the state of a target network association.</p>")
type associationStatus = {
  @ocaml.doc("<p>A message about the status of the target network association, if applicable.</p>")
  @as("Message")
  message: option<string_>,
  @ocaml.doc("<p>The state of the target network association.</p>") @as("Code")
  code: option<associationStatusCode>,
}
type associationIdList = array<iamInstanceProfileAssociationId>
@ocaml.doc(
  "<p>Describes a target network that is associated with a Client VPN endpoint. A target network is a subnet in a VPC.</p>"
)
type associatedTargetNetwork = {
  @ocaml.doc("<p>The target network type.</p>") @as("NetworkType")
  networkType: option<associatedNetworkType>,
  @ocaml.doc("<p>The ID of the subnet.</p>") @as("NetworkId") networkId: option<string_>,
}
@ocaml.doc("<p>Information about the associated IAM roles.</p>")
type associatedRole = {
  @ocaml.doc("<p>The ID of the KMS customer master key (CMK) used to encrypt the private key.</p>")
  @as("EncryptionKmsKeyId")
  encryptionKmsKeyId: option<string_>,
  @ocaml.doc("<p>The key of the Amazon S3 object ey where the certificate, certificate chain, and encrypted private key bundle 
			is stored. The object key is formated as follows:  <code>role_arn</code>/<code>certificate_arn</code>.
		</p>")
  @as("CertificateS3ObjectKey")
  certificateS3ObjectKey: option<string_>,
  @ocaml.doc("<p>The name of the Amazon S3 bucket in which the Amazon S3 object is stored.</p>")
  @as("CertificateS3BucketName")
  certificateS3BucketName: option<string_>,
  @ocaml.doc("<p>The ARN of the associated IAM role.</p>") @as("AssociatedRoleArn")
  associatedRoleArn: option<resourceArn>,
}
@ocaml.doc("<p>Describes the private IP addresses assigned to a network interface.</p>")
type assignedPrivateIpAddress = {
  @ocaml.doc("<p>The private IP address assigned to the network interface.</p>")
  @as("PrivateIpAddress")
  privateIpAddress: option<string_>,
}
type arnList = array<resourceArn>
type architectureTypeSet = array<architectureType>
type architectureTypeList = array<architectureType>
@ocaml.doc("<p>Describes a route table route.</p>")
type analysisRouteTableRoute = {
  @ocaml.doc("<p>The ID of a VPC peering connection.</p>") @as("VpcPeeringConnectionId")
  vpcPeeringConnectionId: option<string_>,
  @ocaml.doc("<p>The ID of a transit gateway.</p>") @as("TransitGatewayId")
  transitGatewayId: option<string_>,
  @ocaml.doc("<p>Describes how the route was created. The following are the possible values:</p>
         <ul>
            <li>
               <p>CreateRouteTable - The route was automatically created when the route table was created.</p>
            </li>
            <li>
               <p>CreateRoute - The route was manually added to the route table.</p>
            </li>
            <li>
               <p>EnableVgwRoutePropagation - The route was propagated by route propagation.</p>
            </li>
         </ul>")
  @as("Origin")
  origin: option<string_>,
  @ocaml.doc("<p>The ID of a network interface.</p>") @as("NetworkInterfaceId")
  networkInterfaceId: option<string_>,
  @ocaml.doc("<p>The ID of a NAT gateway.</p>") @as("NatGatewayId") natGatewayId: option<string_>,
  @ocaml.doc("<p>The ID of the instance, such as a NAT instance.</p>") @as("InstanceId")
  instanceId: option<string_>,
  @ocaml.doc(
    "<p>The ID of the gateway, such as an internet gateway or virtual private gateway.</p>"
  )
  @as("GatewayId")
  gatewayId: option<string_>,
  @ocaml.doc("<p>The ID of an egress-only internet gateway.</p>") @as("EgressOnlyInternetGatewayId")
  egressOnlyInternetGatewayId: option<string_>,
  @ocaml.doc("<p>The prefix of the Amazon Web Service.</p>") @as("DestinationPrefixListId")
  destinationPrefixListId: option<string_>,
  @ocaml.doc("<p>The destination IPv4 address, in CIDR notation.</p>") @as("DestinationCidr")
  destinationCidr: option<string_>,
}
@ocaml.doc("<p>Describes a load balancer listener.</p>")
type analysisLoadBalancerListener = {
  @ocaml.doc("<p>[Classic Load Balancers] The back-end port for the listener.</p>")
  @as("InstancePort")
  instancePort: option<port>,
  @ocaml.doc("<p>The port on which the load balancer is listening.</p>") @as("LoadBalancerPort")
  loadBalancerPort: option<port>,
}
@ocaml.doc("<p>Describes a path component.</p>")
type analysisComponent = {
  @ocaml.doc("<p>The name of the analysis component.</p>") @as("Name") name: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the component.</p>") @as("Arn")
  arn: option<string_>,
  @ocaml.doc("<p>The ID of the component.</p>") @as("Id") id: option<string_>,
}
@ocaml.doc("<p>Describes an potential intermediate component of a feasible path.</p>")
type alternatePathHint = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the component.</p>") @as("ComponentArn")
  componentArn: option<string_>,
  @ocaml.doc("<p>The ID of the component.</p>") @as("ComponentId") componentId: option<string_>,
}
@ocaml.doc("<p>Describes a principal.</p>")
type allowedPrincipal = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the principal.</p>") @as("Principal")
  principal: option<string_>,
  @ocaml.doc("<p>The type of principal.</p>") @as("PrincipalType")
  principalType: option<principalType>,
}
type allocationIds = array<allocationId>
type allocationIdList = array<allocationId>
@ocaml.doc("<p>An entry for a prefix list.</p>")
type addPrefixListEntry = {
  @ocaml.doc("<p>A description for the entry.</p>
        <p>Constraints: Up to 255 characters in length.</p>")
  @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The CIDR block.</p>") @as("Cidr") cidr: string_,
}
@ocaml.doc("<p>Add an operating Region to an IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only
         discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.</p>
         <p>For more information about operating Regions, see <a href=\"/vpc/latest/ipam/create-ipam.html\">Create an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
      </p>")
type addIpamOperatingRegion = {
  @ocaml.doc("<p>The name of the operating Region.</p>") @as("RegionName")
  regionName: option<string_>,
}
@ocaml.doc("<p>Describes a running instance in a Spot Fleet.</p>")
type activeInstance = {
  @ocaml.doc("<p>The health status of the instance. If the status of either the instance status check
            or the system status check is <code>impaired</code>, the health status of the instance
            is <code>unhealthy</code>. Otherwise, the health status is <code>healthy</code>.</p>")
  @as("InstanceHealth")
  instanceHealth: option<instanceHealthStatus>,
  @ocaml.doc("<p>The ID of the Spot Instance request.</p>") @as("SpotInstanceRequestId")
  spotInstanceRequestId: option<string_>,
  @ocaml.doc("<p>The instance type.</p>") @as("InstanceType") instanceType: option<string_>,
  @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<string_>,
}
@ocaml.doc("<p>Describes a value of an account attribute.</p>")
type accountAttributeValue = {
  @ocaml.doc("<p>The value of the attribute.</p>") @as("AttributeValue")
  attributeValue: option<string_>,
}
type accountAttributeNameStringList = array<accountAttributeName>
type acceleratorTypeSet = array<acceleratorType>
@ocaml.doc("<p>The minimum and maximum amount of total accelerator memory, in MiB.</p>")
type acceleratorTotalMemoryMiBRequest = {
  @ocaml.doc("<p>The maximum amount of accelerator memory, in MiB. To specify no maximum limit, omit this
         parameter.</p>")
  @as("Max")
  max: option<integer_>,
  @ocaml.doc("<p>The minimum amount of accelerator memory, in MiB. To specify no minimum limit, omit this
         parameter.</p>")
  @as("Min")
  min: option<integer_>,
}
@ocaml.doc("<p>The minimum and maximum amount of total accelerator memory, in MiB.</p>")
type acceleratorTotalMemoryMiB = {
  @ocaml.doc("<p>The maximum amount of accelerator memory, in MiB. If this parameter is not specified,
         there is no maximum limit.</p>")
  @as("Max")
  max: option<integer_>,
  @ocaml.doc("<p>The minimum amount of accelerator memory, in MiB. If this parameter is not specified,
         there is no minimum limit.</p>")
  @as("Min")
  min: option<integer_>,
}
type acceleratorNameSet = array<acceleratorName>
type acceleratorManufacturerSet = array<acceleratorManufacturer>
@ocaml.doc("<p>The minimum and maximum number of accelerators (GPUs, FPGAs, or Amazon Web Services Inferentia chips)
         on an instance. To exclude accelerator-enabled instance types, set <code>Max</code> to
            <code>0</code>.</p>")
type acceleratorCountRequest = {
  @ocaml.doc("<p>The maximum number of accelerators. To specify no maximum limit, omit this
         parameter. To exclude accelerator-enabled instance types, set <code>Max</code> to
         <code>0</code>.</p>")
  @as("Max")
  max: option<integer_>,
  @ocaml.doc("<p>The minimum number of accelerators. To specify no minimum limit, omit this
         parameter.</p>")
  @as("Min")
  min: option<integer_>,
}
@ocaml.doc("<p>The minimum and maximum number of accelerators (GPUs, FPGAs, or Amazon Web Services Inferentia chips)
         on an instance.</p>")
type acceleratorCount = {
  @ocaml.doc("<p>The maximum number of accelerators. If this parameter is not specified, there is no
         maximum limit.</p>")
  @as("Max")
  max: option<integer_>,
  @ocaml.doc("<p>The minimum number of accelerators. If this parameter is not specified, there is no minimum
         limit.</p>")
  @as("Min")
  min: option<integer_>,
}
type vpnStaticRouteList = array<vpnStaticRoute>
type vpnConnectionDeviceTypeList = array<vpnConnectionDeviceType>
@ocaml.doc("<p>Describes an IPv6 CIDR block associated with a VPC.</p>")
type vpcIpv6CidrBlockAssociation = {
  @ocaml.doc("<p>The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.</p>")
  @as("Ipv6Pool")
  ipv6Pool: option<string_>,
  @ocaml.doc("<p>The name of the unique set of Availability Zones, Local Zones, or Wavelength Zones from
      which Amazon Web Services advertises IP addresses, for example, <code>us-east-1-wl1-bos-wlz-1</code>.</p>")
  @as("NetworkBorderGroup")
  networkBorderGroup: option<string_>,
  @ocaml.doc("<p>Information about the state of the CIDR block.</p>") @as("Ipv6CidrBlockState")
  ipv6CidrBlockState: option<vpcCidrBlockState>,
  @ocaml.doc("<p>The IPv6 CIDR block.</p>") @as("Ipv6CidrBlock") ipv6CidrBlock: option<string_>,
  @ocaml.doc("<p>The association ID for the IPv6 CIDR block.</p>") @as("AssociationId")
  associationId: option<string_>,
}
@ocaml.doc("<p>Describes an IPv4 CIDR block associated with a VPC.</p>")
type vpcCidrBlockAssociation = {
  @ocaml.doc("<p>Information about the state of the CIDR block.</p>") @as("CidrBlockState")
  cidrBlockState: option<vpcCidrBlockState>,
  @ocaml.doc("<p>The IPv4 CIDR block.</p>") @as("CidrBlock") cidrBlock: option<string_>,
  @ocaml.doc("<p>The association ID for the IPv4 CIDR block.</p>") @as("AssociationId")
  associationId: option<string_>,
}
type vpcAttachmentList = array<vpcAttachment>
type volumeStatusEventsList = array<volumeStatusEvent>
type volumeStatusDetailsList = array<volumeStatusDetails>
type volumeStatusAttachmentStatusList = array<volumeStatusAttachmentStatus>
type volumeStatusActionsList = array<volumeStatusAction>
type volumeModificationList = array<volumeModification>
type volumeAttachmentList = array<volumeAttachment>
type vgwTelemetryList = array<vgwTelemetry>
@ocaml.doc("<p>Describes the vCPU configurations for the instance type.</p>")
type vcpuInfo = {
  @ocaml.doc(
    "<p>The valid number of threads per core that can be configured for the instance type. </p>"
  )
  @as("ValidThreadsPerCore")
  validThreadsPerCore: option<threadsPerCoreList>,
  @ocaml.doc("<p>The valid number of cores that can be configured for the instance type.</p>")
  @as("ValidCores")
  validCores: option<coreCountList>,
  @ocaml.doc("<p>The default number of threads per core for the instance type.</p>")
  @as("DefaultThreadsPerCore")
  defaultThreadsPerCore: option<threadsPerCore>,
  @ocaml.doc("<p>The default number of cores for the instance type.</p>") @as("DefaultCores")
  defaultCores: option<coreCount>,
  @ocaml.doc("<p>The default number of vCPUs for the instance type.</p>") @as("DefaultVCpus")
  defaultVCpus: option<vcpuCount>,
}
type userIdGroupPairSet = array<userIdGroupPair>
type userIdGroupPairList = array<userIdGroupPair>
@ocaml.doc("<p>Information about items that were not successfully processed in a batch call.</p>")
type unsuccessfulItem = {
  @ocaml.doc("<p>The ID of the resource.</p>") @as("ResourceId") resourceId: option<string_>,
  @ocaml.doc("<p>Information about the error.</p>") @as("Error")
  error: option<unsuccessfulItemError>,
}
@ocaml.doc("<p>Describes the burstable performance instance whose credit option for CPU usage was not
            modified.</p>")
type unsuccessfulInstanceCreditSpecificationItem = {
  @ocaml.doc("<p>The applicable error for the burstable performance instance whose credit option for
            CPU usage was not modified.</p>")
  @as("Error")
  error: option<unsuccessfulInstanceCreditSpecificationItemError>,
  @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<string_>,
}
type transitGatewayRouteTablePropagationList = array<transitGatewayRouteTablePropagation>
type transitGatewayRouteTableAssociationList = array<transitGatewayRouteTableAssociation>
type transitGatewayRouteAttachmentList = array<transitGatewayRouteAttachment>
@ocaml.doc("<p>Describes the options for a transit gateway.</p>")
type transitGatewayRequestOptions = {
  @ocaml.doc(
    "<p>One or more IPv4 or IPv6 CIDR blocks for the transit gateway. Must be a size /24 CIDR block or larger for IPv4, or a size /64 CIDR block or larger for IPv6.</p>"
  )
  @as("TransitGatewayCidrBlocks")
  transitGatewayCidrBlocks: option<transitGatewayCidrBlockStringList>,
  @ocaml.doc("<p>Indicates whether multicast is enabled on the transit gateway</p>")
  @as("MulticastSupport")
  multicastSupport: option<multicastSupportValue>,
  @ocaml.doc("<p>Enable or disable DNS support. Enabled by default.</p>") @as("DnsSupport")
  dnsSupport: option<dnsSupportValue>,
  @ocaml.doc("<p>Enable or disable Equal Cost Multipath Protocol support. Enabled by default.</p>")
  @as("VpnEcmpSupport")
  vpnEcmpSupport: option<vpnEcmpSupportValue>,
  @ocaml.doc(
    "<p>Enable or disable automatic propagation of routes to the default propagation route table. Enabled by default.</p>"
  )
  @as("DefaultRouteTablePropagation")
  defaultRouteTablePropagation: option<defaultRouteTablePropagationValue>,
  @ocaml.doc(
    "<p>Enable or disable automatic association with the default association route table. Enabled by default.</p>"
  )
  @as("DefaultRouteTableAssociation")
  defaultRouteTableAssociation: option<defaultRouteTableAssociationValue>,
  @ocaml.doc(
    "<p>Enable or disable automatic acceptance of attachment requests. Disabled by default.</p>"
  )
  @as("AutoAcceptSharedAttachments")
  autoAcceptSharedAttachments: option<autoAcceptSharedAttachmentsValue>,
  @ocaml.doc("<p>A private Autonomous System Number (ASN) for the Amazon side of a BGP session. 
         The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs. The default is <code>64512</code>.</p>")
  @as("AmazonSideAsn")
  amazonSideAsn: option<long>,
}
@ocaml.doc("<p>Describes a prefix list reference.</p>")
type transitGatewayPrefixListReference = {
  @ocaml.doc("<p>Information about the transit gateway attachment.</p>")
  @as("TransitGatewayAttachment")
  transitGatewayAttachment: option<transitGatewayPrefixListAttachment>,
  @ocaml.doc("<p>Indicates whether traffic that matches this route is dropped.</p>")
  @as("Blackhole")
  blackhole: option<boolean_>,
  @ocaml.doc("<p>The state of the prefix list reference.</p>") @as("State")
  state: option<transitGatewayPrefixListReferenceState>,
  @ocaml.doc("<p>The ID of the prefix list owner.</p>") @as("PrefixListOwnerId")
  prefixListOwnerId: option<string_>,
  @ocaml.doc("<p>The ID of the prefix list.</p>") @as("PrefixListId")
  prefixListId: option<prefixListResourceId>,
  @ocaml.doc("<p>The ID of the transit gateway route table.</p>") @as("TransitGatewayRouteTableId")
  transitGatewayRouteTableId: option<transitGatewayRouteTableId>,
}
@ocaml.doc("<p>Describes the options for a transit gateway.</p>")
type transitGatewayOptions = {
  @ocaml.doc("<p>Indicates whether multicast is enabled on the transit gateway</p>")
  @as("MulticastSupport")
  multicastSupport: option<multicastSupportValue>,
  @ocaml.doc("<p>Indicates whether DNS support is enabled.</p>") @as("DnsSupport")
  dnsSupport: option<dnsSupportValue>,
  @ocaml.doc("<p>Indicates whether Equal Cost Multipath Protocol support is enabled.</p>")
  @as("VpnEcmpSupport")
  vpnEcmpSupport: option<vpnEcmpSupportValue>,
  @ocaml.doc("<p>The ID of the default propagation route table.</p>")
  @as("PropagationDefaultRouteTableId")
  propagationDefaultRouteTableId: option<string_>,
  @ocaml.doc(
    "<p>Indicates whether resource attachments automatically propagate routes to the default propagation route table.</p>"
  )
  @as("DefaultRouteTablePropagation")
  defaultRouteTablePropagation: option<defaultRouteTablePropagationValue>,
  @ocaml.doc("<p>The ID of the default association route table.</p>")
  @as("AssociationDefaultRouteTableId")
  associationDefaultRouteTableId: option<string_>,
  @ocaml.doc(
    "<p>Indicates whether resource attachments are automatically associated with the default association route table.</p>"
  )
  @as("DefaultRouteTableAssociation")
  defaultRouteTableAssociation: option<defaultRouteTableAssociationValue>,
  @ocaml.doc("<p>Indicates whether attachment requests are automatically accepted.</p>")
  @as("AutoAcceptSharedAttachments")
  autoAcceptSharedAttachments: option<autoAcceptSharedAttachmentsValue>,
  @ocaml.doc("<p>The transit gateway CIDR blocks.</p>") @as("TransitGatewayCidrBlocks")
  transitGatewayCidrBlocks: option<valueStringList>,
  @ocaml.doc("<p>A private Autonomous System Number (ASN) for the Amazon side of a BGP session. 
         The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.</p>")
  @as("AmazonSideAsn")
  amazonSideAsn: option<long>,
}
@ocaml.doc("<p>Describes the members registered with the  transit gateway multicast group.</p>")
type transitGatewayMulticastRegisteredGroupSources = {
  @ocaml.doc("<p>The IP address assigned to the  transit gateway multicast group.</p>")
  @as("GroupIpAddress")
  groupIpAddress: option<string_>,
  @ocaml.doc(
    "<p>The IDs of the network interfaces members registered with the  transit gateway multicast group.</p>"
  )
  @as("RegisteredNetworkInterfaceIds")
  registeredNetworkInterfaceIds: option<valueStringList>,
  @ocaml.doc("<p>The ID of the transit gateway multicast domain.</p>")
  @as("TransitGatewayMulticastDomainId")
  transitGatewayMulticastDomainId: option<string_>,
}
@ocaml.doc("<p>Describes the registered  transit gateway multicast group members.</p>")
type transitGatewayMulticastRegisteredGroupMembers = {
  @ocaml.doc("<p>The IP address assigned to the  transit gateway multicast group.</p>")
  @as("GroupIpAddress")
  groupIpAddress: option<string_>,
  @ocaml.doc("<p>The ID of the registered network interfaces.</p>")
  @as("RegisteredNetworkInterfaceIds")
  registeredNetworkInterfaceIds: option<valueStringList>,
  @ocaml.doc("<p>The ID of the transit gateway multicast domain.</p>")
  @as("TransitGatewayMulticastDomainId")
  transitGatewayMulticastDomainId: option<string_>,
}
type transitGatewayMulticastGroupList = array<transitGatewayMulticastGroup>
@ocaml.doc("<p>Describes the resources associated with the transit gateway multicast domain.</p>")
type transitGatewayMulticastDomainAssociation = {
  @ocaml.doc("<p>The subnet associated with the transit gateway multicast domain.</p>")
  @as("Subnet")
  subnet: option<subnetAssociation>,
  @ocaml.doc(
    "<p> The ID of the Amazon Web Services account that owns the transit gateway multicast domain association resource.</p>"
  )
  @as("ResourceOwnerId")
  resourceOwnerId: option<string_>,
  @ocaml.doc("<p>The type of resource, for example a VPC attachment.</p>") @as("ResourceType")
  resourceType: option<transitGatewayAttachmentResourceType>,
  @ocaml.doc("<p>The ID of the resource.</p>") @as("ResourceId") resourceId: option<string_>,
  @ocaml.doc("<p>The ID of the transit gateway attachment.</p>") @as("TransitGatewayAttachmentId")
  transitGatewayAttachmentId: option<string_>,
}
@ocaml.doc("<p>Describes the deregistered  transit gateway multicast group sources.</p>")
type transitGatewayMulticastDeregisteredGroupSources = {
  @ocaml.doc("<p>The IP address assigned to the  transit gateway multicast group.</p>")
  @as("GroupIpAddress")
  groupIpAddress: option<string_>,
  @ocaml.doc("<p>The network interface IDs of the non-registered members.</p>")
  @as("DeregisteredNetworkInterfaceIds")
  deregisteredNetworkInterfaceIds: option<valueStringList>,
  @ocaml.doc("<p>The ID of the transit gateway multicast domain.</p>")
  @as("TransitGatewayMulticastDomainId")
  transitGatewayMulticastDomainId: option<string_>,
}
@ocaml.doc("<p>Describes the deregistered  transit gateway multicast group members.</p>")
type transitGatewayMulticastDeregisteredGroupMembers = {
  @ocaml.doc("<p>The IP address assigned to the  transit gateway multicast group.</p>")
  @as("GroupIpAddress")
  groupIpAddress: option<string_>,
  @ocaml.doc("<p>The network interface IDs of the deregistered members.</p>")
  @as("DeregisteredNetworkInterfaceIds")
  deregisteredNetworkInterfaceIds: option<valueStringList>,
  @ocaml.doc("<p>The ID of the transit gateway multicast domain.</p>")
  @as("TransitGatewayMulticastDomainId")
  transitGatewayMulticastDomainId: option<string_>,
}
type transitGatewayAttachmentPropagationList = array<transitGatewayAttachmentPropagation>
type transitGatewayAttachmentBgpConfigurationList = array<transitGatewayAttachmentBgpConfiguration>
@ocaml.doc("<p>Describes the Traffic Mirror rule.</p>")
type trafficMirrorFilterRule = {
  @ocaml.doc("<p>The description of the Traffic Mirror rule.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The source CIDR block assigned to the Traffic Mirror rule.</p>")
  @as("SourceCidrBlock")
  sourceCidrBlock: option<string_>,
  @ocaml.doc("<p>The destination CIDR block assigned to the Traffic Mirror rule.</p>")
  @as("DestinationCidrBlock")
  destinationCidrBlock: option<string_>,
  @ocaml.doc("<p>The source port range assigned to the Traffic Mirror rule.</p>")
  @as("SourcePortRange")
  sourcePortRange: option<trafficMirrorPortRange>,
  @ocaml.doc("<p>The destination port range assigned to the Traffic Mirror rule.</p>")
  @as("DestinationPortRange")
  destinationPortRange: option<trafficMirrorPortRange>,
  @ocaml.doc("<p>The protocol assigned to the Traffic Mirror rule.</p>") @as("Protocol")
  protocol: option<integer_>,
  @ocaml.doc("<p>The action assigned to the Traffic Mirror rule.</p>") @as("RuleAction")
  ruleAction: option<trafficMirrorRuleAction>,
  @ocaml.doc("<p>The rule number of the Traffic Mirror rule.</p>") @as("RuleNumber")
  ruleNumber: option<integer_>,
  @ocaml.doc("<p>The traffic direction assigned to the Traffic Mirror rule.</p>")
  @as("TrafficDirection")
  trafficDirection: option<trafficDirection>,
  @ocaml.doc("<p>The ID of the Traffic Mirror filter that the rule is associated with.</p>")
  @as("TrafficMirrorFilterId")
  trafficMirrorFilterId: option<string_>,
  @ocaml.doc("<p>The ID of the Traffic Mirror rule.</p>") @as("TrafficMirrorFilterRuleId")
  trafficMirrorFilterRuleId: option<string_>,
}
@ocaml.doc("<p>Information about a terminated Client VPN endpoint client connection.</p>")
type terminateConnectionStatus = {
  @ocaml.doc("<p>A message about the status of the client connection, if applicable.</p>")
  @as("CurrentStatus")
  currentStatus: option<clientVpnConnectionStatus>,
  @ocaml.doc("<p>The state of the client connection.</p>") @as("PreviousStatus")
  previousStatus: option<clientVpnConnectionStatus>,
  @ocaml.doc("<p>The ID of the client connection.</p>") @as("ConnectionId")
  connectionId: option<string_>,
}
@ocaml.doc("<p>The total value of the new Convertible Reserved Instances.</p>")
type targetReservationValue = {
  @ocaml.doc(
    "<p>The configuration of the Convertible Reserved Instances that make up the exchange.</p>"
  )
  @as("TargetConfiguration")
  targetConfiguration: option<targetConfiguration>,
  @ocaml.doc("<p>The total value of the Convertible Reserved Instances that make up the exchange. This is the sum of
      the list value, remaining upfront price, and additional upfront cost of the exchange.</p>")
  @as("ReservationValue")
  reservationValue: option<reservationValue>,
}
@ocaml.doc("<p>Describes a target network associated with a Client VPN endpoint.</p>")
type targetNetwork = {
  @ocaml.doc("<p>The IDs of the security groups applied to the target network association.</p>")
  @as("SecurityGroups")
  securityGroups: option<valueStringList>,
  @ocaml.doc("<p>The current state of the target network association.</p>") @as("Status")
  status: option<associationStatus>,
  @ocaml.doc(
    "<p>The ID of the Client VPN endpoint with which the target network is associated.</p>"
  )
  @as("ClientVpnEndpointId")
  clientVpnEndpointId: option<string_>,
  @ocaml.doc("<p>The ID of the subnet specified as the target network.</p>") @as("TargetNetworkId")
  targetNetworkId: option<string_>,
  @ocaml.doc("<p>The ID of the VPC in which the target network (subnet) is located.</p>")
  @as("VpcId")
  vpcId: option<string_>,
  @ocaml.doc("<p>The ID of the association.</p>") @as("AssociationId")
  associationId: option<string_>,
}
type targetGroups = array<targetGroup>
type targetConfigurationRequestSet = array<targetConfigurationRequest>
type tagList_ = array<tag>
type tagDescriptionList = array<tagDescription>
type successfulQueuedPurchaseDeletionSet = array<successfulQueuedPurchaseDeletion>
type successfulInstanceCreditSpecificationSet = array<successfulInstanceCreditSpecificationItem>
@ocaml.doc("<p>Describes an association between a subnet and an IPv6 CIDR block.</p>")
type subnetIpv6CidrBlockAssociation = {
  @ocaml.doc("<p>The state of the CIDR block.</p>") @as("Ipv6CidrBlockState")
  ipv6CidrBlockState: option<subnetCidrBlockState>,
  @ocaml.doc("<p>The IPv6 CIDR block.</p>") @as("Ipv6CidrBlock") ipv6CidrBlock: option<string_>,
  @ocaml.doc("<p>The ID of the association.</p>") @as("AssociationId")
  associationId: option<subnetCidrAssociationId>,
}
type subnetAssociationList = array<subnetAssociation>
type storeImageTaskResultSet = array<storeImageTaskResult>
@ocaml.doc("<p>Describes the storage location for an instance store-backed AMI.</p>")
type storage = {@ocaml.doc("<p>An Amazon S3 storage location.</p>") @as("S3") s3: option<s3Storage>}
type spotPriceHistoryList = array<spotPrice>
type spotPlacementScores = array<spotPlacementScore>
@ocaml.doc("<p>The strategies for managing your Spot Instances that are at an elevated risk of being
            interrupted.</p>")
type spotMaintenanceStrategies = {
  @ocaml.doc("<p>The Spot Instance replacement strategy to use when Amazon EC2 emits a signal that your
            Spot Instance is at an elevated risk of being interrupted. For more information, see
            <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-capacity-rebalance.html\">Capacity rebalancing</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>")
  @as("CapacityRebalance")
  capacityRebalance: option<spotCapacityRebalance>,
}
@ocaml.doc("<p>Describes the data feed for a Spot Instance.</p>")
type spotDatafeedSubscription = {
  @ocaml.doc("<p>The state of the Spot Instance data feed subscription.</p>") @as("State")
  state: option<datafeedSubscriptionState>,
  @ocaml.doc("<p>The prefix for the data feed files.</p>") @as("Prefix") prefix: option<string_>,
  @ocaml.doc("<p>The Amazon Web Services account ID of the account.</p>") @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The fault codes for the Spot Instance request, if any.</p>") @as("Fault")
  fault: option<spotInstanceStateFault>,
  @ocaml.doc(
    "<p>The name of the Amazon S3 bucket where the Spot Instance data feed is located.</p>"
  )
  @as("Bucket")
  bucket: option<string_>,
}
@ocaml.doc("<p>Details about the import snapshot task.</p>")
type snapshotTaskDetail = {
  @ocaml.doc("<p>The Amazon S3 bucket for the disk image.</p>") @as("UserBucket")
  userBucket: option<userBucketDetails>,
  @ocaml.doc("<p>The URL of the disk image from which the snapshot is created.</p>") @as("Url")
  url: option<string_>,
  @ocaml.doc("<p>A detailed status message for the import snapshot task.</p>") @as("StatusMessage")
  statusMessage: option<string_>,
  @ocaml.doc("<p>A brief status for the import snapshot task.</p>") @as("Status")
  status: option<string_>,
  @ocaml.doc("<p>The snapshot ID of the disk being imported.</p>") @as("SnapshotId")
  snapshotId: option<string_>,
  @ocaml.doc("<p>The percentage of completion for the import snapshot task.</p>") @as("Progress")
  progress: option<string_>,
  @ocaml.doc(
    "<p>The identifier for the KMS key that was used to create the encrypted snapshot.</p>"
  )
  @as("KmsKeyId")
  kmsKeyId: option<string_>,
  @ocaml.doc("<p>The format of the disk image from which the snapshot is created.</p>")
  @as("Format")
  format: option<string_>,
  @ocaml.doc("<p>Indicates whether the snapshot is encrypted.</p>") @as("Encrypted")
  encrypted: option<boolean_>,
  @ocaml.doc("<p>The size of the disk in the snapshot, in GiB.</p>") @as("DiskImageSize")
  diskImageSize: option<double>,
  @ocaml.doc("<p>The description of the snapshot.</p>") @as("Description")
  description: option<string_>,
}
type snapshotRecycleBinInfoList = array<snapshotRecycleBinInfo>
@ocaml.doc("<p>The disk container object for the import snapshot request.</p>")
type snapshotDiskContainer = {
  @ocaml.doc("<p>The Amazon S3 bucket for the disk image.</p>") @as("UserBucket")
  userBucket: option<userBucket>,
  @ocaml.doc("<p>The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon
   S3 URL (s3://..).</p>")
  @as("Url")
  url: option<string_>,
  @ocaml.doc("<p>The format of the disk image being imported.</p>
         <p>Valid values: <code>VHD</code> | <code>VMDK</code> | <code>RAW</code>
         </p>")
  @as("Format")
  format: option<string_>,
  @ocaml.doc("<p>The description of the disk image being imported.</p>") @as("Description")
  description: option<string_>,
}
@ocaml.doc("<p>Describes the snapshot created from the imported disk.</p>")
type snapshotDetail = {
  @ocaml.doc("<p>The Amazon S3 bucket for the disk image.</p>") @as("UserBucket")
  userBucket: option<userBucketDetails>,
  @ocaml.doc("<p>The URL used to access the disk image.</p>") @as("Url") url: option<string_>,
  @ocaml.doc("<p>A detailed status message for the snapshot creation.</p>") @as("StatusMessage")
  statusMessage: option<string_>,
  @ocaml.doc("<p>A brief status of the snapshot creation.</p>") @as("Status")
  status: option<string_>,
  @ocaml.doc("<p>The snapshot ID of the disk being imported.</p>") @as("SnapshotId")
  snapshotId: option<string_>,
  @ocaml.doc("<p>The percentage of progress for the task.</p>") @as("Progress")
  progress: option<string_>,
  @ocaml.doc("<p>The format of the disk image from which the snapshot is created.</p>")
  @as("Format")
  format: option<string_>,
  @ocaml.doc("<p>The size of the disk in the snapshot, in GiB.</p>") @as("DiskImageSize")
  diskImageSize: option<double>,
  @ocaml.doc("<p>The block device mapping for the snapshot.</p>") @as("DeviceName")
  deviceName: option<string_>,
  @ocaml.doc("<p>A description for the snapshot.</p>") @as("Description")
  description: option<string_>,
}
type serviceTypeDetailSet = array<serviceTypeDetail>
@ocaml.doc("<p>Describes an update to a security group rule.</p>")
type securityGroupRuleUpdate = {
  @ocaml.doc("<p>Information about the security group rule.</p>") @as("SecurityGroupRule")
  securityGroupRule: option<securityGroupRuleRequest>,
  @ocaml.doc("<p>The ID of the security group rule.</p>") @as("SecurityGroupRuleId")
  securityGroupRuleId: option<securityGroupRuleId>,
}
type securityGroupRuleDescriptionList = array<securityGroupRuleDescription>
type securityGroupReferences = array<securityGroupReference>
type scheduledInstancesIpv6AddressList = array<scheduledInstancesIpv6Address>
@ocaml.doc("<p>Describes a block device mapping for a Scheduled Instance.</p>")
type scheduledInstancesBlockDeviceMapping = {
  @ocaml.doc("<p>The virtual device name (<code>ephemeral</code>N). Instance store volumes are numbered
         starting from 0. An instance type with two available instance store volumes can specify mappings
         for <code>ephemeral0</code> and <code>ephemeral1</code>. The number of available instance store
         volumes depends on the instance type. After you connect to the instance, you must mount the
         volume.</p>
         <p>Constraints: For M3 instances, you must specify instance store volumes in the block device 
         mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes 
         specified in the block device mapping for the AMI.</p>")
  @as("VirtualName")
  virtualName: option<string_>,
  @ocaml.doc("<p>To omit the device from the block device mapping, specify an empty string.</p>")
  @as("NoDevice")
  noDevice: option<string_>,
  @ocaml.doc(
    "<p>Parameters used to set up EBS volumes automatically when the instance is launched.</p>"
  )
  @as("Ebs")
  ebs: option<scheduledInstancesEbs>,
  @ocaml.doc("<p>The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>")
  @as("DeviceName")
  deviceName: option<string_>,
}
@ocaml.doc("<p>Describes the recurring schedule for a Scheduled Instance.</p>")
type scheduledInstanceRecurrenceRequest = {
  @ocaml.doc("<p>The unit for <code>OccurrenceDays</code> (<code>DayOfWeek</code> or <code>DayOfMonth</code>).
        This value is required for a monthly schedule.
        You can't specify <code>DayOfWeek</code> with a weekly schedule.
        You can't specify this value with a daily schedule.</p>")
  @as("OccurrenceUnit")
  occurrenceUnit: option<string_>,
  @ocaml.doc(
    "<p>Indicates whether the occurrence is relative to the end of the specified week or month. You can't specify this value with a daily schedule.</p>"
  )
  @as("OccurrenceRelativeToEnd")
  occurrenceRelativeToEnd: option<boolean_>,
  @ocaml.doc(
    "<p>The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday). You can't specify this value with a daily schedule. If the occurrence is relative to the end of the month, you can specify only a single day.</p>"
  )
  @as("OccurrenceDays")
  occurrenceDays: option<occurrenceDayRequestSet>,
  @ocaml.doc("<p>The interval quantity. The interval unit depends on the value of <code>Frequency</code>. For example, every 2 
         weeks or every 2 months.</p>")
  @as("Interval")
  interval: option<integer_>,
  @ocaml.doc(
    "<p>The frequency (<code>Daily</code>, <code>Weekly</code>, or <code>Monthly</code>).</p>"
  )
  @as("Frequency")
  frequency: option<string_>,
}
@ocaml.doc("<p>Describes the recurring schedule for a Scheduled Instance.</p>")
type scheduledInstanceRecurrence = {
  @ocaml.doc(
    "<p>The unit for <code>occurrenceDaySet</code> (<code>DayOfWeek</code> or <code>DayOfMonth</code>).</p>"
  )
  @as("OccurrenceUnit")
  occurrenceUnit: option<string_>,
  @ocaml.doc(
    "<p>Indicates whether the occurrence is relative to the end of the specified week or month.</p>"
  )
  @as("OccurrenceRelativeToEnd")
  occurrenceRelativeToEnd: option<boolean_>,
  @ocaml.doc(
    "<p>The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday).</p>"
  )
  @as("OccurrenceDaySet")
  occurrenceDaySet: option<occurrenceDaySet>,
  @ocaml.doc("<p>The interval quantity. The interval unit depends on the value of <code>frequency</code>. For example, every 2
         weeks or every 2 months.</p>")
  @as("Interval")
  interval: option<integer_>,
  @ocaml.doc(
    "<p>The frequency (<code>Daily</code>, <code>Weekly</code>, or <code>Monthly</code>).</p>"
  )
  @as("Frequency")
  frequency: option<string_>,
}
type s3ObjectTagList = array<s3ObjectTag>
@ocaml.doc("<p>Describes an association between a route table and a subnet or gateway.</p>")
type routeTableAssociation = {
  @ocaml.doc("<p>The state of the association.</p>") @as("AssociationState")
  associationState: option<routeTableAssociationState>,
  @ocaml.doc("<p>The ID of the internet gateway or virtual private gateway.</p>") @as("GatewayId")
  gatewayId: option<string_>,
  @ocaml.doc(
    "<p>The ID of the subnet. A subnet ID is not returned for an implicit association.</p>"
  )
  @as("SubnetId")
  subnetId: option<string_>,
  @ocaml.doc("<p>The ID of the route table.</p>") @as("RouteTableId") routeTableId: option<string_>,
  @ocaml.doc("<p>The ID of the association.</p>") @as("RouteTableAssociationId")
  routeTableAssociationId: option<string_>,
  @ocaml.doc("<p>Indicates whether this is the main route table.</p>") @as("Main")
  main: option<boolean_>,
}
type routeList = array<route>
@ocaml.doc("<p>Describes a resource statement.</p>")
type resourceStatementRequest = {
  @ocaml.doc("<p>The resource types.</p>") @as("ResourceTypes")
  resourceTypes: option<valueStringList>,
  @ocaml.doc("<p>The resources.</p>") @as("Resources") resources: option<valueStringList>,
}
@ocaml.doc("<p>Describes a resource statement.</p>")
type resourceStatement = {
  @ocaml.doc("<p>The resource types.</p>") @as("ResourceTypes")
  resourceTypes: option<valueStringList>,
  @ocaml.doc("<p>The resources.</p>") @as("Resources") resources: option<valueStringList>,
}
type reservedIntancesIds = array<reservedInstancesId>
@ocaml.doc("<p>Describes the modification request/s.</p>")
type reservedInstancesModificationResult = {
  @ocaml.doc(
    "<p>The target Reserved Instances configurations supplied as part of the modification request.</p>"
  )
  @as("TargetConfiguration")
  targetConfiguration: option<reservedInstancesConfiguration>,
  @ocaml.doc(
    "<p>The ID for the Reserved Instances that were created as part of the modification request. This field is only available when the modification is fulfilled.</p>"
  )
  @as("ReservedInstancesId")
  reservedInstancesId: option<string_>,
}
type reservedInstancesConfigurationList = array<reservedInstancesConfiguration>
@ocaml.doc("<p>The total value of the Convertible Reserved Instance.</p>")
type reservedInstanceReservationValue = {
  @ocaml.doc("<p>The ID of the Convertible Reserved Instance that you are exchanging.</p>")
  @as("ReservedInstanceId")
  reservedInstanceId: option<string_>,
  @ocaml.doc("<p>The total value of the Convertible Reserved Instance that you are exchanging.</p>")
  @as("ReservationValue")
  reservationValue: option<reservationValue>,
}
type reservationFleetInstanceSpecificationList = array<reservationFleetInstanceSpecification>
type requestIpamResourceTagList = array<requestIpamResourceTag>
type removePrefixListEntries = array<removePrefixListEntry>
type removeIpamOperatingRegionSet = array<removeIpamOperatingRegion>
@ocaml.doc("<p>Information about the tag keys to register for the current Region. You can either specify 
      	individual tag keys or register all tag keys in the current Region. You must specify either
      	<code>IncludeAllTagsOfInstance</code> or <code>InstanceTagKeys</code> in the request</p>")
type registerInstanceTagAttributeRequest = {
  @ocaml.doc("<p>The tag keys to register.</p>") @as("InstanceTagKeys")
  instanceTagKeys: option<instanceTagKeySet>,
  @ocaml.doc("<p>Indicates whether to register all tag keys in the current Region. Specify <code>true</code> 
      	to register all tag keys.</p>")
  @as("IncludeAllTagsOfInstance")
  includeAllTagsOfInstance: option<boolean_>,
}
type regionList = array<region>
type recurringChargesList = array<recurringCharge>
type purchaseRequestSet = array<purchaseRequest>
@ocaml.doc("<p>Describes the result of the purchase.</p>")
type purchase = {
  @ocaml.doc("<p>The upfront price of the reservation.</p>") @as("UpfrontPrice")
  upfrontPrice: option<string_>,
  @ocaml.doc("<p>The payment option for the reservation.</p>") @as("PaymentOption")
  paymentOption: option<paymentOption>,
  @ocaml.doc("<p>The instance family on the Dedicated Host that the reservation can be associated
            with.</p>")
  @as("InstanceFamily")
  instanceFamily: option<string_>,
  @ocaml.doc("<p>The hourly price of the reservation per hour.</p>") @as("HourlyPrice")
  hourlyPrice: option<string_>,
  @ocaml.doc("<p>The ID of the reservation.</p>") @as("HostReservationId")
  hostReservationId: option<hostReservationId>,
  @ocaml.doc("<p>The IDs of the Dedicated Hosts associated with the reservation.</p>")
  @as("HostIdSet")
  hostIdSet: option<responseHostIdSet>,
  @ocaml.doc("<p>The duration of the reservation's term in seconds.</p>") @as("Duration")
  duration: option<integer_>,
  @ocaml.doc("<p>The currency in which the <code>UpfrontPrice</code> and <code>HourlyPrice</code>
            amounts are specified. At this time, the only supported currency is
            <code>USD</code>.</p>")
  @as("CurrencyCode")
  currencyCode: option<currencyCodeValues>,
}
type publicIpv4PoolRangeSet = array<publicIpv4PoolRange>
type propagatingVgwList = array<propagatingVgw>
type productCodeList = array<productCode>
@ocaml.doc("<p>Describes the processor used by the instance type.</p>")
type processorInfo = {
  @ocaml.doc("<p>The speed of the processor, in GHz.</p>") @as("SustainedClockSpeedInGhz")
  sustainedClockSpeedInGhz: option<processorSustainedClockSpeed>,
  @ocaml.doc("<p>The architectures supported by the instance type.</p>")
  @as("SupportedArchitectures")
  supportedArchitectures: option<architectureTypeList>,
}
type privateIpAddressSpecificationList = array<privateIpAddressSpecification>
type privateIpAddressConfigSet = array<scheduledInstancesPrivateIpAddressConfig>
type privateDnsDetailsSet = array<privateDnsDetails>
type pricingDetailsList = array<pricingDetail>
type priceScheduleSpecificationList = array<priceScheduleSpecification>
type priceScheduleList = array<priceSchedule>
type prefixListIdList = array<prefixListId>
type prefixListEntrySet = array<prefixListEntry>
type prefixListAssociationSet = array<prefixListAssociation>
@ocaml.doc("<p>Describes prefixes for Amazon Web Services services.</p>")
type prefixList = {
  @ocaml.doc("<p>The name of the prefix.</p>") @as("PrefixListName")
  prefixListName: option<string_>,
  @ocaml.doc("<p>The ID of the prefix.</p>") @as("PrefixListId") prefixListId: option<string_>,
  @ocaml.doc("<p>The IP address range of the Amazon Web Service.</p>") @as("Cidrs")
  cidrs: option<valueStringList>,
}
type portRangeList = array<portRange>
type poolCidrBlocksSet = array<poolCidrBlock>
@ocaml.doc("<p>Describes the placement group support of the instance type.</p>")
type placementGroupInfo = {
  @ocaml.doc("<p>The supported placement group types.</p>") @as("SupportedStrategies")
  supportedStrategies: option<placementGroupStrategyList>,
}
type phase2IntegrityAlgorithmsRequestList = array<phase2IntegrityAlgorithmsRequestListValue>
type phase2IntegrityAlgorithmsList = array<phase2IntegrityAlgorithmsListValue>
type phase2EncryptionAlgorithmsRequestList = array<phase2EncryptionAlgorithmsRequestListValue>
type phase2EncryptionAlgorithmsList = array<phase2EncryptionAlgorithmsListValue>
type phase2DHGroupNumbersRequestList = array<phase2DHGroupNumbersRequestListValue>
type phase2DHGroupNumbersList = array<phase2DHGroupNumbersListValue>
type phase1IntegrityAlgorithmsRequestList = array<phase1IntegrityAlgorithmsRequestListValue>
type phase1IntegrityAlgorithmsList = array<phase1IntegrityAlgorithmsListValue>
type phase1EncryptionAlgorithmsRequestList = array<phase1EncryptionAlgorithmsRequestListValue>
type phase1EncryptionAlgorithmsList = array<phase1EncryptionAlgorithmsListValue>
type phase1DHGroupNumbersRequestList = array<phase1DHGroupNumbersRequestListValue>
type phase1DHGroupNumbersList = array<phase1DHGroupNumbersListValue>
@ocaml.doc("<p>Describes a packet header statement.</p>")
type packetHeaderStatementRequest = {
  @ocaml.doc("<p>The protocols.</p>") @as("Protocols") protocols: option<protocolList>,
  @ocaml.doc("<p>The destination prefix lists.</p>") @as("DestinationPrefixLists")
  destinationPrefixLists: option<valueStringList>,
  @ocaml.doc("<p>The source prefix lists.</p>") @as("SourcePrefixLists")
  sourcePrefixLists: option<valueStringList>,
  @ocaml.doc("<p>The destination ports.</p>") @as("DestinationPorts")
  destinationPorts: option<valueStringList>,
  @ocaml.doc("<p>The source ports.</p>") @as("SourcePorts") sourcePorts: option<valueStringList>,
  @ocaml.doc("<p>The destination addresses.</p>") @as("DestinationAddresses")
  destinationAddresses: option<valueStringList>,
  @ocaml.doc("<p>The source addresses.</p>") @as("SourceAddresses")
  sourceAddresses: option<valueStringList>,
}
@ocaml.doc("<p>Describes a packet header statement.</p>")
type packetHeaderStatement = {
  @ocaml.doc("<p>The protocols.</p>") @as("Protocols") protocols: option<protocolList>,
  @ocaml.doc("<p>The destination prefix lists.</p>") @as("DestinationPrefixLists")
  destinationPrefixLists: option<valueStringList>,
  @ocaml.doc("<p>The source prefix lists.</p>") @as("SourcePrefixLists")
  sourcePrefixLists: option<valueStringList>,
  @ocaml.doc("<p>The destination ports.</p>") @as("DestinationPorts")
  destinationPorts: option<valueStringList>,
  @ocaml.doc("<p>The source ports.</p>") @as("SourcePorts") sourcePorts: option<valueStringList>,
  @ocaml.doc("<p>The destination addresses.</p>") @as("DestinationAddresses")
  destinationAddresses: option<valueStringList>,
  @ocaml.doc("<p>The source addresses.</p>") @as("SourceAddresses")
  sourceAddresses: option<valueStringList>,
}
@ocaml.doc("<p>Describes the configuration of On-Demand Instances in an EC2 Fleet.</p>")
type onDemandOptionsRequest = {
  @ocaml.doc(
    "<p>The maximum amount per hour for On-Demand Instances that you're willing to pay.</p>"
  )
  @as("MaxTotalPrice")
  maxTotalPrice: option<string_>,
  @ocaml.doc("<p>The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is
         not reached, the fleet launches no instances.</p>
         <p>Supported only for fleets of type <code>instant</code>.</p>
         <p>At least one of the following must be specified: <code>SingleAvailabilityZone</code> |
         <code>SingleInstanceType</code>
         </p>")
  @as("MinTargetCapacity")
  minTargetCapacity: option<integer_>,
  @ocaml.doc("<p>Indicates that the fleet launches all On-Demand Instances into a single Availability Zone.</p>
         <p>Supported only for fleets of type <code>instant</code>.</p>")
  @as("SingleAvailabilityZone")
  singleAvailabilityZone: option<boolean_>,
  @ocaml.doc("<p>Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the
         fleet.</p>
         <p>Supported only for fleets of type <code>instant</code>.</p>")
  @as("SingleInstanceType")
  singleInstanceType: option<boolean_>,
  @ocaml.doc("<p>The strategy for using unused Capacity Reservations for fulfilling On-Demand
         capacity.</p>
         <p>Supported only for fleets of type <code>instant</code>.</p>")
  @as("CapacityReservationOptions")
  capacityReservationOptions: option<capacityReservationOptionsRequest>,
  @ocaml.doc("<p>The strategy that determines the order of the launch template overrides to use in
         fulfilling On-Demand capacity.</p>
         <p>
            <code>lowest-price</code> - EC2 Fleet uses price to determine the order, launching the lowest
         price first.</p>
         <p>
            <code>prioritized</code> - EC2 Fleet uses the priority that you assigned to each launch
         template override, launching the highest priority first.</p>
         <p>Default: <code>lowest-price</code>
         </p>")
  @as("AllocationStrategy")
  allocationStrategy: option<fleetOnDemandAllocationStrategy>,
}
@ocaml.doc("<p>Describes the configuration of On-Demand Instances in an EC2 Fleet.</p>")
type onDemandOptions = {
  @ocaml.doc(
    "<p>The maximum amount per hour for On-Demand Instances that you're willing to pay.</p>"
  )
  @as("MaxTotalPrice")
  maxTotalPrice: option<string_>,
  @ocaml.doc("<p>The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is
         not reached, the fleet launches no instances.</p>
         <p>Supported only for fleets of type <code>instant</code>.</p>
         <p>At least one of the following must be specified: <code>SingleAvailabilityZone</code> |
         <code>SingleInstanceType</code>
         </p>")
  @as("MinTargetCapacity")
  minTargetCapacity: option<integer_>,
  @ocaml.doc("<p>Indicates that the fleet launches all On-Demand Instances into a single Availability Zone.</p>
         <p>Supported only for fleets of type <code>instant</code>.</p>")
  @as("SingleAvailabilityZone")
  singleAvailabilityZone: option<boolean_>,
  @ocaml.doc("<p>Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the
         fleet.</p>
         <p>Supported only for fleets of type <code>instant</code>.</p>")
  @as("SingleInstanceType")
  singleInstanceType: option<boolean_>,
  @ocaml.doc("<p>The strategy for using unused Capacity Reservations for fulfilling On-Demand
         capacity.</p>
         <p>Supported only for fleets of type <code>instant</code>.</p>")
  @as("CapacityReservationOptions")
  capacityReservationOptions: option<capacityReservationOptions>,
  @ocaml.doc("<p>The strategy that determines the order of the launch template overrides to use in
         fulfilling On-Demand capacity.</p>
         <p>
            <code>lowest-price</code> - EC2 Fleet uses price to determine the order, launching the lowest
         price first.</p>
         <p>
            <code>prioritized</code> - EC2 Fleet uses the priority that you assigned to each launch
         template override, launching the highest priority first.</p>
         <p>Default: <code>lowest-price</code>
         </p>")
  @as("AllocationStrategy")
  allocationStrategy: option<fleetOnDemandAllocationStrategy>,
}
@ocaml.doc("<p>Describes a DHCP configuration option.</p>")
type newDhcpConfiguration = {
  @ocaml.doc("<p>One or more values for the DHCP option.</p>") @as("Values")
  values: option<valueStringList>,
  @ocaml.doc("<p>The name of a DHCP option.</p>") @as("Key") key: option<string_>,
}
@ocaml.doc("<p>Describes the private IPv4 address of a network interface.</p>")
type networkInterfacePrivateIpAddress = {
  @ocaml.doc("<p>The private IPv4 address.</p>") @as("PrivateIpAddress")
  privateIpAddress: option<string_>,
  @ocaml.doc("<p>The private DNS name.</p>") @as("PrivateDnsName") privateDnsName: option<string_>,
  @ocaml.doc(
    "<p>Indicates whether this IPv4 address is the primary private IPv4 address of the network interface.</p>"
  )
  @as("Primary")
  primary: option<boolean_>,
  @ocaml.doc(
    "<p>The association information for an Elastic IP address (IPv4) associated with the network interface.</p>"
  )
  @as("Association")
  association: option<networkInterfaceAssociation>,
}
@ocaml.doc("<p>Describes a permission for a network interface.</p>")
type networkInterfacePermission = {
  @ocaml.doc("<p>Information about the state of the permission.</p>") @as("PermissionState")
  permissionState: option<networkInterfacePermissionState>,
  @ocaml.doc("<p>The type of permission.</p>") @as("Permission")
  permission: option<interfacePermissionType>,
  @ocaml.doc("<p>The Amazon Web Service.</p>") @as("AwsService") awsService: option<string_>,
  @ocaml.doc("<p>The Amazon Web Services account ID.</p>") @as("AwsAccountId")
  awsAccountId: option<string_>,
  @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
  networkInterfaceId: option<string_>,
  @ocaml.doc("<p>The ID of the network interface permission.</p>")
  @as("NetworkInterfacePermissionId")
  networkInterfacePermissionId: option<string_>,
}
type networkInterfaceIpv6AddressesList = array<networkInterfaceIpv6Address>
type networkCardInfoList = array<networkCardInfo>
@ocaml.doc("<p>Describes an entry in a network ACL.</p>")
type networkAclEntry = {
  @ocaml.doc(
    "<p>The rule number for the entry. ACL entries are processed in ascending order by rule number.</p>"
  )
  @as("RuleNumber")
  ruleNumber: option<integer_>,
  @ocaml.doc("<p>Indicates whether to allow or deny the traffic that matches the rule.</p>")
  @as("RuleAction")
  ruleAction: option<ruleAction>,
  @ocaml.doc("<p>The protocol number. A value of \"-1\" means all protocols.</p>") @as("Protocol")
  protocol: option<string_>,
  @ocaml.doc("<p>TCP or UDP protocols: The range of ports the rule applies to.</p>")
  @as("PortRange")
  portRange: option<portRange>,
  @ocaml.doc("<p>The IPv6 network range to allow or deny, in CIDR notation.</p>")
  @as("Ipv6CidrBlock")
  ipv6CidrBlock: option<string_>,
  @ocaml.doc("<p>ICMP protocol: The ICMP type and code.</p>") @as("IcmpTypeCode")
  icmpTypeCode: option<icmpTypeCode>,
  @ocaml.doc(
    "<p>Indicates whether the rule is an egress rule (applied to traffic leaving the subnet).</p>"
  )
  @as("Egress")
  egress: option<boolean_>,
  @ocaml.doc("<p>The IPv4 network range to allow or deny, in CIDR notation.</p>") @as("CidrBlock")
  cidrBlock: option<string_>,
}
type networkAclAssociationList = array<networkAclAssociation>
type natGatewayAddressList = array<natGatewayAddress>
type movingAddressStatusSet = array<movingAddressStatus>
@ocaml.doc("<p>The transit gateway options.</p>")
type modifyTransitGatewayOptions = {
  @ocaml.doc("<p>The ID of the default propagation route table.</p>")
  @as("PropagationDefaultRouteTableId")
  propagationDefaultRouteTableId: option<transitGatewayRouteTableId>,
  @ocaml.doc(
    "<p>Enable or disable automatic propagation of routes to the default propagation route table.</p>"
  )
  @as("DefaultRouteTablePropagation")
  defaultRouteTablePropagation: option<defaultRouteTablePropagationValue>,
  @ocaml.doc("<p>The ID of the default association route table.</p>")
  @as("AssociationDefaultRouteTableId")
  associationDefaultRouteTableId: option<transitGatewayRouteTableId>,
  @ocaml.doc(
    "<p>Enable or disable automatic association with the default association route table.</p>"
  )
  @as("DefaultRouteTableAssociation")
  defaultRouteTableAssociation: option<defaultRouteTableAssociationValue>,
  @ocaml.doc("<p>Enable or disable automatic acceptance of attachment requests.</p>")
  @as("AutoAcceptSharedAttachments")
  autoAcceptSharedAttachments: option<autoAcceptSharedAttachmentsValue>,
  @ocaml.doc("<p>Enable or disable DNS support.</p>") @as("DnsSupport")
  dnsSupport: option<dnsSupportValue>,
  @ocaml.doc("<p>Enable or disable Equal Cost Multipath Protocol support.</p>")
  @as("VpnEcmpSupport")
  vpnEcmpSupport: option<vpnEcmpSupportValue>,
  @ocaml.doc("<p>Removes CIDR blocks for the transit gateway.</p>")
  @as("RemoveTransitGatewayCidrBlocks")
  removeTransitGatewayCidrBlocks: option<transitGatewayCidrBlockStringList>,
  @ocaml.doc(
    "<p>Adds IPv4 or IPv6 CIDR blocks for the transit gateway. Must be a size /24 CIDR block or larger for IPv4, or a size /64 CIDR block or larger for IPv6.</p>"
  )
  @as("AddTransitGatewayCidrBlocks")
  addTransitGatewayCidrBlocks: option<transitGatewayCidrBlockStringList>,
}
type localGatewayRouteList = array<localGatewayRoute>
type loadPermissionListRequest = array<loadPermissionRequest>
type loadPermissionList = array<loadPermission>
type licenseSpecificationListRequest = array<licenseConfigurationRequest>
type licenseList = array<licenseConfiguration>
type launchTemplateLicenseSpecificationListRequest = array<
  launchTemplateLicenseConfigurationRequest,
>
type launchTemplateLicenseList = array<launchTemplateLicenseConfiguration>
@ocaml.doc("<p>The market (purchasing) option for the instances.</p>")
type launchTemplateInstanceMarketOptionsRequest = {
  @ocaml.doc("<p>The options for Spot Instances.</p>") @as("SpotOptions")
  spotOptions: option<launchTemplateSpotMarketOptionsRequest>,
  @ocaml.doc("<p>The market type.</p>") @as("MarketType") marketType: option<marketType>,
}
@ocaml.doc("<p>The market (purchasing) option for the instances.</p>")
type launchTemplateInstanceMarketOptions = {
  @ocaml.doc("<p>The options for Spot Instances.</p>") @as("SpotOptions")
  spotOptions: option<launchTemplateSpotMarketOptions>,
  @ocaml.doc("<p>The market type.</p>") @as("MarketType") marketType: option<marketType>,
}
type launchTemplateElasticInferenceAcceleratorResponseList = array<
  launchTemplateElasticInferenceAcceleratorResponse,
>
type launchTemplateElasticInferenceAcceleratorList = array<
  launchTemplateElasticInferenceAccelerator,
>
@ocaml.doc("<p>Information about the Capacity Reservation targeting option.</p>")
type launchTemplateCapacityReservationSpecificationResponse = {
  @ocaml.doc("<p>Information about the target Capacity Reservation or Capacity Reservation
            group.</p>")
  @as("CapacityReservationTarget")
  capacityReservationTarget: option<capacityReservationTargetResponse>,
  @ocaml.doc("<p>Indicates the instance's Capacity Reservation preferences. Possible preferences
            include:</p>
        <ul>
            <li>
                <p>
                  <code>open</code> - The instance can run in any <code>open</code> Capacity
                    Reservation that has matching attributes (instance type, platform, Availability
                    Zone).</p>
            </li>
            <li>
                <p>
                  <code>none</code> - The instance avoids running in a Capacity Reservation even
                    if one is available. The instance runs in On-Demand capacity.</p>
            </li>
         </ul>")
  @as("CapacityReservationPreference")
  capacityReservationPreference: option<capacityReservationPreference>,
}
@ocaml.doc("<p>Describes an instance's Capacity Reservation targeting option. You can specify only
            one option at a time. Use the <code>CapacityReservationPreference</code> parameter to
            configure the instance to run in On-Demand capacity or to run in any <code>open</code>
            Capacity Reservation that has matching attributes (instance type, platform, Availability
            Zone). Use the <code>CapacityReservationTarget</code> parameter to explicitly target a
            specific Capacity Reservation or a Capacity Reservation group.</p>")
type launchTemplateCapacityReservationSpecificationRequest = {
  @ocaml.doc("<p>Information about the target Capacity Reservation or Capacity Reservation
            group.</p>")
  @as("CapacityReservationTarget")
  capacityReservationTarget: option<capacityReservationTarget>,
  @ocaml.doc("<p>Indicates the instance's Capacity Reservation preferences. Possible preferences
            include:</p>
        <ul>
            <li>
                <p>
                  <code>open</code> - The instance can run in any <code>open</code> Capacity
                    Reservation that has matching attributes (instance type, platform, Availability
                    Zone).</p>
            </li>
            <li>
                <p>
                  <code>none</code> - The instance avoids running in a Capacity Reservation even
                    if one is available. The instance runs in On-Demand capacity.</p>
            </li>
         </ul>")
  @as("CapacityReservationPreference")
  capacityReservationPreference: option<capacityReservationPreference>,
}
@ocaml.doc("<p>Describes a block device mapping.</p>")
type launchTemplateBlockDeviceMappingRequest = {
  @ocaml.doc("<p>To omit the device from the block device mapping, specify an empty string.</p>")
  @as("NoDevice")
  noDevice: option<string_>,
  @ocaml.doc("<p>Parameters used to automatically set up EBS volumes when the instance is
            launched.</p>")
  @as("Ebs")
  ebs: option<launchTemplateEbsBlockDeviceRequest>,
  @ocaml.doc("<p>The virtual device name (ephemeralN). Instance store volumes are numbered starting
            from 0. An instance type with 2 available instance store volumes can specify mappings
            for ephemeral0 and ephemeral1. The number of available instance store volumes depends on
            the instance type. After you connect to the instance, you must mount the volume.</p>")
  @as("VirtualName")
  virtualName: option<string_>,
  @ocaml.doc("<p>The device name (for example, /dev/sdh or xvdh).</p>") @as("DeviceName")
  deviceName: option<string_>,
}
@ocaml.doc("<p>Describes a block device mapping.</p>")
type launchTemplateBlockDeviceMapping = {
  @ocaml.doc("<p>To omit the device from the block device mapping, specify an empty string.</p>")
  @as("NoDevice")
  noDevice: option<string_>,
  @ocaml.doc("<p>Information about the block device for an EBS volume.</p>") @as("Ebs")
  ebs: option<launchTemplateEbsBlockDevice>,
  @ocaml.doc("<p>The virtual device name (ephemeralN).</p>") @as("VirtualName")
  virtualName: option<string_>,
  @ocaml.doc("<p>The device name.</p>") @as("DeviceName") deviceName: option<string_>,
}
type launchPermissionList = array<launchPermission>
type ipv6RangeList = array<ipv6Range>
type ipv6PrefixesList = array<ipv6PrefixSpecification>
type ipv6PrefixListResponse = array<ipv6PrefixSpecificationResponse>
type ipv6PrefixList = array<ipv6PrefixSpecificationRequest>
type ipv6CidrBlockSet = array<ipv6CidrBlock>
type ipv6CidrAssociationSet = array<ipv6CidrAssociation>
type ipv4PrefixesList = array<ipv4PrefixSpecification>
type ipv4PrefixListResponse = array<ipv4PrefixSpecificationResponse>
type ipv4PrefixList = array<ipv4PrefixSpecificationRequest>
type ipamResourceTagList = array<ipamResourceTag>
@ocaml.doc("<p>A CIDR provisioned to an IPAM pool.</p>")
type ipamPoolCidr = {
  @ocaml.doc("<p>Details related to why an IPAM pool CIDR failed to be provisioned.</p>")
  @as("FailureReason")
  failureReason: option<ipamPoolCidrFailureReason>,
  @ocaml.doc("<p>The state of the CIDR.</p>") @as("State") state: option<ipamPoolCidrState>,
  @ocaml.doc("<p>The CIDR provisioned to the IPAM pool. A CIDR is a representation of an IP address and its associated network mask (or netmask) 
         and refers to a range of IP addresses. An IPv4 CIDR example is <code>10.24.34.0/23</code>. An IPv6 CIDR example is <code>2001:DB8::/32</code>.</p>")
  @as("Cidr")
  cidr: option<string_>,
}
type ipamPoolAllocationSet = array<ipamPoolAllocation>
type ipamOperatingRegionSet = array<ipamOperatingRegion>
type ipamAddressHistoryRecordSet = array<ipamAddressHistoryRecord>
type ipRangeList = array<ipRange>
type internetGatewayAttachmentList = array<internetGatewayAttachment>
type instanceUsageSet = array<instanceUsage>
type instanceTypeOfferingsList = array<instanceTypeOffering>
type instanceTypeInfoFromInstanceRequirementsSet = array<instanceTypeInfoFromInstanceRequirements>
@ocaml.doc("<p>Describes the registered tag keys for the current Region.</p>")
type instanceTagNotificationAttribute = {
  @ocaml.doc("<p>Indicates wheter all tag keys in the current Region are registered to appear in scheduled event notifications. 
      	<code>true</code> indicates that all tag keys in the current Region are registered.</p>")
  @as("IncludeAllTagsOfInstance")
  includeAllTagsOfInstance: option<boolean_>,
  @ocaml.doc("<p>The registered tag keys.</p>") @as("InstanceTagKeys")
  instanceTagKeys: option<instanceTagKeySet>,
}
type instanceStatusEventList = array<instanceStatusEvent>
type instanceStatusDetailsList = array<instanceStatusDetails>
@ocaml.doc("<p>Describes an instance state change.</p>")
type instanceStateChange = {
  @ocaml.doc("<p>The previous state of the instance.</p>") @as("PreviousState")
  previousState: option<instanceState>,
  @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<string_>,
  @ocaml.doc("<p>The current state of the instance.</p>") @as("CurrentState")
  currentState: option<instanceState>,
}
@ocaml.doc("<p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will
      identify instance types with these attributes.</p>
         <p>When you specify multiple parameters, you get instance types that satisfy all of the
         specified parameters. If you specify multiple values for a parameter, you get instance
         types that satisfy any of the specified values.</p>
         <note>
            <p>You must specify <code>VCpuCount</code> and <code>MemoryMiB</code>. All other parameters
            are optional. Any unspecified optional parameter is set to its default.</p>
         </note>
         <p>For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html\">Attribute-based instance type selection for EC2 Fleet</a>, <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-attribute-based-instance-type-selection.html\">Attribute-based instance type selection for Spot Fleet</a>, and <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-placement-score.html\">Spot
            placement score</a> in the <i>Amazon EC2 User Guide</i>.</p>")
type instanceRequirementsRequest = {
  @ocaml.doc("<p>The minimum and maximum amount of total accelerator memory, in MiB.</p>
         <p>Default: No minimum or maximum limits</p>")
  @as("AcceleratorTotalMemoryMiB")
  acceleratorTotalMemoryMiB: option<acceleratorTotalMemoryMiBRequest>,
  @ocaml.doc("<p>The accelerators that must be on the instance type.</p>
         <ul>
            <li>
               <p>For instance types with NVIDIA A100 GPUs, specify <code>a100</code>.</p>
            </li>
            <li>
               <p>For instance types with NVIDIA V100 GPUs, specify <code>v100</code>.</p>
            </li>
            <li>
               <p>For instance types with NVIDIA K80 GPUs, specify <code>k80</code>.</p>
            </li>
            <li>
               <p>For instance types with NVIDIA T4 GPUs, specify <code>t4</code>.</p>
            </li>
            <li>
               <p>For instance types with NVIDIA M60 GPUs, specify <code>m60</code>.</p>
            </li>
            <li>
               <p>For instance types with AMD Radeon Pro V520 GPUs, specify <code>radeon-pro-v520</code>.</p>
            </li>
            <li>
               <p>For instance types with Xilinx VU9P FPGAs, specify <code> vu9p</code>.</p>
            </li>
         </ul>
         <p>Default: Any accelerator</p>")
  @as("AcceleratorNames")
  acceleratorNames: option<acceleratorNameSet>,
  @ocaml.doc("<p>Indicates whether instance types must have accelerators by specific manufacturers.</p>
         <ul>
            <li>
               <p>For instance types with NVIDIA devices, specify <code>nvidia</code>.</p>
            </li>
            <li>
               <p>For instance types with AMD devices, specify <code>amd</code>.</p>
            </li>
            <li>
               <p>For instance types with Amazon Web Services devices, specify <code>amazon-web-services</code>.</p>
            </li>
            <li>
               <p>For instance types with Xilinx devices, specify <code>xilinx</code>.</p>
            </li>
         </ul>
         <p>Default: Any manufacturer</p>")
  @as("AcceleratorManufacturers")
  acceleratorManufacturers: option<acceleratorManufacturerSet>,
  @ocaml.doc("<p>The minimum and maximum number of accelerators (GPUs, FPGAs, or Amazon Web Services Inferentia chips) on
         an instance.</p>
         <p>To exclude accelerator-enabled instance types, set <code>Max</code> to <code>0</code>.</p>
         <p>Default: No minimum or maximum limits</p>")
  @as("AcceleratorCount")
  acceleratorCount: option<acceleratorCountRequest>,
  @ocaml.doc("<p>The accelerator types that must be on the instance type.</p>
         <ul>
            <li>
               <p>To include instance types with GPU hardware, specify <code>gpu</code>.</p>
            </li>
            <li>
               <p>To include instance types with FPGA hardware, specify <code>fpga</code>.</p>
            </li>
            <li>
               <p>To include instance types with inference hardware, specify <code>inference</code>.</p>
            </li>
         </ul>
         <p>Default: Any accelerator type</p>")
  @as("AcceleratorTypes")
  acceleratorTypes: option<acceleratorTypeSet>,
  @ocaml.doc("<p>The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps. For more information, see
            <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html\">Amazon
            EBS–optimized instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
         <p>Default: No minimum or maximum limits</p>")
  @as("BaselineEbsBandwidthMbps")
  baselineEbsBandwidthMbps: option<baselineEbsBandwidthMbpsRequest>,
  @ocaml.doc("<p>The minimum and maximum amount of total local storage, in GB.</p>
         <p>Default: No minimum or maximum limits</p>")
  @as("TotalLocalStorageGB")
  totalLocalStorageGB: option<totalLocalStorageGBRequest>,
  @ocaml.doc("<p>The type of local storage that is required.</p>
         <ul>
            <li>
               <p>For instance types with hard disk drive (HDD) storage, specify <code>hdd</code>.</p>
            </li>
            <li>
               <p>For instance types with solid state drive (SDD) storage, specify <code>sdd</code>.</p>
            </li>
         </ul>
         <p>Default: <code>hdd</code> and <code>sdd</code>
         </p>")
  @as("LocalStorageTypes")
  localStorageTypes: option<localStorageTypeSet>,
  @ocaml.doc("<p>Indicates whether instance types with instance store volumes are included, excluded, or required. For more information,
      <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html\">Amazon
         EC2 instance store</a> in the <i>Amazon EC2 User Guide</i>.</p>
         <ul>
            <li>
               <p>To include instance types with instance store volumes, specify
                  <code>included</code>.</p>
            </li>
            <li>
               <p>To require only instance types with instance store volumes, specify
                  <code>required</code>.</p>
            </li>
            <li>
               <p>To exclude instance types with instance store volumes, specify
                  <code>excluded</code>.</p>
            </li>
         </ul>
         <p>Default: <code>included</code>
         </p>")
  @as("LocalStorage")
  localStorage: option<localStorage>,
  @ocaml.doc("<p>The minimum and maximum number of network interfaces.</p>
         <p>Default: No minimum or maximum limits</p>")
  @as("NetworkInterfaceCount")
  networkInterfaceCount: option<networkInterfaceCountRequest>,
  @ocaml.doc("<p>Indicates whether instance types must support hibernation for On-Demand Instances.</p>
         <p>This parameter is not supported for <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html\">GetSpotPlacementScores</a>.</p>
         <p>Default: <code>false</code>
         </p>")
  @as("RequireHibernateSupport")
  requireHibernateSupport: option<boolean_>,
  @ocaml.doc("<p>Indicates whether burstable performance T instance types are included, excluded, or required. For more information, see 
      <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\">Burstable performance instances</a>.</p>
         <ul>
            <li>
               <p>To include burstable performance instance types, specify <code>included</code>.</p>
            </li>
            <li>
               <p>To require only burstable performance instance types, specify <code>required</code>.</p>
            </li>
            <li>
               <p>To exclude burstable performance instance types, specify <code>excluded</code>.</p>
            </li>
         </ul>
         <p>Default: <code>excluded</code>
         </p>")
  @as("BurstablePerformance")
  burstablePerformance: option<burstablePerformance>,
  @ocaml.doc("<p>Indicates whether bare metal instance types must be included, excluded, or required.</p>
         <ul>
            <li>
               <p>To include bare metal instance types, specify <code>included</code>.</p>
            </li>
            <li>
               <p>To require only bare metal instance types, specify <code>required</code>.</p>
            </li>
            <li>
               <p>To exclude bare metal instance types, specify <code>excluded</code>.</p>
            </li>
         </ul>
         <p>Default: <code>excluded</code>
         </p>")
  @as("BareMetal")
  bareMetal: option<bareMetal>,
  @ocaml.doc("<p>The price protection threshold for On-Demand Instances. This is the maximum you’ll pay for an On-Demand Instance,
         expressed as a percentage above the cheapest M, C, or R instance type with your specified
         attributes. When Amazon EC2 selects instance types with your attributes, it excludes instance
         types priced above your threshold.</p>
         <p>The parameter accepts an integer, which Amazon EC2 interprets as a percentage.</p>
         <p>To turn off price protection, specify a high value, such as <code>999999</code>.</p>
         <p>This parameter is not supported for <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html\">GetSpotPlacementScores</a> and <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceTypesFromInstanceRequirements.html\">GetInstanceTypesFromInstanceRequirements</a>.</p>
         <note>
            <p>If you set <code>TargetCapacityUnitType</code> to <code>vcpu</code> or
         <code>memory-mib</code>, the price protection threshold is applied based on the
         per-vCPU or per-memory price instead of the per-instance price.</p>
         </note>
         <p>Default: <code>20</code>
         </p>")
  @as("OnDemandMaxPricePercentageOverLowestPrice")
  onDemandMaxPricePercentageOverLowestPrice: option<integer_>,
  @ocaml.doc("<p>The price protection threshold for Spot Instance. This is the maximum you’ll pay for an Spot Instance,
         expressed as a percentage above the cheapest M, C, or R instance type with your specified
         attributes. When Amazon EC2 selects instance types with your attributes, it excludes instance
         types priced above your threshold.</p>
         <p>The parameter accepts an integer, which Amazon EC2 interprets as a percentage.</p>
         <p>To turn off price protection, specify a high value, such as <code>999999</code>.</p>
         <p>This parameter is not supported for <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html\">GetSpotPlacementScores</a> and <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceTypesFromInstanceRequirements.html\">GetInstanceTypesFromInstanceRequirements</a>.</p>
         <note>
            <p>If you set <code>TargetCapacityUnitType</code> to <code>vcpu</code> or
         <code>memory-mib</code>, the price protection threshold is applied based on the
         per-vCPU or per-memory price instead of the per-instance price.</p>
         </note>
         <p>Default: <code>100</code>
         </p>")
  @as("SpotMaxPricePercentageOverLowestPrice")
  spotMaxPricePercentageOverLowestPrice: option<integer_>,
  @ocaml.doc("<p>Indicates whether current or previous generation instance types are included. The
      current generation instance types are recommended for use. Current generation instance types are
      typically the latest two to three generations in each instance family. For more
      information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\">Instance types</a> in the
      <i>Amazon EC2 User Guide</i>.</p>
         <p>For current generation instance types, specify <code>current</code>.</p>
         <p>For previous generation instance types, specify <code>previous</code>.</p>
         <p>Default: Current and previous generation instance types</p>")
  @as("InstanceGenerations")
  instanceGenerations: option<instanceGenerationSet>,
  @ocaml.doc("<p>The instance types to exclude. You can use strings with one or more wild cards, represented by
         an asterisk (<code>*</code>), to exclude an instance family, type, size, or generation. The
         following are examples: <code>m5.8xlarge</code>, <code>c5*.*</code>, <code>m5a.*</code>,
            <code>r*</code>, <code>*3*</code>.</p>
         <p>For example, if you specify <code>c5*</code>,Amazon EC2 will exclude the entire C5 instance
      family, which includes all C5a and C5n instance types. If you specify
      <code>m5a.*</code>, Amazon EC2 will exclude all the M5a instance types, but not the M5n
      instance types.</p>
         <p>Default: No excluded instance types</p>")
  @as("ExcludedInstanceTypes")
  excludedInstanceTypes: option<excludedInstanceTypeSet>,
  @ocaml.doc("<p>The minimum and maximum amount of memory per vCPU, in GiB.</p>
         <p>Default: No minimum or maximum limits</p>")
  @as("MemoryGiBPerVCpu")
  memoryGiBPerVCpu: option<memoryGiBPerVCpuRequest>,
  @ocaml.doc("<p>The CPU manufacturers to include.</p>
         <ul>
            <li>
               <p>For instance types with Intel CPUs, specify <code>intel</code>.</p>
            </li>
            <li>
               <p>For instance types with AMD CPUs, specify <code>amd</code>.</p>
            </li>
            <li>
               <p>For instance types with Amazon Web Services CPUs, specify <code>amazon-web-services</code>.</p>
            </li>
         </ul>
         <note>
            <p>Don't confuse the CPU manufacturer with the CPU architecture. Instances will 
         be launched with a compatible CPU architecture based on the Amazon Machine Image (AMI) that you 
         specify in your launch template.</p>
         </note>
         <p>Default: Any manufacturer</p>")
  @as("CpuManufacturers")
  cpuManufacturers: option<cpuManufacturerSet>,
  @ocaml.doc("<p>The minimum and maximum amount of memory, in MiB.</p>") @as("MemoryMiB")
  memoryMiB: memoryMiBRequest,
  @ocaml.doc("<p>The minimum and maximum number of vCPUs.</p>") @as("VCpuCount")
  vcpuCount: vcpuCountRangeRequest,
}
@ocaml.doc("<p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will
         identify instance types with these attributes.</p>
         <p>When you specify multiple parameters, you get instance types that satisfy all of the
         specified parameters. If you specify multiple values for a parameter, you get instance
         types that satisfy any of the specified values.</p>
         <note>
            <p>You must specify <code>VCpuCount</code> and <code>MemoryMiB</code>. All other parameters
            are optional. Any unspecified optional parameter is set to its default.</p>
         </note>
         <p>For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html\">Attribute-based instance type selection for EC2 Fleet</a>, <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-attribute-based-instance-type-selection.html\">Attribute-based instance type selection for Spot Fleet</a>, and <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-placement-score.html\">Spot
            placement score</a> in the <i>Amazon EC2 User Guide</i>.</p>")
type instanceRequirements = {
  @ocaml.doc("<p>The minimum and maximum amount of total accelerator memory, in MiB.</p>
         <p>Default: No minimum or maximum limits</p>")
  @as("AcceleratorTotalMemoryMiB")
  acceleratorTotalMemoryMiB: option<acceleratorTotalMemoryMiB>,
  @ocaml.doc("<p>The accelerators that must be on the instance type.</p>
         <ul>
            <li>
               <p>For instance types with NVIDIA A100 GPUs, specify <code>a100</code>.</p>
            </li>
            <li>
               <p>For instance types with NVIDIA V100 GPUs, specify <code>v100</code>.</p>
            </li>
            <li>
               <p>For instance types with NVIDIA K80 GPUs, specify <code>k80</code>.</p>
            </li>
            <li>
               <p>For instance types with NVIDIA T4 GPUs, specify <code>t4</code>.</p>
            </li>
            <li>
               <p>For instance types with NVIDIA M60 GPUs, specify <code>m60</code>.</p>
            </li>
            <li>
               <p>For instance types with AMD Radeon Pro V520 GPUs, specify <code>radeon-pro-v520</code>.</p>
            </li>
            <li>
               <p>For instance types with Xilinx VU9P FPGAs, specify <code>vu9p</code>.</p>
            </li>
         </ul>
         <p>Default: Any accelerator</p>")
  @as("AcceleratorNames")
  acceleratorNames: option<acceleratorNameSet>,
  @ocaml.doc("<p>Indicates whether instance types must have accelerators by specific manufacturers.</p>
         <ul>
            <li>
               <p>For instance types with NVIDIA devices, specify <code>nvidia</code>.</p>
            </li>
            <li>
               <p>For instance types with AMD devices, specify <code>amd</code>.</p>
            </li>
            <li>
               <p>For instance types with Amazon Web Services devices, specify <code>amazon-web-services</code>.</p>
            </li>
            <li>
               <p>For instance types with Xilinx devices, specify <code>xilinx</code>.</p>
            </li>
         </ul>
         <p>Default: Any manufacturer</p>")
  @as("AcceleratorManufacturers")
  acceleratorManufacturers: option<acceleratorManufacturerSet>,
  @ocaml.doc("<p>The minimum and maximum number of accelerators (GPUs, FPGAs, or Amazon Web Services Inferentia chips) on
         an instance.</p>
         <p>To exclude accelerator-enabled instance types, set <code>Max</code> to <code>0</code>.</p>
         <p>Default: No minimum or maximum limits</p>")
  @as("AcceleratorCount")
  acceleratorCount: option<acceleratorCount>,
  @ocaml.doc("<p>The accelerator types that must be on the instance type.</p>
         <ul>
            <li>
               <p>For instance types with GPU accelerators, specify <code>gpu</code>.</p>
            </li>
            <li>
               <p>For instance types with FPGA accelerators, specify <code>fpga</code>.</p>
            </li>
            <li>
               <p>For instance types with inference accelerators, specify <code>inference</code>.</p>
            </li>
         </ul>
         <p>Default: Any accelerator type</p>")
  @as("AcceleratorTypes")
  acceleratorTypes: option<acceleratorTypeSet>,
  @ocaml.doc("<p>The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps. For more information, see
            <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html\">Amazon
            EBS–optimized instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
         <p>Default: No minimum or maximum limits</p>")
  @as("BaselineEbsBandwidthMbps")
  baselineEbsBandwidthMbps: option<baselineEbsBandwidthMbps>,
  @ocaml.doc("<p>The minimum and maximum amount of total local storage, in GB.</p>
         <p>Default: No minimum or maximum limits</p>")
  @as("TotalLocalStorageGB")
  totalLocalStorageGB: option<totalLocalStorageGB>,
  @ocaml.doc("<p>The type of local storage that is required.</p>
         <ul>
            <li>
               <p>For instance types with hard disk drive (HDD) storage, specify <code>hdd</code>.</p>
            </li>
            <li>
               <p>For instance types with solid state drive (SDD) storage, specify <code>sdd</code>.</p>
            </li>
         </ul>
         <p>Default: <code>hdd</code> and <code>sdd</code>
         </p>")
  @as("LocalStorageTypes")
  localStorageTypes: option<localStorageTypeSet>,
  @ocaml.doc("<p>Indicates whether instance types with instance store volumes are included, excluded, or required. For more information,
            <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html\">Amazon
            EC2 instance store</a> in the <i>Amazon EC2 User Guide</i>.</p>
         <ul>
            <li>
               <p>To include instance types with instance store volumes, specify
               <code>included</code>.</p>
            </li>
            <li>
               <p>To require only instance types with instance store volumes, specify
                  <code>required</code>.</p>
            </li>
            <li>
               <p>To exclude instance types with instance store volumes, specify
               <code>excluded</code>.</p>
            </li>
         </ul>
         <p>Default: <code>included</code>
         </p>")
  @as("LocalStorage")
  localStorage: option<localStorage>,
  @ocaml.doc("<p>The minimum and maximum number of network interfaces.</p>
         <p>Default: No minimum or maximum limits</p>")
  @as("NetworkInterfaceCount")
  networkInterfaceCount: option<networkInterfaceCount>,
  @ocaml.doc("<p>Indicates whether instance types must support hibernation for On-Demand
         Instances.</p>
         <p>This parameter is not supported for <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html\">GetSpotPlacementScores</a>.</p>
         <p>Default: <code>false</code>
         </p>")
  @as("RequireHibernateSupport")
  requireHibernateSupport: option<boolean_>,
  @ocaml.doc("<p>Indicates whether burstable performance T instance types are included, excluded, or required. For more information, see 
      <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\">Burstable performance instances</a>.</p>
         <ul>
            <li>
               <p>To include burstable performance instance types, specify <code>included</code>.</p>
            </li>
            <li>
               <p>To require only burstable performance instance types, specify <code>required</code>.</p>
            </li>
            <li>
               <p>To exclude burstable performance instance types, specify <code>excluded</code>.</p>
            </li>
         </ul>
         <p>Default: <code>excluded</code>
         </p>")
  @as("BurstablePerformance")
  burstablePerformance: option<burstablePerformance>,
  @ocaml.doc("<p>Indicates whether bare metal instance types must be included, excluded, or required.</p>
         <ul>
            <li>
               <p>To include bare metal instance types, specify <code>included</code>.</p>
            </li>
            <li>
               <p>To require only bare metal instance types, specify <code>required</code>.</p>
            </li>
            <li>
               <p>To exclude bare metal instance types, specify <code>excluded</code>.</p>
            </li>
         </ul>
         <p>Default: <code>excluded</code>
         </p>")
  @as("BareMetal")
  bareMetal: option<bareMetal>,
  @ocaml.doc("<p>The price protection threshold for On-Demand Instances. This is the maximum you’ll pay for an On-Demand Instance,
         expressed as a percentage above the cheapest M, C, or R instance type with your specified
         attributes. When Amazon EC2 selects instance types with your attributes, it excludes instance
         types priced above your threshold.</p>
         <p>The parameter accepts an integer, which Amazon EC2 interprets as a percentage.</p>
         <p>To turn off price protection, specify a high value, such as <code>999999</code>.</p>
         <p>This parameter is not supported for <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html\">GetSpotPlacementScores</a> and <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceTypesFromInstanceRequirements.html\">GetInstanceTypesFromInstanceRequirements</a>.</p>
         <note>
            <p>If you set <code>TargetCapacityUnitType</code> to <code>vcpu</code> or
         <code>memory-mib</code>, the price protection threshold is applied based on the
         per-vCPU or per-memory price instead of the per-instance price.</p>
         </note>
         <p>Default: <code>20</code>
         </p>")
  @as("OnDemandMaxPricePercentageOverLowestPrice")
  onDemandMaxPricePercentageOverLowestPrice: option<integer_>,
  @ocaml.doc("<p>The price protection threshold for Spot Instances. This is the maximum you’ll pay for a Spot Instance,
         expressed as a percentage above the cheapest M, C, or R instance type with your specified
         attributes. When Amazon EC2 selects instance types with your attributes, it excludes instance
         types priced above your threshold.</p>
         <p>The parameter accepts an integer, which Amazon EC2 interprets as a percentage.</p>
         <p>To turn off price protection, specify a high value, such as <code>999999</code>.</p>
         <p>This parameter is not supported for <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html\">GetSpotPlacementScores</a> and <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceTypesFromInstanceRequirements.html\">GetInstanceTypesFromInstanceRequirements</a>.</p>
         <note>
            <p>If you set <code>TargetCapacityUnitType</code> to <code>vcpu</code> or
               <code>memory-mib</code>, the price protection threshold is applied based on the
            per-vCPU or per-memory price instead of the per-instance price.</p>
         </note>
         <p>Default: <code>100</code>
         </p>")
  @as("SpotMaxPricePercentageOverLowestPrice")
  spotMaxPricePercentageOverLowestPrice: option<integer_>,
  @ocaml.doc("<p>Indicates whether current or previous generation instance types are included. The
      current generation instance types are recommended for use. Current generation instance types are
      typically the latest two to three generations in each instance family. For more
      information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\">Instance types</a> in the
      <i>Amazon EC2 User Guide</i>.</p>
         <p>For current generation instance types, specify <code>current</code>.</p>
         <p>For previous generation instance types, specify <code>previous</code>.</p>
         <p>Default: Current and previous generation instance types</p>")
  @as("InstanceGenerations")
  instanceGenerations: option<instanceGenerationSet>,
  @ocaml.doc("<p>The instance types to exclude. You can use strings with one or more wild cards, represented by
      an asterisk (<code>*</code>), to exclude an instance type, size, or generation. The
      following are examples: <code>m5.8xlarge</code>, <code>c5*.*</code>, <code>m5a.*</code>,
      <code>r*</code>, <code>*3*</code>.</p>
         <p>For example, if you specify <code>c5*</code>,Amazon EC2 will exclude the entire C5 instance
      family, which includes all C5a and C5n instance types. If you specify
      <code>m5a.*</code>, Amazon EC2 will exclude all the M5a instance types, but not the M5n
      instance types.</p>
         <p>Default: No excluded instance types</p>")
  @as("ExcludedInstanceTypes")
  excludedInstanceTypes: option<excludedInstanceTypeSet>,
  @ocaml.doc("<p>The minimum and maximum amount of memory per vCPU, in GiB.</p>
         <p>Default: No minimum or maximum limits</p>")
  @as("MemoryGiBPerVCpu")
  memoryGiBPerVCpu: option<memoryGiBPerVCpu>,
  @ocaml.doc("<p>The CPU manufacturers to include.</p>
         <ul>
            <li>
               <p>For instance types with Intel CPUs, specify <code>intel</code>.</p>
            </li>
            <li>
               <p>For instance types with AMD CPUs, specify <code>amd</code>.</p>
            </li>
            <li>
               <p>For instance types with Amazon Web Services CPUs, specify <code>amazon-web-services</code>.</p>
            </li>
         </ul>
         <note>
            <p>Don't confuse the CPU manufacturer with the CPU architecture. Instances will 
         be launched with a compatible CPU architecture based on the Amazon Machine Image (AMI) that you 
         specify in your launch template.</p>
         </note>
         <p>Default: Any manufacturer</p>")
  @as("CpuManufacturers")
  cpuManufacturers: option<cpuManufacturerSet>,
  @ocaml.doc("<p>The minimum and maximum amount of memory, in MiB.</p>") @as("MemoryMiB")
  memoryMiB: option<memoryMiB>,
  @ocaml.doc("<p>The minimum and maximum number of vCPUs.</p>") @as("VCpuCount")
  vcpuCount: option<vcpuCountRange>,
}
@ocaml.doc("<p>Describes a private IPv4 address.</p>")
type instancePrivateIpAddress = {
  @ocaml.doc("<p>The private IPv4 address of the network interface.</p>") @as("PrivateIpAddress")
  privateIpAddress: option<string_>,
  @ocaml.doc("<p>The private IPv4 DNS name.</p>") @as("PrivateDnsName")
  privateDnsName: option<string_>,
  @ocaml.doc(
    "<p>Indicates whether this IPv4 address is the primary private IP address of the network interface.</p>"
  )
  @as("Primary")
  primary: option<boolean_>,
  @ocaml.doc(
    "<p>The association information for an Elastic IP address for the network interface.</p>"
  )
  @as("Association")
  association: option<instanceNetworkInterfaceAssociation>,
}
@ocaml.doc("<p>Describes the monitoring of an instance.</p>")
type instanceMonitoring = {
  @ocaml.doc("<p>The monitoring for the instance.</p>") @as("Monitoring")
  monitoring: option<monitoring>,
  @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<string_>,
}
@ocaml.doc("<p>Describes the market (purchasing) option for the instances.</p>")
type instanceMarketOptionsRequest = {
  @ocaml.doc("<p>The options for Spot Instances.</p>") @as("SpotOptions")
  spotOptions: option<spotMarketOptions>,
  @ocaml.doc("<p>The market type.</p>") @as("MarketType") marketType: option<marketType>,
}
type instanceIpv6PrefixList = array<instanceIpv6Prefix>
type instanceIpv6AddressListRequest = array<instanceIpv6AddressRequest>
type instanceIpv6AddressList = array<instanceIpv6Address>
type instanceIpv4PrefixList = array<instanceIpv4Prefix>
type instanceEventWindowTimeRangeRequestSet = array<instanceEventWindowTimeRangeRequest>
type instanceEventWindowTimeRangeList = array<instanceEventWindowTimeRange>
type instanceCreditSpecificationListRequest = array<instanceCreditSpecificationRequest>
type instanceCreditSpecificationList = array<instanceCreditSpecification>
type instanceCountList = array<instanceCount>
@ocaml.doc("<p>Describes a block device mapping entry.</p>")
type instanceBlockDeviceMappingSpecification = {
  @ocaml.doc("<p>The virtual device name.</p>") @as("VirtualName") virtualName: option<string_>,
  @ocaml.doc("<p>suppress the specified device included in the block device mapping.</p>")
  @as("NoDevice")
  noDevice: option<string_>,
  @ocaml.doc("<p>Parameters used to automatically set up EBS volumes when the instance is
            launched.</p>")
  @as("Ebs")
  ebs: option<ebsInstanceBlockDeviceSpecification>,
  @ocaml.doc("<p>The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>")
  @as("DeviceName")
  deviceName: option<string_>,
}
@ocaml.doc("<p>Describes a block device mapping.</p>")
type instanceBlockDeviceMapping = {
  @ocaml.doc("<p>Parameters used to automatically set up EBS volumes when the instance is
            launched.</p>")
  @as("Ebs")
  ebs: option<ebsInstanceBlockDevice>,
  @ocaml.doc("<p>The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>")
  @as("DeviceName")
  deviceName: option<string_>,
}
type inferenceDeviceInfoList = array<inferenceDeviceInfo>
@ocaml.doc("<p>Describes an import volume task.</p>")
type importVolumeTaskDetails = {
  @ocaml.doc("<p>The volume.</p>") @as("Volume") volume: option<diskImageVolumeDescription>,
  @ocaml.doc("<p>The image.</p>") @as("Image") image: option<diskImageDescription>,
  @ocaml.doc("<p>The description you provided when starting the import volume task.</p>")
  @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The number of bytes converted so far.</p>") @as("BytesConverted")
  bytesConverted: option<long>,
  @ocaml.doc("<p>The Availability Zone where the resulting volume will reside.</p>")
  @as("AvailabilityZone")
  availabilityZone: option<string_>,
}
@ocaml.doc("<p>Describes an import volume task.</p>")
type importInstanceVolumeDetailItem = {
  @ocaml.doc("<p>The volume.</p>") @as("Volume") volume: option<diskImageVolumeDescription>,
  @ocaml.doc("<p>The status information or errors related to the disk image.</p>")
  @as("StatusMessage")
  statusMessage: option<string_>,
  @ocaml.doc("<p>The status of the import of this particular disk image.</p>") @as("Status")
  status: option<string_>,
  @ocaml.doc("<p>The image.</p>") @as("Image") image: option<diskImageDescription>,
  @ocaml.doc("<p>A description of the task.</p>") @as("Description") description: option<string_>,
  @ocaml.doc("<p>The number of bytes converted so far.</p>") @as("BytesConverted")
  bytesConverted: option<long>,
  @ocaml.doc("<p>The Availability Zone where the resulting instance will reside.</p>")
  @as("AvailabilityZone")
  availabilityZone: option<string_>,
}
@ocaml.doc("<p>Describes the launch specification for VM import.</p>")
type importInstanceLaunchSpecification = {
  @ocaml.doc("<p>The Base64-encoded user data to make available to the instance.</p>")
  @as("UserData")
  userData: option<userData>,
  @ocaml.doc("<p>[EC2-VPC] The ID of the subnet in which to launch the instance.</p>")
  @as("SubnetId")
  subnetId: option<subnetId>,
  @ocaml.doc("<p>[EC2-VPC] An available IP address from the IP address range of the subnet.</p>")
  @as("PrivateIpAddress")
  privateIpAddress: option<string_>,
  @ocaml.doc("<p>The placement information for the instance.</p>") @as("Placement")
  placement: option<placement>,
  @ocaml.doc("<p>Indicates whether monitoring is enabled.</p>") @as("Monitoring")
  monitoring: option<boolean_>,
  @ocaml.doc("<p>The instance type. For more information about the instance types that you can import, see <a href=\"https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-instance-types\">Instance Types</a> in the
   VM Import/Export User Guide.</p>")
  @as("InstanceType")
  instanceType: option<instanceType>,
  @ocaml.doc("<p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the
   operating system command for system shutdown).</p>")
  @as("InstanceInitiatedShutdownBehavior")
  instanceInitiatedShutdownBehavior: option<shutdownBehavior>,
  @ocaml.doc("<p>The security group names.</p>") @as("GroupNames")
  groupNames: option<securityGroupStringList>,
  @ocaml.doc("<p>The security group IDs.</p>") @as("GroupIds")
  groupIds: option<securityGroupIdStringList>,
  @ocaml.doc("<p>The architecture of the instance.</p>") @as("Architecture")
  architecture: option<architectureValues>,
  @ocaml.doc("<p>Reserved.</p>") @as("AdditionalInfo") additionalInfo: option<string_>,
}
type importImageLicenseSpecificationListResponse = array<importImageLicenseConfigurationResponse>
type importImageLicenseSpecificationListRequest = array<importImageLicenseConfigurationRequest>
type imageRecycleBinInfoList = array<imageRecycleBinInfo>
@ocaml.doc("<p>Describes the disk container object for an import image task.</p>")
type imageDiskContainer = {
  @ocaml.doc("<p>The S3 bucket for the disk image.</p>") @as("UserBucket")
  userBucket: option<userBucket>,
  @ocaml.doc("<p>The URL to the Amazon S3-based disk image being imported. The URL can either be a https URL (https://..) or an
   Amazon S3 URL (s3://..)</p>")
  @as("Url")
  url: option<string_>,
  @ocaml.doc("<p>The ID of the EBS snapshot to be used for importing the snapshot.</p>")
  @as("SnapshotId")
  snapshotId: option<snapshotId>,
  @ocaml.doc("<p>The format of the disk image being imported.</p>
         <p>Valid values: <code>OVA</code> | <code>VHD</code> | <code>VHDX</code> | <code>VMDK</code> | <code>RAW</code> 
         </p>")
  @as("Format")
  format: option<string_>,
  @ocaml.doc("<p>The block device mapping for the disk.</p>") @as("DeviceName")
  deviceName: option<string_>,
  @ocaml.doc("<p>The description of the disk image.</p>") @as("Description")
  description: option<string_>,
}
type idFormatList = array<idFormat>
@ocaml.doc("<p>Describes an association between an IAM instance profile and an instance.</p>")
type iamInstanceProfileAssociation = {
  @ocaml.doc("<p>The time the IAM instance profile was associated with the instance.</p>")
  @as("Timestamp")
  timestamp_: option<dateTime>,
  @ocaml.doc("<p>The state of the association.</p>") @as("State")
  state: option<iamInstanceProfileAssociationState>,
  @ocaml.doc("<p>The IAM instance profile.</p>") @as("IamInstanceProfile")
  iamInstanceProfile: option<iamInstanceProfile>,
  @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<string_>,
  @ocaml.doc("<p>The ID of the association.</p>") @as("AssociationId")
  associationId: option<string_>,
}
type ikeversionsRequestList = array<ikeversionsRequestListValue>
type ikeversionsList = array<ikeversionsListValue>
type hostOfferingSet = array<hostOffering>
type hostInstanceList = array<hostInstance>
@ocaml.doc("<p>Describes an event in the history of an EC2 Fleet.</p>")
type historyRecordEntry = {
  @ocaml.doc("<p>The date and time of the event, in UTC format (for example,
            <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>")
  @as("Timestamp")
  timestamp_: option<dateTime>,
  @ocaml.doc("<p>The event type.</p>") @as("EventType") eventType: option<fleetEventType>,
  @ocaml.doc("<p>Information about the event.</p>") @as("EventInformation")
  eventInformation: option<eventInformation>,
}
@ocaml.doc("<p>Describes an event in the history of the Spot Fleet request.</p>")
type historyRecord = {
  @ocaml.doc("<p>The date and time of the event, in UTC format (for example,
                <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>")
  @as("Timestamp")
  timestamp_: option<dateTime>,
  @ocaml.doc("<p>The event type.</p>
        <ul>
            <li>
                <p>
                  <code>error</code> - An error with the Spot Fleet request.</p>
            </li>
            <li>
                <p>
                  <code>fleetRequestChange</code> - A change in the status or configuration of
                    the Spot Fleet request.</p>
            </li>
            <li>
                <p>
                  <code>instanceChange</code> - An instance was launched or terminated.</p>
            </li>
            <li>
                <p>
                  <code>Information</code> - An informational event.</p>
            </li>
         </ul>")
  @as("EventType")
  eventType: option<eventType>,
  @ocaml.doc("<p>Information about the event.</p>") @as("EventInformation")
  eventInformation: option<eventInformation>,
}
type groupIdentifierSet = array<securityGroupIdentifier>
type groupIdentifierList = array<groupIdentifier>
@ocaml.doc("<p>Describes the GPU accelerators for the instance type.</p>")
type gpuDeviceInfo = {
  @ocaml.doc("<p>Describes the memory available to the GPU accelerator.</p>") @as("MemoryInfo")
  memoryInfo: option<gpuDeviceMemoryInfo>,
  @ocaml.doc("<p>The number of GPUs for the instance type.</p>") @as("Count")
  count: option<gpuDeviceCount>,
  @ocaml.doc("<p>The manufacturer of the GPU accelerator.</p>") @as("Manufacturer")
  manufacturer: option<gpuDeviceManufacturerName>,
  @ocaml.doc("<p>The name of the GPU accelerator.</p>") @as("Name") name: option<gpuDeviceName>,
}
@ocaml.doc("<p>Describes the FPGA accelerator for the instance type.</p>")
type fpgaDeviceInfo = {
  @ocaml.doc("<p>Describes the memory for the FPGA accelerator for the instance type.</p>")
  @as("MemoryInfo")
  memoryInfo: option<fpgaDeviceMemoryInfo>,
  @ocaml.doc("<p>The count of FPGA accelerators for the instance type.</p>") @as("Count")
  count: option<fpgaDeviceCount>,
  @ocaml.doc("<p>The manufacturer of the FPGA accelerator.</p>") @as("Manufacturer")
  manufacturer: option<fpgaDeviceManufacturerName>,
  @ocaml.doc("<p>The name of the FPGA accelerator.</p>") @as("Name") name: option<fpgaDeviceName>,
}
@ocaml.doc(
  "<p>The strategies for managing your Spot Instances that are at an elevated risk of being interrupted.</p>"
)
type fleetSpotMaintenanceStrategiesRequest = {
  @ocaml.doc("<p>The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an
         elevated risk of being interrupted.</p>")
  @as("CapacityRebalance")
  capacityRebalance: option<fleetSpotCapacityRebalanceRequest>,
}
@ocaml.doc("<p>The strategies for managing your Spot Instances that are at an elevated risk of being
         interrupted.</p>")
type fleetSpotMaintenanceStrategies = {
  @ocaml.doc("<p>The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an
         elevated risk of being interrupted.</p>")
  @as("CapacityRebalance")
  capacityRebalance: option<fleetSpotCapacityRebalance>,
}
type fleetCapacityReservationSet = array<fleetCapacityReservation>
@ocaml.doc("<p>A filter name and value pair that is used to return a more specific list of results from a describe operation. 
         Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.</p>
         <p>If you specify multiple filters, the filters are joined with an <code>AND</code>, and the request returns only 
           results that match all of the specified filters.</p>")
type filter = {
  @ocaml.doc("<p>The filter values. Filter values are case-sensitive. If you specify multiple values for a 
         filter, the values are joined with an <code>OR</code>, and the request returns all results 
         that match any of the specified values.</p>")
  @as("Values")
  values: option<valueStringList>,
  @ocaml.doc("<p>The name of the filter. Filter names are case-sensitive.</p>") @as("Name")
  name: option<string_>,
}
@ocaml.doc("<p>Describes a Reserved Instance whose queued purchase was not deleted.</p>")
type failedQueuedPurchaseDeletion = {
  @ocaml.doc("<p>The ID of the Reserved Instance.</p>") @as("ReservedInstancesId")
  reservedInstancesId: option<string_>,
  @ocaml.doc("<p>The error.</p>") @as("Error") error: option<deleteQueuedReservedInstancesError>,
}
@ocaml.doc("<p>Describes a Capacity Reservation Fleet that could not be cancelled.</p>")
type failedCapacityReservationFleetCancellationResult = {
  @ocaml.doc("<p>Information about the Capacity Reservation Fleet cancellation error.</p>")
  @as("CancelCapacityReservationFleetError")
  cancelCapacityReservationFleetError: option<cancelCapacityReservationFleetError>,
  @ocaml.doc("<p>The ID of the Capacity Reservation Fleet that could not be cancelled.</p>")
  @as("CapacityReservationFleetId")
  capacityReservationFleetId: option<capacityReservationFleetId>,
}
type errorSet = array<validationError>
type enableFastSnapshotRestoreSuccessSet = array<enableFastSnapshotRestoreSuccessItem>
@ocaml.doc(
  "<p>Contains information about an error that occurred when enabling fast snapshot restores.</p>"
)
type enableFastSnapshotRestoreStateErrorItem = {
  @ocaml.doc("<p>The error.</p>") @as("Error") error: option<enableFastSnapshotRestoreStateError>,
  @ocaml.doc("<p>The Availability Zone.</p>") @as("AvailabilityZone")
  availabilityZone: option<string_>,
}
type elasticInferenceAccelerators = array<elasticInferenceAccelerator>
type elasticInferenceAcceleratorAssociationList = array<elasticInferenceAcceleratorAssociation>
type elasticGpuSpecifications = array<elasticGpuSpecification>
type elasticGpuSpecificationResponseList = array<elasticGpuSpecificationResponse>
type elasticGpuSpecificationList = array<elasticGpuSpecification>
type elasticGpuAssociationList = array<elasticGpuAssociation>
@ocaml.doc("<p>Describes the Amazon EBS features supported by the instance type.</p>")
type ebsInfo = {
  @ocaml.doc("<p>Indicates whether non-volatile memory express (NVMe) is supported.</p>")
  @as("NvmeSupport")
  nvmeSupport: option<ebsNvmeSupport>,
  @ocaml.doc("<p>Describes the optimized EBS performance for the instance type.</p>")
  @as("EbsOptimizedInfo")
  ebsOptimizedInfo: option<ebsOptimizedInfo>,
  @ocaml.doc("<p>Indicates whether Amazon EBS encryption is supported.</p>")
  @as("EncryptionSupport")
  encryptionSupport: option<ebsEncryptionSupport>,
  @ocaml.doc("<p>Indicates whether the instance type is Amazon EBS-optimized. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html\">Amazon EBS-optimized
    instances</a> in <i>Amazon EC2 User Guide</i>.</p>")
  @as("EbsOptimizedSupport")
  ebsOptimizedSupport: option<ebsOptimizedSupport>,
}
@ocaml.doc("<p>Information about the DNS server to be used.</p>")
type dnsServersOptionsModifyStructure = {
  @ocaml.doc("<p>Indicates whether DNS servers should be used. Specify <code>False</code> to delete the existing DNS 
			servers.</p>")
  @as("Enabled")
  enabled: option<boolean_>,
  @ocaml.doc("<p>The IPv4 address range, in CIDR notation, of the DNS servers to be used. You can specify up to 
			two DNS servers. Ensure that the DNS servers can be reached by the clients. The specified values 
			overwrite the existing values.</p>")
  @as("CustomDnsServers")
  customDnsServers: option<valueStringList>,
}
type dnsEntrySet = array<dnsEntry>
type diskInfoList = array<diskInfo>
@ocaml.doc("<p>Describes a disk image.</p>")
type diskImage = {
  @ocaml.doc("<p>Information about the volume.</p>") @as("Volume") volume: option<volumeDetail>,
  @ocaml.doc("<p>Information about the disk image.</p>") @as("Image")
  image: option<diskImageDetail>,
  @ocaml.doc("<p>A description of the disk image.</p>") @as("Description")
  description: option<string_>,
}
type disableFastSnapshotRestoreSuccessSet = array<disableFastSnapshotRestoreSuccessItem>
@ocaml.doc(
  "<p>Contains information about an error that occurred when disabling fast snapshot restores.</p>"
)
type disableFastSnapshotRestoreStateErrorItem = {
  @ocaml.doc("<p>The error.</p>") @as("Error") error: option<disableFastSnapshotRestoreStateError>,
  @ocaml.doc("<p>The Availability Zone.</p>") @as("AvailabilityZone")
  availabilityZone: option<string_>,
}
type dhcpConfigurationValueList = array<attributeValue>
type describeFastSnapshotRestoreSuccessSet = array<describeFastSnapshotRestoreSuccessItem>
@ocaml.doc("<p>Describe details about a fast-launch enabled Windows image that meets the requested 
			criteria. Criteria are defined by the <code>DescribeFastLaunchImages</code> action filters.</p>")
type describeFastLaunchImagesSuccessItem = {
  @ocaml.doc(
    "<p>The time that faster launching for the Windows AMI changed to the current state.</p>"
  )
  @as("StateTransitionTime")
  stateTransitionTime: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>The reason that faster launching for the Windows AMI changed to the current state.</p>"
  )
  @as("StateTransitionReason")
  stateTransitionReason: option<string_>,
  @ocaml.doc("<p>The current state of faster launching for the specified Windows AMI.</p>")
  @as("State")
  state: option<fastLaunchStateCode>,
  @ocaml.doc("<p>The owner ID for the fast-launch enabled Windows AMI.</p>") @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc(
    "<p>The maximum number of parallel instances that are launched for creating resources.</p>"
  )
  @as("MaxParallelLaunches")
  maxParallelLaunches: option<integer_>,
  @ocaml.doc("<p>The launch template that the fast-launch enabled Windows AMI uses when it launches 
			Windows instances from pre-provisioned snapshots.</p>")
  @as("LaunchTemplate")
  launchTemplate: option<fastLaunchLaunchTemplateSpecificationResponse>,
  @ocaml.doc("<p>A group of parameters that are used for pre-provisioning the associated 
			Windows AMI using snapshots.</p>")
  @as("SnapshotConfiguration")
  snapshotConfiguration: option<fastLaunchSnapshotConfigurationResponse>,
  @ocaml.doc("<p>The resource type that is used for pre-provisioning the Windows AMI. Supported values 
			include: <code>snapshot</code>.</p>")
  @as("ResourceType")
  resourceType: option<fastLaunchResourceType>,
  @ocaml.doc("<p>The image ID that identifies the fast-launch enabled Windows image.</p>")
  @as("ImageId")
  imageId: option<imageId>,
}
@ocaml.doc("<p>Information about the tag keys to deregister for the current Region. You can either specify 
   		individual tag keys or deregister all tag keys in the current Region. You must specify either
   		<code>IncludeAllTagsOfInstance</code> or <code>InstanceTagKeys</code> in the request</p>")
type deregisterInstanceTagAttributeRequest = {
  @ocaml.doc("<p>Information about the tag keys to deregister.</p>") @as("InstanceTagKeys")
  instanceTagKeys: option<instanceTagKeySet>,
  @ocaml.doc("<p>Indicates whether to deregister all tag keys in the current Region. Specify <code>false</code> 
   		to deregister all tag keys.</p>")
  @as("IncludeAllTagsOfInstance")
  includeAllTagsOfInstance: option<boolean_>,
}
type deleteLaunchTemplateVersionsResponseSuccessSet = array<
  deleteLaunchTemplateVersionsResponseSuccessItem,
>
@ocaml.doc("<p>Describes a launch template version that could not be deleted.</p>")
type deleteLaunchTemplateVersionsResponseErrorItem = {
  @ocaml.doc("<p>Information about the error.</p>") @as("ResponseError")
  responseError: option<responseError>,
  @ocaml.doc("<p>The version number of the launch template.</p>") @as("VersionNumber")
  versionNumber: option<long>,
  @ocaml.doc("<p>The name of the launch template.</p>") @as("LaunchTemplateName")
  launchTemplateName: option<string_>,
  @ocaml.doc("<p>The ID of the launch template.</p>") @as("LaunchTemplateId")
  launchTemplateId: option<string_>,
}
type deleteFleetSuccessSet = array<deleteFleetSuccessItem>
@ocaml.doc("<p>Describes an EC2 Fleet that was not successfully deleted.</p>")
type deleteFleetErrorItem = {
  @ocaml.doc("<p>The ID of the EC2 Fleet.</p>") @as("FleetId") fleetId: option<fleetId>,
  @ocaml.doc("<p>The error.</p>") @as("Error") error: option<deleteFleetError>,
}
type createVolumePermissionList = array<createVolumePermission>
@ocaml.doc("<p>Describes a connection notification for a VPC endpoint or VPC endpoint
            service.</p>")
type connectionNotification = {
  @ocaml.doc("<p>The state of the notification.</p>") @as("ConnectionNotificationState")
  connectionNotificationState: option<connectionNotificationState>,
  @ocaml.doc("<p>The events for the notification. Valid values are <code>Accept</code>,
                <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.</p>")
  @as("ConnectionEvents")
  connectionEvents: option<valueStringList>,
  @ocaml.doc("<p>The ARN of the SNS topic for the notification.</p>")
  @as("ConnectionNotificationArn")
  connectionNotificationArn: option<string_>,
  @ocaml.doc("<p>The type of notification.</p>") @as("ConnectionNotificationType")
  connectionNotificationType: option<connectionNotificationType>,
  @ocaml.doc("<p>The ID of the VPC endpoint.</p>") @as("VpcEndpointId")
  vpcEndpointId: option<string_>,
  @ocaml.doc("<p>The ID of the endpoint service.</p>") @as("ServiceId") serviceId: option<string_>,
  @ocaml.doc("<p>The ID of the notification.</p>") @as("ConnectionNotificationId")
  connectionNotificationId: option<string_>,
}
type coipAddressUsageSet = array<coipAddressUsage>
@ocaml.doc("<p>Information about a Client VPN endpoint route.</p>")
type clientVpnRoute = {
  @ocaml.doc("<p>A brief description of the route.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The current state of the route.</p>") @as("Status")
  status: option<clientVpnRouteStatus>,
  @ocaml.doc("<p>Indicates how the route was associated with the Client VPN endpoint. 
			<code>associate</code> indicates that the route was automatically added when the target network 
			was associated with the Client VPN endpoint. <code>add-route</code> indicates that the route 
			was manually added using the <b>CreateClientVpnRoute</b> action.</p>")
  @as("Origin")
  origin: option<string_>,
  @ocaml.doc("<p>The route type.</p>") @as("Type") type_: option<string_>,
  @ocaml.doc("<p>The ID of the subnet through which traffic is routed.</p>") @as("TargetSubnet")
  targetSubnet: option<string_>,
  @ocaml.doc("<p>The IPv4 address range, in CIDR notation, of the route destination.</p>")
  @as("DestinationCidr")
  destinationCidr: option<string_>,
  @ocaml.doc("<p>The ID of the Client VPN endpoint with which the route is associated.</p>")
  @as("ClientVpnEndpointId")
  clientVpnEndpointId: option<string_>,
}
@ocaml.doc("<p>Describes a client connection.</p>")
type clientVpnConnection = {
  @ocaml.doc(
    "<p>The statuses returned by the client connect handler for posture compliance, if applicable.</p>"
  )
  @as("PostureComplianceStatuses")
  postureComplianceStatuses: option<valueStringList>,
  @ocaml.doc("<p>The date and time the client connection was terminated.</p>")
  @as("ConnectionEndTime")
  connectionEndTime: option<string_>,
  @ocaml.doc("<p>The current state of the client connection.</p>") @as("Status")
  status: option<clientVpnConnectionStatus>,
  @ocaml.doc("<p>The common name associated with the client. This is either the name of the client certificate,
			or the Active Directory user name.</p>")
  @as("CommonName")
  commonName: option<string_>,
  @ocaml.doc("<p>The IP address of the client.</p>") @as("ClientIp") clientIp: option<string_>,
  @ocaml.doc("<p>The number of packets received by the client.</p>") @as("EgressPackets")
  egressPackets: option<string_>,
  @ocaml.doc("<p>The number of packets sent by the client.</p>") @as("IngressPackets")
  ingressPackets: option<string_>,
  @ocaml.doc("<p>The number of bytes received by the client.</p>") @as("EgressBytes")
  egressBytes: option<string_>,
  @ocaml.doc("<p>The number of bytes sent by the client.</p>") @as("IngressBytes")
  ingressBytes: option<string_>,
  @ocaml.doc("<p>The date and time the client connection was established.</p>")
  @as("ConnectionEstablishedTime")
  connectionEstablishedTime: option<string_>,
  @ocaml.doc("<p>The username of the client who established the client connection. This information is only provided 
			if Active Directory client authentication is used.</p>")
  @as("Username")
  username: option<string_>,
  @ocaml.doc("<p>The ID of the client connection.</p>") @as("ConnectionId")
  connectionId: option<string_>,
  @ocaml.doc("<p>The current date and time.</p>") @as("Timestamp") timestamp_: option<string_>,
  @ocaml.doc("<p>The ID of the Client VPN endpoint to which the client is connected.</p>")
  @as("ClientVpnEndpointId")
  clientVpnEndpointId: option<string_>,
}
@ocaml.doc("<p>Describes the authentication method to be used by a Client VPN endpoint. For more information, see <a href=\"https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/authentication-authrization.html#client-authentication\">Authentication</a> 
			in the <i>Client VPN Administrator Guide</i>.</p>")
type clientVpnAuthenticationRequest = {
  @ocaml.doc(
    "<p>Information about the IAM SAML identity provider to be used, if applicable. You must provide this information if <b>Type</b> is <code>federated-authentication</code>.</p>"
  )
  @as("FederatedAuthentication")
  federatedAuthentication: option<federatedAuthenticationRequest>,
  @ocaml.doc(
    "<p>Information about the authentication certificates to be used, if applicable. You must provide this information if <b>Type</b> is <code>certificate-authentication</code>.</p>"
  )
  @as("MutualAuthentication")
  mutualAuthentication: option<certificateAuthenticationRequest>,
  @ocaml.doc(
    "<p>Information about the Active Directory to be used, if applicable. You must provide this information if <b>Type</b> is <code>directory-service-authentication</code>.</p>"
  )
  @as("ActiveDirectory")
  activeDirectory: option<directoryServiceAuthenticationRequest>,
  @ocaml.doc("<p>The type of client authentication to be used.</p>") @as("Type")
  type_: option<clientVpnAuthenticationType>,
}
@ocaml.doc("<p>Describes the authentication methods used by a Client VPN endpoint. For more information, see <a href=\"https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/client-authentication.html\">Authentication</a> 
			in the <i>Client VPN Administrator Guide</i>.</p>")
type clientVpnAuthentication = {
  @ocaml.doc("<p>Information about the IAM SAML identity provider, if applicable.</p>")
  @as("FederatedAuthentication")
  federatedAuthentication: option<federatedAuthentication>,
  @ocaml.doc("<p>Information about the authentication certificates, if applicable.</p>")
  @as("MutualAuthentication")
  mutualAuthentication: option<certificateAuthentication>,
  @ocaml.doc("<p>Information about the Active Directory, if applicable.</p>") @as("ActiveDirectory")
  activeDirectory: option<directoryServiceAuthentication>,
  @ocaml.doc("<p>The authentication type used.</p>") @as("Type")
  type_: option<clientVpnAuthenticationType>,
}
@ocaml.doc("<p>The options for managing connection authorization for new client connections.</p>")
type clientConnectResponseOptions = {
  @ocaml.doc("<p>The status of any updates to the client connect options.</p>") @as("Status")
  status: option<clientVpnEndpointAttributeStatus>,
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the Lambda function used for connection authorization.</p>"
  )
  @as("LambdaFunctionArn")
  lambdaFunctionArn: option<string_>,
  @ocaml.doc("<p>Indicates whether client connect options are enabled.</p>") @as("Enabled")
  enabled: option<boolean_>,
}
type classicLoadBalancers = array<classicLoadBalancer>
type classicLinkDnsSupportList = array<classicLinkDnsSupport>
type cidrBlockSet = array<cidrBlock>
@ocaml.doc("<p>Describes the instance's Capacity Reservation targeting preferences. The action returns the
                <code>capacityReservationPreference</code> response element if the instance is
            configured to run in On-Demand capacity, or if it is configured in run in any
                <code>open</code> Capacity Reservation that has matching attributes (instance type, platform,
            Availability Zone). The action returns the <code>capacityReservationTarget</code>
            response element if the instance explicily targets a specific Capacity Reservation or Capacity Reservation group.</p>")
type capacityReservationSpecificationResponse = {
  @ocaml.doc(
    "<p>Information about the targeted Capacity Reservation or Capacity Reservation group.</p>"
  )
  @as("CapacityReservationTarget")
  capacityReservationTarget: option<capacityReservationTargetResponse>,
  @ocaml.doc("<p>Describes the instance's Capacity Reservation preferences. Possible preferences include:</p>
        <ul>
            <li>
                <p>
                  <code>open</code> - The instance can run in any <code>open</code> Capacity Reservation that
                    has matching attributes (instance type, platform, Availability Zone).</p>
            </li>
            <li>
                <p>
                  <code>none</code> - The instance avoids running in a Capacity Reservation even if one is
                    available. The instance runs in On-Demand capacity.</p>
            </li>
         </ul>")
  @as("CapacityReservationPreference")
  capacityReservationPreference: option<capacityReservationPreference>,
}
@ocaml.doc("<p>Describes an instance's Capacity Reservation targeting option. You can specify only one parameter 
			at a time. If you specify <code>CapacityReservationPreference</code> and 
			<code>CapacityReservationTarget</code>, the request fails.</p>
			      <p>Use the <code>CapacityReservationPreference</code> parameter to configure the instance
			to run as an On-Demand Instance or to run in any <code>open</code> Capacity Reservation that has
			matching attributes (instance type, platform, Availability Zone). Use the
			<code>CapacityReservationTarget</code> parameter to explicitly target a specific
			   	Capacity Reservation or a Capacity Reservation group.</p>")
type capacityReservationSpecification = {
  @ocaml.doc(
    "<p>Information about the target Capacity Reservation or Capacity Reservation group.</p>"
  )
  @as("CapacityReservationTarget")
  capacityReservationTarget: option<capacityReservationTarget>,
  @ocaml.doc("<p>Indicates the instance's Capacity Reservation preferences. Possible preferences include:</p>
		       <ul>
            <li>
               <p>
                  <code>open</code> - The instance can run in any <code>open</code> Capacity Reservation that has matching attributes 
				(instance type, platform, Availability Zone).</p>
            </li>
            <li>
               <p>
                  <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The
					instance runs as an On-Demand Instance.</p>
            </li>
         </ul>")
  @as("CapacityReservationPreference")
  capacityReservationPreference: option<capacityReservationPreference>,
}
type capacityReservationGroupSet = array<capacityReservationGroup>
type capacityReservationFleetCancellationStateSet = array<capacityReservationFleetCancellationState>
type cancelledSpotInstanceRequestList = array<cancelledSpotInstanceRequest>
type cancelSpotFleetRequestsSuccessSet = array<cancelSpotFleetRequestsSuccessItem>
@ocaml.doc("<p>Describes a Spot Fleet request that was not successfully canceled.</p>")
type cancelSpotFleetRequestsErrorItem = {
  @ocaml.doc("<p>The ID of the Spot Fleet request.</p>") @as("SpotFleetRequestId")
  spotFleetRequestId: option<string_>,
  @ocaml.doc("<p>The error.</p>") @as("Error") error: option<cancelSpotFleetRequestsError>,
}
type byoipCidrSet = array<byoipCidr>
@ocaml.doc("<p>Describes a block device mapping, which defines the EBS volumes and instance store
            volumes to attach to an instance at launch.</p>")
type blockDeviceMapping = {
  @ocaml.doc("<p>To omit the device from the block device mapping, specify an empty string. When this
            property is specified, the device is removed from the block device mapping regardless of
            the assigned value.</p>")
  @as("NoDevice")
  noDevice: option<string_>,
  @ocaml.doc("<p>Parameters used to automatically set up EBS volumes when the instance is
            launched.</p>")
  @as("Ebs")
  ebs: option<ebsBlockDevice>,
  @ocaml.doc("<p>The virtual device name (<code>ephemeral</code>N). Instance store volumes are numbered
            starting from 0. An instance type with 2 available instance store volumes can specify
            mappings for <code>ephemeral0</code> and <code>ephemeral1</code>. The number of
            available instance store volumes depends on the instance type. After you connect to the
            instance, you must mount the volume.</p>
        <p>NVMe instance store volumes are automatically enumerated and assigned a device name.
            Including them in your block device mapping has no effect.</p>
        <p>Constraints: For M3 instances, you must specify instance store volumes in the block
            device mapping for the instance. When you launch an M3 instance, we ignore any instance
            store volumes specified in the block device mapping for the AMI.</p>")
  @as("VirtualName")
  virtualName: option<string_>,
  @ocaml.doc("<p>The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>")
  @as("DeviceName")
  deviceName: option<string_>,
}
type availableInstanceCapacityList = array<instanceCapacity>
type availabilityZoneMessageList = array<availabilityZoneMessage>
@ocaml.doc("<p>Information about an authorization rule.</p>")
type authorizationRule = {
  @ocaml.doc("<p>The current state of the authorization rule.</p>") @as("Status")
  status: option<clientVpnAuthorizationRuleStatus>,
  @ocaml.doc(
    "<p>The IPv4 address range, in CIDR notation, of the network to which the authorization rule applies.</p>"
  )
  @as("DestinationCidr")
  destinationCidr: option<string_>,
  @ocaml.doc("<p>Indicates whether the authorization rule grants access to all clients.</p>")
  @as("AccessAll")
  accessAll: option<boolean_>,
  @ocaml.doc(
    "<p>The ID of the Active Directory group to which the authorization rule grants access.</p>"
  )
  @as("GroupId")
  groupId: option<string_>,
  @ocaml.doc("<p>A brief description of the authorization rule.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc(
    "<p>The ID of the Client VPN endpoint with which the authorization rule is associated.</p>"
  )
  @as("ClientVpnEndpointId")
  clientVpnEndpointId: option<string_>,
}
type athenaIntegrationsSet = array<athenaIntegration>
type associatedTargetNetworkSet = array<associatedTargetNetwork>
type associatedRolesList = array<associatedRole>
type assignedPrivateIpAddressList = array<assignedPrivateIpAddress>
@ocaml.doc("<p>Describes a security group rule.</p>")
type analysisSecurityGroupRule = {
  @ocaml.doc("<p>The protocol name.</p>") @as("Protocol") protocol: option<string_>,
  @ocaml.doc("<p>The prefix list ID.</p>") @as("PrefixListId") prefixListId: option<string_>,
  @ocaml.doc("<p>The port range.</p>") @as("PortRange") portRange: option<portRange>,
  @ocaml.doc("<p>The security group ID.</p>") @as("SecurityGroupId")
  securityGroupId: option<string_>,
  @ocaml.doc("<p>The direction. The following are the possible values:</p>
         <ul>
            <li>
               <p>egress</p>
            </li>
            <li>
               <p>ingress</p>
            </li>
         </ul>")
  @as("Direction")
  direction: option<string_>,
  @ocaml.doc("<p>The IPv4 address range, in CIDR notation.</p>") @as("Cidr") cidr: option<string_>,
}
@ocaml.doc("<p>Describes a load balancer target.</p>")
type analysisLoadBalancerTarget = {
  @ocaml.doc("<p>The port on which the target is listening.</p>") @as("Port") port: option<port>,
  @ocaml.doc("<p>Information about the instance.</p>") @as("Instance")
  instance: option<analysisComponent>,
  @ocaml.doc("<p>The Availability Zone.</p>") @as("AvailabilityZone")
  availabilityZone: option<string_>,
  @ocaml.doc("<p>The IP address.</p>") @as("Address") address: option<ipAddress>,
}
type analysisComponentList = array<analysisComponent>
@ocaml.doc("<p>Describes a network access control (ACL) rule.</p>")
type analysisAclRule = {
  @ocaml.doc("<p>The rule number.</p>") @as("RuleNumber") ruleNumber: option<integer_>,
  @ocaml.doc("<p>Indicates whether to allow or deny traffic that matches the rule.</p>")
  @as("RuleAction")
  ruleAction: option<string_>,
  @ocaml.doc("<p>The protocol.</p>") @as("Protocol") protocol: option<string_>,
  @ocaml.doc("<p>The range of ports.</p>") @as("PortRange") portRange: option<portRange>,
  @ocaml.doc("<p>Indicates whether the rule is an outbound rule.</p>") @as("Egress")
  egress: option<boolean_>,
  @ocaml.doc("<p>The IPv4 address range, in CIDR notation.</p>") @as("Cidr") cidr: option<string_>,
}
type alternatePathHintList = array<alternatePathHint>
type allowedPrincipalSet = array<allowedPrincipal>
@ocaml.doc("<p>The attributes associated with an Elastic IP address.</p>")
type addressAttribute = {
  @ocaml.doc("<p>The updated PTR record for the IP address.</p>") @as("PtrRecordUpdate")
  ptrRecordUpdate: option<ptrUpdateStatus>,
  @ocaml.doc("<p>The pointer (PTR) record for the IP address.</p>") @as("PtrRecord")
  ptrRecord: option<string_>,
  @ocaml.doc("<p>[EC2-VPC] The allocation ID.</p>") @as("AllocationId")
  allocationId: option<allocationId>,
  @ocaml.doc("<p>The public IP address.</p>") @as("PublicIp") publicIp: option<publicIpAddress>,
}
@ocaml.doc("<p>Describes an additional detail for a path analysis.</p>")
type additionalDetail = {
  @ocaml.doc("<p>The path component.</p>") @as("Component") component: option<analysisComponent>,
  @ocaml.doc("<p>The information type.</p>") @as("AdditionalDetailType")
  additionalDetailType: option<string_>,
}
type addPrefixListEntries = array<addPrefixListEntry>
type addIpamOperatingRegionSet = array<addIpamOperatingRegion>
type activeInstanceSet = array<activeInstance>
type accountAttributeValueList = array<accountAttributeValue>
@ocaml.doc("<p>The tunnel options for a single VPN tunnel.</p>")
type vpnTunnelOptionsSpecification = {
  @ocaml.doc("<p>The action to take when the establishing the tunnel for the VPN connection. By
            default, your customer gateway device must initiate the IKE negotiation and bring up the
            tunnel. Specify <code>start</code> for Amazon Web Services to initiate the IKE
            negotiation.</p>
        <p>Valid Values: <code>add</code> | <code>start</code>
         </p>
        <p>Default: <code>add</code>
         </p>")
  @as("StartupAction")
  startupAction: option<string_>,
  @ocaml.doc("<p>The IKE versions that are permitted for the VPN tunnel.</p>
        <p>Valid values: <code>ikev1</code> | <code>ikev2</code>
         </p>")
  @as("IKEVersions")
  ikeversions: option<ikeversionsRequestList>,
  @ocaml.doc("<p>One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for
            phase 2 IKE negotiations.</p>
        <p>Valid values: <code>2</code> | <code>5</code> | <code>14</code> | <code>15</code> |
                <code>16</code> | <code>17</code> | <code>18</code> | <code>19</code> |
                <code>20</code> | <code>21</code> | <code>22</code> | <code>23</code> |
                <code>24</code>
         </p>")
  @as("Phase2DHGroupNumbers")
  phase2DHGroupNumbers: option<phase2DHGroupNumbersRequestList>,
  @ocaml.doc("<p>One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for
            phase 1 IKE negotiations.</p>
        <p>Valid values: <code>2</code> | <code>14</code> | <code>15</code> | <code>16</code> |
                <code>17</code> | <code>18</code> | <code>19</code> | <code>20</code> |
                <code>21</code> | <code>22</code> | <code>23</code> | <code>24</code>
         </p>")
  @as("Phase1DHGroupNumbers")
  phase1DHGroupNumbers: option<phase1DHGroupNumbersRequestList>,
  @ocaml.doc("<p>One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE
            negotiations.</p>
        <p>Valid values: <code>SHA1</code> | <code>SHA2-256</code> | <code>SHA2-384</code> |
                <code>SHA2-512</code>
         </p>")
  @as("Phase2IntegrityAlgorithms")
  phase2IntegrityAlgorithms: option<phase2IntegrityAlgorithmsRequestList>,
  @ocaml.doc("<p>One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE
            negotiations.</p>
        <p>Valid values: <code>SHA1</code> | <code>SHA2-256</code> | <code>SHA2-384</code> |
                <code>SHA2-512</code>
         </p>")
  @as("Phase1IntegrityAlgorithms")
  phase1IntegrityAlgorithms: option<phase1IntegrityAlgorithmsRequestList>,
  @ocaml.doc("<p>One or more encryption algorithms that are permitted for the VPN tunnel for phase 2
            IKE negotiations.</p>
        <p>Valid values: <code>AES128</code> | <code>AES256</code> | <code>AES128-GCM-16</code> |
                <code>AES256-GCM-16</code>
         </p>")
  @as("Phase2EncryptionAlgorithms")
  phase2EncryptionAlgorithms: option<phase2EncryptionAlgorithmsRequestList>,
  @ocaml.doc("<p>One or more encryption algorithms that are permitted for the VPN tunnel for phase 1
            IKE negotiations.</p>
        <p>Valid values: <code>AES128</code> | <code>AES256</code> | <code>AES128-GCM-16</code> |
                <code>AES256-GCM-16</code>
         </p>")
  @as("Phase1EncryptionAlgorithms")
  phase1EncryptionAlgorithms: option<phase1EncryptionAlgorithmsRequestList>,
  @ocaml.doc("<p>The action to take after DPD timeout occurs. Specify <code>restart</code> to restart
            the IKE initiation. Specify <code>clear</code> to end the IKE session.</p>
        <p>Valid Values: <code>clear</code> | <code>none</code> | <code>restart</code>
         </p>
        <p>Default: <code>clear</code>
         </p>")
  @as("DPDTimeoutAction")
  dpdtimeoutAction: option<string_>,
  @ocaml.doc("<p>The number of seconds after which a DPD timeout occurs.</p>
        <p>Constraints: A value greater than or equal to 30.</p>
        <p>Default: <code>30</code>
         </p>")
  @as("DPDTimeoutSeconds")
  dpdtimeoutSeconds: option<integer_>,
  @ocaml.doc("<p>The number of packets in an IKE replay window.</p>
        <p>Constraints: A value between 64 and 2048.</p>
        <p>Default: <code>1024</code>
         </p>")
  @as("ReplayWindowSize")
  replayWindowSize: option<integer_>,
  @ocaml.doc("<p>The percentage of the rekey window (determined by <code>RekeyMarginTimeSeconds</code>)
            during which the rekey time is randomly selected.</p>
        <p>Constraints: A value between 0 and 100.</p>
        <p>Default: <code>100</code>
         </p>")
  @as("RekeyFuzzPercentage")
  rekeyFuzzPercentage: option<integer_>,
  @ocaml.doc("<p>The margin time, in seconds, before the phase 2 lifetime expires, during which the
                Amazon Web Services side of the VPN connection performs an IKE rekey. The exact time
            of the rekey is randomly selected based on the value for
                <code>RekeyFuzzPercentage</code>.</p>
        <p>Constraints: A value between 60 and half of <code>Phase2LifetimeSeconds</code>.</p>
        <p>Default: <code>540</code>
         </p>")
  @as("RekeyMarginTimeSeconds")
  rekeyMarginTimeSeconds: option<integer_>,
  @ocaml.doc("<p>The lifetime for phase 2 of the IKE negotiation, in seconds.</p>
        <p>Constraints: A value between 900 and 3,600. The value must be less than the value for
                <code>Phase1LifetimeSeconds</code>.</p>
        <p>Default: <code>3600</code>
         </p>")
  @as("Phase2LifetimeSeconds")
  phase2LifetimeSeconds: option<integer_>,
  @ocaml.doc("<p>The lifetime for phase 1 of the IKE negotiation, in seconds.</p>
        <p>Constraints: A value between 900 and 28,800.</p>
        <p>Default: <code>28800</code>
         </p>")
  @as("Phase1LifetimeSeconds")
  phase1LifetimeSeconds: option<integer_>,
  @ocaml.doc("<p>The pre-shared key (PSK) to establish initial authentication between the virtual
            private gateway and customer gateway.</p>
        <p>Constraints: Allowed characters are alphanumeric characters, periods (.), and
            underscores (_). Must be between 8 and 64 characters in length and cannot start with
            zero (0).</p>")
  @as("PreSharedKey")
  preSharedKey: option<string_>,
  @ocaml.doc("<p>The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be
            unique across all VPN connections that use the same transit gateway.</p>
        <p>Constraints: A size /126 CIDR block from the local <code>fd00::/8</code> range.</p>")
  @as("TunnelInsideIpv6Cidr")
  tunnelInsideIpv6Cidr: option<string_>,
  @ocaml.doc("<p>The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks must be
            unique across all VPN connections that use the same virtual private gateway. </p>
        <p>Constraints: A size /30 CIDR block from the <code>169.254.0.0/16</code> range. The
            following CIDR blocks are reserved and cannot be used:</p>
        <ul>
            <li>
                <p>
                  <code>169.254.0.0/30</code>
               </p>
            </li>
            <li>
                <p>
                  <code>169.254.1.0/30</code>
               </p>
            </li>
            <li>
                <p>
                  <code>169.254.2.0/30</code>
               </p>
            </li>
            <li>
                <p>
                  <code>169.254.3.0/30</code>
               </p>
            </li>
            <li>
                <p>
                  <code>169.254.4.0/30</code>
               </p>
            </li>
            <li>
                <p>
                  <code>169.254.5.0/30</code>
               </p>
            </li>
            <li>
                <p>
                  <code>169.254.169.252/30</code>
               </p>
            </li>
         </ul>")
  @as("TunnelInsideCidr")
  tunnelInsideCidr: option<string_>,
}
@ocaml.doc("<p>Describes a virtual private gateway.</p>")
type vpnGateway = {
  @ocaml.doc("<p>Any tags assigned to the virtual private gateway.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The private Autonomous System Number (ASN) for the Amazon side of a BGP
            session.</p>")
  @as("AmazonSideAsn")
  amazonSideAsn: option<long>,
  @ocaml.doc("<p>The ID of the virtual private gateway.</p>") @as("VpnGatewayId")
  vpnGatewayId: option<string_>,
  @ocaml.doc("<p>Any VPCs attached to the virtual private gateway.</p>") @as("VpcAttachments")
  vpcAttachments: option<vpcAttachmentList>,
  @ocaml.doc("<p>The type of VPN connection the virtual private gateway supports.</p>") @as("Type")
  type_: option<gatewayType>,
  @ocaml.doc("<p>The current state of the virtual private gateway.</p>") @as("State")
  state: option<vpnState>,
  @ocaml.doc("<p>The Availability Zone where the virtual private gateway was created, if applicable.
            This field may be empty or not returned.</p>")
  @as("AvailabilityZone")
  availabilityZone: option<string_>,
}
@ocaml.doc("<p>Describes a VPC in a VPC peering connection.</p>")
type vpcPeeringConnectionVpcInfo = {
  @ocaml.doc("<p>The Region in which the VPC is located.</p>") @as("Region")
  region: option<string_>,
  @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<string_>,
  @ocaml.doc(
    "<p>Information about the VPC peering connection options for the accepter or requester VPC.</p>"
  )
  @as("PeeringOptions")
  peeringOptions: option<vpcPeeringConnectionOptionsDescription>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the VPC.</p>") @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>Information about the IPv4 CIDR blocks for the VPC.</p>") @as("CidrBlockSet")
  cidrBlockSet: option<cidrBlockSet>,
  @ocaml.doc("<p>The IPv6 CIDR block for the VPC.</p>") @as("Ipv6CidrBlockSet")
  ipv6CidrBlockSet: option<ipv6CidrBlockSet>,
  @ocaml.doc("<p>The IPv4 CIDR block for the VPC.</p>") @as("CidrBlock") cidrBlock: option<string_>,
}
type vpcIpv6CidrBlockAssociationSet = array<vpcIpv6CidrBlockAssociation>
@ocaml.doc("<p>Describes a VPC endpoint connection to a service.</p>")
type vpcEndpointConnection = {
  @ocaml.doc(
    "<p>The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.</p>"
  )
  @as("GatewayLoadBalancerArns")
  gatewayLoadBalancerArns: option<valueStringList>,
  @ocaml.doc(
    "<p>The Amazon Resource Names (ARNs) of the network load balancers for the service.</p>"
  )
  @as("NetworkLoadBalancerArns")
  networkLoadBalancerArns: option<valueStringList>,
  @ocaml.doc("<p>The DNS entries for the VPC endpoint.</p>") @as("DnsEntries")
  dnsEntries: option<dnsEntrySet>,
  @ocaml.doc("<p>The date and time that the VPC endpoint was created.</p>") @as("CreationTimestamp")
  creationTimestamp: option<millisecondDateTime>,
  @ocaml.doc("<p>The state of the VPC endpoint.</p>") @as("VpcEndpointState")
  vpcEndpointState: option<state>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the VPC endpoint.</p>")
  @as("VpcEndpointOwner")
  vpcEndpointOwner: option<string_>,
  @ocaml.doc("<p>The ID of the VPC endpoint.</p>") @as("VpcEndpointId")
  vpcEndpointId: option<string_>,
  @ocaml.doc("<p>The ID of the service to which the endpoint is connected.</p>") @as("ServiceId")
  serviceId: option<string_>,
}
@ocaml.doc("<p>Describes a VPC endpoint.</p>")
type vpcEndpoint = {
  @ocaml.doc("<p>The last error that occurred for VPC endpoint.</p>") @as("LastError")
  lastError: option<lastError>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the VPC endpoint.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>Any tags assigned to the VPC endpoint.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The date and time that the VPC endpoint was created.</p>") @as("CreationTimestamp")
  creationTimestamp: option<millisecondDateTime>,
  @ocaml.doc("<p>(Interface endpoint) The DNS entries for the endpoint.</p>") @as("DnsEntries")
  dnsEntries: option<dnsEntrySet>,
  @ocaml.doc("<p>(Interface endpoint) One or more network interfaces for the endpoint.</p>")
  @as("NetworkInterfaceIds")
  networkInterfaceIds: option<valueStringList>,
  @ocaml.doc("<p>Indicates whether the VPC endpoint is being managed by its service.</p>")
  @as("RequesterManaged")
  requesterManaged: option<boolean_>,
  @ocaml.doc(
    "<p>(Interface endpoint) Indicates whether the VPC is associated with a private hosted zone.</p>"
  )
  @as("PrivateDnsEnabled")
  privateDnsEnabled: option<boolean_>,
  @ocaml.doc("<p>(Interface endpoint) Information about the security groups that are associated with
            the network interface.</p>")
  @as("Groups")
  groups: option<groupIdentifierSet>,
  @ocaml.doc("<p>(Interface endpoint) One or more subnets in which the endpoint is located.</p>")
  @as("SubnetIds")
  subnetIds: option<valueStringList>,
  @ocaml.doc("<p>(Gateway endpoint) One or more route tables associated with the endpoint.</p>")
  @as("RouteTableIds")
  routeTableIds: option<valueStringList>,
  @ocaml.doc("<p>The policy document associated with the endpoint, if applicable.</p>")
  @as("PolicyDocument")
  policyDocument: option<string_>,
  @ocaml.doc("<p>The state of the VPC endpoint.</p>") @as("State") state: option<state>,
  @ocaml.doc("<p>The name of the service to which the endpoint is associated.</p>")
  @as("ServiceName")
  serviceName: option<string_>,
  @ocaml.doc("<p>The ID of the VPC to which the endpoint is associated.</p>") @as("VpcId")
  vpcId: option<string_>,
  @ocaml.doc("<p>The type of endpoint.</p>") @as("VpcEndpointType")
  vpcEndpointType: option<vpcEndpointType>,
  @ocaml.doc("<p>The ID of the VPC endpoint.</p>") @as("VpcEndpointId")
  vpcEndpointId: option<string_>,
}
@ocaml.doc("<p>Describes whether a VPC is enabled for ClassicLink.</p>")
type vpcClassicLink = {
  @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<string_>,
  @ocaml.doc("<p>Any tags assigned to the VPC.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>Indicates whether the VPC is enabled for ClassicLink.</p>")
  @as("ClassicLinkEnabled")
  classicLinkEnabled: option<boolean_>,
}
type vpcCidrBlockAssociationSet = array<vpcCidrBlockAssociation>
@ocaml.doc("<p>Describes the status of a volume.</p>")
type volumeStatusInfo = {
  @ocaml.doc("<p>The status of the volume.</p>") @as("Status")
  status: option<volumeStatusInfoStatus>,
  @ocaml.doc("<p>The details of the volume status.</p>") @as("Details")
  details: option<volumeStatusDetailsList>,
}
@ocaml.doc("<p>Describes a volume.</p>")
type volume = {
  @ocaml.doc("<p>The throughput that the volume supports, in MiB/s.</p>") @as("Throughput")
  throughput: option<integer_>,
  @ocaml.doc("<p>Indicates whether Amazon EBS Multi-Attach is enabled.</p>")
  @as("MultiAttachEnabled")
  multiAttachEnabled: option<boolean_>,
  @ocaml.doc("<p>Indicates whether the volume was created using fast snapshot restore.</p>")
  @as("FastRestored")
  fastRestored: option<boolean_>,
  @ocaml.doc("<p>The volume type.</p>") @as("VolumeType") volumeType: option<volumeType>,
  @ocaml.doc("<p>Any tags assigned to the volume.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The number of I/O operations per second (IOPS). For <code>gp3</code>, <code>io1</code>, and <code>io2</code> volumes, this represents 
      the number of IOPS that are provisioned for the volume. For <code>gp2</code> volumes, this represents the baseline 
      performance of the volume and the rate at which the volume accumulates I/O credits for bursting.</p>")
  @as("Iops")
  iops: option<integer_>,
  @ocaml.doc("<p>The ID of the volume.</p>") @as("VolumeId") volumeId: option<string_>,
  @ocaml.doc("<p>The volume state.</p>") @as("State") state: option<volumeState>,
  @ocaml.doc("<p>The snapshot from which the volume was created, if applicable.</p>")
  @as("SnapshotId")
  snapshotId: option<string_>,
  @ocaml.doc("<p>The size of the volume, in GiBs.</p>") @as("Size") size: option<integer_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Outpost.</p>") @as("OutpostArn")
  outpostArn: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key that was used to protect the
      volume encryption key for the volume.</p>")
  @as("KmsKeyId")
  kmsKeyId: option<string_>,
  @ocaml.doc("<p>Indicates whether the volume is encrypted.</p>") @as("Encrypted")
  encrypted: option<boolean_>,
  @ocaml.doc("<p>The time stamp when volume creation was initiated.</p>") @as("CreateTime")
  createTime: option<dateTime>,
  @ocaml.doc("<p>The Availability Zone for the volume.</p>") @as("AvailabilityZone")
  availabilityZone: option<string_>,
  @ocaml.doc("<p>Information about the volume attachments.</p>") @as("Attachments")
  attachments: option<volumeAttachmentList>,
}
@ocaml.doc("<p>The error codes and error messages that are returned for the parameters or parameter
            combinations that are not valid when a new launch template or new version of a launch
            template is created.</p>")
type validationWarning = {
  @ocaml.doc("<p>The error codes and error messages.</p>") @as("Errors") errors: option<errorSet>,
}
type unsuccessfulItemSet = array<unsuccessfulItem>
type unsuccessfulItemList = array<unsuccessfulItem>
type unsuccessfulInstanceCreditSpecificationSet = array<unsuccessfulInstanceCreditSpecificationItem>
@ocaml.doc("<p>The VPN tunnel options.</p>")
type tunnelOption = {
  @ocaml.doc(
    "<p>The action to take when the establishing the VPN tunnels for a VPN connection.</p>"
  )
  @as("StartupAction")
  startupAction: option<string_>,
  @ocaml.doc("<p>The IKE versions that are permitted for the VPN tunnel.</p>") @as("IkeVersions")
  ikeVersions: option<ikeversionsList>,
  @ocaml.doc("<p>The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 2 IKE
            negotiations.</p>")
  @as("Phase2DHGroupNumbers")
  phase2DHGroupNumbers: option<phase2DHGroupNumbersList>,
  @ocaml.doc("<p>The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 1 IKE
            negotiations.</p>")
  @as("Phase1DHGroupNumbers")
  phase1DHGroupNumbers: option<phase1DHGroupNumbersList>,
  @ocaml.doc("<p>The permitted integrity algorithms for the VPN tunnel for phase 2 IKE
            negotiations.</p>")
  @as("Phase2IntegrityAlgorithms")
  phase2IntegrityAlgorithms: option<phase2IntegrityAlgorithmsList>,
  @ocaml.doc("<p>The permitted integrity algorithms for the VPN tunnel for phase 1 IKE
            negotiations.</p>")
  @as("Phase1IntegrityAlgorithms")
  phase1IntegrityAlgorithms: option<phase1IntegrityAlgorithmsList>,
  @ocaml.doc("<p>The permitted encryption algorithms for the VPN tunnel for phase 2 IKE
            negotiations.</p>")
  @as("Phase2EncryptionAlgorithms")
  phase2EncryptionAlgorithms: option<phase2EncryptionAlgorithmsList>,
  @ocaml.doc("<p>The permitted encryption algorithms for the VPN tunnel for phase 1 IKE
            negotiations.</p>")
  @as("Phase1EncryptionAlgorithms")
  phase1EncryptionAlgorithms: option<phase1EncryptionAlgorithmsList>,
  @ocaml.doc("<p>The action to take after a DPD timeout occurs.</p>") @as("DpdTimeoutAction")
  dpdTimeoutAction: option<string_>,
  @ocaml.doc("<p>The number of seconds after which a DPD timeout occurs.</p>")
  @as("DpdTimeoutSeconds")
  dpdTimeoutSeconds: option<integer_>,
  @ocaml.doc("<p>The number of packets in an IKE replay window.</p>") @as("ReplayWindowSize")
  replayWindowSize: option<integer_>,
  @ocaml.doc("<p>The percentage of the rekey window determined by <code>RekeyMarginTimeSeconds</code>
            during which the rekey time is randomly selected.</p>")
  @as("RekeyFuzzPercentage")
  rekeyFuzzPercentage: option<integer_>,
  @ocaml.doc("<p>The margin time, in seconds, before the phase 2 lifetime expires, during which the
                Amazon Web Services side of the VPN connection performs an IKE rekey.</p>")
  @as("RekeyMarginTimeSeconds")
  rekeyMarginTimeSeconds: option<integer_>,
  @ocaml.doc("<p>The lifetime for phase 2 of the IKE negotiation, in seconds.</p>")
  @as("Phase2LifetimeSeconds")
  phase2LifetimeSeconds: option<integer_>,
  @ocaml.doc("<p>The lifetime for phase 1 of the IKE negotiation, in seconds.</p>")
  @as("Phase1LifetimeSeconds")
  phase1LifetimeSeconds: option<integer_>,
  @ocaml.doc("<p>The pre-shared key (PSK) to establish initial authentication between the virtual
            private gateway and the customer gateway.</p>")
  @as("PreSharedKey")
  preSharedKey: option<string_>,
  @ocaml.doc("<p>The range of inside IPv6 addresses for the tunnel.</p>")
  @as("TunnelInsideIpv6Cidr")
  tunnelInsideIpv6Cidr: option<string_>,
  @ocaml.doc("<p>The range of inside IPv4 addresses for the tunnel.</p>") @as("TunnelInsideCidr")
  tunnelInsideCidr: option<string_>,
  @ocaml.doc("<p>The external IP address of the VPN tunnel.</p>") @as("OutsideIpAddress")
  outsideIpAddress: option<string_>,
}
@ocaml.doc("<note>
            <p>Currently available in <b>limited preview only</b>. 
                If you are interested in using this feature, contact your account manager.</p>
        </note>
        <p>Information about an association between a branch network interface with a trunk network interface.</p>")
type trunkInterfaceAssociation = {
  @ocaml.doc("<p>The tags for the trunk interface association.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The application key when you use the GRE protocol.</p>") @as("GreKey")
  greKey: option<integer_>,
  @ocaml.doc("<p>The ID of the VLAN when you use the VLAN protocol.</p>") @as("VlanId")
  vlanId: option<integer_>,
  @ocaml.doc(
    "<p>The interface protocol. Valid values are <code>VLAN</code> and <code>GRE</code>.</p>"
  )
  @as("InterfaceProtocol")
  interfaceProtocol: option<interfaceProtocolType>,
  @ocaml.doc("<p>The ID of the trunk network interface.</p>") @as("TrunkInterfaceId")
  trunkInterfaceId: option<string_>,
  @ocaml.doc("<p>The ID of the branch network interface.</p>") @as("BranchInterfaceId")
  branchInterfaceId: option<string_>,
  @ocaml.doc("<p>The ID of the association.</p>") @as("AssociationId")
  associationId: option<trunkInterfaceAssociationId>,
}
@ocaml.doc("<p>Describes a VPC attachment.</p>")
type transitGatewayVpcAttachment = {
  @ocaml.doc("<p>The tags for the VPC attachment.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The VPC attachment options.</p>") @as("Options")
  options: option<transitGatewayVpcAttachmentOptions>,
  @ocaml.doc("<p>The creation time.</p>") @as("CreationTime") creationTime: option<dateTime>,
  @ocaml.doc("<p>The IDs of the subnets.</p>") @as("SubnetIds") subnetIds: option<valueStringList>,
  @ocaml.doc(
    "<p>The state of the VPC attachment. Note that the <code>initiating</code> state has been deprecated.</p>"
  )
  @as("State")
  state: option<transitGatewayAttachmentState>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the VPC.</p>")
  @as("VpcOwnerId")
  vpcOwnerId: option<string_>,
  @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<string_>,
  @ocaml.doc("<p>The ID of the transit gateway.</p>") @as("TransitGatewayId")
  transitGatewayId: option<string_>,
  @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
  transitGatewayAttachmentId: option<string_>,
}
@ocaml.doc("<p>Describes a transit gateway route table.</p>")
type transitGatewayRouteTable = {
  @ocaml.doc("<p>Any tags assigned to the route table.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The creation time.</p>") @as("CreationTime") creationTime: option<dateTime>,
  @ocaml.doc(
    "<p>Indicates whether this is the default propagation route table for the transit gateway.</p>"
  )
  @as("DefaultPropagationRouteTable")
  defaultPropagationRouteTable: option<boolean_>,
  @ocaml.doc(
    "<p>Indicates whether this is the default association route table for the transit gateway.</p>"
  )
  @as("DefaultAssociationRouteTable")
  defaultAssociationRouteTable: option<boolean_>,
  @ocaml.doc("<p>The state of the transit gateway route table.</p>") @as("State")
  state: option<transitGatewayRouteTableState>,
  @ocaml.doc("<p>The ID of the transit gateway.</p>") @as("TransitGatewayId")
  transitGatewayId: option<string_>,
  @ocaml.doc("<p>The ID of the transit gateway route table.</p>") @as("TransitGatewayRouteTableId")
  transitGatewayRouteTableId: option<string_>,
}
@ocaml.doc("<p>Describes a route for a transit gateway route table.</p>")
type transitGatewayRoute = {
  @ocaml.doc("<p>The state of the route.</p>") @as("State") state: option<transitGatewayRouteState>,
  @ocaml.doc("<p>The route type.</p>") @as("Type") type_: option<transitGatewayRouteType>,
  @ocaml.doc("<p>The attachments.</p>") @as("TransitGatewayAttachments")
  transitGatewayAttachments: option<transitGatewayRouteAttachmentList>,
  @ocaml.doc("<p>The ID of the prefix list used for destination matches.</p>") @as("PrefixListId")
  prefixListId: option<prefixListResourceId>,
  @ocaml.doc("<p>The CIDR block used for destination matches.</p>") @as("DestinationCidrBlock")
  destinationCidrBlock: option<string_>,
}
type transitGatewayPrefixListReferenceSet = array<transitGatewayPrefixListReference>
@ocaml.doc("<p>Describes the transit gateway peering attachment.</p>")
type transitGatewayPeeringAttachment = {
  @ocaml.doc("<p>The tags for the transit gateway peering attachment.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The time the transit gateway peering attachment was created.</p>")
  @as("CreationTime")
  creationTime: option<dateTime>,
  @ocaml.doc(
    "<p>The state of the transit gateway peering attachment. Note that the <code>initiating</code> state has been deprecated.</p>"
  )
  @as("State")
  state: option<transitGatewayAttachmentState>,
  @ocaml.doc("<p>The status of the transit gateway peering attachment.</p>") @as("Status")
  status: option<peeringAttachmentStatus>,
  @ocaml.doc("<p>Information about the accepter transit gateway.</p>") @as("AccepterTgwInfo")
  accepterTgwInfo: option<peeringTgwInfo>,
  @ocaml.doc("<p>Information about the requester transit gateway.</p>") @as("RequesterTgwInfo")
  requesterTgwInfo: option<peeringTgwInfo>,
  @ocaml.doc("<p>The ID of the transit gateway peering attachment.</p>")
  @as("TransitGatewayAttachmentId")
  transitGatewayAttachmentId: option<string_>,
}
@ocaml.doc("<p>Describes the multicast domain associations.</p>")
type transitGatewayMulticastDomainAssociations = {
  @ocaml.doc("<p>The subnets associated with the multicast domain.</p>") @as("Subnets")
  subnets: option<subnetAssociationList>,
  @ocaml.doc("<p> The ID of the Amazon Web Services account that owns the resource.</p>")
  @as("ResourceOwnerId")
  resourceOwnerId: option<string_>,
  @ocaml.doc("<p>The type of resource, for example a VPC attachment.</p>") @as("ResourceType")
  resourceType: option<transitGatewayAttachmentResourceType>,
  @ocaml.doc("<p>The ID of the resource.</p>") @as("ResourceId") resourceId: option<string_>,
  @ocaml.doc("<p>The ID of the transit gateway attachment.</p>") @as("TransitGatewayAttachmentId")
  transitGatewayAttachmentId: option<string_>,
  @ocaml.doc("<p>The ID of the transit gateway multicast domain.</p>")
  @as("TransitGatewayMulticastDomainId")
  transitGatewayMulticastDomainId: option<string_>,
}
type transitGatewayMulticastDomainAssociationList = array<transitGatewayMulticastDomainAssociation>
@ocaml.doc("<p>Describes the transit gateway multicast domain.</p>")
type transitGatewayMulticastDomain = {
  @ocaml.doc("<p>The tags for the transit gateway multicast domain.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The time the transit gateway multicast domain was created.</p>")
  @as("CreationTime")
  creationTime: option<dateTime>,
  @ocaml.doc("<p>The state of the transit gateway multicast domain.</p>") @as("State")
  state: option<transitGatewayMulticastDomainState>,
  @ocaml.doc("<p>The options for the transit gateway multicast domain.</p>") @as("Options")
  options: option<transitGatewayMulticastDomainOptions>,
  @ocaml.doc(
    "<p> The ID of the Amazon Web Services account that owns the transit gateway multicast domain.</p>"
  )
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the transit gateway multicast domain.</p>")
  @as("TransitGatewayMulticastDomainArn")
  transitGatewayMulticastDomainArn: option<string_>,
  @ocaml.doc("<p>The ID of the transit gateway.</p>") @as("TransitGatewayId")
  transitGatewayId: option<string_>,
  @ocaml.doc("<p>The ID of the transit gateway multicast domain.</p>")
  @as("TransitGatewayMulticastDomainId")
  transitGatewayMulticastDomainId: option<string_>,
}
@ocaml.doc("<p>Describes the Connect peer details.</p>")
type transitGatewayConnectPeerConfiguration = {
  @ocaml.doc("<p>The BGP configuration details.</p>") @as("BgpConfigurations")
  bgpConfigurations: option<transitGatewayAttachmentBgpConfigurationList>,
  @ocaml.doc("<p>The tunnel protocol.</p>") @as("Protocol") protocol: option<protocolValue>,
  @ocaml.doc("<p>The range of interior BGP peer IP addresses.</p>") @as("InsideCidrBlocks")
  insideCidrBlocks: option<insideCidrBlocksStringList>,
  @ocaml.doc("<p>The Connect peer IP address on the appliance side of the tunnel.</p>")
  @as("PeerAddress")
  peerAddress: option<string_>,
  @ocaml.doc("<p>The Connect peer IP address on the transit gateway side of the tunnel.</p>")
  @as("TransitGatewayAddress")
  transitGatewayAddress: option<string_>,
}
@ocaml.doc("<p>Describes a transit gateway Connect attachment.</p>")
type transitGatewayConnect = {
  @ocaml.doc("<p>The tags for the attachment.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The Connect attachment options.</p>") @as("Options")
  options: option<transitGatewayConnectOptions>,
  @ocaml.doc("<p>The creation time.</p>") @as("CreationTime") creationTime: option<dateTime>,
  @ocaml.doc("<p>The state of the attachment.</p>") @as("State")
  state: option<transitGatewayAttachmentState>,
  @ocaml.doc("<p>The ID of the transit gateway.</p>") @as("TransitGatewayId")
  transitGatewayId: option<transitGatewayId>,
  @ocaml.doc("<p>The ID of the attachment from which the Connect attachment was created.</p>")
  @as("TransportTransitGatewayAttachmentId")
  transportTransitGatewayAttachmentId: option<transitGatewayAttachmentId>,
  @ocaml.doc("<p>The ID of the Connect attachment.</p>") @as("TransitGatewayAttachmentId")
  transitGatewayAttachmentId: option<transitGatewayAttachmentId>,
}
@ocaml.doc("<p>Describes an attachment between a resource and a transit gateway.</p>")
type transitGatewayAttachment = {
  @ocaml.doc("<p>The tags for the attachment.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The creation time.</p>") @as("CreationTime") creationTime: option<dateTime>,
  @ocaml.doc("<p>The association.</p>") @as("Association")
  association: option<transitGatewayAttachmentAssociation>,
  @ocaml.doc(
    "<p>The attachment state. Note that the <code>initiating</code> state has been deprecated.</p>"
  )
  @as("State")
  state: option<transitGatewayAttachmentState>,
  @ocaml.doc("<p>The ID of the resource.</p>") @as("ResourceId") resourceId: option<string_>,
  @ocaml.doc(
    "<p>The resource type. Note that the <code>tgw-peering</code> resource type has been deprecated.</p>"
  )
  @as("ResourceType")
  resourceType: option<transitGatewayAttachmentResourceType>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the resource.</p>")
  @as("ResourceOwnerId")
  resourceOwnerId: option<string_>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the transit gateway.</p>")
  @as("TransitGatewayOwnerId")
  transitGatewayOwnerId: option<string_>,
  @ocaml.doc("<p>The ID of the transit gateway.</p>") @as("TransitGatewayId")
  transitGatewayId: option<string_>,
  @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
  transitGatewayAttachmentId: option<string_>,
}
@ocaml.doc("<p>Describes a transit gateway.</p>")
type transitGateway = {
  @ocaml.doc("<p>The tags for the transit gateway.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The transit gateway options.</p>") @as("Options")
  options: option<transitGatewayOptions>,
  @ocaml.doc("<p>The creation time.</p>") @as("CreationTime") creationTime: option<dateTime>,
  @ocaml.doc("<p>The description of the transit gateway.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the transit gateway.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The state of the transit gateway.</p>") @as("State")
  state: option<transitGatewayState>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the transit gateway.</p>")
  @as("TransitGatewayArn")
  transitGatewayArn: option<string_>,
  @ocaml.doc("<p>The ID of the transit gateway.</p>") @as("TransitGatewayId")
  transitGatewayId: option<string_>,
}
@ocaml.doc("<p>Describes a Traffic Mirror target.</p>")
type trafficMirrorTarget = {
  @ocaml.doc("<p>The tags assigned to the Traffic Mirror target.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The ID of the account that owns the Traffic Mirror target.</p>") @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>Information about the Traffic Mirror target.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The type of Traffic Mirror target.</p>") @as("Type")
  type_: option<trafficMirrorTargetType>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Network Load Balancer.</p>")
  @as("NetworkLoadBalancerArn")
  networkLoadBalancerArn: option<string_>,
  @ocaml.doc("<p>The network interface ID that is attached to the target.</p>")
  @as("NetworkInterfaceId")
  networkInterfaceId: option<string_>,
  @ocaml.doc("<p>The ID of the Traffic Mirror target.</p>") @as("TrafficMirrorTargetId")
  trafficMirrorTargetId: option<string_>,
}
@ocaml.doc("<p>Describes a Traffic Mirror session.</p>")
type trafficMirrorSession = {
  @ocaml.doc("<p>The tags assigned to the Traffic Mirror session.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The description of the Traffic Mirror session.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The virtual network ID associated with the Traffic Mirror session.</p>")
  @as("VirtualNetworkId")
  virtualNetworkId: option<integer_>,
  @ocaml.doc("<p>The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.</p>
         <p>Valid values are 1-32766.</p>")
  @as("SessionNumber")
  sessionNumber: option<integer_>,
  @ocaml.doc(
    "<p>The number of bytes in each packet to mirror. These are the bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet</p>"
  )
  @as("PacketLength")
  packetLength: option<integer_>,
  @ocaml.doc("<p>The ID of the account that owns the Traffic Mirror session.</p>") @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The ID of the Traffic Mirror session's network interface.</p>")
  @as("NetworkInterfaceId")
  networkInterfaceId: option<string_>,
  @ocaml.doc("<p>The ID of the Traffic Mirror filter.</p>") @as("TrafficMirrorFilterId")
  trafficMirrorFilterId: option<string_>,
  @ocaml.doc("<p>The ID of the Traffic Mirror target.</p>") @as("TrafficMirrorTargetId")
  trafficMirrorTargetId: option<string_>,
  @ocaml.doc("<p>The ID for the Traffic Mirror session.</p>") @as("TrafficMirrorSessionId")
  trafficMirrorSessionId: option<string_>,
}
type trafficMirrorFilterRuleList = array<trafficMirrorFilterRule>
@ocaml.doc("<p>Describes a through resource statement.</p>")
type throughResourcesStatementRequest = {
  @ocaml.doc("<p>The resource statement.</p>") @as("ResourceStatement")
  resourceStatement: option<resourceStatementRequest>,
}
@ocaml.doc("<p>Describes a through resource statement.</p>")
type throughResourcesStatement = {
  @ocaml.doc("<p>The resource statement.</p>") @as("ResourceStatement")
  resourceStatement: option<resourceStatement>,
}
type terminateConnectionStatusSet = array<terminateConnectionStatus>
type targetReservationValueSet = array<targetReservationValue>
type targetNetworkSet = array<targetNetwork>
@ocaml.doc("<p>Describes the target groups to attach to a Spot Fleet. Spot Fleet registers the
            running Spot Instances with these target groups.</p>")
type targetGroupsConfig = {
  @ocaml.doc("<p>One or more target groups.</p>") @as("TargetGroups")
  targetGroups: option<targetGroups>,
}
@ocaml.doc("<p>The tags to apply to a resource when the resource is being created.</p>")
type tagSpecification = {
  @ocaml.doc("<p>The tags to apply to the resource.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The type of resource to tag on creation.</p>") @as("ResourceType")
  resourceType: option<resourceType>,
}
type subnetIpv6CidrBlockAssociationSet = array<subnetIpv6CidrBlockAssociation>
@ocaml.doc("<p>Describes a subnet CIDR reservation.</p>")
type subnetCidrReservation = {
  @ocaml.doc("<p>The tags assigned to the subnet CIDR reservation.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The
            description
            assigned to the subnet CIDR
            reservation.</p>")
  @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The ID of the account that owns the subnet CIDR reservation. </p>") @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The type of reservation. </p>") @as("ReservationType")
  reservationType: option<subnetCidrReservationType>,
  @ocaml.doc("<p>The CIDR that has been reserved.</p>") @as("Cidr") cidr: option<string_>,
  @ocaml.doc("<p>The ID of the subnet.</p>") @as("SubnetId") subnetId: option<subnetId>,
  @ocaml.doc("<p>The ID of the subnet CIDR reservation.</p>") @as("SubnetCidrReservationId")
  subnetCidrReservationId: option<subnetCidrReservationId>,
}
@ocaml.doc("<p>Describes a stale rule in a security group.</p>")
type staleIpPermission = {
  @ocaml.doc(
    "<p>The security group pairs. Returns the ID of the referenced security group and VPC, and the ID and status of the VPC peering connection.</p>"
  )
  @as("UserIdGroupPairs")
  userIdGroupPairs: option<userIdGroupPairSet>,
  @ocaml.doc("<p>The end of the port range for the TCP and UDP protocols, or an ICMP type number. A value of
        <code>-1</code> indicates all ICMP types. </p>")
  @as("ToPort")
  toPort: option<integer_>,
  @ocaml.doc("<p>The prefix list IDs. Not applicable for stale security group rules.</p>")
  @as("PrefixListIds")
  prefixListIds: option<prefixListIdSet>,
  @ocaml.doc("<p>The IP ranges. Not applicable for stale security group rules.</p>") @as("IpRanges")
  ipRanges: option<ipRanges>,
  @ocaml.doc(
    "<p>The IP protocol name (for <code>tcp</code>, <code>udp</code>, and <code>icmp</code>) or number  (see <a href=\"http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\">Protocol Numbers)</a>.</p>"
  )
  @as("IpProtocol")
  ipProtocol: option<string_>,
  @ocaml.doc("<p>The start of the port range for the TCP and UDP protocols, or an ICMP type number. A value of
        <code>-1</code> indicates all ICMP types. </p>")
  @as("FromPort")
  fromPort: option<integer_>,
}
@ocaml.doc("<p>Describes the configuration of Spot Instances in an EC2 Fleet request.</p>")
type spotOptionsRequest = {
  @ocaml.doc("<p>The maximum amount per hour for Spot Instances that you're willing to pay.</p>")
  @as("MaxTotalPrice")
  maxTotalPrice: option<string_>,
  @ocaml.doc("<p>The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is
         not reached, the fleet launches no instances.</p>
         <p>Supported only for fleets of type <code>instant</code>.</p>
         <p>At least one of the following must be specified: <code>SingleAvailabilityZone</code> |
         <code>SingleInstanceType</code>
         </p>")
  @as("MinTargetCapacity")
  minTargetCapacity: option<integer_>,
  @ocaml.doc("<p>Indicates that the fleet launches all Spot Instances into a single Availability Zone.</p>
         <p>Supported only for fleets of type <code>instant</code>.</p>")
  @as("SingleAvailabilityZone")
  singleAvailabilityZone: option<boolean_>,
  @ocaml.doc("<p>Indicates that the fleet uses a single instance type to launch all Spot Instances in the
         fleet.</p>
         <p>Supported only for fleets of type <code>instant</code>.</p>")
  @as("SingleInstanceType")
  singleInstanceType: option<boolean_>,
  @ocaml.doc("<p>The number of Spot pools across which to allocate your target Spot capacity. Supported
         only when Spot <code>AllocationStrategy</code> is set to <code>lowest-price</code>. EC2 Fleet
         selects the cheapest Spot pools and evenly allocates your target Spot capacity across the
         number of Spot pools that you specify.</p>
         <p>Note that EC2 Fleet attempts to draw Spot Instances from the number of pools that you specify on a
         best effort basis. If a pool runs out of Spot capacity before fulfilling your target
         capacity, EC2 Fleet will continue to fulfill your request by drawing from the next cheapest
         pool. To ensure that your target capacity is met, you might receive Spot Instances from more than
         the number of pools that you specified. Similarly, if most of the pools have no Spot
         capacity, you might receive your full target capacity from fewer than the number of pools
         that you specified.</p>")
  @as("InstancePoolsToUseCount")
  instancePoolsToUseCount: option<integer_>,
  @ocaml.doc("<p>The behavior when a Spot Instance is interrupted.</p>
         <p>Default: <code>terminate</code>
         </p>")
  @as("InstanceInterruptionBehavior")
  instanceInterruptionBehavior: option<spotInstanceInterruptionBehavior>,
  @ocaml.doc("<p>The strategies for managing your Spot Instances that are at an elevated risk of being
         interrupted.</p>")
  @as("MaintenanceStrategies")
  maintenanceStrategies: option<fleetSpotMaintenanceStrategiesRequest>,
  @ocaml.doc("<p>The strategy that determines how to allocate the target Spot Instance capacity across the Spot Instance pools specified by
         the EC2 Fleet.</p>
         <p>
            <code>lowest-price</code> - EC2 Fleet launches instances from
         the Spot Instance pools with the lowest price.</p>
         <p>
            <code>diversified</code> - EC2 Fleet launches instances from all
         of the Spot Instance pools that you specify.</p>
         <p>
            <code>capacity-optimized</code> (recommended) - EC2 Fleet
         launches instances from Spot Instance pools with optimal capacity for the number of instances that
         are launching. To give certain instance types a higher chance of launching first, use
            <code>capacity-optimized-prioritized</code>. Set a priority for each instance type by
         using the <code>Priority</code> parameter for <code>LaunchTemplateOverrides</code>. You can
         assign the same priority to different <code>LaunchTemplateOverrides</code>. EC2 implements
         the priorities on a best-effort basis, but optimizes for capacity first.
            <code>capacity-optimized-prioritized</code> is supported only if your fleet uses a
         launch template. Note that if the On-Demand <code>AllocationStrategy</code> is set to
            <code>prioritized</code>, the same priority is applied when fulfilling On-Demand
         capacity.</p>
         <p>Default: <code>lowest-price</code>
         </p>")
  @as("AllocationStrategy")
  allocationStrategy: option<spotAllocationStrategy>,
}
@ocaml.doc("<p>Describes the configuration of Spot Instances in an EC2 Fleet.</p>")
type spotOptions = {
  @ocaml.doc("<p>The maximum amount per hour for Spot Instances that you're willing to pay.</p>")
  @as("MaxTotalPrice")
  maxTotalPrice: option<string_>,
  @ocaml.doc("<p>The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is
         not reached, the fleet launches no instances.</p>
         <p>Supported only for fleets of type <code>instant</code>.</p>
         <p>At least one of the following must be specified: <code>SingleAvailabilityZone</code> |
            <code>SingleInstanceType</code>
         </p>")
  @as("MinTargetCapacity")
  minTargetCapacity: option<integer_>,
  @ocaml.doc("<p>Indicates that the fleet launches all Spot Instances into a single Availability Zone.</p>
         <p>Supported only for fleets of type <code>instant</code>.</p>")
  @as("SingleAvailabilityZone")
  singleAvailabilityZone: option<boolean_>,
  @ocaml.doc("<p>Indicates that the fleet uses a single instance type to launch all Spot Instances in the
         fleet.</p>
         <p>Supported only for fleets of type <code>instant</code>.</p>")
  @as("SingleInstanceType")
  singleInstanceType: option<boolean_>,
  @ocaml.doc("<p>The number of Spot pools across which to allocate your target Spot capacity. Supported
         only when <code>AllocationStrategy</code> is set to <code>lowest-price</code>. EC2 Fleet selects
         the cheapest Spot pools and evenly allocates your target Spot capacity across the number of
         Spot pools that you specify.</p>
         <p>Note that EC2 Fleet attempts to draw Spot Instances from the number of pools that you specify on a
         best effort basis. If a pool runs out of Spot capacity before fulfilling your target
         capacity, EC2 Fleet will continue to fulfill your request by drawing from the next cheapest
         pool. To ensure that your target capacity is met, you might receive Spot Instances from more than
         the number of pools that you specified. Similarly, if most of the pools have no Spot
         capacity, you might receive your full target capacity from fewer than the number of pools
         that you specified.</p>")
  @as("InstancePoolsToUseCount")
  instancePoolsToUseCount: option<integer_>,
  @ocaml.doc("<p>The behavior when a Spot Instance is interrupted.</p>
         <p>Default: <code>terminate</code>
         </p>")
  @as("InstanceInterruptionBehavior")
  instanceInterruptionBehavior: option<spotInstanceInterruptionBehavior>,
  @ocaml.doc("<p>The strategies for managing your workloads on your Spot Instances that will be
         interrupted. Currently only the capacity rebalance strategy is available.</p>")
  @as("MaintenanceStrategies")
  maintenanceStrategies: option<fleetSpotMaintenanceStrategies>,
  @ocaml.doc("<p>The strategy that determines how to allocate the target Spot Instance capacity across the Spot Instance
         pools specified by the EC2 Fleet.</p>
         <p>
            <code>lowest-price</code> - EC2 Fleet launches instances from the Spot Instance pools with the lowest
         price.</p>
         <p>
            <code>diversified</code> - EC2 Fleet launches instances from all of the Spot Instance pools that you
         specify.</p>
         <p>
            <code>capacity-optimized</code> (recommended) - EC2 Fleet launches instances from Spot Instance pools
         with optimal capacity for the number of instances that are launching. To give certain
         instance types a higher chance of launching first, use
            <code>capacity-optimized-prioritized</code>. Set a priority for each instance type by
         using the <code>Priority</code> parameter for <code>LaunchTemplateOverrides</code>. You can
         assign the same priority to different <code>LaunchTemplateOverrides</code>. EC2 implements
         the priorities on a best-effort basis, but optimizes for capacity first.
            <code>capacity-optimized-prioritized</code> is supported only if your fleet uses a
         launch template. Note that if the On-Demand <code>AllocationStrategy</code> is set to
            <code>prioritized</code>, the same priority is applied when fulfilling On-Demand
         capacity.</p>
         <p>Default: <code>lowest-price</code>
         </p>")
  @as("AllocationStrategy")
  allocationStrategy: option<spotAllocationStrategy>,
}
@ocaml.doc("<p>The tags for a Spot Fleet resource.</p>")
type spotFleetTagSpecification = {
  @ocaml.doc("<p>The tags.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The type of resource. Currently, the only resource type that is supported is
                <code>instance</code>. To tag the Spot Fleet request on creation, use the
                <code>TagSpecifications</code> parameter in <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetRequestConfigData.html\">
               <code>SpotFleetRequestConfigData</code>
            </a>.</p>")
  @as("ResourceType")
  resourceType: option<resourceType>,
}
@ocaml.doc("<p>Provides information about a snapshot's storage tier.</p>")
type snapshotTierStatus = {
  @ocaml.doc("<p>Only for archived snapshots that are temporarily restored. Indicates the date and 
      time when a temporarily restored snapshot will be automatically re-archived.</p>")
  @as("RestoreExpiryTime")
  restoreExpiryTime: option<millisecondDateTime>,
  @ocaml.doc("<p>The date and time when the last archive process was completed.</p>")
  @as("ArchivalCompleteTime")
  archivalCompleteTime: option<millisecondDateTime>,
  @ocaml.doc("<p>A message describing the status of the last archive or restore process.</p>")
  @as("LastTieringOperationStatusDetail")
  lastTieringOperationStatusDetail: option<string_>,
  @ocaml.doc("<p>The status of the last archive or restore process.</p>")
  @as("LastTieringOperationStatus")
  lastTieringOperationStatus: option<tieringOperationStatus>,
  @ocaml.doc("<p>The progress of the last archive or restore process, as a percentage.</p>")
  @as("LastTieringProgress")
  lastTieringProgress: option<integer_>,
  @ocaml.doc("<p>The date and time when the last archive or restore process was started.</p>")
  @as("LastTieringStartTime")
  lastTieringStartTime: option<millisecondDateTime>,
  @ocaml.doc("<p>The storage tier in which the snapshot is stored. <code>standard</code> indicates 
      that the snapshot is stored in the standard snapshot storage tier and that it is ready 
      for use. <code>archive</code> indicates that the snapshot is currently archived and that 
      it must be restored before it can be used.</p>")
  @as("StorageTier")
  storageTier: option<storageTier>,
  @ocaml.doc("<p>The tags that are assigned to the snapshot.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the snapshot.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The state of the snapshot.</p>") @as("Status") status: option<snapshotState>,
  @ocaml.doc("<p>The ID of the volume from which the snapshot was created.</p>") @as("VolumeId")
  volumeId: option<volumeId>,
  @ocaml.doc("<p>The ID of the snapshot.</p>") @as("SnapshotId") snapshotId: option<snapshotId>,
}
@ocaml.doc("<p>Information about a snapshot.</p>")
type snapshotInfo = {
  @ocaml.doc("<p>The ARN of the Outpost on which the snapshot is stored. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html\">Amazon EBS local snapshots on Outposts</a> in the 
  		<i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
  @as("OutpostArn")
  outpostArn: option<string_>,
  @ocaml.doc("<p>Snapshot id that can be used to describe this snapshot.</p>") @as("SnapshotId")
  snapshotId: option<string_>,
  @ocaml.doc("<p>Account id used when creating this snapshot.</p>") @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>Progress this snapshot has made towards completing.</p>") @as("Progress")
  progress: option<string_>,
  @ocaml.doc("<p>Time this snapshot was started. This is the same for all snapshots initiated by the
    same request.</p>")
  @as("StartTime")
  startTime: option<millisecondDateTime>,
  @ocaml.doc("<p>Size of the volume from which this snapshot was created.</p>") @as("VolumeSize")
  volumeSize: option<integer_>,
  @ocaml.doc("<p>Current state of the snapshot.</p>") @as("State") state: option<snapshotState>,
  @ocaml.doc("<p>Source volume from which this snapshot was created.</p>") @as("VolumeId")
  volumeId: option<string_>,
  @ocaml.doc("<p>Indicates whether the snapshot is encrypted.</p>") @as("Encrypted")
  encrypted: option<boolean_>,
  @ocaml.doc("<p>Tags associated with this snapshot.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>Description specified by the CreateSnapshotRequest that has been applied to all 
    snapshots.</p>")
  @as("Description")
  description: option<string_>,
}
type snapshotDetailList = array<snapshotDetail>
@ocaml.doc("<p>Describes a snapshot.</p>")
type snapshot = {
  @ocaml.doc("<p>Only for archived snapshots that are temporarily restored. Indicates the date and 
      time when a temporarily restored snapshot will be automatically re-archived.</p>")
  @as("RestoreExpiryTime")
  restoreExpiryTime: option<millisecondDateTime>,
  @ocaml.doc("<p>The storage tier in which the snapshot is stored. <code>standard</code> indicates 
      that the snapshot is stored in the standard snapshot storage tier and that it is ready 
      for use. <code>archive</code> indicates that the snapshot is currently archived and that 
      it must be restored before it can be used.</p>")
  @as("StorageTier")
  storageTier: option<storageTier>,
  @ocaml.doc("<p>Any tags assigned to the snapshot.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The ARN of the Outpost on which the snapshot is stored. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html\">Amazon EBS local snapshots on Outposts</a> in the 
  		<i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
  @as("OutpostArn")
  outpostArn: option<string_>,
  @ocaml.doc("<p>The Amazon Web Services owner alias, from an Amazon-maintained list (<code>amazon</code>). This is not  
      the user-configured Amazon Web Services account alias set using the IAM console.</p>")
  @as("OwnerAlias")
  ownerAlias: option<string_>,
  @ocaml.doc("<p>The size of the volume, in GiB.</p>") @as("VolumeSize")
  volumeSize: option<integer_>,
  @ocaml.doc("<p>The ID of the volume that was used to create the snapshot. Snapshots created by the <a>CopySnapshot</a> action have an arbitrary volume ID that should not be used for any
      purpose.</p>")
  @as("VolumeId")
  volumeId: option<string_>,
  @ocaml.doc("<p>Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails
      (for example, if the proper Key Management Service (KMS) permissions are not obtained) this field displays error
      state details to help you diagnose why the error occurred. This parameter is only returned by
      <a>DescribeSnapshots</a>.</p>")
  @as("StateMessage")
  stateMessage: option<string_>,
  @ocaml.doc("<p>The snapshot state.</p>") @as("State") state: option<snapshotState>,
  @ocaml.doc("<p>The time stamp when the snapshot was initiated.</p>") @as("StartTime")
  startTime: option<dateTime>,
  @ocaml.doc("<p>The ID of the snapshot. Each snapshot receives a unique identifier when it is
      created.</p>")
  @as("SnapshotId")
  snapshotId: option<string_>,
  @ocaml.doc("<p>The progress of the snapshot, as a percentage.</p>") @as("Progress")
  progress: option<string_>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the EBS snapshot.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key that was used to protect the
      volume encryption key for the parent volume.</p>")
  @as("KmsKeyId")
  kmsKeyId: option<string_>,
  @ocaml.doc("<p>Indicates whether the snapshot is encrypted.</p>") @as("Encrypted")
  encrypted: option<boolean_>,
  @ocaml.doc("<p>The description for the snapshot.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The data encryption key identifier for the snapshot. This value is a unique identifier
      that corresponds to the data encryption key that was used to encrypt the original volume or
      snapshot copy. Because data encryption keys are inherited by volumes created from snapshots,
      and vice versa, if snapshots share the same data encryption key identifier, then they belong
      to the same volume/snapshot lineage. This parameter is only returned by <a>DescribeSnapshots</a>.</p>")
  @as("DataEncryptionKeyId")
  dataEncryptionKeyId: option<string_>,
}
@ocaml.doc("<p>Describes a VPC endpoint service.</p>")
type serviceDetail = {
  @ocaml.doc("<p>The verification state of the VPC endpoint service.</p>
        <p>Consumers of the endpoint service cannot use the private name when the state is not <code>verified</code>.</p>")
  @as("PrivateDnsNameVerificationState")
  privateDnsNameVerificationState: option<dnsNameState>,
  @ocaml.doc("<p>Any tags assigned to the service.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The payer responsibility.</p>") @as("PayerResponsibility")
  payerResponsibility: option<payerResponsibility>,
  @ocaml.doc("<p>Indicates whether the service manages its VPC endpoints. Management of the service VPC
            endpoints using the VPC endpoint API is restricted.</p>")
  @as("ManagesVpcEndpoints")
  managesVpcEndpoints: option<boolean_>,
  @ocaml.doc(
    "<p>Indicates whether VPC endpoint connection requests to the service must be accepted by the service owner.</p>"
  )
  @as("AcceptanceRequired")
  acceptanceRequired: option<boolean_>,
  @ocaml.doc("<p>Indicates whether the service supports endpoint policies.</p>")
  @as("VpcEndpointPolicySupported")
  vpcEndpointPolicySupported: option<boolean_>,
  @ocaml.doc("<p>The private DNS names assigned to the VPC endpoint service. </p>")
  @as("PrivateDnsNames")
  privateDnsNames: option<privateDnsDetailsSet>,
  @ocaml.doc("<p>The private DNS name for the service.</p>") @as("PrivateDnsName")
  privateDnsName: option<string_>,
  @ocaml.doc("<p>The DNS names for the service.</p>") @as("BaseEndpointDnsNames")
  baseEndpointDnsNames: option<valueStringList>,
  @ocaml.doc("<p>The Amazon Web Services account ID of the service owner.</p>") @as("Owner")
  owner: option<string_>,
  @ocaml.doc("<p>The Availability Zones in which the service is available.</p>")
  @as("AvailabilityZones")
  availabilityZones: option<valueStringList>,
  @ocaml.doc("<p>The type of service.</p>") @as("ServiceType")
  serviceType: option<serviceTypeDetailSet>,
  @ocaml.doc("<p>The ID of the endpoint service.</p>") @as("ServiceId") serviceId: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the service.</p>") @as("ServiceName")
  serviceName: option<string_>,
}
@ocaml.doc("<p>Describes a service configuration for a VPC endpoint service.</p>")
type serviceConfiguration = {
  @ocaml.doc("<p>Any tags assigned to the service.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The payer responsibility.</p>") @as("PayerResponsibility")
  payerResponsibility: option<payerResponsibility>,
  @ocaml.doc("<p>Information about the endpoint service private DNS name configuration.</p>")
  @as("PrivateDnsNameConfiguration")
  privateDnsNameConfiguration: option<privateDnsNameConfiguration>,
  @ocaml.doc("<p>The private DNS name for the service.</p>") @as("PrivateDnsName")
  privateDnsName: option<string_>,
  @ocaml.doc("<p>The DNS names for the service.</p>") @as("BaseEndpointDnsNames")
  baseEndpointDnsNames: option<valueStringList>,
  @ocaml.doc(
    "<p>The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.</p>"
  )
  @as("GatewayLoadBalancerArns")
  gatewayLoadBalancerArns: option<valueStringList>,
  @ocaml.doc(
    "<p>The Amazon Resource Names (ARNs) of the Network Load Balancers for the service.</p>"
  )
  @as("NetworkLoadBalancerArns")
  networkLoadBalancerArns: option<valueStringList>,
  @ocaml.doc("<p>Indicates whether the service manages its VPC endpoints. Management of the service VPC
            endpoints using the VPC endpoint API is restricted.</p>")
  @as("ManagesVpcEndpoints")
  managesVpcEndpoints: option<boolean_>,
  @ocaml.doc(
    "<p>Indicates whether requests from other Amazon Web Services accounts to create an endpoint to the service must first be accepted.</p>"
  )
  @as("AcceptanceRequired")
  acceptanceRequired: option<boolean_>,
  @ocaml.doc("<p>The Availability Zones in which the service is available.</p>")
  @as("AvailabilityZones")
  availabilityZones: option<valueStringList>,
  @ocaml.doc("<p>The service state.</p>") @as("ServiceState") serviceState: option<serviceState>,
  @ocaml.doc("<p>The name of the service.</p>") @as("ServiceName") serviceName: option<string_>,
  @ocaml.doc("<p>The ID of the service.</p>") @as("ServiceId") serviceId: option<string_>,
  @ocaml.doc("<p>The type of service.</p>") @as("ServiceType")
  serviceType: option<serviceTypeDetailSet>,
}
type securityGroupRuleUpdateList = array<securityGroupRuleUpdate>
@ocaml.doc("<p>Describes a security group rule.</p>")
type securityGroupRule = {
  @ocaml.doc("<p>The tags applied to the security group rule.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The security group rule description.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>Describes the security group that is referenced in the rule.</p>")
  @as("ReferencedGroupInfo")
  referencedGroupInfo: option<referencedSecurityGroup>,
  @ocaml.doc("<p>The ID of the prefix list.</p>") @as("PrefixListId")
  prefixListId: option<prefixListResourceId>,
  @ocaml.doc("<p>The IPv6 CIDR range.</p>") @as("CidrIpv6") cidrIpv6: option<string_>,
  @ocaml.doc("<p>The IPv4 CIDR range.</p>") @as("CidrIpv4") cidrIpv4: option<string_>,
  @ocaml.doc(
    "<p>The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of <code>-1</code> indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes. </p>"
  )
  @as("ToPort")
  toPort: option<integer_>,
  @ocaml.doc("<p>The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type. A value
            of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must
            specify all codes.</p>")
  @as("FromPort")
  fromPort: option<integer_>,
  @ocaml.doc("<p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>,
                <code>icmpv6</code>) or number (see <a href=\"http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\">Protocol Numbers</a>). </p> 
        <p>Use <code>-1</code> to specify all protocols.</p>")
  @as("IpProtocol")
  ipProtocol: option<string_>,
  @ocaml.doc("<p>Indicates whether the security group rule is an outbound rule.</p>")
  @as("IsEgress")
  isEgress: option<boolean_>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the security group. </p>")
  @as("GroupOwnerId")
  groupOwnerId: option<string_>,
  @ocaml.doc("<p>The ID of the security group.</p>") @as("GroupId")
  groupId: option<securityGroupId>,
  @ocaml.doc("<p>The ID of the security group rule.</p>") @as("SecurityGroupRuleId")
  securityGroupRuleId: option<securityGroupRuleId>,
}
@ocaml.doc("<p>Describes a network interface for a Scheduled Instance.</p>")
type scheduledInstancesNetworkInterface = {
  @ocaml.doc("<p>The ID of the subnet.</p>") @as("SubnetId") subnetId: option<subnetId>,
  @ocaml.doc("<p>The number of secondary private IPv4 addresses.</p>")
  @as("SecondaryPrivateIpAddressCount")
  secondaryPrivateIpAddressCount: option<integer_>,
  @ocaml.doc("<p>The private IPv4 addresses.</p>") @as("PrivateIpAddressConfigs")
  privateIpAddressConfigs: option<privateIpAddressConfigSet>,
  @ocaml.doc("<p>The IPv4 address of the network interface within the subnet.</p>")
  @as("PrivateIpAddress")
  privateIpAddress: option<string_>,
  @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
  networkInterfaceId: option<networkInterfaceId>,
  @ocaml.doc("<p>The specific IPv6 addresses from the subnet range.</p>") @as("Ipv6Addresses")
  ipv6Addresses: option<scheduledInstancesIpv6AddressList>,
  @ocaml.doc(
    "<p>The number of IPv6 addresses to assign to the network interface. The IPv6 addresses are automatically selected from the subnet range.</p>"
  )
  @as("Ipv6AddressCount")
  ipv6AddressCount: option<integer_>,
  @ocaml.doc("<p>The IDs of the security groups.</p>") @as("Groups")
  groups: option<scheduledInstancesSecurityGroupIdSet>,
  @ocaml.doc("<p>The index of the device for the network interface attachment.</p>")
  @as("DeviceIndex")
  deviceIndex: option<integer_>,
  @ocaml.doc("<p>The description.</p>") @as("Description") description: option<string_>,
  @ocaml.doc("<p>Indicates whether to delete the interface when the instance is terminated.</p>")
  @as("DeleteOnTermination")
  deleteOnTermination: option<boolean_>,
  @ocaml.doc("<p>Indicates whether to assign a public IPv4 address to instances launched in a VPC. The
         public IPv4 address can only be assigned to a network interface for eth0, and can only be
         assigned to a new network interface, not an existing one. You cannot specify more than one
         network interface in the request. If launching into a default subnet, the default value is
         <code>true</code>.</p>")
  @as("AssociatePublicIpAddress")
  associatePublicIpAddress: option<boolean_>,
}
type scheduledInstancesBlockDeviceMappingSet = array<scheduledInstancesBlockDeviceMapping>
@ocaml.doc("<p>Describes a schedule that is available for your Scheduled Instances.</p>")
type scheduledInstanceAvailability = {
  @ocaml.doc("<p>The total number of hours for a single instance for the entire term.</p>")
  @as("TotalScheduledInstanceHours")
  totalScheduledInstanceHours: option<integer_>,
  @ocaml.doc("<p>The number of hours in the schedule.</p>") @as("SlotDurationInHours")
  slotDurationInHours: option<integer_>,
  @ocaml.doc("<p>The schedule recurrence.</p>") @as("Recurrence")
  recurrence: option<scheduledInstanceRecurrence>,
  @ocaml.doc("<p>The purchase token. This token expires in two hours.</p>") @as("PurchaseToken")
  purchaseToken: option<string_>,
  @ocaml.doc("<p>The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>")
  @as("Platform")
  platform: option<string_>,
  @ocaml.doc("<p>The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p>")
  @as("NetworkPlatform")
  networkPlatform: option<string_>,
  @ocaml.doc("<p>The minimum term. The only possible value is 365 days.</p>")
  @as("MinTermDurationInDays")
  minTermDurationInDays: option<integer_>,
  @ocaml.doc("<p>The maximum term. The only possible value is 365 days.</p>")
  @as("MaxTermDurationInDays")
  maxTermDurationInDays: option<integer_>,
  @ocaml.doc(
    "<p>The instance type. You can specify one of the C3, C4, M4, or R3 instance types.</p>"
  )
  @as("InstanceType")
  instanceType: option<string_>,
  @ocaml.doc("<p>The hourly price for a single instance.</p>") @as("HourlyPrice")
  hourlyPrice: option<string_>,
  @ocaml.doc("<p>The time period for the first schedule to start.</p>") @as("FirstSlotStartTime")
  firstSlotStartTime: option<dateTime>,
  @ocaml.doc("<p>The number of available instances.</p>") @as("AvailableInstanceCount")
  availableInstanceCount: option<integer_>,
  @ocaml.doc("<p>The Availability Zone.</p>") @as("AvailabilityZone")
  availabilityZone: option<string_>,
}
@ocaml.doc("<p>Describes a Scheduled Instance.</p>")
type scheduledInstance = {
  @ocaml.doc("<p>The total number of hours for a single instance for the entire term.</p>")
  @as("TotalScheduledInstanceHours")
  totalScheduledInstanceHours: option<integer_>,
  @ocaml.doc("<p>The start date for the Scheduled Instance.</p>") @as("TermStartDate")
  termStartDate: option<dateTime>,
  @ocaml.doc("<p>The end date for the Scheduled Instance.</p>") @as("TermEndDate")
  termEndDate: option<dateTime>,
  @ocaml.doc("<p>The number of hours in the schedule.</p>") @as("SlotDurationInHours")
  slotDurationInHours: option<integer_>,
  @ocaml.doc("<p>The Scheduled Instance ID.</p>") @as("ScheduledInstanceId")
  scheduledInstanceId: option<string_>,
  @ocaml.doc("<p>The schedule recurrence.</p>") @as("Recurrence")
  recurrence: option<scheduledInstanceRecurrence>,
  @ocaml.doc("<p>The time that the previous schedule ended or will end.</p>")
  @as("PreviousSlotEndTime")
  previousSlotEndTime: option<dateTime>,
  @ocaml.doc("<p>The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>")
  @as("Platform")
  platform: option<string_>,
  @ocaml.doc("<p>The time for the next schedule to start.</p>") @as("NextSlotStartTime")
  nextSlotStartTime: option<dateTime>,
  @ocaml.doc("<p>The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p>")
  @as("NetworkPlatform")
  networkPlatform: option<string_>,
  @ocaml.doc("<p>The instance type.</p>") @as("InstanceType") instanceType: option<string_>,
  @ocaml.doc("<p>The number of instances.</p>") @as("InstanceCount")
  instanceCount: option<integer_>,
  @ocaml.doc("<p>The hourly price for a single instance.</p>") @as("HourlyPrice")
  hourlyPrice: option<string_>,
  @ocaml.doc("<p>The date when the Scheduled Instance was purchased.</p>") @as("CreateDate")
  createDate: option<dateTime>,
  @ocaml.doc("<p>The Availability Zone.</p>") @as("AvailabilityZone")
  availabilityZone: option<string_>,
}
type routeTableAssociationList = array<routeTableAssociation>
@ocaml.doc("<p>Describes a Reserved Instance offering.</p>")
type reservedInstancesOffering = {
  @ocaml.doc(
    "<p>Whether the Reserved Instance is applied to instances in a Region or an Availability Zone.</p>"
  )
  @as("Scope")
  scope: option<scope>,
  @ocaml.doc("<p>The recurring charge tag assigned to the resource.</p>") @as("RecurringCharges")
  recurringCharges: option<recurringChargesList>,
  @ocaml.doc("<p>The pricing details of the Reserved Instance offering.</p>") @as("PricingDetails")
  pricingDetails: option<pricingDetailsList>,
  @ocaml.doc("<p>The Reserved Instance offering type.</p>") @as("OfferingType")
  offeringType: option<offeringTypeValues>,
  @ocaml.doc("<p>If <code>convertible</code> it can be exchanged for Reserved Instances of
      the same or higher monetary value, with different configurations. If <code>standard</code>, it is not 
      possible to perform an exchange.</p>")
  @as("OfferingClass")
  offeringClass: option<offeringClassType>,
  @ocaml.doc("<p>Indicates whether the offering is available through the Reserved Instance Marketplace (resale) or Amazon Web Services. 
        If it's a Reserved Instance Marketplace offering, this is <code>true</code>.</p>")
  @as("Marketplace")
  marketplace: option<boolean_>,
  @ocaml.doc("<p>The tenancy of the instance.</p>") @as("InstanceTenancy")
  instanceTenancy: option<tenancy>,
  @ocaml.doc("<p>The currency of the Reserved Instance offering you are purchasing. It's 
				specified using ISO 4217 standard currency codes. At this time, 
				the only supported currency is <code>USD</code>.</p>")
  @as("CurrencyCode")
  currencyCode: option<currencyCodeValues>,
  @ocaml.doc("<p>The usage price of the Reserved Instance, per hour.</p>") @as("UsagePrice")
  usagePrice: option<float_>,
  @ocaml.doc("<p>The ID of the Reserved Instance offering. This is the offering ID used in <a>GetReservedInstancesExchangeQuote</a> 
     to confirm that an exchange can be made.</p>")
  @as("ReservedInstancesOfferingId")
  reservedInstancesOfferingId: option<string_>,
  @ocaml.doc("<p>The Reserved Instance product platform description.</p>") @as("ProductDescription")
  productDescription: option<riproductDescription>,
  @ocaml.doc("<p>The instance type on which the Reserved Instance can be used.</p>")
  @as("InstanceType")
  instanceType: option<instanceType>,
  @ocaml.doc("<p>The purchase price of the Reserved Instance.</p>") @as("FixedPrice")
  fixedPrice: option<float_>,
  @ocaml.doc("<p>The duration of the Reserved Instance, in seconds.</p>") @as("Duration")
  duration: option<long>,
  @ocaml.doc("<p>The Availability Zone in which the Reserved Instance can be used.</p>")
  @as("AvailabilityZone")
  availabilityZone: option<string_>,
}
type reservedInstancesModificationResultList = array<reservedInstancesModificationResult>
@ocaml.doc("<p>Describes a Reserved Instance listing.</p>")
type reservedInstancesListing = {
  @ocaml.doc("<p>The last modified timestamp of the listing.</p>") @as("UpdateDate")
  updateDate: option<dateTime>,
  @ocaml.doc("<p>Any tags assigned to the resource.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc(
    "<p>The reason for the current status of the Reserved Instance listing. The response can be blank.</p>"
  )
  @as("StatusMessage")
  statusMessage: option<string_>,
  @ocaml.doc("<p>The status of the Reserved Instance listing.</p>") @as("Status")
  status: option<listingStatus>,
  @ocaml.doc("<p>The ID of the Reserved Instance listing.</p>") @as("ReservedInstancesListingId")
  reservedInstancesListingId: option<string_>,
  @ocaml.doc("<p>The ID of the Reserved Instance.</p>") @as("ReservedInstancesId")
  reservedInstancesId: option<string_>,
  @ocaml.doc("<p>The price of the Reserved Instance listing.</p>") @as("PriceSchedules")
  priceSchedules: option<priceScheduleList>,
  @ocaml.doc("<p>The number of instances in this state.</p>") @as("InstanceCounts")
  instanceCounts: option<instanceCountList>,
  @ocaml.doc("<p>The time the listing was created.</p>") @as("CreateDate")
  createDate: option<dateTime>,
  @ocaml.doc("<p>A unique, case-sensitive key supplied by the client to ensure that the request is
			idempotent. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p>")
  @as("ClientToken")
  clientToken: option<string_>,
}
@ocaml.doc("<p>Describes a Reserved Instance.</p>")
type reservedInstances = {
  @ocaml.doc("<p>Any tags assigned to the resource.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The scope of the Reserved Instance.</p>") @as("Scope") scope: option<scope>,
  @ocaml.doc("<p>The recurring charge tag assigned to the resource.</p>") @as("RecurringCharges")
  recurringCharges: option<recurringChargesList>,
  @ocaml.doc("<p>The Reserved Instance offering type.</p>") @as("OfferingType")
  offeringType: option<offeringTypeValues>,
  @ocaml.doc("<p>The offering class of the Reserved Instance.</p>") @as("OfferingClass")
  offeringClass: option<offeringClassType>,
  @ocaml.doc("<p>The tenancy of the instance.</p>") @as("InstanceTenancy")
  instanceTenancy: option<tenancy>,
  @ocaml.doc("<p>The currency of the Reserved Instance. It's specified using ISO 4217 standard currency codes.
				At this time, the only supported currency is <code>USD</code>.</p>")
  @as("CurrencyCode")
  currencyCode: option<currencyCodeValues>,
  @ocaml.doc("<p>The usage price of the Reserved Instance, per hour.</p>") @as("UsagePrice")
  usagePrice: option<float_>,
  @ocaml.doc("<p>The state of the Reserved Instance purchase.</p>") @as("State")
  state: option<reservedInstanceState>,
  @ocaml.doc("<p>The date and time the Reserved Instance started.</p>") @as("Start")
  start: option<dateTime>,
  @ocaml.doc("<p>The ID of the Reserved Instance.</p>") @as("ReservedInstancesId")
  reservedInstancesId: option<string_>,
  @ocaml.doc("<p>The Reserved Instance product platform description.</p>") @as("ProductDescription")
  productDescription: option<riproductDescription>,
  @ocaml.doc("<p>The instance type on which the Reserved Instance can be used.</p>")
  @as("InstanceType")
  instanceType: option<instanceType>,
  @ocaml.doc("<p>The number of reservations purchased.</p>") @as("InstanceCount")
  instanceCount: option<integer_>,
  @ocaml.doc("<p>The purchase price of the Reserved Instance.</p>") @as("FixedPrice")
  fixedPrice: option<float_>,
  @ocaml.doc("<p>The time when the Reserved Instance expires.</p>") @as("End")
  end: option<dateTime>,
  @ocaml.doc("<p>The duration of the Reserved Instance, in seconds.</p>") @as("Duration")
  duration: option<long>,
  @ocaml.doc("<p>The Availability Zone in which the Reserved Instance can be used.</p>")
  @as("AvailabilityZone")
  availabilityZone: option<string_>,
}
type reservedInstanceReservationValueSet = array<reservedInstanceReservationValue>
@ocaml.doc("<p>Information about a root volume replacement task.</p>")
type replaceRootVolumeTask = {
  @ocaml.doc("<p>The tags assigned to the task.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The time the task completed.</p>") @as("CompleteTime")
  completeTime: option<string_>,
  @ocaml.doc("<p>The time the task was started.</p>") @as("StartTime") startTime: option<string_>,
  @ocaml.doc("<p>The state of the task. The task can be in one of the following states:</p>
         <ul>
            <li>
               <p>
                  <code>pending</code> - the replacement volume is being created.</p>
            </li>
            <li>
               <p>
                  <code>in-progress</code> - the original volume is being detached and the 
          replacement volume is being attached.</p>
            </li>
            <li>
               <p>
                  <code>succeeded</code> - the replacement volume has been successfully attached 
          to the instance and the instance is available.</p>
            </li>
            <li>
               <p>
                  <code>failing</code> - the replacement task is in the process of failing.</p>
            </li>
            <li>
               <p>
                  <code>failed</code> - the replacement task has failed but the original root 
          volume is still attached.</p>
            </li>
            <li>
               <p>
                  <code>failing-detached</code> - the replacement task is in the process of failing. 
          The instance might have no root volume attached.</p>
            </li>
            <li>
               <p>
                  <code>failed-detached</code> - the replacement task has failed and the instance 
          has no root volume attached.</p>
            </li>
         </ul>")
  @as("TaskState")
  taskState: option<replaceRootVolumeTaskState>,
  @ocaml.doc(
    "<p>The ID of the instance for which the root volume replacement task was created.</p>"
  )
  @as("InstanceId")
  instanceId: option<string_>,
  @ocaml.doc("<p>The ID of the root volume replacement task.</p>") @as("ReplaceRootVolumeTaskId")
  replaceRootVolumeTaskId: option<replaceRootVolumeTaskId>,
}
type purchaseSet = array<purchase>
@ocaml.doc("<p>Describes an IPv4 address pool.</p>")
type publicIpv4Pool = {
  @ocaml.doc("<p>Any tags for the address pool.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The name of the location from which the address pool is advertised. 
            A network border group is a unique set of Availability Zones or Local Zones 
            from where Amazon Web Services advertises public IP addresses.</p>")
  @as("NetworkBorderGroup")
  networkBorderGroup: option<string_>,
  @ocaml.doc("<p>The total number of available addresses.</p>") @as("TotalAvailableAddressCount")
  totalAvailableAddressCount: option<integer_>,
  @ocaml.doc("<p>The total number of addresses.</p>") @as("TotalAddressCount")
  totalAddressCount: option<integer_>,
  @ocaml.doc("<p>The address ranges.</p>") @as("PoolAddressRanges")
  poolAddressRanges: option<publicIpv4PoolRangeSet>,
  @ocaml.doc("<p>A description of the address pool.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The ID of the address pool.</p>") @as("PoolId") poolId: option<string_>,
}
@ocaml.doc("<p>PrincipalIdFormat description</p>")
type principalIdFormat = {
  @ocaml.doc("<p>PrincipalIdFormatStatuses description</p>") @as("Statuses")
  statuses: option<idFormatList>,
  @ocaml.doc("<p>PrincipalIdFormatARN description</p>") @as("Arn") arn: option<string_>,
}
type prefixListSet = array<prefixList>
@ocaml.doc("<p>Describes a placement group.</p>")
type placementGroup = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the placement group.</p>") @as("GroupArn")
  groupArn: option<string_>,
  @ocaml.doc("<p>Any tags applied to the placement group.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The ID of the placement group.</p>") @as("GroupId") groupId: option<string_>,
  @ocaml.doc("<p>The number of partitions. Valid only if <b>strategy</b> is
            set to <code>partition</code>.</p>")
  @as("PartitionCount")
  partitionCount: option<integer_>,
  @ocaml.doc("<p>The placement strategy.</p>") @as("Strategy") strategy: option<placementStrategy>,
  @ocaml.doc("<p>The state of the placement group.</p>") @as("State")
  state: option<placementGroupState>,
  @ocaml.doc("<p>The name of the placement group.</p>") @as("GroupName") groupName: option<string_>,
}
@ocaml.doc("<p>Describes a path statement.</p>")
type pathStatementRequest = {
  @ocaml.doc("<p>The resource statement.</p>") @as("ResourceStatement")
  resourceStatement: option<resourceStatementRequest>,
  @ocaml.doc("<p>The packet header statement.</p>") @as("PacketHeaderStatement")
  packetHeaderStatement: option<packetHeaderStatementRequest>,
}
@ocaml.doc("<p>Describes a path statement.</p>")
type pathStatement = {
  @ocaml.doc("<p>The resource statement.</p>") @as("ResourceStatement")
  resourceStatement: option<resourceStatement>,
  @ocaml.doc("<p>The packet header statement.</p>") @as("PacketHeaderStatement")
  packetHeaderStatement: option<packetHeaderStatement>,
}
type newDhcpConfigurationList = array<newDhcpConfiguration>
type networkInterfacePrivateIpAddressList = array<networkInterfacePrivateIpAddress>
type networkInterfacePermissionList = array<networkInterfacePermission>
@ocaml.doc("<p>Describes a path.</p>")
type networkInsightsPath = {
  @ocaml.doc("<p>The tags associated with the path.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The destination port.</p>") @as("DestinationPort")
  destinationPort: option<integer_>,
  @ocaml.doc("<p>The protocol.</p>") @as("Protocol") protocol: option<protocol>,
  @ocaml.doc(
    "<p>The IP address of the Amazon Web Services resource that is the destination of the path.</p>"
  )
  @as("DestinationIp")
  destinationIp: option<ipAddress>,
  @ocaml.doc(
    "<p>The IP address of the Amazon Web Services resource that is the source of the path.</p>"
  )
  @as("SourceIp")
  sourceIp: option<ipAddress>,
  @ocaml.doc("<p>The Amazon Web Services resource that is the destination of the path.</p>")
  @as("Destination")
  destination: option<string_>,
  @ocaml.doc("<p>The Amazon Web Services resource that is the source of the path.</p>")
  @as("Source")
  source: option<string_>,
  @ocaml.doc("<p>The time stamp when the path was created.</p>") @as("CreatedDate")
  createdDate: option<millisecondDateTime>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the path.</p>") @as("NetworkInsightsPathArn")
  networkInsightsPathArn: option<resourceArn>,
  @ocaml.doc("<p>The ID of the path.</p>") @as("NetworkInsightsPathId")
  networkInsightsPathId: option<networkInsightsPathId>,
}
@ocaml.doc("<p>Describes a Network Access Scope analysis.</p>")
type networkInsightsAccessScopeAnalysis = {
  @ocaml.doc("<p>The tags.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The number of network interfaces analyzed.</p>") @as("AnalyzedEniCount")
  analyzedEniCount: option<integer_>,
  @ocaml.doc("<p>Indicates whether there are findings.</p>") @as("FindingsFound")
  findingsFound: option<findingsFound>,
  @ocaml.doc("<p>The analysis end date.</p>") @as("EndDate") endDate: option<millisecondDateTime>,
  @ocaml.doc("<p>The analysis start date.</p>") @as("StartDate")
  startDate: option<millisecondDateTime>,
  @ocaml.doc("<p>The warning message.</p>") @as("WarningMessage") warningMessage: option<string_>,
  @ocaml.doc("<p>The status message.</p>") @as("StatusMessage") statusMessage: option<string_>,
  @ocaml.doc("<p>The status.</p>") @as("Status") status: option<analysisStatus>,
  @ocaml.doc("<p>The ID of the Network Access Scope.</p>") @as("NetworkInsightsAccessScopeId")
  networkInsightsAccessScopeId: option<networkInsightsAccessScopeId>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Network Access Scope analysis.</p>")
  @as("NetworkInsightsAccessScopeAnalysisArn")
  networkInsightsAccessScopeAnalysisArn: option<resourceArn>,
  @ocaml.doc("<p>The ID of the Network Access Scope analysis.</p>")
  @as("NetworkInsightsAccessScopeAnalysisId")
  networkInsightsAccessScopeAnalysisId: option<networkInsightsAccessScopeAnalysisId>,
}
@ocaml.doc("<p>Describes a Network Access Scope.</p>")
type networkInsightsAccessScope = {
  @ocaml.doc("<p>The tags.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The last updated date.</p>") @as("UpdatedDate")
  updatedDate: option<millisecondDateTime>,
  @ocaml.doc("<p>The creation date.</p>") @as("CreatedDate")
  createdDate: option<millisecondDateTime>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Network Access Scope.</p>")
  @as("NetworkInsightsAccessScopeArn")
  networkInsightsAccessScopeArn: option<resourceArn>,
  @ocaml.doc("<p>The ID of the Network Access Scope.</p>") @as("NetworkInsightsAccessScopeId")
  networkInsightsAccessScopeId: option<networkInsightsAccessScopeId>,
}
@ocaml.doc("<p>Describes the networking features of the instance type.</p>")
type networkInfo = {
  @ocaml.doc(
    "<p>Indicates whether the instance type automatically encrypts in-transit traffic between instances.</p>"
  )
  @as("EncryptionInTransitSupported")
  encryptionInTransitSupported: option<encryptionInTransitSupported>,
  @ocaml.doc("<p>Describes the Elastic Fabric Adapters for the instance type.</p>") @as("EfaInfo")
  efaInfo: option<efaInfo>,
  @ocaml.doc("<p>Indicates whether Elastic Fabric Adapter (EFA) is supported.</p>")
  @as("EfaSupported")
  efaSupported: option<efaSupportedFlag>,
  @ocaml.doc("<p>Indicates whether Elastic Network Adapter (ENA) is supported.</p>")
  @as("EnaSupport")
  enaSupport: option<enaSupport>,
  @ocaml.doc("<p>Indicates whether IPv6 is supported.</p>") @as("Ipv6Supported")
  ipv6Supported: option<ipv6Flag>,
  @ocaml.doc("<p>The maximum number of IPv6 addresses per network interface.</p>")
  @as("Ipv6AddressesPerInterface")
  ipv6AddressesPerInterface: option<maxIpv6AddrPerInterface>,
  @ocaml.doc("<p>The maximum number of IPv4 addresses per network interface.</p>")
  @as("Ipv4AddressesPerInterface")
  ipv4AddressesPerInterface: option<maxIpv4AddrPerInterface>,
  @ocaml.doc("<p>Describes the network cards for the instance type.</p>") @as("NetworkCards")
  networkCards: option<networkCardInfoList>,
  @ocaml.doc("<p>The index of the default network card, starting at 0.</p>")
  @as("DefaultNetworkCardIndex")
  defaultNetworkCardIndex: option<defaultNetworkCardIndex>,
  @ocaml.doc(
    "<p>The maximum number of physical network cards that can be allocated to the instance.</p>"
  )
  @as("MaximumNetworkCards")
  maximumNetworkCards: option<maximumNetworkCards>,
  @ocaml.doc("<p>The maximum number of network interfaces for the instance type.</p>")
  @as("MaximumNetworkInterfaces")
  maximumNetworkInterfaces: option<maxNetworkInterfaces>,
  @ocaml.doc("<p>The network performance.</p>") @as("NetworkPerformance")
  networkPerformance: option<networkPerformance>,
}
type networkAclEntryList = array<networkAclEntry>
@ocaml.doc("<p>Describes a NAT gateway.</p>")
type natGateway = {
  @ocaml.doc("<p>Indicates whether the NAT gateway supports public or private connectivity.</p>")
  @as("ConnectivityType")
  connectivityType: option<connectivityType>,
  @ocaml.doc("<p>The tags for the NAT gateway.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The ID of the VPC in which the NAT gateway is located.</p>") @as("VpcId")
  vpcId: option<string_>,
  @ocaml.doc("<p>The ID of the subnet in which the NAT gateway is located.</p>") @as("SubnetId")
  subnetId: option<string_>,
  @ocaml.doc("<p>The state of the NAT gateway.</p>
         <ul>
            <li>
               <p>
                  <code>pending</code>: The NAT gateway is being created and is not ready to process
          traffic.</p>
            </li>
            <li>
               <p>
                  <code>failed</code>: The NAT gateway could not be created. Check the
            <code>failureCode</code> and <code>failureMessage</code> fields for the reason.</p>
            </li>
            <li>
               <p>
                  <code>available</code>: The NAT gateway is able to process traffic. This status remains
          until you delete the NAT gateway, and does not indicate the health of the NAT gateway.</p>
            </li>
            <li>
               <p>
                  <code>deleting</code>: The NAT gateway is in the process of being terminated and may
          still be processing traffic.</p>
            </li>
            <li>
               <p>
                  <code>deleted</code>: The NAT gateway has been terminated and is no longer processing
          traffic.</p>
            </li>
         </ul>")
  @as("State")
  state: option<natGatewayState>,
  @ocaml.doc("<p>Reserved. If you need to sustain traffic greater than the <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html\">documented limits</a>, contact us through 
          the <a href=\"https://console.aws.amazon.com/support/home?\">Support Center</a>.</p>")
  @as("ProvisionedBandwidth")
  provisionedBandwidth: option<provisionedBandwidth>,
  @ocaml.doc("<p>The ID of the NAT gateway.</p>") @as("NatGatewayId") natGatewayId: option<string_>,
  @ocaml.doc(
    "<p>Information about the IP addresses and network interface associated with the NAT gateway.</p>"
  )
  @as("NatGatewayAddresses")
  natGatewayAddresses: option<natGatewayAddressList>,
  @ocaml.doc("<p>If the NAT gateway could not be created, specifies the error message for the failure, that corresponds to the error code.</p>
         <ul>
            <li>
               <p>For InsufficientFreeAddressesInSubnet: \"Subnet has insufficient free addresses to create this NAT gateway\"</p>
            </li>
            <li>
               <p>For Gateway.NotAttached: \"Network vpc-xxxxxxxx has no Internet gateway attached\"</p>
            </li>
            <li>
               <p>For InvalidAllocationID.NotFound: \"Elastic IP address eipalloc-xxxxxxxx could not be associated with this NAT gateway\"</p>
            </li>
            <li>
               <p>For Resource.AlreadyAssociated: \"Elastic IP address eipalloc-xxxxxxxx is already associated\"</p>
            </li>
            <li>
               <p>For InternalError: \"Network interface eni-xxxxxxxx, created and used internally by this NAT gateway is in an invalid state. Please try again.\"</p>
            </li>
            <li>
               <p>For InvalidSubnetID.NotFound: \"The specified subnet subnet-xxxxxxxx does not exist or could not be found.\"</p>
            </li>
         </ul>")
  @as("FailureMessage")
  failureMessage: option<string_>,
  @ocaml.doc("<p>If the NAT gateway could not be created, specifies the error code for the failure.
        (<code>InsufficientFreeAddressesInSubnet</code> | <code>Gateway.NotAttached</code> |
         <code>InvalidAllocationID.NotFound</code> | <code>Resource.AlreadyAssociated</code> |
         <code>InternalError</code> | <code>InvalidSubnetID.NotFound</code>)</p>")
  @as("FailureCode")
  failureCode: option<string_>,
  @ocaml.doc("<p>The date and time the NAT gateway was deleted, if applicable.</p>")
  @as("DeleteTime")
  deleteTime: option<dateTime>,
  @ocaml.doc("<p>The date and time the NAT gateway was created.</p>") @as("CreateTime")
  createTime: option<dateTime>,
}
@ocaml.doc("<p>The Amazon Web Services Site-to-Site VPN tunnel options to modify.</p>")
type modifyVpnTunnelOptionsSpecification = {
  @ocaml.doc("<p>The action to take when the establishing the tunnel for the VPN connection. By
            default, your customer gateway device must initiate the IKE negotiation and bring up the
            tunnel. Specify <code>start</code> for Amazon Web Services to initiate the IKE
            negotiation.</p>
        <p>Valid Values: <code>add</code> | <code>start</code>
         </p>
        <p>Default: <code>add</code>
         </p>")
  @as("StartupAction")
  startupAction: option<string_>,
  @ocaml.doc("<p>The IKE versions that are permitted for the VPN tunnel.</p>
        <p>Valid values: <code>ikev1</code> | <code>ikev2</code>
         </p>")
  @as("IKEVersions")
  ikeversions: option<ikeversionsRequestList>,
  @ocaml.doc("<p>One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for
            phase 2 IKE negotiations.</p>
        <p>Valid values: <code>2</code> | <code>5</code> | <code>14</code> | <code>15</code> |
                <code>16</code> | <code>17</code> | <code>18</code> | <code>19</code> |
                <code>20</code> | <code>21</code> | <code>22</code> | <code>23</code> |
                <code>24</code>
         </p>")
  @as("Phase2DHGroupNumbers")
  phase2DHGroupNumbers: option<phase2DHGroupNumbersRequestList>,
  @ocaml.doc("<p>One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for
            phase 1 IKE negotiations.</p>
        <p>Valid values: <code>2</code> | <code>14</code> | <code>15</code> | <code>16</code> |
                <code>17</code> | <code>18</code> | <code>19</code> | <code>20</code> |
                <code>21</code> | <code>22</code> | <code>23</code> | <code>24</code>
         </p>")
  @as("Phase1DHGroupNumbers")
  phase1DHGroupNumbers: option<phase1DHGroupNumbersRequestList>,
  @ocaml.doc("<p>One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE
            negotiations.</p>
        <p>Valid values: <code>SHA1</code> | <code>SHA2-256</code> | <code>SHA2-384</code> |
                <code>SHA2-512</code>
         </p>")
  @as("Phase2IntegrityAlgorithms")
  phase2IntegrityAlgorithms: option<phase2IntegrityAlgorithmsRequestList>,
  @ocaml.doc("<p>One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE
            negotiations.</p>
        <p>Valid values: <code>SHA1</code> | <code>SHA2-256</code> | <code>SHA2-384</code> |
                <code>SHA2-512</code>
         </p>")
  @as("Phase1IntegrityAlgorithms")
  phase1IntegrityAlgorithms: option<phase1IntegrityAlgorithmsRequestList>,
  @ocaml.doc("<p>One or more encryption algorithms that are permitted for the VPN tunnel for phase 2
            IKE negotiations.</p>
        <p>Valid values: <code>AES128</code> | <code>AES256</code> | <code>AES128-GCM-16</code> |
                <code>AES256-GCM-16</code>
         </p>")
  @as("Phase2EncryptionAlgorithms")
  phase2EncryptionAlgorithms: option<phase2EncryptionAlgorithmsRequestList>,
  @ocaml.doc("<p>One or more encryption algorithms that are permitted for the VPN tunnel for phase 1
            IKE negotiations.</p>
        <p>Valid values: <code>AES128</code> | <code>AES256</code> | <code>AES128-GCM-16</code> |
                <code>AES256-GCM-16</code>
         </p>")
  @as("Phase1EncryptionAlgorithms")
  phase1EncryptionAlgorithms: option<phase1EncryptionAlgorithmsRequestList>,
  @ocaml.doc("<p>The action to take after DPD timeout occurs. Specify <code>restart</code> to restart
            the IKE initiation. Specify <code>clear</code> to end the IKE session.</p>
        <p>Valid Values: <code>clear</code> | <code>none</code> | <code>restart</code>
         </p>
        <p>Default: <code>clear</code>
         </p>")
  @as("DPDTimeoutAction")
  dpdtimeoutAction: option<string_>,
  @ocaml.doc("<p>The number of seconds after which a DPD timeout occurs.</p>
        <p>Constraints: A value greater than or equal to 30.</p>
        <p>Default: <code>30</code>
         </p>")
  @as("DPDTimeoutSeconds")
  dpdtimeoutSeconds: option<integer_>,
  @ocaml.doc("<p>The number of packets in an IKE replay window.</p>
        <p>Constraints: A value between 64 and 2048.</p>
        <p>Default: <code>1024</code>
         </p>")
  @as("ReplayWindowSize")
  replayWindowSize: option<integer_>,
  @ocaml.doc("<p>The percentage of the rekey window (determined by <code>RekeyMarginTimeSeconds</code>)
            during which the rekey time is randomly selected.</p>
        <p>Constraints: A value between 0 and 100.</p>
        <p>Default: <code>100</code>
         </p>")
  @as("RekeyFuzzPercentage")
  rekeyFuzzPercentage: option<integer_>,
  @ocaml.doc("<p>The margin time, in seconds, before the phase 2 lifetime expires, during which the
                Amazon Web Services side of the VPN connection performs an IKE rekey. The exact time
            of the rekey is randomly selected based on the value for
                <code>RekeyFuzzPercentage</code>.</p>
        <p>Constraints: A value between 60 and half of <code>Phase2LifetimeSeconds</code>.</p>
        <p>Default: <code>540</code>
         </p>")
  @as("RekeyMarginTimeSeconds")
  rekeyMarginTimeSeconds: option<integer_>,
  @ocaml.doc("<p>The lifetime for phase 2 of the IKE negotiation, in seconds.</p>
        <p>Constraints: A value between 900 and 3,600. The value must be less than the value for
                <code>Phase1LifetimeSeconds</code>.</p>
        <p>Default: <code>3600</code>
         </p>")
  @as("Phase2LifetimeSeconds")
  phase2LifetimeSeconds: option<integer_>,
  @ocaml.doc("<p>The lifetime for phase 1 of the IKE negotiation, in seconds.</p>
        <p>Constraints: A value between 900 and 28,800.</p>
        <p>Default: <code>28800</code>
         </p>")
  @as("Phase1LifetimeSeconds")
  phase1LifetimeSeconds: option<integer_>,
  @ocaml.doc("<p>The pre-shared key (PSK) to establish initial authentication between the virtual
            private gateway and the customer gateway.</p>
        <p>Constraints: Allowed characters are alphanumeric characters, periods (.), and
            underscores (_). Must be between 8 and 64 characters in length and cannot start with
            zero (0).</p>")
  @as("PreSharedKey")
  preSharedKey: option<string_>,
  @ocaml.doc("<p>The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be
            unique across all VPN connections that use the same transit gateway.</p>
        <p>Constraints: A size /126 CIDR block from the local <code>fd00::/8</code> range.</p>")
  @as("TunnelInsideIpv6Cidr")
  tunnelInsideIpv6Cidr: option<string_>,
  @ocaml.doc("<p>The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks must be
            unique across all VPN connections that use the same virtual private gateway. </p>
        <p>Constraints: A size /30 CIDR block from the <code>169.254.0.0/16</code> range. The
            following CIDR blocks are reserved and cannot be used:</p>
        <ul>
            <li>
                <p>
                  <code>169.254.0.0/30</code>
               </p>
            </li>
            <li>
                <p>
                  <code>169.254.1.0/30</code>
               </p>
            </li>
            <li>
                <p>
                  <code>169.254.2.0/30</code>
               </p>
            </li>
            <li>
                <p>
                  <code>169.254.3.0/30</code>
               </p>
            </li>
            <li>
                <p>
                  <code>169.254.4.0/30</code>
               </p>
            </li>
            <li>
                <p>
                  <code>169.254.5.0/30</code>
               </p>
            </li>
            <li>
                <p>
                  <code>169.254.169.252/30</code>
               </p>
            </li>
         </ul>")
  @as("TunnelInsideCidr")
  tunnelInsideCidr: option<string_>,
}
@ocaml.doc("<p>Describes a managed prefix list.</p>")
type managedPrefixList = {
  @ocaml.doc("<p>The ID of the owner of the prefix list.</p>") @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The tags for the prefix list.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The version of the prefix list.</p>") @as("Version") version: option<long>,
  @ocaml.doc("<p>The maximum number of entries for the prefix list.</p>") @as("MaxEntries")
  maxEntries: option<integer_>,
  @ocaml.doc("<p>The name of the prefix list.</p>") @as("PrefixListName")
  prefixListName: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) for the prefix list.</p>") @as("PrefixListArn")
  prefixListArn: option<resourceArn>,
  @ocaml.doc("<p>The state message.</p>") @as("StateMessage") stateMessage: option<string_>,
  @ocaml.doc("<p>The current state of the prefix list.</p>") @as("State")
  state: option<prefixListState>,
  @ocaml.doc("<p>The IP address version.</p>") @as("AddressFamily") addressFamily: option<string_>,
  @ocaml.doc("<p>The ID of the prefix list.</p>") @as("PrefixListId")
  prefixListId: option<prefixListResourceId>,
}
@ocaml.doc("<p>Describes a local gateway virtual interface group.</p>")
type localGatewayVirtualInterfaceGroup = {
  @ocaml.doc("<p>The tags assigned to the virtual interface group.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc(
    "<p>The ID of the Amazon Web Services account that owns the local gateway virtual interface group.</p>"
  )
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The ID of the local gateway.</p>") @as("LocalGatewayId")
  localGatewayId: option<string_>,
  @ocaml.doc("<p>The IDs of the virtual interfaces.</p>") @as("LocalGatewayVirtualInterfaceIds")
  localGatewayVirtualInterfaceIds: option<localGatewayVirtualInterfaceIdSet>,
  @ocaml.doc("<p>The ID of the virtual interface group.</p>")
  @as("LocalGatewayVirtualInterfaceGroupId")
  localGatewayVirtualInterfaceGroupId: option<localGatewayVirtualInterfaceGroupId>,
}
@ocaml.doc("<p>Describes a local gateway virtual interface.</p>")
type localGatewayVirtualInterface = {
  @ocaml.doc("<p>The tags assigned to the virtual interface.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc(
    "<p>The ID of the Amazon Web Services account that owns the local gateway virtual interface.</p>"
  )
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The peer BGP ASN.</p>") @as("PeerBgpAsn") peerBgpAsn: option<integer_>,
  @ocaml.doc(
    "<p>The Border Gateway Protocol (BGP) Autonomous System Number (ASN) of the local gateway.</p>"
  )
  @as("LocalBgpAsn")
  localBgpAsn: option<integer_>,
  @ocaml.doc("<p>The peer address.</p>") @as("PeerAddress") peerAddress: option<string_>,
  @ocaml.doc("<p>The local address.</p>") @as("LocalAddress") localAddress: option<string_>,
  @ocaml.doc("<p>The ID of the VLAN.</p>") @as("Vlan") vlan: option<integer_>,
  @ocaml.doc("<p>The ID of the local gateway.</p>") @as("LocalGatewayId")
  localGatewayId: option<string_>,
  @ocaml.doc("<p>The ID of the virtual interface.</p>") @as("LocalGatewayVirtualInterfaceId")
  localGatewayVirtualInterfaceId: option<localGatewayVirtualInterfaceId>,
}
@ocaml.doc("<p>Describes an association between a local gateway route table and a VPC.</p>")
type localGatewayRouteTableVpcAssociation = {
  @ocaml.doc("<p>The tags assigned to the association.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The state of the association.</p>") @as("State") state: option<string_>,
  @ocaml.doc(
    "<p>The ID of the Amazon Web Services account that owns the local gateway route table for the association.</p>"
  )
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<string_>,
  @ocaml.doc("<p>The ID of the local gateway.</p>") @as("LocalGatewayId")
  localGatewayId: option<string_>,
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the local gateway route table for the association.</p>"
  )
  @as("LocalGatewayRouteTableArn")
  localGatewayRouteTableArn: option<resourceArn>,
  @ocaml.doc("<p>The ID of the local gateway route table.</p>") @as("LocalGatewayRouteTableId")
  localGatewayRouteTableId: option<string_>,
  @ocaml.doc("<p>The ID of the association.</p>") @as("LocalGatewayRouteTableVpcAssociationId")
  localGatewayRouteTableVpcAssociationId: option<localGatewayRouteTableVpcAssociationId>,
}
@ocaml.doc(
  "<p>Describes an association between a local gateway route table and a virtual interface group.</p>"
)
type localGatewayRouteTableVirtualInterfaceGroupAssociation = {
  @ocaml.doc("<p>The tags assigned to the association.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The state of the association.</p>") @as("State") state: option<string_>,
  @ocaml.doc(
    "<p>The ID of the Amazon Web Services account that owns the local gateway virtual interface group association.</p>"
  )
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc(
    "<p>The Amazon Resource Name (ARN) of the local gateway route table for the virtual interface group.</p>"
  )
  @as("LocalGatewayRouteTableArn")
  localGatewayRouteTableArn: option<resourceArn>,
  @ocaml.doc("<p>The ID of the local gateway route table.</p>") @as("LocalGatewayRouteTableId")
  localGatewayRouteTableId: option<localGatewayId>,
  @ocaml.doc("<p>The ID of the local gateway.</p>") @as("LocalGatewayId")
  localGatewayId: option<string_>,
  @ocaml.doc("<p>The ID of the virtual interface group.</p>")
  @as("LocalGatewayVirtualInterfaceGroupId")
  localGatewayVirtualInterfaceGroupId: option<localGatewayVirtualInterfaceGroupId>,
  @ocaml.doc("<p>The ID of the association.</p>")
  @as("LocalGatewayRouteTableVirtualInterfaceGroupAssociationId")
  localGatewayRouteTableVirtualInterfaceGroupAssociationId: option<
    localGatewayRouteTableVirtualInterfaceGroupAssociationId,
  >,
}
@ocaml.doc("<p>Describes a local gateway route table.</p>")
type localGatewayRouteTable = {
  @ocaml.doc("<p>The tags assigned to the local gateway route table.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The state of the local gateway route table.</p>") @as("State")
  state: option<string_>,
  @ocaml.doc(
    "<p>The ID of the Amazon Web Services account that owns the local gateway route table.</p>"
  )
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Outpost.</p>") @as("OutpostArn")
  outpostArn: option<string_>,
  @ocaml.doc("<p>The ID of the local gateway.</p>") @as("LocalGatewayId")
  localGatewayId: option<localGatewayId>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the local gateway route table.</p>")
  @as("LocalGatewayRouteTableArn")
  localGatewayRouteTableArn: option<resourceArn>,
  @ocaml.doc("<p>The ID of the local gateway route table.</p>") @as("LocalGatewayRouteTableId")
  localGatewayRouteTableId: option<string_>,
}
@ocaml.doc("<p>Describes a local gateway.</p>")
type localGateway = {
  @ocaml.doc("<p>The tags assigned to the local gateway.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The state of the local gateway.</p>") @as("State") state: option<string_>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the local gateway.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Outpost.</p>") @as("OutpostArn")
  outpostArn: option<string_>,
  @ocaml.doc("<p>The ID of the local gateway.</p>") @as("LocalGatewayId")
  localGatewayId: option<localGatewayId>,
}
@ocaml.doc("<p>Describes modifications to the load permissions of an Amazon FPGA image (AFI).</p>")
type loadPermissionModifications = {
  @ocaml.doc("<p>The load permissions to remove.</p>") @as("Remove")
  remove: option<loadPermissionListRequest>,
  @ocaml.doc("<p>The load permissions to add.</p>") @as("Add")
  add: option<loadPermissionListRequest>,
}
@ocaml.doc("<p>The tags specification for the launch template.</p>")
type launchTemplateTagSpecificationRequest = {
  @ocaml.doc("<p>The tags to apply to the resource.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The type of resource to tag. Currently, the resource types that support tagging on
            creation are <code>instance</code>, <code>volume</code>, <code>elastic-gpu</code>,
                <code>network-interface</code>, and <code>spot-instances-request</code>. To tag a
            resource after it has been created, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html\">CreateTags</a>.</p>")
  @as("ResourceType")
  resourceType: option<resourceType>,
}
@ocaml.doc("<p>The tag specification for the launch template.</p>")
type launchTemplateTagSpecification = {
  @ocaml.doc("<p>The tags for the resource.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The type of resource.</p>") @as("ResourceType") resourceType: option<resourceType>,
}
@ocaml.doc("<p>Describes overrides for a launch template.</p>")
type launchTemplateOverrides = {
  @ocaml.doc("<p>The instance requirements. When you specify instance requirements, Amazon EC2 will identify
         instance types with the provided requirements, and then use your On-Demand and Spot
         allocation strategies to launch instances from these instance types, in the same way as
         when you specify a list of instance types.</p>
         <note>
            <p>If you specify <code>InstanceRequirements</code>, you can't specify
               <code>InstanceTypes</code>.</p>
         </note>")
  @as("InstanceRequirements")
  instanceRequirements: option<instanceRequirements>,
  @ocaml.doc("<p>The priority for the launch template override. The highest priority is launched
            first.</p>
        <p>If <code>OnDemandAllocationStrategy</code> is set to <code>prioritized</code>, Spot Fleet
            uses priority to determine which launch template override to use first in fulfilling
            On-Demand capacity.</p>
        <p>If the Spot <code>AllocationStrategy</code> is set to
                <code>capacityOptimizedPrioritized</code>, Spot Fleet uses priority on a best-effort basis
            to determine which launch template override to use in fulfilling Spot capacity, but
            optimizes for capacity first.</p>
        <p>Valid values are whole numbers starting at <code>0</code>. The lower the number, the
            higher the priority. If no number is set, the launch template override has the lowest
            priority. You can set the same priority for different launch template overrides.</p>")
  @as("Priority")
  priority: option<double>,
  @ocaml.doc("<p>The number of units provided by the specified instance type.</p>")
  @as("WeightedCapacity")
  weightedCapacity: option<double>,
  @ocaml.doc("<p>The Availability Zone in which to launch the instances.</p>")
  @as("AvailabilityZone")
  availabilityZone: option<string_>,
  @ocaml.doc("<p>The ID of the subnet in which to launch the instances.</p>") @as("SubnetId")
  subnetId: option<subnetId>,
  @ocaml.doc("<p>The maximum price per unit hour that you are willing to pay for a Spot
            Instance.</p>")
  @as("SpotPrice")
  spotPrice: option<string_>,
  @ocaml.doc("<p>The instance type.</p>") @as("InstanceType") instanceType: option<instanceType>,
}
@ocaml.doc("<p>The parameters for a network interface.</p>")
type launchTemplateInstanceNetworkInterfaceSpecificationRequest = {
  @ocaml.doc("<p>The number of IPv6 prefixes to be automatically assigned to the network interface. You
            cannot use this option if you use the <code>Ipv6Prefix</code> option.</p>")
  @as("Ipv6PrefixCount")
  ipv6PrefixCount: option<integer_>,
  @ocaml.doc("<p>One or more IPv6 prefixes to be assigned to the network interface. You cannot use this
            option if you use the <code>Ipv6PrefixCount</code> option.</p>")
  @as("Ipv6Prefixes")
  ipv6Prefixes: option<ipv6PrefixList>,
  @ocaml.doc("<p>The number of IPv4 prefixes to be automatically assigned to the network interface. You
            cannot use this option if you use the <code>Ipv4Prefix</code> option.</p>")
  @as("Ipv4PrefixCount")
  ipv4PrefixCount: option<integer_>,
  @ocaml.doc("<p>One or more IPv4 prefixes to be assigned to the network interface. You cannot use this
            option if you use the <code>Ipv4PrefixCount</code> option.</p>")
  @as("Ipv4Prefixes")
  ipv4Prefixes: option<ipv4PrefixList>,
  @ocaml.doc("<p>The index of the network card. Some instance types support multiple network cards. The
            primary network interface must be assigned to network card index 0. The default is
            network card index 0.</p>")
  @as("NetworkCardIndex")
  networkCardIndex: option<integer_>,
  @ocaml.doc("<p>The ID of the subnet for the network interface.</p>") @as("SubnetId")
  subnetId: option<subnetId>,
  @ocaml.doc("<p>The number of secondary private IPv4 addresses to assign to a network
            interface.</p>")
  @as("SecondaryPrivateIpAddressCount")
  secondaryPrivateIpAddressCount: option<integer_>,
  @ocaml.doc("<p>One or more private IPv4 addresses.</p>") @as("PrivateIpAddresses")
  privateIpAddresses: option<privateIpAddressSpecificationList>,
  @ocaml.doc("<p>The primary private IPv4 address of the network interface.</p>")
  @as("PrivateIpAddress")
  privateIpAddress: option<string_>,
  @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
  networkInterfaceId: option<networkInterfaceId>,
  @ocaml.doc("<p>One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You
            can't use this option if you're specifying a number of IPv6 addresses.</p>")
  @as("Ipv6Addresses")
  ipv6Addresses: option<instanceIpv6AddressListRequest>,
  @ocaml.doc("<p>The number of IPv6 addresses to assign to a network interface. Amazon EC2
            automatically selects the IPv6 addresses from the subnet range. You can't use this
            option if specifying specific IPv6 addresses.</p>")
  @as("Ipv6AddressCount")
  ipv6AddressCount: option<integer_>,
  @ocaml.doc("<p>The type of network interface. To create an Elastic Fabric Adapter (EFA), specify
                <code>efa</code>. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html\">Elastic Fabric Adapter</a> in the
                <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
        <p>If you are not creating an EFA, specify <code>interface</code> or omit this
            parameter.</p>
        <p>Valid values: <code>interface</code> | <code>efa</code>
         </p>")
  @as("InterfaceType")
  interfaceType: option<string_>,
  @ocaml.doc("<p>The IDs of one or more security groups.</p>") @as("Groups")
  groups: option<securityGroupIdStringList>,
  @ocaml.doc("<p>The device index for the network interface attachment.</p>") @as("DeviceIndex")
  deviceIndex: option<integer_>,
  @ocaml.doc("<p>A description for the network interface.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>Indicates whether the network interface is deleted when the instance is
            terminated.</p>")
  @as("DeleteOnTermination")
  deleteOnTermination: option<boolean_>,
  @ocaml.doc("<p>Associates a public IPv4 address with eth0 for a new network interface.</p>")
  @as("AssociatePublicIpAddress")
  associatePublicIpAddress: option<boolean_>,
  @ocaml.doc("<p>Associates a Carrier IP address with eth0 for a new network interface.</p>
        <p>Use this option when you launch an instance in a Wavelength Zone and want to associate
            a Carrier IP address with the network interface. For more information about Carrier IP
            addresses, see <a href=\"https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#provider-owned-ip\">Carrier IP addresses</a> in the <i>Wavelength Developer
            Guide</i>.</p>")
  @as("AssociateCarrierIpAddress")
  associateCarrierIpAddress: option<boolean_>,
}
@ocaml.doc("<p>Describes a network interface.</p>")
type launchTemplateInstanceNetworkInterfaceSpecification = {
  @ocaml.doc("<p>The number of IPv6 prefixes that Amazon Web Services automatically assigned to the network
            interface.</p>")
  @as("Ipv6PrefixCount")
  ipv6PrefixCount: option<integer_>,
  @ocaml.doc("<p>One or more IPv6 prefixes assigned to the network interface.</p>")
  @as("Ipv6Prefixes")
  ipv6Prefixes: option<ipv6PrefixListResponse>,
  @ocaml.doc("<p>The number of IPv4 prefixes that Amazon Web Services automatically assigned to the network
            interface.</p>")
  @as("Ipv4PrefixCount")
  ipv4PrefixCount: option<integer_>,
  @ocaml.doc("<p>One or more IPv4 prefixes assigned to the network interface.</p>")
  @as("Ipv4Prefixes")
  ipv4Prefixes: option<ipv4PrefixListResponse>,
  @ocaml.doc("<p>The index of the network card.</p>") @as("NetworkCardIndex")
  networkCardIndex: option<integer_>,
  @ocaml.doc("<p>The ID of the subnet for the network interface.</p>") @as("SubnetId")
  subnetId: option<subnetId>,
  @ocaml.doc("<p>The number of secondary private IPv4 addresses for the network interface.</p>")
  @as("SecondaryPrivateIpAddressCount")
  secondaryPrivateIpAddressCount: option<integer_>,
  @ocaml.doc("<p>One or more private IPv4 addresses.</p>") @as("PrivateIpAddresses")
  privateIpAddresses: option<privateIpAddressSpecificationList>,
  @ocaml.doc("<p>The primary private IPv4 address of the network interface.</p>")
  @as("PrivateIpAddress")
  privateIpAddress: option<string_>,
  @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
  networkInterfaceId: option<networkInterfaceId>,
  @ocaml.doc("<p>The IPv6 addresses for the network interface.</p>") @as("Ipv6Addresses")
  ipv6Addresses: option<instanceIpv6AddressList>,
  @ocaml.doc("<p>The number of IPv6 addresses for the network interface.</p>")
  @as("Ipv6AddressCount")
  ipv6AddressCount: option<integer_>,
  @ocaml.doc("<p>The type of network interface.</p>") @as("InterfaceType")
  interfaceType: option<string_>,
  @ocaml.doc("<p>The IDs of one or more security groups.</p>") @as("Groups")
  groups: option<groupIdStringList>,
  @ocaml.doc("<p>The device index for the network interface attachment.</p>") @as("DeviceIndex")
  deviceIndex: option<integer_>,
  @ocaml.doc("<p>A description for the network interface.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>Indicates whether the network interface is deleted when the instance is
            terminated.</p>")
  @as("DeleteOnTermination")
  deleteOnTermination: option<boolean_>,
  @ocaml.doc("<p>Indicates whether to associate a public IPv4 address with eth0 for a new network
            interface.</p>")
  @as("AssociatePublicIpAddress")
  associatePublicIpAddress: option<boolean_>,
  @ocaml.doc("<p>Indicates whether to associate a Carrier IP address with eth0 for a new network
            interface.</p>
        <p>Use this option when you launch an instance in a Wavelength Zone and want to associate
            a Carrier IP address with the network interface. For more information about Carrier IP
            addresses, see <a href=\"https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#provider-owned-ip\">Carrier IP addresses</a> in the <i>Wavelength Developer
            Guide</i>.</p>")
  @as("AssociateCarrierIpAddress")
  associateCarrierIpAddress: option<boolean_>,
}
type launchTemplateBlockDeviceMappingRequestList = array<launchTemplateBlockDeviceMappingRequest>
type launchTemplateBlockDeviceMappingList = array<launchTemplateBlockDeviceMapping>
@ocaml.doc("<p>Describes a launch template.</p>")
type launchTemplate = {
  @ocaml.doc("<p>The tags for the launch template.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The version number of the latest version of the launch template.</p>")
  @as("LatestVersionNumber")
  latestVersionNumber: option<long>,
  @ocaml.doc("<p>The version number of the default version of the launch template.</p>")
  @as("DefaultVersionNumber")
  defaultVersionNumber: option<long>,
  @ocaml.doc("<p>The principal that created the launch template. </p>") @as("CreatedBy")
  createdBy: option<string_>,
  @ocaml.doc("<p>The time launch template was created.</p>") @as("CreateTime")
  createTime: option<dateTime>,
  @ocaml.doc("<p>The name of the launch template.</p>") @as("LaunchTemplateName")
  launchTemplateName: option<launchTemplateName>,
  @ocaml.doc("<p>The ID of the launch template.</p>") @as("LaunchTemplateId")
  launchTemplateId: option<string_>,
}
@ocaml.doc("<p>Describes a launch permission modification.</p>")
type launchPermissionModifications = {
  @ocaml.doc(
    "<p>The Amazon Web Services account ID, organization ARN, or OU ARN to remove from the list of launch permissions for the AMI.</p>"
  )
  @as("Remove")
  remove: option<launchPermissionList>,
  @ocaml.doc(
    "<p>The Amazon Web Services account ID, organization ARN, or OU ARN to add to the list of launch permissions for the AMI.</p>"
  )
  @as("Add")
  add: option<launchPermissionList>,
}
@ocaml.doc("<p>Describes a key pair.</p>")
type keyPairInfo = {
  @ocaml.doc("<p>Any tags applied to the key pair.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The type of key pair.</p>") @as("KeyType") keyType: option<keyType>,
  @ocaml.doc("<p>The name of the key pair.</p>") @as("KeyName") keyName: option<string_>,
  @ocaml.doc("<p>If you used <a>CreateKeyPair</a> to create the key pair:</p>
         <ul>
            <li>
               <p>For RSA key pairs, the key fingerprint is the SHA-1 digest of the DER encoded private key. 
               </p>
           </li>
            <li>
               <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which 
                   is the default for OpenSSH, starting with <a href=\"http://www.openssh.com/txt/release-6.8\">OpenSSH 6.8</a>.</p>
           </li>
         </ul>
         <p>If you used <a>ImportKeyPair</a> to provide Amazon Web Services the public key:</p>
         <ul>
            <li>
               <p>For RSA key pairs, the key fingerprint is the MD5 public key fingerprint as specified in section 4 of RFC4716.</p>
           </li>
            <li>
               <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256
                    digest, which is the default for OpenSSH, starting with <a href=\"http://www.openssh.com/txt/release-6.8\">OpenSSH 6.8</a>.</p>
           </li>
         </ul>")
  @as("KeyFingerprint")
  keyFingerprint: option<string_>,
  @ocaml.doc("<p>The ID of the key pair.</p>") @as("KeyPairId") keyPairId: option<string_>,
}
@ocaml.doc("<p>Describes an IPv6 address pool.</p>")
type ipv6Pool = {
  @ocaml.doc("<p>Any tags for the address pool.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The CIDR blocks for the address pool.</p>") @as("PoolCidrBlocks")
  poolCidrBlocks: option<poolCidrBlocksSet>,
  @ocaml.doc("<p>The description for the address pool.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The ID of the address pool.</p>") @as("PoolId") poolId: option<string_>,
}
@ocaml.doc("<p>In IPAM, a scope is the highest-level container within IPAM. An IPAM contains two default scopes. Each scope represents the IP space for a single network. The private scope is intended for all private IP address space. The public scope is intended for all public IP address space. Scopes enable you to reuse IP addresses across multiple unconnected networks without causing IP address overlap or conflict.</p>
         <p>For more information, see <a href=\"/vpc/latest/ipam/how-it-works-ipam.html\">How IPAM works</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>")
type ipamScope = {
  @ocaml.doc("<p>The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>")
  @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The state of the IPAM scope.</p>") @as("State") state: option<ipamScopeState>,
  @ocaml.doc("<p>The number of pools in the scope.</p>") @as("PoolCount")
  poolCount: option<integer_>,
  @ocaml.doc("<p>The description of the scope.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>Defines if the scope is the default scope or not.</p>") @as("IsDefault")
  isDefault: option<boolean_>,
  @ocaml.doc("<p>The type of the scope.</p>") @as("IpamScopeType")
  ipamScopeType: option<ipamScopeType>,
  @ocaml.doc("<p>The Amazon Web Services Region of the IPAM scope.</p>") @as("IpamRegion")
  ipamRegion: option<string_>,
  @ocaml.doc("<p>The ARN of the IPAM.</p>") @as("IpamArn") ipamArn: option<resourceArn>,
  @ocaml.doc("<p>The ARN of the scope.</p>") @as("IpamScopeArn") ipamScopeArn: option<resourceArn>,
  @ocaml.doc("<p>The ID of the scope.</p>") @as("IpamScopeId") ipamScopeId: option<ipamScopeId>,
  @ocaml.doc("<p>The Amazon Web Services account ID of the owner of the scope.</p>") @as("OwnerId")
  ownerId: option<string_>,
}
@ocaml.doc("<p>The CIDR for an IPAM resource.</p>")
type ipamResourceCidr = {
  @ocaml.doc("<p>The ID of a VPC.</p>") @as("VpcId") vpcId: option<string_>,
  @ocaml.doc(
    "<p>The overlap status of an IPAM resource. The overlap status tells you if the CIDR for a resource overlaps with another CIDR in the scope. For more information on overlap statuses, see <a href=\"/vpc/latest/ipam/monitor-cidr-compliance-ipam.html\">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>"
  )
  @as("OverlapStatus")
  overlapStatus: option<ipamOverlapStatus>,
  @ocaml.doc(
    "<p>The management state of the resource. For more information about management states, see <a href=\"/vpc/latest/ipam/monitor-cidr-compliance-ipam.html\">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>"
  )
  @as("ManagementState")
  managementState: option<ipamManagementState>,
  @ocaml.doc(
    "<p>The compliance status of the IPAM resource. For more information on compliance statuses, see <a href=\"/vpc/latest/ipam/monitor-cidr-compliance-ipam.html\">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>"
  )
  @as("ComplianceStatus")
  complianceStatus: option<ipamComplianceStatus>,
  @ocaml.doc(
    "<p>The IP address space in the IPAM pool that is allocated to this resource. To convert the decimal to a percentage, multiply the decimal by 100.</p>"
  )
  @as("IpUsage")
  ipUsage: option<boxedDouble>,
  @ocaml.doc("<p>The tags for an IPAM resource.</p>") @as("ResourceTags")
  resourceTags: option<ipamResourceTagList>,
  @ocaml.doc("<p>The type of IPAM resource.</p>") @as("ResourceType")
  resourceType: option<ipamResourceType>,
  @ocaml.doc("<p>The CIDR for an IPAM resource.</p>") @as("ResourceCidr")
  resourceCidr: option<string_>,
  @ocaml.doc("<p>The name of an IPAM resource.</p>") @as("ResourceName")
  resourceName: option<string_>,
  @ocaml.doc("<p>The ID of an IPAM resource.</p>") @as("ResourceId") resourceId: option<string_>,
  @ocaml.doc("<p>The Amazon Web Services account number of the owner of an IPAM resource.</p>")
  @as("ResourceOwnerId")
  resourceOwnerId: option<string_>,
  @ocaml.doc("<p>The Amazon Web Services Region for an IPAM resource.</p>") @as("ResourceRegion")
  resourceRegion: option<string_>,
  @ocaml.doc("<p>The pool ID for an IPAM resource.</p>") @as("IpamPoolId")
  ipamPoolId: option<ipamPoolId>,
  @ocaml.doc("<p>The scope ID for an IPAM resource.</p>") @as("IpamScopeId")
  ipamScopeId: option<ipamScopeId>,
  @ocaml.doc("<p>The IPAM ID for an IPAM resource.</p>") @as("IpamId") ipamId: option<ipamId>,
}
type ipamPoolCidrSet = array<ipamPoolCidr>
@ocaml.doc(
  "<p>In IPAM, a pool is a collection of contiguous IP addresses CIDRs. Pools enable you to organize your IP addresses according to your routing and security needs. For example, if you have separate routing and security needs for development and production applications, you can create a pool for each.</p>"
)
type ipamPool = {
  @ocaml.doc(
    "<p>Limits which service in Amazon Web Services that the pool can be used in. \"ec2\", for example, allows users to use space for Elastic IP addresses and VPCs.</p>"
  )
  @as("AwsService")
  awsService: option<ipamPoolAwsService>,
  @ocaml.doc("<p>The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>")
  @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc(
    "<p>Tags that are required for resources that use CIDRs from this IPAM pool. Resources that do not have these tags will not be allowed to allocate space from the pool. If the resources have their tags changed after they have allocated space or if the allocation tagging requirements are changed on the pool, the resource may be marked as noncompliant.</p>"
  )
  @as("AllocationResourceTags")
  allocationResourceTags: option<ipamResourceTagList>,
  @ocaml.doc("<p>The default netmask length for allocations added to this pool. If, for example, the CIDR assigned to this pool is 10.0.0.0/8 and 
         you enter 16 here, new allocations will default to 10.0.0.0/16.</p>")
  @as("AllocationDefaultNetmaskLength")
  allocationDefaultNetmaskLength: option<ipamNetmaskLength>,
  @ocaml.doc(
    "<p>The maximum netmask length possible for CIDR allocations in this IPAM pool to be compliant. The maximum netmask length must be greater than the minimum netmask length. Possible netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128.</p>"
  )
  @as("AllocationMaxNetmaskLength")
  allocationMaxNetmaskLength: option<ipamNetmaskLength>,
  @ocaml.doc(
    "<p>The minimum netmask length required for CIDR allocations in this IPAM pool to be compliant. The minimum netmask length must be less than the maximum netmask length. Possible netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128.</p>"
  )
  @as("AllocationMinNetmaskLength")
  allocationMinNetmaskLength: option<ipamNetmaskLength>,
  @ocaml.doc("<p>The address family of the pool.</p>") @as("AddressFamily")
  addressFamily: option<addressFamily>,
  @ocaml.doc(
    "<p>Determines if a pool is publicly advertisable. This option is not available for pools with AddressFamily set to <code>ipv4</code>.</p>"
  )
  @as("PubliclyAdvertisable")
  publiclyAdvertisable: option<boolean_>,
  @ocaml.doc("<p>If selected, IPAM will continuously look for resources within the CIDR range of this pool 
         and automatically import them as allocations into your IPAM. The CIDRs that will be allocated for
         these resources must not already be allocated to other resources in order for the import to succeed. IPAM will import 
         a CIDR regardless of its compliance with the pool's allocation rules, so a resource might be imported and subsequently 
         marked as noncompliant. If IPAM discovers multiple CIDRs that overlap, IPAM will import the largest CIDR only. If IPAM 
         discovers multiple CIDRs with matching CIDRs, IPAM will randomly import one of them only.
      </p>
         <p>A locale must be set on the pool for this feature to work.</p>")
  @as("AutoImport")
  autoImport: option<boolean_>,
  @ocaml.doc("<p>The description of the IPAM pool.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>A message related to the failed creation of an IPAM pool.</p>") @as("StateMessage")
  stateMessage: option<string_>,
  @ocaml.doc("<p>The state of the IPAM pool.</p>") @as("State") state: option<ipamPoolState>,
  @ocaml.doc("<p>The depth of pools in your IPAM pool. The pool depth quota is 10. For more information, see <a href=\"/vpc/latest/ipam/quotas-ipam.html\">Quotas in IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
      </p>")
  @as("PoolDepth")
  poolDepth: option<integer_>,
  @ocaml.doc(
    "<p>The locale of the IPAM pool. In IPAM, the locale is the Amazon Web Services Region where you want to make an IPAM pool available for allocations. Only resources in the same Region as the locale of the pool can get IP address allocations from the pool. You can only allocate a CIDR for a VPC, for example, from an IPAM pool that shares a locale with the VPC’s Region. Note that once you choose a Locale for a pool, you cannot modify it. If you choose an Amazon Web Services Region for locale that has not been configured as an operating Region for the IPAM, you'll get an error.</p>"
  )
  @as("Locale")
  locale: option<string_>,
  @ocaml.doc("<p>The Amazon Web Services Region of the IPAM pool.</p>") @as("IpamRegion")
  ipamRegion: option<string_>,
  @ocaml.doc("<p>The ARN of the IPAM.</p>") @as("IpamArn") ipamArn: option<resourceArn>,
  @ocaml.doc(
    "<p>In IPAM, a scope is the highest-level container within IPAM. An IPAM contains two default scopes. Each scope represents the IP space for a single network. The private scope is intended for all private IP address space. The public scope is intended for all public IP address space. Scopes enable you to reuse IP addresses across multiple unconnected networks without causing IP address overlap or conflict.</p>"
  )
  @as("IpamScopeType")
  ipamScopeType: option<ipamScopeType>,
  @ocaml.doc("<p>The ARN of the scope of the IPAM pool.</p>") @as("IpamScopeArn")
  ipamScopeArn: option<resourceArn>,
  @ocaml.doc("<p>The ARN of the IPAM pool.</p>") @as("IpamPoolArn")
  ipamPoolArn: option<resourceArn>,
  @ocaml.doc(
    "<p>The ID of the source IPAM pool. You can use this option to create an IPAM pool within an existing source pool.</p>"
  )
  @as("SourceIpamPoolId")
  sourceIpamPoolId: option<ipamPoolId>,
  @ocaml.doc("<p>The ID of the IPAM pool.</p>") @as("IpamPoolId") ipamPoolId: option<ipamPoolId>,
  @ocaml.doc("<p>The Amazon Web Services account ID of the owner of the IPAM pool.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
}
@ocaml.doc(
  "<p>IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across Amazon Web Services Regions and accounts throughout your Amazon Web Services Organization. For more information, see <a href=\"/vpc/latest/ipam/what-is-it-ipam.html\">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>"
)
type ipam = {
  @ocaml.doc("<p>The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>")
  @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The state of the IPAM.</p>") @as("State") state: option<ipamState>,
  @ocaml.doc("<p>The operating Regions for an IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only
         discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.</p>
         <p>For more information about operating Regions, see <a href=\"/vpc/latest/ipam/create-ipam.html\">Create an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>")
  @as("OperatingRegions")
  operatingRegions: option<ipamOperatingRegionSet>,
  @ocaml.doc("<p>The description for the IPAM.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The number of scopes in the IPAM. The scope quota is 5. For more information on quotas, see <a href=\"/vpc/latest/ipam/quotas-ipam.html\">Quotas in IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
      </p>")
  @as("ScopeCount")
  scopeCount: option<integer_>,
  @ocaml.doc("<p>The ID of the IPAM's default private scope.</p>") @as("PrivateDefaultScopeId")
  privateDefaultScopeId: option<ipamScopeId>,
  @ocaml.doc("<p>The ID of the IPAM's default public scope.</p>") @as("PublicDefaultScopeId")
  publicDefaultScopeId: option<ipamScopeId>,
  @ocaml.doc("<p>The Amazon Web Services Region of the IPAM.</p>") @as("IpamRegion")
  ipamRegion: option<string_>,
  @ocaml.doc("<p>The ARN of the IPAM.</p>") @as("IpamArn") ipamArn: option<resourceArn>,
  @ocaml.doc("<p>The ID of the IPAM.</p>") @as("IpamId") ipamId: option<ipamId>,
  @ocaml.doc("<p>The Amazon Web Services account ID of the owner of the IPAM.</p>") @as("OwnerId")
  ownerId: option<string_>,
}
@ocaml.doc("<p>Describes a set of permissions for a security group rule.</p>")
type ipPermission = {
  @ocaml.doc("<p>The security group and Amazon Web Services account ID pairs.</p>")
  @as("UserIdGroupPairs")
  userIdGroupPairs: option<userIdGroupPairList>,
  @ocaml.doc("<p>The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value
		of <code>-1</code> indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, 
        you must specify all codes.</p>")
  @as("ToPort")
  toPort: option<integer_>,
  @ocaml.doc("<p>[VPC only] The prefix list IDs.</p>") @as("PrefixListIds")
  prefixListIds: option<prefixListIdList>,
  @ocaml.doc("<p>[VPC only] The IPv6 ranges.</p>") @as("Ipv6Ranges")
  ipv6Ranges: option<ipv6RangeList>,
  @ocaml.doc("<p>The IPv4 ranges.</p>") @as("IpRanges") ipRanges: option<ipRangeList>,
  @ocaml.doc("<p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>, <code>icmpv6</code>) 
        or number (see <a href=\"http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\">Protocol Numbers</a>).</p>
         <p>[VPC only] Use <code>-1</code> to specify all protocols. When authorizing
        security group rules, specifying <code>-1</code> or a protocol number other than
        <code>tcp</code>, <code>udp</code>, <code>icmp</code>, or <code>icmpv6</code> allows
        traffic on all ports, regardless of any port range you specify. For <code>tcp</code>,
        <code>udp</code>, and <code>icmp</code>, you must specify a port range. For <code>icmpv6</code>,
        the port range is optional; if you omit the port range, traffic for all types and codes is allowed.</p>")
  @as("IpProtocol")
  ipProtocol: option<string_>,
  @ocaml.doc("<p>The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number.
        A value of <code>-1</code> indicates all ICMP/ICMPv6 types. If you specify all
		ICMP/ICMPv6 types, you must specify all codes.</p>")
  @as("FromPort")
  fromPort: option<integer_>,
}
@ocaml.doc("<p>Describes an internet gateway.</p>")
type internetGateway = {
  @ocaml.doc("<p>Any tags assigned to the internet gateway.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the internet gateway.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The ID of the internet gateway.</p>") @as("InternetGatewayId")
  internetGatewayId: option<string_>,
  @ocaml.doc("<p>Any VPCs attached to the internet gateway.</p>") @as("Attachments")
  attachments: option<internetGatewayAttachmentList>,
}
@ocaml.doc("<p>Describes service integrations with VPC Flow logs.</p>")
type integrateServices = {
  @ocaml.doc("<p>Information about the integration with Amazon Athena.</p>")
  @as("AthenaIntegrations")
  athenaIntegrations: option<athenaIntegrationsSet>,
}
@ocaml.doc("<p>Describes the instance store features that are supported by the instance type.</p>")
type instanceStorageInfo = {
  @ocaml.doc("<p>Indicates whether data is encrypted at rest.</p>") @as("EncryptionSupport")
  encryptionSupport: option<instanceStorageEncryptionSupport>,
  @ocaml.doc("<p>Indicates whether non-volatile memory express (NVMe) is supported.</p>")
  @as("NvmeSupport")
  nvmeSupport: option<ephemeralNvmeSupport>,
  @ocaml.doc("<p>Describes the disks that are available for the instance type.</p>") @as("Disks")
  disks: option<diskInfoList>,
  @ocaml.doc("<p>The total size of the disks, in GB.</p>") @as("TotalSizeInGB")
  totalSizeInGB: option<diskSize>,
}
@ocaml.doc("<p>Describes the status of an instance.</p>")
type instanceStatusSummary = {
  @ocaml.doc("<p>The status.</p>") @as("Status") status: option<summaryStatus>,
  @ocaml.doc("<p>The system instance health or application instance health.</p>") @as("Details")
  details: option<instanceStatusDetailsList>,
}
type instanceStateChangeList = array<instanceStateChange>
@ocaml.doc("<p>The architecture type, virtualization type, and other attributes for the instance types.
         When you specify instance attributes, Amazon EC2 will identify instance types with those
         attributes.</p>
         <p>If you specify <code>InstanceRequirementsWithMetadataRequest</code>, you can't specify
         <code>InstanceTypes</code>.</p>")
type instanceRequirementsWithMetadataRequest = {
  @ocaml.doc("<p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will
         identify instance types with those attributes.</p>")
  @as("InstanceRequirements")
  instanceRequirements: option<instanceRequirementsRequest>,
  @ocaml.doc("<p>The virtualization type.</p>") @as("VirtualizationTypes")
  virtualizationTypes: option<virtualizationTypeSet>,
  @ocaml.doc("<p>The architecture type.</p>") @as("ArchitectureTypes")
  architectureTypes: option<architectureTypeSet>,
}
type instancePrivateIpAddressList = array<instancePrivateIpAddress>
@ocaml.doc("<p>Describes a network interface.</p>")
type instanceNetworkInterfaceSpecification = {
  @ocaml.doc("<p>The number of IPv6 delegated prefixes to be automatically assigned to the network interface. 
            You cannot use this option if you use the <code>Ipv6Prefix</code> option.</p>")
  @as("Ipv6PrefixCount")
  ipv6PrefixCount: option<integer_>,
  @ocaml.doc("<p>One or more IPv6 delegated prefixes to be assigned to the network interface. You cannot 
            use this option if you use the <code>Ipv6PrefixCount</code> option.</p>")
  @as("Ipv6Prefixes")
  ipv6Prefixes: option<ipv6PrefixList>,
  @ocaml.doc("<p>The number of IPv4 delegated prefixes to be automatically assigned to the network interface. 
            You cannot use this option if you use the <code>Ipv4Prefix</code> option.</p>")
  @as("Ipv4PrefixCount")
  ipv4PrefixCount: option<integer_>,
  @ocaml.doc("<p>One or more IPv4 delegated prefixes to be assigned to the network interface. You cannot 
            use this option if you use the <code>Ipv4PrefixCount</code> option.</p>")
  @as("Ipv4Prefixes")
  ipv4Prefixes: option<ipv4PrefixList>,
  @ocaml.doc("<p>The index of the network card. Some instance types support multiple network cards. 
            The primary network interface must be assigned to network card index 0. 
            The default is network card index 0.</p>
        <p>If you are using <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotInstances.html\">RequestSpotInstances</a> to create Spot Instances, omit this parameter because
            you can’t specify the network card index when using this API. To specify the network
            card index, use <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html\">RunInstances</a>.</p>")
  @as("NetworkCardIndex")
  networkCardIndex: option<integer_>,
  @ocaml.doc("<p>The type of network interface.</p>
	        <p>Valid values: <code>interface</code> | <code>efa</code>
         </p>")
  @as("InterfaceType")
  interfaceType: option<string_>,
  @ocaml.doc("<p>Indicates whether to assign a carrier IP address to the network interface.</p>
        <p>You can only assign a carrier IP address to a network interface that is in a subnet in a Wavelength Zone. 
            For more information about carrier IP addresses, see Carrier IP addresses in the Amazon Web Services Wavelength Developer Guide.</p>")
  @as("AssociateCarrierIpAddress")
  associateCarrierIpAddress: option<boolean_>,
  @ocaml.doc(
    "<p>The ID of the subnet associated with the network interface. Applies only if creating a network interface when launching an instance.</p>"
  )
  @as("SubnetId")
  subnetId: option<string_>,
  @ocaml.doc("<p>The number of secondary private IPv4 addresses. You can't specify this option and specify more than one private IP address using the private IP addresses option. You cannot specify this option if you're
        	launching more than one instance in a <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html\">RunInstances</a> request.</p>")
  @as("SecondaryPrivateIpAddressCount")
  secondaryPrivateIpAddressCount: option<integer_>,
  @ocaml.doc("<p>One or more private IPv4 addresses to assign to the network interface. Only one private IPv4 address can be designated as primary. You cannot specify this option if you're
        	launching more than one instance in a <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html\">RunInstances</a> request.</p>")
  @as("PrivateIpAddresses")
  privateIpAddresses: option<privateIpAddressSpecificationList>,
  @ocaml.doc("<p>The private IPv4 address of the network interface. Applies only if creating a network interface when launching an instance. You cannot specify this option if you're launching
        	more than one instance in a <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html\">RunInstances</a> request.</p>")
  @as("PrivateIpAddress")
  privateIpAddress: option<string_>,
  @ocaml.doc("<p>The ID of the network interface.</p>
        <p>If you are creating a Spot Fleet, omit this parameter because you can’t specify a network interface ID in a launch specification.</p>")
  @as("NetworkInterfaceId")
  networkInterfaceId: option<networkInterfaceId>,
  @ocaml.doc("<p>One or more IPv6 addresses to assign to the network interface. You cannot specify
            this option and the option to assign a number of IPv6 addresses in the same request. You
            cannot specify this option if you've specified a minimum number of instances to
            launch.</p>")
  @as("Ipv6Addresses")
  ipv6Addresses: option<instanceIpv6AddressList>,
  @ocaml.doc("<p>A number of IPv6 addresses to assign to the network interface. Amazon EC2 chooses
            the IPv6 addresses from the range of the subnet. You cannot specify this option and the
            option to assign specific IPv6 addresses in the same request. You can specify this
            option if you've specified a minimum number of instances to launch.</p>")
  @as("Ipv6AddressCount")
  ipv6AddressCount: option<integer_>,
  @ocaml.doc(
    "<p>The IDs of the security groups for the network interface. Applies only if creating a network interface when launching an instance.</p>"
  )
  @as("Groups")
  groups: option<securityGroupIdStringList>,
  @ocaml.doc("<p>The position of the network interface in the attachment order. 
          A primary network interface has a device index of 0.</p> 
        <p>If you specify a network interface when launching an instance, 
          you must specify the device index.</p>")
  @as("DeviceIndex")
  deviceIndex: option<integer_>,
  @ocaml.doc(
    "<p>The description of the network interface. Applies only if creating a network interface when launching an instance.</p>"
  )
  @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>If set to <code>true</code>, the interface is deleted when the instance is terminated. You can
            specify <code>true</code> only if creating a new network interface when launching an
            instance.</p>")
  @as("DeleteOnTermination")
  deleteOnTermination: option<boolean_>,
  @ocaml.doc("<p>Indicates whether to assign a public IPv4 address to an instance you launch in a VPC. The
            public IP address can only be assigned to a network interface for eth0, and can only be
            assigned to a new network interface, not an existing one. You cannot specify more than one
            network interface in the request. If launching into a default subnet, the default value is
            <code>true</code>.</p>")
  @as("AssociatePublicIpAddress")
  associatePublicIpAddress: option<boolean_>,
}
type instanceMonitoringList = array<instanceMonitoring>
@ocaml.doc("<p>The targets to disassociate from the specified event window.</p>")
type instanceEventWindowDisassociationRequest = {
  @ocaml.doc("<p>The IDs of the Dedicated Hosts to disassociate from the event window.</p>")
  @as("DedicatedHostIds")
  dedicatedHostIds: option<dedicatedHostIdList>,
  @ocaml.doc("<p>The instance tags to disassociate from the event window. Any instances associated with
         the tags will be disassociated from the event window.</p>")
  @as("InstanceTags")
  instanceTags: option<tagList_>,
  @ocaml.doc("<p>The IDs of the instances to disassociate from the event window.</p>")
  @as("InstanceIds")
  instanceIds: option<instanceIdList>,
}
@ocaml.doc("<p>One or more targets associated with the event window.</p>")
type instanceEventWindowAssociationTarget = {
  @ocaml.doc("<p>The IDs of the Dedicated Hosts associated with the event window.</p>")
  @as("DedicatedHostIds")
  dedicatedHostIds: option<dedicatedHostIdList>,
  @ocaml.doc("<p>The instance tags associated with the event window. Any instances associated with the tags
         will be associated with the event window.</p>")
  @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The IDs of the instances associated with the event window.</p>") @as("InstanceIds")
  instanceIds: option<instanceIdList>,
}
@ocaml.doc("<p>One or more targets associated with the specified event window. Only one
            <i>type</i> of target (instance ID, instance tag, or Dedicated Host ID)
         can be associated with an event window.</p>")
type instanceEventWindowAssociationRequest = {
  @ocaml.doc("<p>The IDs of the Dedicated Hosts to associate with the event window.</p>")
  @as("DedicatedHostIds")
  dedicatedHostIds: option<dedicatedHostIdList>,
  @ocaml.doc("<p>The instance tags to associate with the event window. Any instances associated with the
         tags will be associated with the event window.</p>")
  @as("InstanceTags")
  instanceTags: option<tagList_>,
  @ocaml.doc("<p>The IDs of the instances to associate with the event window. If the instance is on a
         Dedicated Host, you can't specify the Instance ID parameter; you must use the Dedicated
         Host ID parameter.</p>")
  @as("InstanceIds")
  instanceIds: option<instanceIdList>,
}
type instanceBlockDeviceMappingSpecificationList = array<instanceBlockDeviceMappingSpecification>
type instanceBlockDeviceMappingList = array<instanceBlockDeviceMapping>
@ocaml.doc("<p>Describes the Inference accelerators for the instance type.</p>")
type inferenceAcceleratorInfo = {
  @ocaml.doc("<p>Describes the Inference accelerators for the instance type.</p>")
  @as("Accelerators")
  accelerators: option<inferenceDeviceInfoList>,
}
@ocaml.doc("<p>Describes an import snapshot task.</p>")
type importSnapshotTask = {
  @ocaml.doc("<p>The tags for the import snapshot task.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>Describes an import snapshot task.</p>") @as("SnapshotTaskDetail")
  snapshotTaskDetail: option<snapshotTaskDetail>,
  @ocaml.doc("<p>The ID of the import snapshot task.</p>") @as("ImportTaskId")
  importTaskId: option<string_>,
  @ocaml.doc("<p>A description of the import snapshot task.</p>") @as("Description")
  description: option<string_>,
}
type importInstanceVolumeDetailSet = array<importInstanceVolumeDetailItem>
type imageDiskContainerList = array<imageDiskContainer>
type iamInstanceProfileAssociationSet = array<iamInstanceProfileAssociation>
@ocaml.doc("<p>Details about the Dedicated Host Reservation and associated Dedicated
            Hosts.</p>")
type hostReservation = {
  @ocaml.doc("<p>Any tags assigned to the Dedicated Host Reservation.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The upfront price of the reservation.</p>") @as("UpfrontPrice")
  upfrontPrice: option<string_>,
  @ocaml.doc("<p>The state of the reservation.</p>") @as("State") state: option<reservationState>,
  @ocaml.doc("<p>The date and time that the reservation started.</p>") @as("Start")
  start: option<dateTime>,
  @ocaml.doc("<p>The payment option selected for this reservation.</p>") @as("PaymentOption")
  paymentOption: option<paymentOption>,
  @ocaml.doc("<p>The ID of the reservation. This remains the same regardless of which Dedicated
            Hosts are associated with it.</p>")
  @as("OfferingId")
  offeringId: option<offeringId>,
  @ocaml.doc("<p>The instance family of the Dedicated Host Reservation. The instance family on the
            Dedicated Host must be the same in order for it to benefit from the
            reservation.</p>")
  @as("InstanceFamily")
  instanceFamily: option<string_>,
  @ocaml.doc("<p>The hourly price of the reservation.</p>") @as("HourlyPrice")
  hourlyPrice: option<string_>,
  @ocaml.doc("<p>The ID of the reservation that specifies the associated Dedicated Hosts.</p>")
  @as("HostReservationId")
  hostReservationId: option<hostReservationId>,
  @ocaml.doc("<p>The IDs of the Dedicated Hosts associated with the reservation.</p>")
  @as("HostIdSet")
  hostIdSet: option<responseHostIdSet>,
  @ocaml.doc("<p>The date and time that the reservation ends.</p>") @as("End")
  end: option<dateTime>,
  @ocaml.doc("<p>The length of the reservation's term, specified in seconds. Can be <code>31536000
                (1 year)</code> | <code>94608000 (3 years)</code>.</p>")
  @as("Duration")
  duration: option<integer_>,
  @ocaml.doc("<p>The currency in which the <code>upfrontPrice</code> and <code>hourlyPrice</code>
            amounts are specified. At this time, the only supported currency is
            <code>USD</code>.</p>")
  @as("CurrencyCode")
  currencyCode: option<currencyCodeValues>,
  @ocaml.doc("<p>The number of Dedicated Hosts the reservation is associated with.</p>")
  @as("Count")
  count: option<integer_>,
}
type historyRecords = array<historyRecord>
type historyRecordSet = array<historyRecordEntry>
type gpuDeviceInfoList = array<gpuDeviceInfo>
@ocaml.doc("<p>Describes an Amazon FPGA image (AFI) attribute.</p>")
type fpgaImageAttribute = {
  @ocaml.doc("<p>The product codes.</p>") @as("ProductCodes") productCodes: option<productCodeList>,
  @ocaml.doc("<p>The load permissions.</p>") @as("LoadPermissions")
  loadPermissions: option<loadPermissionList>,
  @ocaml.doc("<p>The description of the AFI.</p>") @as("Description") description: option<string_>,
  @ocaml.doc("<p>The name of the AFI.</p>") @as("Name") name: option<string_>,
  @ocaml.doc("<p>The ID of the AFI.</p>") @as("FpgaImageId") fpgaImageId: option<string_>,
}
@ocaml.doc("<p>Describes an Amazon FPGA image (AFI).</p>")
type fpgaImage = {
  @ocaml.doc("<p>Indicates whether data retention support is enabled for the AFI.</p>")
  @as("DataRetentionSupport")
  dataRetentionSupport: option<boolean_>,
  @ocaml.doc("<p>Indicates whether the AFI is public.</p>") @as("Public") public_: option<boolean_>,
  @ocaml.doc("<p>Any tags assigned to the AFI.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The product codes for the AFI.</p>") @as("ProductCodes")
  productCodes: option<productCodeList>,
  @ocaml.doc(
    "<p>The alias of the AFI owner. Possible values include <code>self</code>, <code>amazon</code>, and <code>aws-marketplace</code>.</p>"
  )
  @as("OwnerAlias")
  ownerAlias: option<string_>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the AFI.</p>") @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The time of the most recent update to the AFI.</p>") @as("UpdateTime")
  updateTime: option<dateTime>,
  @ocaml.doc("<p>The date and time the AFI was created.</p>") @as("CreateTime")
  createTime: option<dateTime>,
  @ocaml.doc("<p>Information about the state of the AFI.</p>") @as("State")
  state: option<fpgaImageState>,
  @ocaml.doc("<p>Information about the PCI bus.</p>") @as("PciId") pciId: option<pciId>,
  @ocaml.doc(
    "<p>The version of the Amazon Web Services Shell that was used to create the bitstream.</p>"
  )
  @as("ShellVersion")
  shellVersion: option<string_>,
  @ocaml.doc("<p>The description of the AFI.</p>") @as("Description") description: option<string_>,
  @ocaml.doc("<p>The name of the AFI.</p>") @as("Name") name: option<string_>,
  @ocaml.doc("<p>The global FPGA image identifier (AGFI ID).</p>") @as("FpgaImageGlobalId")
  fpgaImageGlobalId: option<string_>,
  @ocaml.doc("<p>The FPGA image identifier (AFI ID).</p>") @as("FpgaImageId")
  fpgaImageId: option<string_>,
}
type fpgaDeviceInfoList = array<fpgaDeviceInfo>
@ocaml.doc("<p>Describes a flow log.</p>")
type flowLog = {
  @ocaml.doc("<p>The destination options.</p>") @as("DestinationOptions")
  destinationOptions: option<destinationOptionsResponse>,
  @ocaml.doc("<p>The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record.</p>
        <p>When a network interface is attached to a <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances\">Nitro-based
                instance</a>, the aggregation interval is always 60 seconds (1 minute) or less,
            regardless of the specified value.</p>
        <p>Valid Values: <code>60</code> | <code>600</code>
         </p>")
  @as("MaxAggregationInterval")
  maxAggregationInterval: option<integer_>,
  @ocaml.doc("<p>The tags for the flow log.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The format of the flow log record.</p>") @as("LogFormat")
  logFormat: option<string_>,
  @ocaml.doc("<p>The destination to which the flow log data is published. Flow log data can be
            published to an CloudWatch Logs log group or an Amazon S3 bucket. If the flow log publishes to CloudWatch Logs,
            this element indicates the Amazon Resource Name (ARN) of the CloudWatch Logs log group to which
            the data is published. If the flow log publishes to Amazon S3, this element indicates the ARN
            of the Amazon S3 bucket to which the data is published.</p>")
  @as("LogDestination")
  logDestination: option<string_>,
  @ocaml.doc("<p>The type of destination to which the flow log data is published. Flow log data can be 
            published to CloudWatch Logs or Amazon S3.</p>")
  @as("LogDestinationType")
  logDestinationType: option<logDestinationType>,
  @ocaml.doc("<p>The type of traffic captured for the flow log.</p>") @as("TrafficType")
  trafficType: option<trafficType>,
  @ocaml.doc("<p>The ID of the resource on which the flow log was created.</p>") @as("ResourceId")
  resourceId: option<string_>,
  @ocaml.doc("<p>The name of the flow log group.</p>") @as("LogGroupName")
  logGroupName: option<string_>,
  @ocaml.doc("<p>The status of the flow log (<code>ACTIVE</code>).</p>") @as("FlowLogStatus")
  flowLogStatus: option<string_>,
  @ocaml.doc("<p>The flow log ID.</p>") @as("FlowLogId") flowLogId: option<string_>,
  @ocaml.doc("<p>The status of the logs delivery (<code>SUCCESS</code> | <code>FAILED</code>).</p>")
  @as("DeliverLogsStatus")
  deliverLogsStatus: option<string_>,
  @ocaml.doc("<p>The ARN of the IAM role that posts logs to CloudWatch Logs.</p>")
  @as("DeliverLogsPermissionArn")
  deliverLogsPermissionArn: option<string_>,
  @ocaml.doc("<p>Information about the error that occurred. <code>Rate limited</code> indicates that
            CloudWatch Logs throttling has been applied for one or more network interfaces, or that you've
            reached the limit on the number of log groups that you can create. <code>Access
                error</code> indicates that the IAM role associated with the flow log does not have
            sufficient permissions to publish to CloudWatch Logs. <code>Unknown error</code> indicates an
            internal error.</p>")
  @as("DeliverLogsErrorMessage")
  deliverLogsErrorMessage: option<string_>,
  @ocaml.doc("<p>The date and time the flow log was created.</p>") @as("CreationTime")
  creationTime: option<millisecondDateTime>,
}
@ocaml.doc("<p>Describes overrides for a launch template.</p>")
type fleetLaunchTemplateOverridesRequest = {
  @ocaml.doc("<p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will
         identify instance types with those attributes.</p>
         <note>
            <p>If you specify <code>InstanceRequirements</code>, you can't specify
               <code>InstanceTypes</code>.</p>
         </note>")
  @as("InstanceRequirements")
  instanceRequirements: option<instanceRequirementsRequest>,
  @ocaml.doc("<p>The location where the instance launched, if applicable.</p>") @as("Placement")
  placement: option<placement>,
  @ocaml.doc("<p>The priority for the launch template override. The highest priority is launched
         first.</p>
         <p>If the On-Demand <code>AllocationStrategy</code> is set to <code>prioritized</code>,
         EC2 Fleet uses priority to determine which launch template override to use first in fulfilling
         On-Demand capacity.</p>
         <p>If the Spot <code>AllocationStrategy</code> is set to
            <code>capacity-optimized-prioritized</code>, EC2 Fleet uses priority on a best-effort basis
         to determine which launch template override to use in fulfilling Spot capacity, but
         optimizes for capacity first.</p>
         <p>Valid values are whole numbers starting at <code>0</code>. The lower the number, the
         higher the priority. If no number is set, the launch template override has the lowest
         priority. You can set the same priority for different launch template overrides.</p>")
  @as("Priority")
  priority: option<double>,
  @ocaml.doc("<p>The number of units provided by the specified instance type.</p>")
  @as("WeightedCapacity")
  weightedCapacity: option<double>,
  @ocaml.doc("<p>The Availability Zone in which to launch the instances.</p>")
  @as("AvailabilityZone")
  availabilityZone: option<string_>,
  @ocaml.doc(
    "<p>The IDs of the subnets in which to launch the instances. Separate multiple subnet IDs using commas (for example, <code>subnet-1234abcdeexample1, subnet-0987cdef6example2</code>). A request of type <code>instant</code> can have only one subnet ID.</p>"
  )
  @as("SubnetId")
  subnetId: option<subnetId>,
  @ocaml.doc(
    "<p>The maximum price per unit hour that you are willing to pay for a Spot Instance.</p>"
  )
  @as("MaxPrice")
  maxPrice: option<string_>,
  @ocaml.doc("<p>The instance type.</p>
         <note>
            <p>If you specify <code>InstanceTypes</code>, you can't specify
               <code>InstanceRequirements</code>.</p>
         </note>")
  @as("InstanceType")
  instanceType: option<instanceType>,
}
@ocaml.doc("<p>Describes overrides for a launch template.</p>")
type fleetLaunchTemplateOverrides = {
  @ocaml.doc("<p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will
         identify instance types with those attributes.</p>
         <note>
            <p>If you specify <code>InstanceRequirements</code>, you can't specify
            <code>InstanceTypes</code>.</p>
         </note>")
  @as("InstanceRequirements")
  instanceRequirements: option<instanceRequirements>,
  @ocaml.doc("<p>The location where the instance launched, if applicable.</p>") @as("Placement")
  placement: option<placementResponse>,
  @ocaml.doc("<p>The priority for the launch template override. The highest priority is launched
         first.</p>
         <p>If the On-Demand <code>AllocationStrategy</code> is set to <code>prioritized</code>,
         EC2 Fleet uses priority to determine which launch template override to use first in fulfilling
         On-Demand capacity.</p>
         <p>If the Spot <code>AllocationStrategy</code> is set to
            <code>capacity-optimized-prioritized</code>, EC2 Fleet uses priority on a best-effort basis
         to determine which launch template override to use in fulfilling Spot capacity, but
         optimizes for capacity first.</p>
         <p>Valid values are whole numbers starting at <code>0</code>. The lower the number, the
         higher the priority. If no number is set, the override has the lowest priority. You can set
         the same priority for different launch template overrides.</p>")
  @as("Priority")
  priority: option<double>,
  @ocaml.doc("<p>The number of units provided by the specified instance type.</p>")
  @as("WeightedCapacity")
  weightedCapacity: option<double>,
  @ocaml.doc("<p>The Availability Zone in which to launch the instances.</p>")
  @as("AvailabilityZone")
  availabilityZone: option<string_>,
  @ocaml.doc("<p>The ID of the subnet in which to launch the instances.</p>") @as("SubnetId")
  subnetId: option<string_>,
  @ocaml.doc(
    "<p>The maximum price per unit hour that you are willing to pay for a Spot Instance.</p>"
  )
  @as("MaxPrice")
  maxPrice: option<string_>,
  @ocaml.doc("<p>The instance type.</p>
         <note>
            <p>If you specify <code>InstanceTypes</code>, you can't specify
               <code>InstanceRequirements</code>.</p>
         </note>")
  @as("InstanceType")
  instanceType: option<instanceType>,
}
type filterList = array<filter>
type failedQueuedPurchaseDeletionSet = array<failedQueuedPurchaseDeletion>
type failedCapacityReservationFleetCancellationResultSet = array<
  failedCapacityReservationFleetCancellationResult,
>
@ocaml.doc("<p>Describes an export instance task.</p>")
type exportTask = {
  @ocaml.doc("<p>The tags for the export task.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The status message related to the export task.</p>") @as("StatusMessage")
  statusMessage: option<string_>,
  @ocaml.doc("<p>The state of the export task.</p>") @as("State") state: option<exportTaskState>,
  @ocaml.doc("<p>Information about the instance to export.</p>") @as("InstanceExportDetails")
  instanceExportDetails: option<instanceExportDetails>,
  @ocaml.doc("<p>Information about the export task.</p>") @as("ExportToS3Task")
  exportToS3Task: option<exportToS3Task>,
  @ocaml.doc("<p>The ID of the export task.</p>") @as("ExportTaskId") exportTaskId: option<string_>,
  @ocaml.doc("<p>A description of the resource being exported.</p>") @as("Description")
  description: option<string_>,
}
@ocaml.doc("<p>Describes an export image task.</p>")
type exportImageTask = {
  @ocaml.doc("<p>Any tags assigned to the export image task.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The status message for the export image task.</p>") @as("StatusMessage")
  statusMessage: option<string_>,
  @ocaml.doc("<p>The status of the export image task. The possible values are <code>active</code>, <code>completed</code>,
    <code>deleting</code>, and <code>deleted</code>.</p>")
  @as("Status")
  status: option<string_>,
  @ocaml.doc("<p>Information about the destination Amazon S3 bucket.</p>") @as("S3ExportLocation")
  s3ExportLocation: option<exportTaskS3Location>,
  @ocaml.doc("<p>The percent complete of the export image task.</p>") @as("Progress")
  progress: option<string_>,
  @ocaml.doc("<p>The ID of the image.</p>") @as("ImageId") imageId: option<string_>,
  @ocaml.doc("<p>The ID of the export image task.</p>") @as("ExportImageTaskId")
  exportImageTaskId: option<string_>,
  @ocaml.doc("<p>A description of the image being exported.</p>") @as("Description")
  description: option<string_>,
}
@ocaml.doc(
  "<p>Describes an explanation code for an unreachable path. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/reachability/explanation-codes.html\">Reachability Analyzer explanation codes</a>.</p>"
)
type explanation = {
  @ocaml.doc("<p>The transit gateway attachment.</p>") @as("TransitGatewayAttachment")
  transitGatewayAttachment: option<analysisComponent>,
  @ocaml.doc("<p>The transit gateway route table route.</p>") @as("TransitGatewayRouteTableRoute")
  transitGatewayRouteTableRoute: option<transitGatewayRouteTableRoute>,
  @ocaml.doc("<p>The transit gateway route table.</p>") @as("TransitGatewayRouteTable")
  transitGatewayRouteTable: option<analysisComponent>,
  @ocaml.doc("<p>The transit gateway.</p>") @as("TransitGateway")
  transitGateway: option<analysisComponent>,
  @ocaml.doc("<p>The VPN gateway.</p>") @as("VpnGateway") vpnGateway: option<analysisComponent>,
  @ocaml.doc("<p>The VPN connection.</p>") @as("VpnConnection")
  vpnConnection: option<analysisComponent>,
  @ocaml.doc("<p>The VPC endpoint.</p>") @as("VpcEndpoint") vpcEndpoint: option<analysisComponent>,
  @ocaml.doc("<p>The component VPC.</p>") @as("Vpc") vpc: option<analysisComponent>,
  @ocaml.doc("<p>The route table for the subnet.</p>") @as("SubnetRouteTable")
  subnetRouteTable: option<analysisComponent>,
  @ocaml.doc("<p>The subnet.</p>") @as("Subnet") subnet: option<analysisComponent>,
  @ocaml.doc("<p>The state.</p>") @as("State") state: option<string_>,
  @ocaml.doc("<p>The source VPC.</p>") @as("SourceVpc") sourceVpc: option<analysisComponent>,
  @ocaml.doc("<p>The security groups.</p>") @as("SecurityGroups")
  securityGroups: option<analysisComponentList>,
  @ocaml.doc("<p>The security group rule.</p>") @as("SecurityGroupRule")
  securityGroupRule: option<analysisSecurityGroupRule>,
  @ocaml.doc("<p>The security group.</p>") @as("SecurityGroup")
  securityGroup: option<analysisComponent>,
  @ocaml.doc("<p>The route table.</p>") @as("RouteTable") routeTable: option<analysisComponent>,
  @ocaml.doc("<p>The route table route.</p>") @as("RouteTableRoute")
  routeTableRoute: option<analysisRouteTableRoute>,
  @ocaml.doc("<p>The protocols.</p>") @as("Protocols") protocols: option<stringList>,
  @ocaml.doc("<p>The prefix list.</p>") @as("PrefixList") prefixList: option<analysisComponent>,
  @ocaml.doc("<p>The port ranges.</p>") @as("PortRanges") portRanges: option<portRangeList>,
  @ocaml.doc("<p>The port.</p>") @as("Port") port: option<port>,
  @ocaml.doc("<p>The VPC peering connection.</p>") @as("VpcPeeringConnection")
  vpcPeeringConnection: option<analysisComponent>,
  @ocaml.doc("<p>The packet field.</p>") @as("PacketField") packetField: option<string_>,
  @ocaml.doc("<p>The network interface.</p>") @as("NetworkInterface")
  networkInterface: option<analysisComponent>,
  @ocaml.doc("<p>The NAT gateway.</p>") @as("NatGateway") natGateway: option<analysisComponent>,
  @ocaml.doc("<p>The missing component.</p>") @as("MissingComponent")
  missingComponent: option<string_>,
  @ocaml.doc("<p>The load balancer listener.</p>") @as("ElasticLoadBalancerListener")
  elasticLoadBalancerListener: option<analysisComponent>,
  @ocaml.doc("<p>The target port.</p>") @as("LoadBalancerTargetPort")
  loadBalancerTargetPort: option<port>,
  @ocaml.doc("<p>The target groups.</p>") @as("LoadBalancerTargetGroups")
  loadBalancerTargetGroups: option<analysisComponentList>,
  @ocaml.doc("<p>The target group.</p>") @as("LoadBalancerTargetGroup")
  loadBalancerTargetGroup: option<analysisComponent>,
  @ocaml.doc("<p>The target.</p>") @as("LoadBalancerTarget")
  loadBalancerTarget: option<analysisLoadBalancerTarget>,
  @ocaml.doc("<p>The listener port of the load balancer.</p>") @as("LoadBalancerListenerPort")
  loadBalancerListenerPort: option<port>,
  @ocaml.doc("<p>The listener for a Classic Load Balancer.</p>") @as("ClassicLoadBalancerListener")
  classicLoadBalancerListener: option<analysisLoadBalancerListener>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the load balancer.</p>") @as("LoadBalancerArn")
  loadBalancerArn: option<resourceArn>,
  @ocaml.doc("<p>The internet gateway.</p>") @as("InternetGateway")
  internetGateway: option<analysisComponent>,
  @ocaml.doc("<p>The route table.</p>") @as("IngressRouteTable")
  ingressRouteTable: option<analysisComponent>,
  @ocaml.doc("<p>The explanation code.</p>") @as("ExplanationCode")
  explanationCode: option<string_>,
  @ocaml.doc("<p>The direction. The following are the possible values:</p>
         <ul>
            <li>
               <p>egress</p>
            </li>
            <li>
               <p>ingress</p>
            </li>
         </ul>")
  @as("Direction")
  direction: option<string_>,
  @ocaml.doc("<p>The destination VPC.</p>") @as("DestinationVpc")
  destinationVpc: option<analysisComponent>,
  @ocaml.doc("<p>The destination.</p>") @as("Destination") destination: option<analysisComponent>,
  @ocaml.doc("<p>The customer gateway.</p>") @as("CustomerGateway")
  customerGateway: option<analysisComponent>,
  @ocaml.doc("<p>The component.</p>") @as("Component") component: option<analysisComponent>,
  @ocaml.doc("<p>The CIDR ranges.</p>") @as("Cidrs") cidrs: option<valueStringList>,
  @ocaml.doc("<p>The Availability Zones.</p>") @as("AvailabilityZones")
  availabilityZones: option<valueStringList>,
  @ocaml.doc("<p>The resource to which the component is attached.</p>") @as("AttachedTo")
  attachedTo: option<analysisComponent>,
  @ocaml.doc("<p>The IPv4 addresses, in CIDR notation.</p>") @as("Addresses")
  addresses: option<ipAddressList>,
  @ocaml.doc("<p>The IPv4 address, in CIDR notation.</p>") @as("Address")
  address: option<ipAddress>,
  @ocaml.doc("<p>The network ACL rule.</p>") @as("AclRule") aclRule: option<analysisAclRule>,
  @ocaml.doc("<p>The network ACL.</p>") @as("Acl") acl: option<analysisComponent>,
}
type enableFastSnapshotRestoreStateErrorSet = array<enableFastSnapshotRestoreStateErrorItem>
@ocaml.doc("<p>Describes an Elastic Graphics accelerator.</p>")
type elasticGpus = {
  @ocaml.doc("<p>The tags assigned to the Elastic Graphics accelerator.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The ID of the instance to which the Elastic Graphics accelerator is attached.</p>")
  @as("InstanceId")
  instanceId: option<string_>,
  @ocaml.doc("<p>The state of the Elastic Graphics accelerator.</p>") @as("ElasticGpuState")
  elasticGpuState: option<elasticGpuState>,
  @ocaml.doc("<p>The status of the Elastic Graphics accelerator.</p>") @as("ElasticGpuHealth")
  elasticGpuHealth: option<elasticGpuHealth>,
  @ocaml.doc("<p>The type of Elastic Graphics accelerator.</p>") @as("ElasticGpuType")
  elasticGpuType: option<string_>,
  @ocaml.doc("<p>The Availability Zone in the which the Elastic Graphics accelerator resides.</p>")
  @as("AvailabilityZone")
  availabilityZone: option<string_>,
  @ocaml.doc("<p>The ID of the Elastic Graphics accelerator.</p>") @as("ElasticGpuId")
  elasticGpuId: option<string_>,
}
@ocaml.doc("<p>Describes an egress-only internet gateway.</p>")
type egressOnlyInternetGateway = {
  @ocaml.doc("<p>The tags assigned to the egress-only internet gateway.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The ID of the egress-only internet gateway.</p>")
  @as("EgressOnlyInternetGatewayId")
  egressOnlyInternetGatewayId: option<egressOnlyInternetGatewayId>,
  @ocaml.doc("<p>Information about the attachment of the egress-only internet gateway.</p>")
  @as("Attachments")
  attachments: option<internetGatewayAttachmentList>,
}
type diskImageList = array<diskImage>
type disableFastSnapshotRestoreStateErrorSet = array<disableFastSnapshotRestoreStateErrorItem>
@ocaml.doc("<p>Describes a DHCP configuration option.</p>")
type dhcpConfiguration = {
  @ocaml.doc("<p>One or more values for the DHCP option.</p>") @as("Values")
  values: option<dhcpConfigurationValueList>,
  @ocaml.doc("<p>The name of a DHCP option.</p>") @as("Key") key: option<string_>,
}
type describeFastLaunchImagesSuccessSet = array<describeFastLaunchImagesSuccessItem>
type deleteLaunchTemplateVersionsResponseErrorSet = array<
  deleteLaunchTemplateVersionsResponseErrorItem,
>
type deleteFleetErrorSet = array<deleteFleetErrorItem>
@ocaml.doc("<p>Describes a customer gateway.</p>")
type customerGateway = {
  @ocaml.doc("<p>Any tags assigned to the customer gateway.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The name of customer gateway device.</p>") @as("DeviceName")
  deviceName: option<string_>,
  @ocaml.doc("<p>The type of VPN connection the customer gateway supports
            (<code>ipsec.1</code>).</p>")
  @as("Type")
  type_: option<string_>,
  @ocaml.doc("<p>The current state of the customer gateway (<code>pending | available | deleting |
                deleted</code>).</p>")
  @as("State")
  state: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) for the customer gateway certificate.</p>")
  @as("CertificateArn")
  certificateArn: option<string_>,
  @ocaml.doc("<p>The Internet-routable IP address of the customer gateway's outside interface.</p>")
  @as("IpAddress")
  ipAddress: option<string_>,
  @ocaml.doc("<p>The ID of the customer gateway.</p>") @as("CustomerGatewayId")
  customerGatewayId: option<string_>,
  @ocaml.doc("<p>The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number
            (ASN).</p>")
  @as("BgpAsn")
  bgpAsn: option<string_>,
}
@ocaml.doc("<p>Describes modifications to the list of create volume permissions for a volume.</p>")
type createVolumePermissionModifications = {
  @ocaml.doc("<p>Removes the specified Amazon Web Services account ID or group from the list.</p>")
  @as("Remove")
  remove: option<createVolumePermissionList>,
  @ocaml.doc("<p>Adds the specified Amazon Web Services account ID or group to the list.</p>")
  @as("Add")
  add: option<createVolumePermissionList>,
}
type connectionNotificationSet = array<connectionNotification>
@ocaml.doc("<p>Describes a customer-owned address pool.</p>")
type coipPool = {
  @ocaml.doc("<p>The ARN of the address pool.</p>") @as("PoolArn") poolArn: option<resourceArn>,
  @ocaml.doc("<p>The tags.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The ID of the local gateway route table.</p>") @as("LocalGatewayRouteTableId")
  localGatewayRouteTableId: option<localGatewayRoutetableId>,
  @ocaml.doc("<p>The address ranges of the address pool.</p>") @as("PoolCidrs")
  poolCidrs: option<valueStringList>,
  @ocaml.doc("<p>The ID of the address pool.</p>") @as("PoolId") poolId: option<ipv4PoolCoipId>,
}
type clientVpnRouteSet = array<clientVpnRoute>
type clientVpnConnectionSet = array<clientVpnConnection>
type clientVpnAuthenticationRequestList = array<clientVpnAuthenticationRequest>
type clientVpnAuthenticationList = array<clientVpnAuthentication>
@ocaml.doc("<p>Describes the Classic Load Balancers to attach to a Spot Fleet. Spot Fleet registers
            the running Spot Instances with these Classic Load Balancers.</p>")
type classicLoadBalancersConfig = {
  @ocaml.doc("<p>One or more Classic Load Balancers.</p>") @as("ClassicLoadBalancers")
  classicLoadBalancers: option<classicLoadBalancers>,
}
@ocaml.doc("<p>Describes a linked EC2-Classic instance.</p>")
type classicLinkInstance = {
  @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<string_>,
  @ocaml.doc("<p>Any tags assigned to the instance.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<string_>,
  @ocaml.doc("<p>A list of security groups.</p>") @as("Groups") groups: option<groupIdentifierList>,
}
@ocaml.doc("<p>Describes a carrier gateway.</p>")
type carrierGateway = {
  @ocaml.doc("<p>The tags assigned to the carrier gateway.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The Amazon Web Services account ID of the owner of the carrier gateway.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The state of the carrier gateway.</p>") @as("State")
  state: option<carrierGatewayState>,
  @ocaml.doc("<p>The ID of the VPC associated with the carrier gateway.</p>") @as("VpcId")
  vpcId: option<vpcId>,
  @ocaml.doc("<p>The ID of the carrier gateway.</p>") @as("CarrierGatewayId")
  carrierGatewayId: option<carrierGatewayId>,
}
@ocaml.doc("<p>Information about a Capacity Reservation Fleet.</p>")
type capacityReservationFleet = {
  @ocaml.doc("<p>The tags assigned to the Capacity Reservation Fleet.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>Information about the instance types for which to reserve the capacity.</p>")
  @as("InstanceTypeSpecifications")
  instanceTypeSpecifications: option<fleetCapacityReservationSet>,
  @ocaml.doc("<p>The strategy used by the Capacity Reservation Fleet to determine which of the specified 
			instance types to use. For more information, see For more information, see 
			<a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#allocation-strategy\">
				Allocation strategy</a> in the Amazon EC2 User Guide.</p>")
  @as("AllocationStrategy")
  allocationStrategy: option<string_>,
  @ocaml.doc("<p>Indicates the type of instance launches that the Capacity Reservation Fleet accepts. All 
			Capacity Reservations in the Fleet inherit this instance matching criteria.</p>
		       <p>Currently, Capacity Reservation Fleets support <code>open</code> instance matching criteria 
			only. This means that instances that have matching attributes (instance type, platform, and 
			Availability Zone) run in the Capacity Reservations automatically. Instances do not need to 
			explicitly target a Capacity Reservation Fleet to use its reserved capacity.</p>")
  @as("InstanceMatchCriteria")
  instanceMatchCriteria: option<fleetInstanceMatchCriteria>,
  @ocaml.doc("<p>The date and time at which the Capacity Reservation Fleet was created.</p>")
  @as("CreateTime")
  createTime: option<millisecondDateTime>,
  @ocaml.doc("<p>The date and time at which the Capacity Reservation Fleet expires.</p>")
  @as("EndDate")
  endDate: option<millisecondDateTime>,
  @ocaml.doc("<p>The tenancy of the Capacity Reservation Fleet. Tenancies include:</p>
		       <ul>
            <li>
				           <p>
                  <code>default</code> - The Capacity Reservation Fleet is created on hardware that is 
					shared with other Amazon Web Services accounts.</p>
			         </li>
            <li>
				           <p>
                  <code>dedicated</code> - The Capacity Reservation Fleet is created on single-tenant 
					hardware that is dedicated to a single Amazon Web Services account.</p>
			         </li>
         </ul>")
  @as("Tenancy")
  tenancy: option<fleetCapacityReservationTenancy>,
  @ocaml.doc("<p>The capacity units that have been fulfilled.</p>") @as("TotalFulfilledCapacity")
  totalFulfilledCapacity: option<double>,
  @ocaml.doc("<p>The total number of capacity units for which the Capacity Reservation Fleet reserves capacity. 
			For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity\">Total target capacity</a> 
			in the Amazon EC2 User Guide.</p>")
  @as("TotalTargetCapacity")
  totalTargetCapacity: option<integer_>,
  @ocaml.doc("<p>The state of the Capacity Reservation Fleet. Possible states include:</p>
		       <ul>
            <li>
				           <p>
                  <code>submitted</code> - The Capacity Reservation Fleet request has been submitted 
					and Amazon Elastic Compute Cloud is preparing to create the Capacity Reservations.</p>
			         </li>
            <li>
				           <p>
                  <code>modifying</code> - The Capacity Reservation Fleet is being modified. The Fleet 
					remains in this state until the modification is complete.</p>
			         </li>
            <li>
				           <p>
                  <code>active</code> - The Capacity Reservation Fleet has fulfilled its total target 
					capacity and it is attempting to maintain this capacity. The Fleet remains in this 
					state until it is modified or deleted.</p>
			         </li>
            <li>
				           <p>
                  <code>partially_fulfilled</code> - The Capacity Reservation Fleet has partially 
					fulfilled its total target capacity. There is insufficient Amazon EC2 to 
					fulfill the total target capacity. The Fleet is attempting to asynchronously fulfill 
					its total target capacity.</p>
			         </li>
            <li>
				           <p>
                  <code>expiring</code> - The Capacity Reservation Fleet has reach its end date and it 
					is in the process of expiring. One or more of its Capacity reservations might still 
					be active.</p>
			         </li>
            <li>
				           <p>
                  <code>expired</code> - The Capacity Reservation Fleet has reach its end date. The Fleet 
					and its Capacity Reservations are expired. The Fleet can't create new Capacity 
					Reservations.</p>
			         </li>
            <li>
				           <p>
                  <code>cancelling</code> - The Capacity Reservation Fleet is in the process of being 
					cancelled. One or more of its Capacity reservations might still be active.</p>
			         </li>
            <li>
				           <p>
                  <code>cancelled</code> - The Capacity Reservation Fleet has been manually cancelled. 
					The Fleet and its Capacity Reservations are cancelled and the Fleet can't create new 
					Capacity Reservations.</p>
			         </li>
            <li>
				           <p>
                  <code>failed</code> - The Capacity Reservation Fleet failed to reserve capacity for 
					the specified instance types.</p>
			         </li>
         </ul>")
  @as("State")
  state: option<capacityReservationFleetState>,
  @ocaml.doc("<p>The ARN of the Capacity Reservation Fleet.</p>") @as("CapacityReservationFleetArn")
  capacityReservationFleetArn: option<string_>,
  @ocaml.doc("<p>The ID of the Capacity Reservation Fleet.</p>") @as("CapacityReservationFleetId")
  capacityReservationFleetId: option<capacityReservationFleetId>,
}
@ocaml.doc("<p>Describes a Capacity Reservation.</p>")
type capacityReservation = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the cluster placement group in which 
			the Capacity Reservation was created. For more information, see 
			<a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cr-cpg.html\">
				Capacity Reservations for cluster placement groups</a> in the 
			<i>Amazon EC2 User Guide</i>.</p>")
  @as("PlacementGroupArn")
  placementGroupArn: option<placementGroupArn>,
  @ocaml.doc("<p>The ID of the Capacity Reservation Fleet to which the Capacity Reservation belongs. 
			Only valid for Capacity Reservations that were created by a Capacity Reservation Fleet.</p>")
  @as("CapacityReservationFleetId")
  capacityReservationFleetId: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Outpost on which the Capacity 
	  		Reservation was created.</p>")
  @as("OutpostArn")
  outpostArn: option<outpostArn>,
  @ocaml.doc("<p>Any tags assigned to the Capacity Reservation.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The date and time at which the Capacity Reservation was created.</p>")
  @as("CreateDate")
  createDate: option<dateTime>,
  @ocaml.doc("<p>Indicates the type of instance launches that the Capacity Reservation accepts. The options
			include:</p>
		       <ul>
            <li>
               <p>
                  <code>open</code> - The Capacity Reservation accepts all instances that have matching attributes (instance type, platform, 
				and Availability Zone). Instances that have matching attributes launch into the Capacity Reservation automatically without specifying 
				any additional parameters.</p>
            </li>
            <li>
               <p>
                  <code>targeted</code> - The Capacity Reservation only accepts instances that have matching attributes
					(instance type, platform, and Availability Zone), and explicitly target the
					Capacity Reservation. This ensures that only permitted instances can use the reserved capacity. </p>
            </li>
         </ul>")
  @as("InstanceMatchCriteria")
  instanceMatchCriteria: option<instanceMatchCriteria>,
  @ocaml.doc("<p>Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end
			types:</p>
		       <ul>
            <li>
               <p>
                  <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it.</p>
            </li>
            <li>
               <p>
                  <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time.</p>
            </li>
         </ul>")
  @as("EndDateType")
  endDateType: option<endDateType>,
  @ocaml.doc("<p>The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity
			is released and you can no longer launch instances into it. The Capacity Reservation's state changes to
				<code>expired</code> when it reaches its end date and time.</p>")
  @as("EndDate")
  endDate: option<dateTime>,
  @ocaml.doc("<p>The date and time at which the Capacity Reservation was started.</p>")
  @as("StartDate")
  startDate: option<millisecondDateTime>,
  @ocaml.doc("<p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p>
			      <ul>
            <li>
               <p>
                  <code>active</code> - The Capacity Reservation is active and the capacity is available for your use.</p>
            </li>
            <li>
               <p>
                  <code>expired</code> - The Capacity Reservation expired automatically at the date and time specified 
					in your request. The reserved capacity is no longer available for your use.</p>
            </li>
            <li>
               <p>
                  <code>cancelled</code> - The Capacity Reservation was cancelled. The reserved capacity is no
					longer available for your use.</p>
            </li>
            <li>
               <p>
                  <code>pending</code> - The Capacity Reservation request was successful but the capacity 
					provisioning is still pending.</p>
            </li>
            <li>
               <p>
                  <code>failed</code> - The Capacity Reservation request has failed. A request might fail 
					due to invalid request parameters, capacity constraints, or instance limit constraints. 
					Failed requests are retained for 60 minutes.</p>
            </li>
         </ul>")
  @as("State")
  state: option<capacityReservationState>,
  @ocaml.doc("<p>Indicates whether the Capacity Reservation supports instances with temporary, block-level
			storage.</p>")
  @as("EphemeralStorage")
  ephemeralStorage: option<boolean_>,
  @ocaml.doc("<p>Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides
			dedicated throughput to Amazon EBS and an optimized configuration stack to provide
			optimal I/O performance. This optimization isn't available with all instance types.
			Additional usage charges apply when using an EBS- optimized instance.</p>")
  @as("EbsOptimized")
  ebsOptimized: option<boolean_>,
  @ocaml.doc(
    "<p>The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.</p>"
  )
  @as("AvailableInstanceCount")
  availableInstanceCount: option<integer_>,
  @ocaml.doc(
    "<p>The total number of instances for which the Capacity Reservation reserves capacity.</p>"
  )
  @as("TotalInstanceCount")
  totalInstanceCount: option<integer_>,
  @ocaml.doc("<p>Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:</p>
		       <ul>
            <li>
               <p>
                  <code>default</code> - The Capacity Reservation is created on hardware that is shared with other Amazon Web Services accounts.</p>
            </li>
            <li>
               <p>
                  <code>dedicated</code> - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single Amazon Web Services account.</p>
            </li>
         </ul>")
  @as("Tenancy")
  tenancy: option<capacityReservationTenancy>,
  @ocaml.doc("<p>The Availability Zone in which the capacity is reserved.</p>")
  @as("AvailabilityZone")
  availabilityZone: option<string_>,
  @ocaml.doc(
    "<p>The type of operating system for which the Capacity Reservation reserves capacity.</p>"
  )
  @as("InstancePlatform")
  instancePlatform: option<capacityReservationInstancePlatform>,
  @ocaml.doc("<p>The type of instance for which the Capacity Reservation reserves capacity.</p>")
  @as("InstanceType")
  instanceType: option<string_>,
  @ocaml.doc("<p>The Availability Zone ID of the Capacity Reservation.</p>")
  @as("AvailabilityZoneId")
  availabilityZoneId: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Capacity Reservation.</p>")
  @as("CapacityReservationArn")
  capacityReservationArn: option<string_>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the Capacity Reservation.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The ID of the Capacity Reservation.</p>") @as("CapacityReservationId")
  capacityReservationId: option<string_>,
}
type cancelSpotFleetRequestsErrorSet = array<cancelSpotFleetRequestsErrorItem>
@ocaml.doc("<p>Describes a bundle task.</p>")
type bundleTask = {
  @ocaml.doc("<p>The time of the most recent update for the task.</p>") @as("UpdateTime")
  updateTime: option<dateTime>,
  @ocaml.doc("<p>The Amazon S3 storage locations.</p>") @as("Storage") storage: option<storage>,
  @ocaml.doc("<p>The state of the task.</p>") @as("State") state: option<bundleTaskState>,
  @ocaml.doc("<p>The time this task started.</p>") @as("StartTime") startTime: option<dateTime>,
  @ocaml.doc("<p>The level of task completion, as a percent (for example, 20%).</p>")
  @as("Progress")
  progress: option<string_>,
  @ocaml.doc("<p>The ID of the instance associated with this bundle task.</p>") @as("InstanceId")
  instanceId: option<string_>,
  @ocaml.doc("<p>If the task fails, a description of the error.</p>") @as("BundleTaskError")
  bundleTaskError: option<bundleTaskError>,
  @ocaml.doc("<p>The ID of the bundle task.</p>") @as("BundleId") bundleId: option<string_>,
}
type blockDeviceMappingRequestList = array<blockDeviceMapping>
type blockDeviceMappingList = array<blockDeviceMapping>
@ocaml.doc(
  "<p>The capacity information for instances that can be launched onto the Dedicated Host. </p>"
)
type availableCapacity = {
  @ocaml.doc(
    "<p>The number of vCPUs available for launching instances onto the Dedicated Host.</p>"
  )
  @as("AvailableVCpus")
  availableVCpus: option<integer_>,
  @ocaml.doc("<p>The number of instances that can be launched onto the Dedicated Host depending on 
    		the host's available capacity. For Dedicated Hosts that support multiple instance types, 
    		this parameter represents the number of instances for each instance size that is 
    		supported on the host.</p>")
  @as("AvailableInstanceCapacity")
  availableInstanceCapacity: option<availableInstanceCapacityList>,
}
@ocaml.doc("<p>Describes Availability Zones, Local Zones, and Wavelength Zones.</p>")
type availabilityZone = {
  @ocaml.doc("<p>The ID of the zone that handles some of the Local Zone or Wavelength Zone control plane
      operations, such as API calls.</p>")
  @as("ParentZoneId")
  parentZoneId: option<string_>,
  @ocaml.doc("<p>The name of the zone that handles some of the Local Zone or Wavelength Zone control plane
      operations, such as API calls.</p>")
  @as("ParentZoneName")
  parentZoneName: option<string_>,
  @ocaml.doc("<p>The type of zone. The valid values are <code>availability-zone</code>,
        <code>local-zone</code>, and <code>wavelength-zone</code>.</p>")
  @as("ZoneType")
  zoneType: option<string_>,
  @ocaml.doc("<p>The name of the network border group.</p>") @as("NetworkBorderGroup")
  networkBorderGroup: option<string_>,
  @ocaml.doc("<p> For Availability Zones, this parameter has the same value as the Region name.</p>
         <p>For Local Zones, the name of the associated group, for example
        <code>us-west-2-lax-1</code>.</p>
         <p>For Wavelength Zones, the name of the associated group, for example
        <code>us-east-1-wl1-bos-wlz-1</code>.</p>")
  @as("GroupName")
  groupName: option<string_>,
  @ocaml.doc("<p>The ID of the Availability Zone, Local Zone, or Wavelength Zone.</p>")
  @as("ZoneId")
  zoneId: option<string_>,
  @ocaml.doc("<p>The name of the Availability Zone, Local Zone, or Wavelength Zone.</p>")
  @as("ZoneName")
  zoneName: option<string_>,
  @ocaml.doc("<p>The name of the Region.</p>") @as("RegionName") regionName: option<string_>,
  @ocaml.doc("<p>Any messages about the Availability Zone, Local Zone, or Wavelength Zone.</p>")
  @as("Messages")
  messages: option<availabilityZoneMessageList>,
  @ocaml.doc("<p>For Availability Zones, this parameter always has the value of
        <code>opt-in-not-required</code>.</p>
         <p>For Local Zones and Wavelength Zones, this parameter is the opt-in status. The possible
      values are <code>opted-in</code>, and <code>not-opted-in</code>.</p>")
  @as("OptInStatus")
  optInStatus: option<availabilityZoneOptInStatus>,
  @ocaml.doc("<p>The state of the Availability Zone, Local Zone, or Wavelength Zone. This value is always
        <code>available</code>.</p>")
  @as("State")
  state: option<availabilityZoneState>,
}
type authorizationRuleSet = array<authorizationRule>
@ocaml.doc("<p>Describes a header. Reflects any changes made by a component as traffic passes through.
         The fields of an inbound header are null except for the first component of a path.</p>")
type analysisPacketHeader = {
  @ocaml.doc("<p>The source port ranges.</p>") @as("SourcePortRanges")
  sourcePortRanges: option<portRangeList>,
  @ocaml.doc("<p>The source addresses.</p>") @as("SourceAddresses")
  sourceAddresses: option<ipAddressList>,
  @ocaml.doc("<p>The protocol.</p>") @as("Protocol") protocol: option<string_>,
  @ocaml.doc("<p>The destination port ranges.</p>") @as("DestinationPortRanges")
  destinationPortRanges: option<portRangeList>,
  @ocaml.doc("<p>The destination addresses.</p>") @as("DestinationAddresses")
  destinationAddresses: option<ipAddressList>,
}
type addressSet = array<addressAttribute>
@ocaml.doc("<p>Describes an Elastic IP address, or a carrier IP address.</p>")
type address = {
  @ocaml.doc("<p>The carrier IP address associated. This option is only available for network interfaces
      which  reside in a subnet in a Wavelength Zone (for example an EC2 instance). </p>")
  @as("CarrierIp")
  carrierIp: option<string_>,
  @ocaml.doc("<p>The ID of the customer-owned address pool.</p>") @as("CustomerOwnedIpv4Pool")
  customerOwnedIpv4Pool: option<string_>,
  @ocaml.doc("<p>The customer-owned IP address.</p>") @as("CustomerOwnedIp")
  customerOwnedIp: option<string_>,
  @ocaml.doc("<p>The name of the unique set of Availability Zones, Local Zones, or Wavelength Zones from
      which Amazon Web Services advertises IP addresses.</p>")
  @as("NetworkBorderGroup")
  networkBorderGroup: option<string_>,
  @ocaml.doc("<p>The ID of an address pool.</p>") @as("PublicIpv4Pool")
  publicIpv4Pool: option<string_>,
  @ocaml.doc("<p>Any tags assigned to the Elastic IP address.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The private IP address associated with the Elastic IP address.</p>")
  @as("PrivateIpAddress")
  privateIpAddress: option<string_>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the network interface.</p>")
  @as("NetworkInterfaceOwnerId")
  networkInterfaceOwnerId: option<string_>,
  @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
  networkInterfaceId: option<string_>,
  @ocaml.doc("<p>Indicates whether this Elastic IP address is for use with instances
				in EC2-Classic (<code>standard</code>) or instances in a VPC (<code>vpc</code>).</p>")
  @as("Domain")
  domain: option<domainType>,
  @ocaml.doc("<p>The ID representing the association of the address with an instance in a VPC.</p>")
  @as("AssociationId")
  associationId: option<string_>,
  @ocaml.doc("<p>The ID representing the allocation of the address for use with EC2-VPC.</p>")
  @as("AllocationId")
  allocationId: option<string_>,
  @ocaml.doc("<p>The Elastic IP address.</p>") @as("PublicIp") publicIp: option<string_>,
  @ocaml.doc("<p>The ID of the instance that the address is associated with (if any).</p>")
  @as("InstanceId")
  instanceId: option<string_>,
}
type additionalDetailList = array<additionalDetail>
@ocaml.doc("<p>Describes an account attribute.</p>")
type accountAttribute = {
  @ocaml.doc("<p>The values for the account attribute.</p>") @as("AttributeValues")
  attributeValues: option<accountAttributeValueList>,
  @ocaml.doc("<p>The name of the account attribute.</p>") @as("AttributeName")
  attributeName: option<string_>,
}
type snapshotTierStatusSet = array<snapshotTierStatus>
type vpnTunnelOptionsSpecificationsList = array<vpnTunnelOptionsSpecification>
type vpnGatewayList = array<vpnGateway>
@ocaml.doc("<p>Describes a VPC peering connection.</p>")
type vpcPeeringConnection = {
  @ocaml.doc("<p>The ID of the VPC peering connection.</p>") @as("VpcPeeringConnectionId")
  vpcPeeringConnectionId: option<string_>,
  @ocaml.doc("<p>Any tags assigned to the resource.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The status of the VPC peering connection.</p>") @as("Status")
  status: option<vpcPeeringConnectionStateReason>,
  @ocaml.doc(
    "<p>Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.</p>"
  )
  @as("RequesterVpcInfo")
  requesterVpcInfo: option<vpcPeeringConnectionVpcInfo>,
  @ocaml.doc("<p>The time that an unaccepted VPC peering connection will expire.</p>")
  @as("ExpirationTime")
  expirationTime: option<dateTime>,
  @ocaml.doc(
    "<p>Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.</p>"
  )
  @as("AccepterVpcInfo")
  accepterVpcInfo: option<vpcPeeringConnectionVpcInfo>,
}
type vpcEndpointSet = array<vpcEndpoint>
type vpcEndpointConnectionSet = array<vpcEndpointConnection>
type vpcClassicLinkList = array<vpcClassicLink>
@ocaml.doc("<p>Describes a VPC.</p>")
type vpc = {
  @ocaml.doc("<p>Any tags assigned to the VPC.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>Indicates whether the VPC is the default VPC.</p>") @as("IsDefault")
  isDefault: option<boolean_>,
  @ocaml.doc("<p>Information about the IPv4 CIDR blocks associated with the VPC.</p>")
  @as("CidrBlockAssociationSet")
  cidrBlockAssociationSet: option<vpcCidrBlockAssociationSet>,
  @ocaml.doc("<p>Information about the IPv6 CIDR blocks associated with the VPC.</p>")
  @as("Ipv6CidrBlockAssociationSet")
  ipv6CidrBlockAssociationSet: option<vpcIpv6CidrBlockAssociationSet>,
  @ocaml.doc("<p>The allowed tenancy of instances launched into the VPC.</p>")
  @as("InstanceTenancy")
  instanceTenancy: option<tenancy>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the VPC.</p>") @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<string_>,
  @ocaml.doc("<p>The current state of the VPC.</p>") @as("State") state: option<vpcState>,
  @ocaml.doc("<p>The ID of the set of DHCP options you've associated with the VPC.</p>")
  @as("DhcpOptionsId")
  dhcpOptionsId: option<string_>,
  @ocaml.doc("<p>The primary IPv4 CIDR block for the VPC.</p>") @as("CidrBlock")
  cidrBlock: option<string_>,
}
@ocaml.doc("<p>Describes the volume status.</p>")
type volumeStatusItem = {
  @ocaml.doc("<p>Information about the instances to which the volume is attached.</p>")
  @as("AttachmentStatuses")
  attachmentStatuses: option<volumeStatusAttachmentStatusList>,
  @ocaml.doc("<p>The volume status.</p>") @as("VolumeStatus")
  volumeStatus: option<volumeStatusInfo>,
  @ocaml.doc("<p>The volume ID.</p>") @as("VolumeId") volumeId: option<string_>,
  @ocaml.doc("<p>A list of events associated with the volume.</p>") @as("Events")
  events: option<volumeStatusEventsList>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Outpost.</p>") @as("OutpostArn")
  outpostArn: option<string_>,
  @ocaml.doc("<p>The Availability Zone of the volume.</p>") @as("AvailabilityZone")
  availabilityZone: option<string_>,
  @ocaml.doc("<p>The details of the operation.</p>") @as("Actions")
  actions: option<volumeStatusActionsList>,
}
type volumeList = array<volume>
type tunnelOptionsList = array<tunnelOption>
type trunkInterfaceAssociationList = array<trunkInterfaceAssociation>
type transitGatewayVpcAttachmentList = array<transitGatewayVpcAttachment>
type transitGatewayRouteTableList = array<transitGatewayRouteTable>
type transitGatewayRouteList = array<transitGatewayRoute>
type transitGatewayPeeringAttachmentList = array<transitGatewayPeeringAttachment>
type transitGatewayMulticastDomainList = array<transitGatewayMulticastDomain>
type transitGatewayList = array<transitGateway>
@ocaml.doc("<p>Describes a transit gateway Connect peer.</p>")
type transitGatewayConnectPeer = {
  @ocaml.doc("<p>The tags for the Connect peer.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The Connect peer details.</p>") @as("ConnectPeerConfiguration")
  connectPeerConfiguration: option<transitGatewayConnectPeerConfiguration>,
  @ocaml.doc("<p>The creation time.</p>") @as("CreationTime") creationTime: option<dateTime>,
  @ocaml.doc("<p>The state of the Connect peer.</p>") @as("State")
  state: option<transitGatewayConnectPeerState>,
  @ocaml.doc("<p>The ID of the Connect peer.</p>") @as("TransitGatewayConnectPeerId")
  transitGatewayConnectPeerId: option<transitGatewayConnectPeerId>,
  @ocaml.doc("<p>The ID of the Connect attachment.</p>") @as("TransitGatewayAttachmentId")
  transitGatewayAttachmentId: option<transitGatewayAttachmentId>,
}
type transitGatewayConnectList = array<transitGatewayConnect>
type transitGatewayAttachmentList = array<transitGatewayAttachment>
type trafficMirrorTargetSet = array<trafficMirrorTarget>
type trafficMirrorSessionSet = array<trafficMirrorSession>
@ocaml.doc("<p>Describes the Traffic Mirror filter.</p>")
type trafficMirrorFilter = {
  @ocaml.doc("<p>The tags assigned to the Traffic Mirror filter.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The description of the Traffic Mirror filter.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc(
    "<p>The network service traffic that is associated with the Traffic Mirror filter.</p>"
  )
  @as("NetworkServices")
  networkServices: option<trafficMirrorNetworkServiceList>,
  @ocaml.doc(
    "<p>Information about the egress rules that are associated with the Traffic Mirror filter.</p>"
  )
  @as("EgressFilterRules")
  egressFilterRules: option<trafficMirrorFilterRuleList>,
  @ocaml.doc(
    "<p>Information about the ingress rules that are associated with the Traffic Mirror filter.</p>"
  )
  @as("IngressFilterRules")
  ingressFilterRules: option<trafficMirrorFilterRuleList>,
  @ocaml.doc("<p>The ID of the Traffic Mirror filter.</p>") @as("TrafficMirrorFilterId")
  trafficMirrorFilterId: option<string_>,
}
type throughResourcesStatementRequestList = array<throughResourcesStatementRequest>
type throughResourcesStatementList = array<throughResourcesStatement>
type tagSpecificationList = array<tagSpecification>
type subnetCidrReservationList = array<subnetCidrReservation>
@ocaml.doc("<p>Describes a subnet.</p>")
type subnet = {
  @ocaml.doc("<p>The type of hostnames to assign to instances in the subnet at launch. An instance hostname
            is based on the IPv4 address or ID of the instance.</p>")
  @as("PrivateDnsNameOptionsOnLaunch")
  privateDnsNameOptionsOnLaunch: option<privateDnsNameOptionsOnLaunch>,
  @ocaml.doc("<p>Indicates whether this is an IPv6 only subnet.</p>") @as("Ipv6Native")
  ipv6Native: option<boolean_>,
  @ocaml.doc("<p>Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet 
            should return synthetic IPv6 addresses for IPv4-only destinations.</p>")
  @as("EnableDns64")
  enableDns64: option<boolean_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Outpost.</p>") @as("OutpostArn")
  outpostArn: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the subnet.</p>") @as("SubnetArn")
  subnetArn: option<string_>,
  @ocaml.doc("<p>Any tags assigned to the subnet.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>Information about the IPv6 CIDR blocks associated with the subnet.</p>")
  @as("Ipv6CidrBlockAssociationSet")
  ipv6CidrBlockAssociationSet: option<subnetIpv6CidrBlockAssociationSet>,
  @ocaml.doc("<p>Indicates whether a network interface created in this subnet (including a network
            interface created by <a>RunInstances</a>) receives an IPv6 address.</p>")
  @as("AssignIpv6AddressOnCreation")
  assignIpv6AddressOnCreation: option<boolean_>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the subnet.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The ID of the VPC the subnet is in.</p>") @as("VpcId") vpcId: option<string_>,
  @ocaml.doc("<p>The ID of the subnet.</p>") @as("SubnetId") subnetId: option<string_>,
  @ocaml.doc("<p>The current state of the subnet.</p>") @as("State") state: option<subnetState>,
  @ocaml.doc("<p>The customer-owned IPv4 address pool associated with the subnet.</p>")
  @as("CustomerOwnedIpv4Pool")
  customerOwnedIpv4Pool: option<coipPoolId>,
  @ocaml.doc("<p>Indicates whether a network interface created in this subnet (including a network
            interface created by <a>RunInstances</a>) receives a customer-owned IPv4 address.</p>")
  @as("MapCustomerOwnedIpOnLaunch")
  mapCustomerOwnedIpOnLaunch: option<boolean_>,
  @ocaml.doc(
    "<p>Indicates whether instances launched in this subnet receive a public IPv4 address.</p>"
  )
  @as("MapPublicIpOnLaunch")
  mapPublicIpOnLaunch: option<boolean_>,
  @ocaml.doc("<p>
            Indicates the device position for local network interfaces in this subnet. For example, 
            <code>1</code> indicates local network interfaces in this subnet are the secondary 
            network interface (eth1). 
        </p>")
  @as("EnableLniAtDeviceIndex")
  enableLniAtDeviceIndex: option<integer_>,
  @ocaml.doc("<p>Indicates whether this is the default subnet for the Availability Zone.</p>")
  @as("DefaultForAz")
  defaultForAz: option<boolean_>,
  @ocaml.doc("<p>The IPv4 CIDR block assigned to the subnet.</p>") @as("CidrBlock")
  cidrBlock: option<string_>,
  @ocaml.doc("<p>The number of unused private IPv4 addresses in the subnet. The IPv4 addresses for any
			stopped instances are considered unavailable.</p>")
  @as("AvailableIpAddressCount")
  availableIpAddressCount: option<integer_>,
  @ocaml.doc("<p>The AZ ID of the subnet.</p>") @as("AvailabilityZoneId")
  availabilityZoneId: option<string_>,
  @ocaml.doc("<p>The Availability Zone of the subnet.</p>") @as("AvailabilityZone")
  availabilityZone: option<string_>,
}
type staleIpPermissionSet = array<staleIpPermission>
type spotFleetTagSpecificationList = array<spotFleetTagSpecification>
type snapshotSet = array<snapshotInfo>
type snapshotList = array<snapshot>
type serviceDetailSet = array<serviceDetail>
type serviceConfigurationSet = array<serviceConfiguration>
type securityGroupRuleList = array<securityGroupRule>
type scheduledInstancesNetworkInterfaceSet = array<scheduledInstancesNetworkInterface>
type scheduledInstanceSet = array<scheduledInstance>
type scheduledInstanceAvailabilitySet = array<scheduledInstanceAvailability>
@ocaml.doc("<p>Describes a route table.</p>")
type routeTable = {
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the route table.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<string_>,
  @ocaml.doc("<p>Any tags assigned to the route table.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The routes in the route table.</p>") @as("Routes") routes: option<routeList>,
  @ocaml.doc("<p>The ID of the route table.</p>") @as("RouteTableId") routeTableId: option<string_>,
  @ocaml.doc("<p>Any virtual private gateway (VGW) propagating routes.</p>") @as("PropagatingVgws")
  propagatingVgws: option<propagatingVgwList>,
  @ocaml.doc(
    "<p>The associations between the route table and one or more subnets or a gateway.</p>"
  )
  @as("Associations")
  associations: option<routeTableAssociationList>,
}
type reservedInstancesOfferingList = array<reservedInstancesOffering>
@ocaml.doc("<p>Describes a Reserved Instance modification.</p>")
type reservedInstancesModification = {
  @ocaml.doc("<p>The time when the modification request was last updated.</p>") @as("UpdateDate")
  updateDate: option<dateTime>,
  @ocaml.doc("<p>The reason for the status.</p>") @as("StatusMessage")
  statusMessage: option<string_>,
  @ocaml.doc("<p>The status of the Reserved Instances modification request.</p>") @as("Status")
  status: option<string_>,
  @ocaml.doc("<p>A unique ID for the Reserved Instance modification.</p>")
  @as("ReservedInstancesModificationId")
  reservedInstancesModificationId: option<string_>,
  @ocaml.doc("<p>The IDs of one or more Reserved Instances.</p>") @as("ReservedInstancesIds")
  reservedInstancesIds: option<reservedIntancesIds>,
  @ocaml.doc(
    "<p>Contains target configurations along with their corresponding new Reserved Instance IDs.</p>"
  )
  @as("ModificationResults")
  modificationResults: option<reservedInstancesModificationResultList>,
  @ocaml.doc("<p>The time for the modification to become effective.</p>") @as("EffectiveDate")
  effectiveDate: option<dateTime>,
  @ocaml.doc("<p>The time when the modification request was created.</p>") @as("CreateDate")
  createDate: option<dateTime>,
  @ocaml.doc("<p>A unique, case-sensitive key supplied by the client to ensure that the request is idempotent.
			For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring
				Idempotency</a>.</p>")
  @as("ClientToken")
  clientToken: option<string_>,
}
type reservedInstancesListingList = array<reservedInstancesListing>
type reservedInstancesList = array<reservedInstances>
type replaceRootVolumeTasks = array<replaceRootVolumeTask>
type purchasedScheduledInstanceSet = array<scheduledInstance>
type publicIpv4PoolSet = array<publicIpv4Pool>
type principalIdFormatList = array<principalIdFormat>
type placementGroupList = array<placementGroup>
@ocaml.doc("<p>Describes a path component.</p>")
type pathComponent = {
  @ocaml.doc("<p>The route in a transit gateway route table.</p>")
  @as("TransitGatewayRouteTableRoute")
  transitGatewayRouteTableRoute: option<transitGatewayRouteTableRoute>,
  @as("TransitGateway") transitGateway: option<analysisComponent>,
  @ocaml.doc("<p>The additional details.</p>") @as("AdditionalDetails")
  additionalDetails: option<additionalDetailList>,
  @ocaml.doc("<p>The component VPC.</p>") @as("Vpc") vpc: option<analysisComponent>,
  @ocaml.doc("<p>The subnet.</p>") @as("Subnet") subnet: option<analysisComponent>,
  @ocaml.doc("<p>The source VPC.</p>") @as("SourceVpc") sourceVpc: option<analysisComponent>,
  @ocaml.doc("<p>The security group rule.</p>") @as("SecurityGroupRule")
  securityGroupRule: option<analysisSecurityGroupRule>,
  @ocaml.doc("<p>The route table route.</p>") @as("RouteTableRoute")
  routeTableRoute: option<analysisRouteTableRoute>,
  @ocaml.doc("<p>The inbound header.</p>") @as("InboundHeader")
  inboundHeader: option<analysisPacketHeader>,
  @ocaml.doc("<p>The outbound header.</p>") @as("OutboundHeader")
  outboundHeader: option<analysisPacketHeader>,
  @ocaml.doc("<p>The destination VPC.</p>") @as("DestinationVpc")
  destinationVpc: option<analysisComponent>,
  @ocaml.doc("<p>The component.</p>") @as("Component") component: option<analysisComponent>,
  @ocaml.doc("<p>The resource to which the path component is attached.</p>") @as("AttachedTo")
  attachedTo: option<analysisComponent>,
  @ocaml.doc("<p>The network ACL rule.</p>") @as("AclRule") aclRule: option<analysisAclRule>,
  @ocaml.doc("<p>The sequence number.</p>") @as("SequenceNumber") sequenceNumber: option<integer_>,
}
@ocaml.doc("<p>Describes a network interface.</p>")
type networkInterface = {
  @ocaml.doc("<p>The IPv6 globally unique address associated with the network interface.</p>")
  @as("Ipv6Address")
  ipv6Address: option<string_>,
  @ocaml.doc("<p>Indicates whether this is an IPv6 only network interface.</p>") @as("Ipv6Native")
  ipv6Native: option<boolean_>,
  @ocaml.doc("<p>Indicates whether a network interface with an IPv6 address is unreachable from the 
            public internet. If the value is <code>true</code>, inbound traffic from the internet 
            is dropped and you cannot assign an elastic IP address to the network interface. The 
            network interface is reachable from peered VPCs and resources connected through a 
            transit gateway, including on-premises networks.</p>")
  @as("DenyAllIgwTraffic")
  denyAllIgwTraffic: option<boolean_>,
  @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<string_>,
  @ocaml.doc("<p>Any tags assigned to the network interface.</p>") @as("TagSet")
  tagSet: option<tagList_>,
  @ocaml.doc("<p>The ID of the subnet.</p>") @as("SubnetId") subnetId: option<string_>,
  @ocaml.doc("<p>The status of the network interface.</p>") @as("Status")
  status: option<networkInterfaceStatus>,
  @ocaml.doc("<p>Indicates whether source/destination checking is enabled.</p>")
  @as("SourceDestCheck")
  sourceDestCheck: option<boolean_>,
  @ocaml.doc(
    "<p>Indicates whether the network interface is being managed by Amazon Web Services.</p>"
  )
  @as("RequesterManaged")
  requesterManaged: option<boolean_>,
  @ocaml.doc(
    "<p>The alias or Amazon Web Services account ID of the principal or service that created the network interface.</p>"
  )
  @as("RequesterId")
  requesterId: option<string_>,
  @ocaml.doc("<p>The IPv6 prefixes that are assigned to the network interface.</p>")
  @as("Ipv6Prefixes")
  ipv6Prefixes: option<ipv6PrefixesList>,
  @ocaml.doc("<p>The IPv4 prefixes that are assigned to the network interface.</p>")
  @as("Ipv4Prefixes")
  ipv4Prefixes: option<ipv4PrefixesList>,
  @ocaml.doc("<p>The private IPv4 addresses associated with the network interface.</p>")
  @as("PrivateIpAddresses")
  privateIpAddresses: option<networkInterfacePrivateIpAddressList>,
  @ocaml.doc("<p>The IPv4 address of the network interface within the subnet.</p>")
  @as("PrivateIpAddress")
  privateIpAddress: option<string_>,
  @ocaml.doc("<p>The private DNS name.</p>") @as("PrivateDnsName") privateDnsName: option<string_>,
  @ocaml.doc("<p>The Amazon Web Services account ID of the owner of the network interface.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Outpost.</p>") @as("OutpostArn")
  outpostArn: option<string_>,
  @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
  networkInterfaceId: option<string_>,
  @ocaml.doc("<p>The MAC address.</p>") @as("MacAddress") macAddress: option<string_>,
  @ocaml.doc("<p>The IPv6 addresses associated with the network interface.</p>")
  @as("Ipv6Addresses")
  ipv6Addresses: option<networkInterfaceIpv6AddressesList>,
  @ocaml.doc("<p>The type of network interface.</p>") @as("InterfaceType")
  interfaceType: option<networkInterfaceType>,
  @ocaml.doc("<p>Any security groups for the network interface.</p>") @as("Groups")
  groups: option<groupIdentifierList>,
  @ocaml.doc("<p>A description.</p>") @as("Description") description: option<string_>,
  @ocaml.doc("<p>The Availability Zone.</p>") @as("AvailabilityZone")
  availabilityZone: option<string_>,
  @ocaml.doc("<p>The network interface attachment.</p>") @as("Attachment")
  attachment: option<networkInterfaceAttachment>,
  @ocaml.doc(
    "<p>The association information for an Elastic IP address (IPv4) associated with the network interface.</p>"
  )
  @as("Association")
  association: option<networkInterfaceAssociation>,
}
type networkInsightsPathList = array<networkInsightsPath>
type networkInsightsAccessScopeList = array<networkInsightsAccessScope>
type networkInsightsAccessScopeAnalysisList = array<networkInsightsAccessScopeAnalysis>
@ocaml.doc("<p>Describes a network ACL.</p>")
type networkAcl = {
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the network ACL.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The ID of the VPC for the network ACL.</p>") @as("VpcId") vpcId: option<string_>,
  @ocaml.doc("<p>Any tags assigned to the network ACL.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The ID of the network ACL.</p>") @as("NetworkAclId") networkAclId: option<string_>,
  @ocaml.doc("<p>Indicates whether this is the default network ACL for the VPC.</p>")
  @as("IsDefault")
  isDefault: option<boolean_>,
  @ocaml.doc("<p>One or more entries (rules) in the network ACL.</p>") @as("Entries")
  entries: option<networkAclEntryList>,
  @ocaml.doc("<p>Any associations between the network ACL and one or more subnets</p>")
  @as("Associations")
  associations: option<networkAclAssociationList>,
}
type natGatewayList = array<natGateway>
type managedPrefixListSet = array<managedPrefixList>
type localGatewayVirtualInterfaceSet = array<localGatewayVirtualInterface>
type localGatewayVirtualInterfaceGroupSet = array<localGatewayVirtualInterfaceGroup>
type localGatewaySet = array<localGateway>
type localGatewayRouteTableVpcAssociationSet = array<localGatewayRouteTableVpcAssociation>
type localGatewayRouteTableVirtualInterfaceGroupAssociationSet = array<
  localGatewayRouteTableVirtualInterfaceGroupAssociation,
>
type localGatewayRouteTableSet = array<localGatewayRouteTable>
@ocaml.doc("<p>Describes the Classic Load Balancers and target groups to attach to a Spot Fleet
            request.</p>")
type loadBalancersConfig = {
  @ocaml.doc("<p>The target groups.</p>") @as("TargetGroupsConfig")
  targetGroupsConfig: option<targetGroupsConfig>,
  @ocaml.doc("<p>The Classic Load Balancers.</p>") @as("ClassicLoadBalancersConfig")
  classicLoadBalancersConfig: option<classicLoadBalancersConfig>,
}
type launchTemplateTagSpecificationRequestList = array<launchTemplateTagSpecificationRequest>
type launchTemplateTagSpecificationList = array<launchTemplateTagSpecification>
type launchTemplateSet = array<launchTemplate>
type launchTemplateOverridesList = array<launchTemplateOverrides>
type launchTemplateInstanceNetworkInterfaceSpecificationRequestList = array<
  launchTemplateInstanceNetworkInterfaceSpecificationRequest,
>
type launchTemplateInstanceNetworkInterfaceSpecificationList = array<
  launchTemplateInstanceNetworkInterfaceSpecification,
>
@ocaml.doc("<p>Describes a launch template and overrides.</p>")
type launchTemplateAndOverridesResponse = {
  @ocaml.doc("<p>Any parameters that you specify override the same parameters in the launch
         template.</p>")
  @as("Overrides")
  overrides: option<fleetLaunchTemplateOverrides>,
  @ocaml.doc("<p>The launch template.</p>") @as("LaunchTemplateSpecification")
  launchTemplateSpecification: option<fleetLaunchTemplateSpecification>,
}
type keyPairList = array<keyPairInfo>
type ipv6PoolSet = array<ipv6Pool>
type ipamSet = array<ipam>
type ipamScopeSet = array<ipamScope>
type ipamResourceCidrSet = array<ipamResourceCidr>
type ipamPoolSet = array<ipamPool>
type ipPermissionList = array<ipPermission>
type internetGatewayList = array<internetGateway>
@ocaml.doc("<p>Describes the status of an instance.</p>")
type instanceStatus = {
  @ocaml.doc("<p>Reports impaired functionality that stems from issues related to the systems that
            support an instance, such as hardware failures and network connectivity problems.</p>")
  @as("SystemStatus")
  systemStatus: option<instanceStatusSummary>,
  @ocaml.doc("<p>Reports impaired functionality that stems from issues internal to the instance, such
            as impaired reachability.</p>")
  @as("InstanceStatus")
  instanceStatus: option<instanceStatusSummary>,
  @ocaml.doc("<p>The intended state of the instance. <a>DescribeInstanceStatus</a> requires
            that an instance be in the <code>running</code> state.</p>")
  @as("InstanceState")
  instanceState: option<instanceState>,
  @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<string_>,
  @ocaml.doc("<p>Any scheduled events associated with the instance.</p>") @as("Events")
  events: option<instanceStatusEventList>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Outpost.</p>") @as("OutpostArn")
  outpostArn: option<string_>,
  @ocaml.doc("<p>The Availability Zone of the instance.</p>") @as("AvailabilityZone")
  availabilityZone: option<string_>,
}
type instanceNetworkInterfaceSpecificationList = array<instanceNetworkInterfaceSpecification>
@ocaml.doc("<p>Describes a network interface.</p>")
type instanceNetworkInterface = {
  @ocaml.doc("<p>The IPv6 delegated prefixes that are assigned to the network interface.</p>")
  @as("Ipv6Prefixes")
  ipv6Prefixes: option<instanceIpv6PrefixList>,
  @ocaml.doc("<p>The IPv4 delegated prefixes that are assigned to the network interface.</p>")
  @as("Ipv4Prefixes")
  ipv4Prefixes: option<instanceIpv4PrefixList>,
  @ocaml.doc("<p>The type of network interface.</p> 
	        <p>Valid values: <code>interface</code> | <code>efa</code> | <code>trunk</code>
         </p>")
  @as("InterfaceType")
  interfaceType: option<string_>,
  @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<string_>,
  @ocaml.doc("<p>The ID of the subnet.</p>") @as("SubnetId") subnetId: option<string_>,
  @ocaml.doc("<p>The status of the network interface.</p>") @as("Status")
  status: option<networkInterfaceStatus>,
  @ocaml.doc("<p>Indicates whether source/destination checking is enabled.</p>")
  @as("SourceDestCheck")
  sourceDestCheck: option<boolean_>,
  @ocaml.doc("<p>One or more private IPv4 addresses associated with the network interface.</p>")
  @as("PrivateIpAddresses")
  privateIpAddresses: option<instancePrivateIpAddressList>,
  @ocaml.doc("<p>The IPv4 address of the network interface within the subnet.</p>")
  @as("PrivateIpAddress")
  privateIpAddress: option<string_>,
  @ocaml.doc("<p>The private DNS name.</p>") @as("PrivateDnsName") privateDnsName: option<string_>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that created the network interface.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
  networkInterfaceId: option<string_>,
  @ocaml.doc("<p>The MAC address.</p>") @as("MacAddress") macAddress: option<string_>,
  @ocaml.doc("<p>One or more IPv6 addresses associated with the network interface.</p>")
  @as("Ipv6Addresses")
  ipv6Addresses: option<instanceIpv6AddressList>,
  @ocaml.doc("<p>One or more security groups.</p>") @as("Groups")
  groups: option<groupIdentifierList>,
  @ocaml.doc("<p>The description.</p>") @as("Description") description: option<string_>,
  @ocaml.doc("<p>The network interface attachment.</p>") @as("Attachment")
  attachment: option<instanceNetworkInterfaceAttachment>,
  @ocaml.doc("<p>The association information for an Elastic IPv4 associated with the network
            interface.</p>")
  @as("Association")
  association: option<instanceNetworkInterfaceAssociation>,
}
@ocaml.doc("<p>The event window.</p>")
type instanceEventWindow = {
  @ocaml.doc("<p>The instance tags associated with the event window.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The current state of the event window.</p>") @as("State")
  state: option<instanceEventWindowState>,
  @ocaml.doc("<p>One or more targets associated with the event window.</p>")
  @as("AssociationTarget")
  associationTarget: option<instanceEventWindowAssociationTarget>,
  @ocaml.doc("<p>The cron expression defined for the event window.</p>") @as("CronExpression")
  cronExpression: option<instanceEventWindowCronExpression>,
  @ocaml.doc("<p>The name of the event window.</p>") @as("Name") name: option<string_>,
  @ocaml.doc("<p>One or more time ranges defined for the event window.</p>") @as("TimeRanges")
  timeRanges: option<instanceEventWindowTimeRangeList>,
  @ocaml.doc("<p>The ID of the event window.</p>") @as("InstanceEventWindowId")
  instanceEventWindowId: option<instanceEventWindowId>,
}
type importSnapshotTaskList = array<importSnapshotTask>
@ocaml.doc("<p>Describes an import instance task.</p>")
type importInstanceTaskDetails = {
  @ocaml.doc("<p>The volumes.</p>") @as("Volumes") volumes: option<importInstanceVolumeDetailSet>,
  @ocaml.doc("<p>The instance operating system.</p>") @as("Platform")
  platform: option<platformValues>,
  @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<string_>,
  @ocaml.doc("<p>A description of the task.</p>") @as("Description") description: option<string_>,
}
@ocaml.doc("<p>Describes an import image task.</p>")
type importImageTask = {
  @ocaml.doc("<p>The boot mode of the virtual machine.</p>") @as("BootMode")
  bootMode: option<bootModeValues>,
  @ocaml.doc("<p>The usage operation value.</p>") @as("UsageOperation")
  usageOperation: option<string_>,
  @ocaml.doc(
    "<p>The ARNs of the license configurations that are associated with the import image task.</p>"
  )
  @as("LicenseSpecifications")
  licenseSpecifications: option<importImageLicenseSpecificationListResponse>,
  @ocaml.doc("<p>The tags for the import image task.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>A descriptive status message for the import image task.</p>") @as("StatusMessage")
  statusMessage: option<string_>,
  @ocaml.doc("<p>A brief status for the import image task.</p>") @as("Status")
  status: option<string_>,
  @ocaml.doc("<p>Information about the snapshots.</p>") @as("SnapshotDetails")
  snapshotDetails: option<snapshotDetailList>,
  @ocaml.doc("<p>The percentage of progress of the import image task.</p>") @as("Progress")
  progress: option<string_>,
  @ocaml.doc("<p>The description string for the import image task.</p>") @as("Platform")
  platform: option<string_>,
  @ocaml.doc("<p>The license type of the virtual machine.</p>") @as("LicenseType")
  licenseType: option<string_>,
  @ocaml.doc("<p>The identifier for the KMS key that was used to create the encrypted image.</p>")
  @as("KmsKeyId")
  kmsKeyId: option<string_>,
  @ocaml.doc("<p>The ID of the import image task.</p>") @as("ImportTaskId")
  importTaskId: option<string_>,
  @ocaml.doc("<p>The ID of the Amazon Machine Image (AMI) of the imported virtual machine.</p>")
  @as("ImageId")
  imageId: option<string_>,
  @ocaml.doc("<p>The target hypervisor for the import task.</p>
         <p>Valid values: <code>xen</code>
         </p>")
  @as("Hypervisor")
  hypervisor: option<string_>,
  @ocaml.doc("<p>Indicates whether the image is encrypted.</p>") @as("Encrypted")
  encrypted: option<boolean_>,
  @ocaml.doc("<p>A description of the import task.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The architecture of the virtual machine.</p>
         <p>Valid values: <code>i386</code> | <code>x86_64</code> | <code>arm64</code>
         </p>")
  @as("Architecture")
  architecture: option<string_>,
}
@ocaml.doc("<p>Describes an image.</p>")
type image = {
  @ocaml.doc("<p>The date and time to deprecate the AMI, in UTC, in the following format: 
     <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z.
      If you specified a value for seconds, Amazon EC2 rounds the seconds to the
      nearest minute.</p>")
  @as("DeprecationTime")
  deprecationTime: option<string_>,
  @ocaml.doc("<p>The boot mode of the image. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html\">Boot modes</a> in the
        <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
  @as("BootMode")
  bootMode: option<bootModeValues>,
  @ocaml.doc("<p>The type of virtualization of the AMI.</p>") @as("VirtualizationType")
  virtualizationType: option<virtualizationType>,
  @ocaml.doc("<p>Any tags assigned to the image.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The reason for the state change.</p>") @as("StateReason")
  stateReason: option<stateReason>,
  @ocaml.doc(
    "<p>Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>"
  )
  @as("SriovNetSupport")
  sriovNetSupport: option<string_>,
  @ocaml.doc(
    "<p>The type of root device used by the AMI. The AMI can use an Amazon EBS volume or an instance store volume.</p>"
  )
  @as("RootDeviceType")
  rootDeviceType: option<deviceType>,
  @ocaml.doc(
    "<p>The device name of the root device volume (for example, <code>/dev/sda1</code>).</p>"
  )
  @as("RootDeviceName")
  rootDeviceName: option<string_>,
  @ocaml.doc("<p>The name of the AMI that was provided during image creation.</p>") @as("Name")
  name: option<string_>,
  @ocaml.doc("<p>The Amazon Web Services account alias (for example, <code>amazon</code>, <code>self</code>) or
       the Amazon Web Services account ID of the AMI owner.</p>")
  @as("ImageOwnerAlias")
  imageOwnerAlias: option<string_>,
  @ocaml.doc("<p>The hypervisor type of the image.</p>") @as("Hypervisor")
  hypervisor: option<hypervisorType>,
  @ocaml.doc("<p>Specifies whether enhanced networking with ENA is enabled.</p>") @as("EnaSupport")
  enaSupport: option<boolean_>,
  @ocaml.doc("<p>The description of the AMI that was provided during image creation.</p>")
  @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>Any block device mapping entries.</p>") @as("BlockDeviceMappings")
  blockDeviceMappings: option<blockDeviceMappingList>,
  @ocaml.doc(
    "<p>The current state of the AMI. If the state is <code>available</code>, the image is successfully registered and can be used to launch an instance.</p>"
  )
  @as("State")
  state: option<imageState>,
  @ocaml.doc(
    "<p>The RAM disk associated with the image, if any. Only applicable for machine images.</p>"
  )
  @as("RamdiskId")
  ramdiskId: option<string_>,
  @ocaml.doc("<p>Any product codes associated with the AMI.</p>") @as("ProductCodes")
  productCodes: option<productCodeList>,
  @ocaml.doc("<p>The operation of the Amazon EC2 instance and the billing code that is associated with the AMI.
        <code>usageOperation</code> corresponds to the <a href=\"https://docs.aws.amazon.com/cur/latest/userguide/Lineitem-columns.html#Lineitem-details-O-Operation\">lineitem/Operation</a> column on your Amazon Web Services Cost and Usage Report and in the <a href=\"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/price-changes.html\">Amazon Web Services Price
        	List API</a>. You can view these fields on the <b>Instances</b> or 
    	<b>AMIs</b> pages in the Amazon EC2 console, or in the responses that are 
    	returned by the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeImages.html\">DescribeImages</a> 
    	command in the Amazon EC2 API, or the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-images.html\">describe-images</a> 
    	command in the CLI.</p>")
  @as("UsageOperation")
  usageOperation: option<string_>,
  @ocaml.doc("<p>The platform details associated with the billing code of the AMI. For more information,
      see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html\">Understanding 
        AMI billing</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
  @as("PlatformDetails")
  platformDetails: option<string_>,
  @ocaml.doc(
    "<p>This value is set to <code>windows</code> for Windows AMIs; otherwise, it is blank.</p>"
  )
  @as("Platform")
  platform: option<platformValues>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the image.</p>") @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc(
    "<p>The kernel associated with the image, if any. Only applicable for machine images.</p>"
  )
  @as("KernelId")
  kernelId: option<string_>,
  @ocaml.doc("<p>Indicates whether the image has public launch permissions. The value is <code>true</code> if
				this image has public launch permissions or <code>false</code>
				if it has only implicit and explicit launch permissions.</p>")
  @as("Public")
  public_: option<boolean_>,
  @ocaml.doc("<p>The type of image.</p>") @as("ImageType") imageType: option<imageTypeValues>,
  @ocaml.doc("<p>The location of the AMI.</p>") @as("ImageLocation") imageLocation: option<string_>,
  @ocaml.doc("<p>The ID of the AMI.</p>") @as("ImageId") imageId: option<string_>,
  @ocaml.doc("<p>The date and time the image was created.</p>") @as("CreationDate")
  creationDate: option<string_>,
  @ocaml.doc("<p>The architecture of the image.</p>") @as("Architecture")
  architecture: option<architectureValues>,
}
type hostReservationSet = array<hostReservation>
@ocaml.doc("<p>Describes the properties of the Dedicated Host.</p>")
type host = {
  @ocaml.doc("<p>Indicates whether the Dedicated Host is in a host resource group. If 
			<b>memberOfServiceLinkedResourceGroup</b> is 
			<code>true</code>, the host is in a host resource group; otherwise, it is not.</p>")
  @as("MemberOfServiceLinkedResourceGroup")
  memberOfServiceLinkedResourceGroup: option<boolean_>,
  @ocaml.doc("<p>The ID of the Availability Zone in which the Dedicated Host is allocated.</p>")
  @as("AvailabilityZoneId")
  availabilityZoneId: option<string_>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the Dedicated Host.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>Indicates whether the Dedicated Host supports multiple instance types of the same instance family. 
			If the value is <code>on</code>, the Dedicated Host supports multiple instance types in the instance family. 
		    If the value is <code>off</code>, the Dedicated Host supports a single instance type only.</p>")
  @as("AllowsMultipleInstanceTypes")
  allowsMultipleInstanceTypes: option<allowsMultipleInstanceTypes>,
  @ocaml.doc(
    "<p>Indicates whether host recovery is enabled or disabled for the Dedicated Host.</p>"
  )
  @as("HostRecovery")
  hostRecovery: option<hostRecovery>,
  @ocaml.doc("<p>Any tags assigned to the Dedicated Host.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The time that the Dedicated Host was released.</p>") @as("ReleaseTime")
  releaseTime: option<dateTime>,
  @ocaml.doc("<p>The time that the Dedicated Host was allocated.</p>") @as("AllocationTime")
  allocationTime: option<dateTime>,
  @ocaml.doc("<p>The Dedicated Host's state.</p>") @as("State") state: option<allocationState>,
  @ocaml.doc("<p>The IDs and instance type that are currently running on the Dedicated
            Host.</p>")
  @as("Instances")
  instances: option<hostInstanceList>,
  @ocaml.doc("<p>The reservation ID of the Dedicated Host. This returns a <code>null</code> response
            if the Dedicated Host doesn't have an associated reservation.</p>")
  @as("HostReservationId")
  hostReservationId: option<string_>,
  @ocaml.doc("<p>The hardware specifications of the Dedicated Host.</p>") @as("HostProperties")
  hostProperties: option<hostProperties>,
  @ocaml.doc("<p>The ID of the Dedicated Host.</p>") @as("HostId") hostId: option<string_>,
  @ocaml.doc(
    "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p>"
  )
  @as("ClientToken")
  clientToken: option<string_>,
  @ocaml.doc("<p>Information about the instances running on the Dedicated Host.</p>")
  @as("AvailableCapacity")
  availableCapacity: option<availableCapacity>,
  @ocaml.doc("<p>The Availability Zone of the Dedicated Host.</p>") @as("AvailabilityZone")
  availabilityZone: option<string_>,
  @ocaml.doc("<p>Whether auto-placement is on or off.</p>") @as("AutoPlacement")
  autoPlacement: option<autoPlacement>,
}
@ocaml.doc("<p>Describes the GPU accelerators for the instance type.</p>")
type gpuInfo = {
  @ocaml.doc(
    "<p>The total size of the memory for the GPU accelerators for the instance type, in MiB.</p>"
  )
  @as("TotalGpuMemoryInMiB")
  totalGpuMemoryInMiB: option<totalGpuMemory>,
  @ocaml.doc("<p>Describes the GPU accelerators for the instance type.</p>") @as("Gpus")
  gpus: option<gpuDeviceInfoList>,
}
@ocaml.doc("<p>Describes the FPGAs for the instance type.</p>")
type fpgaInfo = {
  @ocaml.doc("<p>The total memory of all FPGA accelerators for the instance type.</p>")
  @as("TotalFpgaMemoryInMiB")
  totalFpgaMemoryInMiB: option<totalFpgaMemory>,
  @ocaml.doc("<p>Describes the FPGAs for the instance type.</p>") @as("Fpgas")
  fpgas: option<fpgaDeviceInfoList>,
}
type fpgaImageList = array<fpgaImage>
type flowLogSet = array<flowLog>
type fleetLaunchTemplateOverridesListRequest = array<fleetLaunchTemplateOverridesRequest>
type fleetLaunchTemplateOverridesList = array<fleetLaunchTemplateOverrides>
type exportTaskList = array<exportTask>
type exportImageTaskList = array<exportImageTask>
type explanationList = array<explanation>
@ocaml.doc(
  "<p>Contains information about the errors that occurred when enabling fast snapshot restores.</p>"
)
type enableFastSnapshotRestoreErrorItem = {
  @ocaml.doc("<p>The errors.</p>") @as("FastSnapshotRestoreStateErrors")
  fastSnapshotRestoreStateErrors: option<enableFastSnapshotRestoreStateErrorSet>,
  @ocaml.doc("<p>The ID of the snapshot.</p>") @as("SnapshotId") snapshotId: option<string_>,
}
type elasticGpuSet = array<elasticGpus>
type egressOnlyInternetGatewayList = array<egressOnlyInternetGateway>
@ocaml.doc(
  "<p>Contains information about the errors that occurred when disabling fast snapshot restores.</p>"
)
type disableFastSnapshotRestoreErrorItem = {
  @ocaml.doc("<p>The errors.</p>") @as("FastSnapshotRestoreStateErrors")
  fastSnapshotRestoreStateErrors: option<disableFastSnapshotRestoreStateErrorSet>,
  @ocaml.doc("<p>The ID of the snapshot.</p>") @as("SnapshotId") snapshotId: option<string_>,
}
type dhcpConfigurationList = array<dhcpConfiguration>
type customerGatewayList = array<customerGateway>
type coipPoolSet = array<coipPool>
@ocaml.doc("<p>Describes a Client VPN endpoint.</p>")
type clientVpnEndpoint = {
  @ocaml.doc("<p>Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is
			established.</p>")
  @as("ClientLoginBannerOptions")
  clientLoginBannerOptions: option<clientLoginBannerResponseOptions>,
  @ocaml.doc("<p>The maximum VPN session duration time in hours.</p>
		       <p>Valid values: <code>8 | 10 | 12 | 24</code>
         </p>
		       <p>Default value: <code>24</code>
         </p>")
  @as("SessionTimeoutHours")
  sessionTimeoutHours: option<integer_>,
  @ocaml.doc("<p>The options for managing connection authorization for new client connections.</p>")
  @as("ClientConnectOptions")
  clientConnectOptions: option<clientConnectResponseOptions>,
  @ocaml.doc("<p>The URL of the self-service portal.</p>") @as("SelfServicePortalUrl")
  selfServicePortalUrl: option<string_>,
  @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<vpcId>,
  @ocaml.doc("<p>The IDs of the security groups for the target network.</p>")
  @as("SecurityGroupIds")
  securityGroupIds: option<clientVpnSecurityGroupIdSet>,
  @ocaml.doc("<p>Any tags assigned to the Client VPN endpoint.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc(
    "<p>Information about the client connection logging options for the Client VPN endpoint.</p>"
  )
  @as("ConnectionLogOptions")
  connectionLogOptions: option<connectionLogResponseOptions>,
  @ocaml.doc("<p>Information about the authentication method used by the Client VPN endpoint.</p>")
  @as("AuthenticationOptions")
  authenticationOptions: option<clientVpnAuthenticationList>,
  @ocaml.doc("<p>The ARN of the server certificate.</p>") @as("ServerCertificateArn")
  serverCertificateArn: option<string_>,
  @ocaml.doc(
    "<p>Information about the associated target networks. A target network is a subnet in a VPC.</p>"
  )
  @as("AssociatedTargetNetworks")
  associatedTargetNetworks: option<associatedTargetNetworkSet>,
  @ocaml.doc("<p>The port number for the  Client VPN endpoint.</p>") @as("VpnPort")
  vpnPort: option<integer_>,
  @ocaml.doc("<p>The transport protocol used by the Client VPN endpoint.</p>")
  @as("TransportProtocol")
  transportProtocol: option<transportProtocol>,
  @ocaml.doc("<p>The protocol used by the VPN session.</p>") @as("VpnProtocol")
  vpnProtocol: option<vpnProtocol>,
  @ocaml.doc("<p>Indicates whether split-tunnel is enabled in the Client VPN endpoint.</p>
		       <p>For information about split-tunnel VPN endpoints, see <a href=\"https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html\">Split-Tunnel Client VPN endpoint</a> 
			in the <i>Client VPN Administrator Guide</i>.</p>")
  @as("SplitTunnel")
  splitTunnel: option<boolean_>,
  @ocaml.doc("<p>Information about the DNS servers to be used for DNS resolution. </p>")
  @as("DnsServers")
  dnsServers: option<valueStringList>,
  @ocaml.doc(
    "<p>The IPv4 address range, in CIDR notation, from which client IP addresses are assigned.</p>"
  )
  @as("ClientCidrBlock")
  clientCidrBlock: option<string_>,
  @ocaml.doc(
    "<p>The DNS name to be used by clients when connecting to the Client VPN endpoint.</p>"
  )
  @as("DnsName")
  dnsName: option<string_>,
  @ocaml.doc("<p>The date and time the Client VPN endpoint was deleted, if applicable.</p>")
  @as("DeletionTime")
  deletionTime: option<string_>,
  @ocaml.doc("<p>The date and time the Client VPN endpoint was created.</p>") @as("CreationTime")
  creationTime: option<string_>,
  @ocaml.doc("<p>The current state of the Client VPN endpoint.</p>") @as("Status")
  status: option<clientVpnEndpointStatus>,
  @ocaml.doc("<p>A brief description of the endpoint.</p>") @as("Description")
  description: option<string_>,
  @ocaml.doc("<p>The ID of the Client VPN endpoint.</p>") @as("ClientVpnEndpointId")
  clientVpnEndpointId: option<string_>,
}
type classicLinkInstanceList = array<classicLinkInstance>
type carrierGatewaySet = array<carrierGateway>
type capacityReservationSet = array<capacityReservation>
type capacityReservationFleetSet = array<capacityReservationFleet>
type bundleTaskList = array<bundleTask>
type availabilityZoneList = array<availabilityZone>
type addressList = array<address>
type accountAttributeList = array<accountAttribute>
@ocaml.doc("<p>Describes VPN connection options.</p>")
type vpnConnectionOptionsSpecification = {
  @ocaml.doc("<p>The IPv6 CIDR on the Amazon Web Services side of the VPN connection.</p>
        <p>Default: <code>::/0</code>
         </p>")
  @as("RemoteIpv6NetworkCidr")
  remoteIpv6NetworkCidr: option<string_>,
  @ocaml.doc("<p>The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.</p>
        <p>Default: <code>::/0</code>
         </p>")
  @as("LocalIpv6NetworkCidr")
  localIpv6NetworkCidr: option<string_>,
  @ocaml.doc("<p>The IPv4 CIDR on the Amazon Web Services side of the VPN connection.</p>
        <p>Default: <code>0.0.0.0/0</code>
         </p>")
  @as("RemoteIpv4NetworkCidr")
  remoteIpv4NetworkCidr: option<string_>,
  @ocaml.doc("<p>The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.</p>
        <p>Default: <code>0.0.0.0/0</code>
         </p>")
  @as("LocalIpv4NetworkCidr")
  localIpv4NetworkCidr: option<string_>,
  @ocaml.doc("<p>The tunnel options for the VPN connection.</p>") @as("TunnelOptions")
  tunnelOptions: option<vpnTunnelOptionsSpecificationsList>,
  @ocaml.doc("<p>Indicate whether the VPN tunnels process IPv4 or IPv6 traffic.</p>
        <p>Default: <code>ipv4</code>
         </p>")
  @as("TunnelInsideIpVersion")
  tunnelInsideIpVersion: option<tunnelInsideIpVersion>,
  @ocaml.doc("<p>Indicate whether the VPN connection uses static routes only. If you are creating a VPN
            connection for a device that does not support BGP, you must specify <code>true</code>.
            Use <a>CreateVpnConnectionRoute</a> to create a static route.</p>
        <p>Default: <code>false</code>
         </p>")
  @as("StaticRoutesOnly")
  staticRoutesOnly: option<boolean_>,
  @ocaml.doc("<p>Indicate whether to enable acceleration for the VPN connection.</p>
        <p>Default: <code>false</code>
         </p>")
  @as("EnableAcceleration")
  enableAcceleration: option<boolean_>,
}
@ocaml.doc("<p>Describes VPN connection options.</p>")
type vpnConnectionOptions = {
  @ocaml.doc("<p>Indicates the VPN tunnel options.</p>") @as("TunnelOptions")
  tunnelOptions: option<tunnelOptionsList>,
  @ocaml.doc("<p>Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.</p>")
  @as("TunnelInsideIpVersion")
  tunnelInsideIpVersion: option<tunnelInsideIpVersion>,
  @ocaml.doc("<p>The IPv6 CIDR on the Amazon Web Services side of the VPN connection.</p>")
  @as("RemoteIpv6NetworkCidr")
  remoteIpv6NetworkCidr: option<string_>,
  @ocaml.doc(
    "<p>The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.</p>"
  )
  @as("LocalIpv6NetworkCidr")
  localIpv6NetworkCidr: option<string_>,
  @ocaml.doc("<p>The IPv4 CIDR on the Amazon Web Services side of the VPN connection.</p>")
  @as("RemoteIpv4NetworkCidr")
  remoteIpv4NetworkCidr: option<string_>,
  @ocaml.doc(
    "<p>The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.</p>"
  )
  @as("LocalIpv4NetworkCidr")
  localIpv4NetworkCidr: option<string_>,
  @ocaml.doc("<p>Indicates whether the VPN connection uses static routes only. Static routes must be
            used for devices that don't support BGP.</p>")
  @as("StaticRoutesOnly")
  staticRoutesOnly: option<boolean_>,
  @ocaml.doc("<p>Indicates whether acceleration is enabled for the VPN connection.</p>")
  @as("EnableAcceleration")
  enableAcceleration: option<boolean_>,
}
type vpcPeeringConnectionList = array<vpcPeeringConnection>
type vpcList = array<vpc>
type volumeStatusList = array<volumeStatusItem>
type transitGatewayConnectPeerList = array<transitGatewayConnectPeer>
type trafficMirrorFilterSet = array<trafficMirrorFilter>
type subnetList = array<subnet>
@ocaml.doc("<p>Describes a stale security group (a security group that contains stale rules).</p>")
type staleSecurityGroup = {
  @ocaml.doc("<p>The ID of the VPC for the security group.</p>") @as("VpcId")
  vpcId: option<string_>,
  @ocaml.doc("<p>Information about the stale outbound rules in the security group.</p>")
  @as("StaleIpPermissionsEgress")
  staleIpPermissionsEgress: option<staleIpPermissionSet>,
  @ocaml.doc("<p>Information about the stale inbound rules in the security group.</p>")
  @as("StaleIpPermissions")
  staleIpPermissions: option<staleIpPermissionSet>,
  @ocaml.doc("<p>The name of the security group.</p>") @as("GroupName") groupName: option<string_>,
  @ocaml.doc("<p>The ID of the security group.</p>") @as("GroupId") groupId: option<string_>,
  @ocaml.doc("<p>The description of the security group.</p>") @as("Description")
  description: option<string_>,
}
@ocaml.doc("<p>Describes the launch specification for one or more Spot Instances. If you include
            On-Demand capacity in your fleet request or want to specify an EFA network device, you
            can't use <code>SpotFleetLaunchSpecification</code>; you must use <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_LaunchTemplateConfig.html\">LaunchTemplateConfig</a>.</p>")
type spotFleetLaunchSpecification = {
  @ocaml.doc("<p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will
         identify instance types with those attributes.</p>
         <note>
            <p>If you specify <code>InstanceRequirements</code>, you can't specify
               <code>InstanceTypes</code>.</p>
         </note>")
  @as("InstanceRequirements")
  instanceRequirements: option<instanceRequirements>,
  @ocaml.doc("<p>The tags to apply during creation.</p>") @as("TagSpecifications")
  tagSpecifications: option<spotFleetTagSpecificationList>,
  @ocaml.doc("<p>The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms of instances, or a performance characteristic such as vCPUs, memory, or I/O.</p> 
         <p>If the target capacity divided by this value is not a whole number, Amazon EC2 rounds the number of instances to the next whole number. If this value is not specified, the default is 1.</p>")
  @as("WeightedCapacity")
  weightedCapacity: option<double>,
  @ocaml.doc("<p>The Base64-encoded user data that instances use when starting up.</p>")
  @as("UserData")
  userData: option<string_>,
  @ocaml.doc("<p>The IDs of the subnets in which to launch the instances. To specify multiple subnets, separate
          them using commas; for example, \"subnet-1234abcdeexample1, subnet-0987cdef6example2\".</p>")
  @as("SubnetId")
  subnetId: option<subnetId>,
  @ocaml.doc("<p>The maximum price per unit hour that you are willing to pay for a Spot Instance. 
          If this value is not specified, the default is the Spot price specified for the fleet.
          To determine the Spot price per unit hour, divide the Spot price by the
          value of <code>WeightedCapacity</code>.</p>")
  @as("SpotPrice")
  spotPrice: option<string_>,
  @ocaml.doc("<p>The ID of the RAM disk. Some kernels require additional drivers at launch. Check the kernel 
          requirements for information about whether you need to specify a RAM disk. To find kernel 
          requirements, refer to the Amazon Web Services Resource Center and search for the kernel ID.</p>")
  @as("RamdiskId")
  ramdiskId: option<string_>,
  @ocaml.doc("<p>The placement information.</p>") @as("Placement") placement: option<spotPlacement>,
  @ocaml.doc("<p>One or more network interfaces. If you specify a network interface, you must specify 
          subnet IDs and security group IDs using the network interface.</p>
         <note>
            <p>
               <code>SpotFleetLaunchSpecification</code> currently does not support Elastic Fabric Adapter (EFA). To specify an EFA, you must use <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_LaunchTemplateConfig.html\">LaunchTemplateConfig</a>.</p>
         </note>")
  @as("NetworkInterfaces")
  networkInterfaces: option<instanceNetworkInterfaceSpecificationList>,
  @ocaml.doc("<p>Enable or disable monitoring for the instances.</p>") @as("Monitoring")
  monitoring: option<spotFleetMonitoring>,
  @ocaml.doc("<p>The name of the key pair.</p>") @as("KeyName") keyName: option<keyPairName>,
  @ocaml.doc("<p>The ID of the kernel.</p>") @as("KernelId") kernelId: option<string_>,
  @ocaml.doc("<p>The instance type.</p>") @as("InstanceType") instanceType: option<instanceType>,
  @ocaml.doc("<p>The ID of the AMI.</p>") @as("ImageId") imageId: option<imageId>,
  @ocaml.doc("<p>The IAM instance profile.</p>") @as("IamInstanceProfile")
  iamInstanceProfile: option<iamInstanceProfileSpecification>,
  @ocaml.doc("<p>Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p>
         <p>Default: <code>false</code>
         </p>")
  @as("EbsOptimized")
  ebsOptimized: option<boolean_>,
  @ocaml.doc("<p>One or more block devices that are mapped to the Spot Instances. You can't specify both
            a snapshot ID and an encryption value. This is because only blank volumes can be
            encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its
            encryption status is used for the volume encryption status.</p>")
  @as("BlockDeviceMappings")
  blockDeviceMappings: option<blockDeviceMappingList>,
  @ocaml.doc("<p>Deprecated.</p>") @as("AddressingType") addressingType: option<string_>,
  @ocaml.doc(
    "<p>One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.</p>"
  )
  @as("SecurityGroups")
  securityGroups: option<groupIdentifierList>,
}
@ocaml.doc("<p>Describes a security group.</p>")
type securityGroup = {
  @ocaml.doc("<p>[VPC only] The ID of the VPC for the security group.</p>") @as("VpcId")
  vpcId: option<string_>,
  @ocaml.doc("<p>Any tags assigned to the security group.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>[VPC only] The outbound rules associated with the security group.</p>")
  @as("IpPermissionsEgress")
  ipPermissionsEgress: option<ipPermissionList>,
  @ocaml.doc("<p>The ID of the security group.</p>") @as("GroupId") groupId: option<string_>,
  @ocaml.doc("<p>The Amazon Web Services account ID of the owner of the security group.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The inbound rules associated with the security group.</p>") @as("IpPermissions")
  ipPermissions: option<ipPermissionList>,
  @ocaml.doc("<p>The name of the security group.</p>") @as("GroupName") groupName: option<string_>,
  @ocaml.doc("<p>A description of the security group.</p>") @as("Description")
  description: option<string_>,
}
@ocaml.doc("<p>Describes the launch specification for a Scheduled Instance.</p>
         <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet.
          You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p>")
type scheduledInstancesLaunchSpecification = {
  @ocaml.doc("<p>The base64-encoded MIME user data.</p>") @as("UserData") userData: option<string_>,
  @ocaml.doc("<p>The ID of the subnet in which to launch the instances.</p>") @as("SubnetId")
  subnetId: option<subnetId>,
  @ocaml.doc("<p>The IDs of the security groups.</p>") @as("SecurityGroupIds")
  securityGroupIds: option<scheduledInstancesSecurityGroupIdSet>,
  @ocaml.doc("<p>The ID of the RAM disk.</p>") @as("RamdiskId") ramdiskId: option<ramdiskId>,
  @ocaml.doc("<p>The placement information.</p>") @as("Placement")
  placement: option<scheduledInstancesPlacement>,
  @ocaml.doc("<p>The network interfaces.</p>") @as("NetworkInterfaces")
  networkInterfaces: option<scheduledInstancesNetworkInterfaceSet>,
  @ocaml.doc("<p>Enable or disable monitoring for the instances.</p>") @as("Monitoring")
  monitoring: option<scheduledInstancesMonitoring>,
  @ocaml.doc("<p>The name of the key pair.</p>") @as("KeyName") keyName: option<keyPairName>,
  @ocaml.doc("<p>The ID of the kernel.</p>") @as("KernelId") kernelId: option<kernelId>,
  @ocaml.doc("<p>The instance type.</p>") @as("InstanceType") instanceType: option<string_>,
  @ocaml.doc("<p>The ID of the Amazon Machine Image (AMI).</p>") @as("ImageId") imageId: imageId,
  @ocaml.doc("<p>The IAM instance profile.</p>") @as("IamInstanceProfile")
  iamInstanceProfile: option<scheduledInstancesIamInstanceProfile>,
  @ocaml.doc("<p>Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p>
         <p>Default: <code>false</code>
         </p>")
  @as("EbsOptimized")
  ebsOptimized: option<boolean_>,
  @ocaml.doc("<p>The block device mapping entries.</p>") @as("BlockDeviceMappings")
  blockDeviceMappings: option<scheduledInstancesBlockDeviceMappingSet>,
}
type routeTableList = array<routeTable>
@ocaml.doc("<p>The information for a launch template. </p>")
type responseLaunchTemplateData = {
  @ocaml.doc("<p>The maintenance options for your instance.</p>") @as("MaintenanceOptions")
  maintenanceOptions: option<launchTemplateInstanceMaintenanceOptions>,
  @ocaml.doc("<p>The options for the instance hostname.</p>") @as("PrivateDnsNameOptions")
  privateDnsNameOptions: option<launchTemplatePrivateDnsNameOptions>,
  @ocaml.doc("<p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will
         identify instance types with these attributes.</p>
         <p>If you specify <code>InstanceRequirements</code>, you can't specify
         <code>InstanceTypes</code>.</p>")
  @as("InstanceRequirements")
  instanceRequirements: option<instanceRequirements>,
  @ocaml.doc(
    "<p>Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.</p>"
  )
  @as("EnclaveOptions")
  enclaveOptions: option<launchTemplateEnclaveOptions>,
  @ocaml.doc("<p>The metadata options for the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\">Instance metadata and user data</a> in the
                <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
  @as("MetadataOptions")
  metadataOptions: option<launchTemplateInstanceMetadataOptions>,
  @ocaml.doc("<p>Indicates whether an instance is configured for hibernation. For more information, see
                <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html\">Hibernate
                your instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
  @as("HibernationOptions")
  hibernationOptions: option<launchTemplateHibernationOptions>,
  @ocaml.doc("<p>The license configurations.</p>") @as("LicenseSpecifications")
  licenseSpecifications: option<launchTemplateLicenseList>,
  @ocaml.doc("<p>Information about the Capacity Reservation targeting option.</p>")
  @as("CapacityReservationSpecification")
  capacityReservationSpecification: option<launchTemplateCapacityReservationSpecificationResponse>,
  @ocaml.doc("<p>The CPU options for the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html\">Optimizing CPU options</a> in the <i>Amazon Elastic Compute Cloud User
                Guide</i>.</p>")
  @as("CpuOptions")
  cpuOptions: option<launchTemplateCpuOptions>,
  @ocaml.doc("<p>The credit option for CPU usage of the instance.</p>") @as("CreditSpecification")
  creditSpecification: option<creditSpecification>,
  @ocaml.doc("<p>The market (purchasing) option for the instances.</p>")
  @as("InstanceMarketOptions")
  instanceMarketOptions: option<launchTemplateInstanceMarketOptions>,
  @ocaml.doc("<p>The security group names.</p>") @as("SecurityGroups")
  securityGroups: option<valueStringList>,
  @ocaml.doc("<p>The security group IDs.</p>") @as("SecurityGroupIds")
  securityGroupIds: option<valueStringList>,
  @ocaml.doc("<p> The elastic inference accelerator for the instance. </p>")
  @as("ElasticInferenceAccelerators")
  elasticInferenceAccelerators: option<launchTemplateElasticInferenceAcceleratorResponseList>,
  @ocaml.doc("<p>The elastic GPU specification.</p>") @as("ElasticGpuSpecifications")
  elasticGpuSpecifications: option<elasticGpuSpecificationResponseList>,
  @ocaml.doc("<p>The tags.</p>") @as("TagSpecifications")
  tagSpecifications: option<launchTemplateTagSpecificationList>,
  @ocaml.doc("<p>The user data for the instance. </p>") @as("UserData") userData: option<string_>,
  @ocaml.doc("<p>Indicates whether an instance stops or terminates when you initiate shutdown from the
            instance (using the operating system command for system shutdown).</p>")
  @as("InstanceInitiatedShutdownBehavior")
  instanceInitiatedShutdownBehavior: option<shutdownBehavior>,
  @ocaml.doc("<p>If set to <code>true</code>, indicates that the instance cannot be terminated using
            the Amazon EC2 console, command line tool, or API.</p>")
  @as("DisableApiTermination")
  disableApiTermination: option<boolean_>,
  @ocaml.doc("<p>The ID of the RAM disk, if applicable.</p>") @as("RamDiskId")
  ramDiskId: option<string_>,
  @ocaml.doc("<p>The placement of the instance.</p>") @as("Placement")
  placement: option<launchTemplatePlacement>,
  @ocaml.doc("<p>The monitoring for the instance.</p>") @as("Monitoring")
  monitoring: option<launchTemplatesMonitoring>,
  @ocaml.doc("<p>The name of the key pair.</p>") @as("KeyName") keyName: option<string_>,
  @ocaml.doc("<p>The instance type.</p>") @as("InstanceType") instanceType: option<instanceType>,
  @ocaml.doc("<p>The ID of the AMI that was used to launch the instance.</p>") @as("ImageId")
  imageId: option<string_>,
  @ocaml.doc("<p>The network interfaces.</p>") @as("NetworkInterfaces")
  networkInterfaces: option<launchTemplateInstanceNetworkInterfaceSpecificationList>,
  @ocaml.doc("<p>The block device mappings.</p>") @as("BlockDeviceMappings")
  blockDeviceMappings: option<launchTemplateBlockDeviceMappingList>,
  @ocaml.doc("<p>The IAM instance profile.</p>") @as("IamInstanceProfile")
  iamInstanceProfile: option<launchTemplateIamInstanceProfileSpecification>,
  @ocaml.doc("<p>Indicates whether the instance is optimized for Amazon EBS I/O. </p>")
  @as("EbsOptimized")
  ebsOptimized: option<boolean_>,
  @ocaml.doc("<p>The ID of the kernel, if applicable.</p>") @as("KernelId")
  kernelId: option<string_>,
}
type reservedInstancesModificationList = array<reservedInstancesModification>
@ocaml.doc("<p>Describes the launch specification for an instance.</p>")
type requestSpotLaunchSpecification = {
  @ocaml.doc("<p>The Base64-encoded user data for the instance. User data is limited to 16 KB.</p>")
  @as("UserData")
  userData: option<string_>,
  @ocaml.doc("<p>The ID of the subnet in which to launch the instance.</p>") @as("SubnetId")
  subnetId: option<subnetId>,
  @ocaml.doc("<p>The ID of the RAM disk.</p>") @as("RamdiskId") ramdiskId: option<ramdiskId>,
  @ocaml.doc("<p>The placement information for the instance.</p>") @as("Placement")
  placement: option<spotPlacement>,
  @ocaml.doc("<p>One or more network interfaces. If you specify a network interface, you must specify 
           subnet IDs and security group IDs using the network interface.</p>")
  @as("NetworkInterfaces")
  networkInterfaces: option<instanceNetworkInterfaceSpecificationList>,
  @ocaml.doc("<p>Indicates whether basic or detailed monitoring is enabled for the instance.</p>
         <p>Default: Disabled</p>")
  @as("Monitoring")
  monitoring: option<runInstancesMonitoringEnabled>,
  @ocaml.doc("<p>The name of the key pair.</p>") @as("KeyName") keyName: option<keyPairName>,
  @ocaml.doc("<p>The ID of the kernel.</p>") @as("KernelId") kernelId: option<kernelId>,
  @ocaml.doc("<p>The instance type.</p>") @as("InstanceType") instanceType: option<instanceType>,
  @ocaml.doc("<p>The ID of the AMI.</p>") @as("ImageId") imageId: option<imageId>,
  @ocaml.doc("<p>The IAM instance profile.</p>") @as("IamInstanceProfile")
  iamInstanceProfile: option<iamInstanceProfileSpecification>,
  @ocaml.doc("<p>Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p>
         <p>Default: <code>false</code>
         </p>")
  @as("EbsOptimized")
  ebsOptimized: option<boolean_>,
  @ocaml.doc("<p>One or more block device mapping entries. You can't specify both a snapshot ID and an encryption value. 
           This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, 
           it is not blank and its encryption status is used for the volume encryption status.</p>")
  @as("BlockDeviceMappings")
  blockDeviceMappings: option<blockDeviceMappingList>,
  @ocaml.doc("<p>Deprecated.</p>") @as("AddressingType") addressingType: option<string_>,
  @ocaml.doc(
    "<p>One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.</p>"
  )
  @as("SecurityGroups")
  securityGroups: option<requestSpotLaunchSpecificationSecurityGroupList>,
  @ocaml.doc("<p>One or more security group IDs.</p>") @as("SecurityGroupIds")
  securityGroupIds: option<requestSpotLaunchSpecificationSecurityGroupIdList>,
}
@ocaml.doc("<p>The information to include in the launch template.</p>")
type requestLaunchTemplateData = {
  @ocaml.doc("<p>The maintenance options for the instance.</p>") @as("MaintenanceOptions")
  maintenanceOptions: option<launchTemplateInstanceMaintenanceOptionsRequest>,
  @ocaml.doc("<p>The options for the instance hostname. The default values are inherited from the
            subnet.</p>")
  @as("PrivateDnsNameOptions")
  privateDnsNameOptions: option<launchTemplatePrivateDnsNameOptionsRequest>,
  @ocaml.doc("<p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will
         identify instance types with these attributes.</p>
         <p>If you specify <code>InstanceRequirements</code>, you can't specify
            <code>InstanceTypes</code>.</p>")
  @as("InstanceRequirements")
  instanceRequirements: option<instanceRequirementsRequest>,
  @ocaml.doc("<p>Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For more
            information, see <a href=\"https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html\"> What is Amazon Web Services Nitro Enclaves?</a>
            in the <i>Amazon Web Services Nitro Enclaves User Guide</i>.</p>
        <p>You can't enable Amazon Web Services Nitro Enclaves and hibernation on the same instance.</p>")
  @as("EnclaveOptions")
  enclaveOptions: option<launchTemplateEnclaveOptionsRequest>,
  @ocaml.doc("<p>The metadata options for the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\">Instance metadata and user data</a> in the
                <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
  @as("MetadataOptions")
  metadataOptions: option<launchTemplateInstanceMetadataOptionsRequest>,
  @ocaml.doc("<p>Indicates whether an instance is enabled for hibernation. This parameter is valid only
            if the instance meets the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites\">hibernation
                prerequisites</a>. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html\">Hibernate your instance</a> in the
                <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
  @as("HibernationOptions")
  hibernationOptions: option<launchTemplateHibernationOptionsRequest>,
  @ocaml.doc("<p>The license configurations.</p>") @as("LicenseSpecifications")
  licenseSpecifications: option<launchTemplateLicenseSpecificationListRequest>,
  @ocaml.doc("<p>The Capacity Reservation targeting option. If you do not specify this parameter, the
            instance's Capacity Reservation preference defaults to <code>open</code>, which enables
            it to run in any open Capacity Reservation that has matching attributes (instance type,
            platform, Availability Zone).</p>")
  @as("CapacityReservationSpecification")
  capacityReservationSpecification: option<launchTemplateCapacityReservationSpecificationRequest>,
  @ocaml.doc("<p>The CPU options for the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html\">Optimizing CPU Options</a> in the <i>Amazon Elastic Compute Cloud User
                Guide</i>.</p>")
  @as("CpuOptions")
  cpuOptions: option<launchTemplateCpuOptionsRequest>,
  @ocaml.doc("<p>The credit option for CPU usage of the instance. Valid for T2, T3, or T3a instances
            only.</p>")
  @as("CreditSpecification")
  creditSpecification: option<creditSpecificationRequest>,
  @ocaml.doc("<p>The market (purchasing) option for the instances.</p>")
  @as("InstanceMarketOptions")
  instanceMarketOptions: option<launchTemplateInstanceMarketOptionsRequest>,
  @ocaml.doc("<p>[EC2-Classic, default VPC] One or more security group names. For a nondefault VPC, you
            must use security group IDs instead. You cannot specify both a security group ID and
            security name in the same request.</p>")
  @as("SecurityGroups")
  securityGroups: option<securityGroupStringList>,
  @ocaml.doc("<p>One or more security group IDs. You can create a security group using <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html\">CreateSecurityGroup</a>. You cannot specify both a security group ID and
            security name in the same request.</p>")
  @as("SecurityGroupIds")
  securityGroupIds: option<securityGroupIdStringList>,
  @ocaml.doc("<p> The elastic inference accelerator for the instance. </p>")
  @as("ElasticInferenceAccelerators")
  elasticInferenceAccelerators: option<launchTemplateElasticInferenceAcceleratorList>,
  @ocaml.doc("<p>An elastic GPU to associate with the instance.</p>")
  @as("ElasticGpuSpecifications")
  elasticGpuSpecifications: option<elasticGpuSpecificationList>,
  @ocaml.doc("<p>The tags to apply to the resources during launch. You can only tag instances and
            volumes on launch. The specified tags are applied to all instances or volumes that are
            created during launch. To tag a resource after it has been created, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html\">CreateTags</a>.</p>")
  @as("TagSpecifications")
  tagSpecifications: option<launchTemplateTagSpecificationRequestList>,
  @ocaml.doc("<p>The user data to make available to the instance. You must provide base64-encoded text.
            User data is limited to 16 KB. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html\">Running Commands on Your Linux Instance
                at Launch</a> (Linux) or <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data\">Adding User Data</a> (Windows).</p>

        <p>If you are creating the launch template for use with Batch, the user
            data must be provided in the <a href=\"https://cloudinit.readthedocs.io/en/latest/topics/format.html#mime-multi-part-archive\"> MIME multi-part archive format</a>. For more information, see <a href=\"https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html\">Amazon EC2 user data in launch templates</a> in the <i>Batch User Guide</i>.</p>")
  @as("UserData")
  userData: option<string_>,
  @ocaml.doc("<p>Indicates whether an instance stops or terminates when you initiate shutdown from the
            instance (using the operating system command for system shutdown).</p>
        <p>Default: <code>stop</code>
        </p>")
  @as("InstanceInitiatedShutdownBehavior")
  instanceInitiatedShutdownBehavior: option<shutdownBehavior>,
  @ocaml.doc("<p>If you set this parameter to <code>true</code>, you can't terminate the instance using
            the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after
            launch, use <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html\">ModifyInstanceAttribute</a>. Alternatively, if you set
                <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can
            terminate the instance by running the shutdown command from the instance.</p>")
  @as("DisableApiTermination")
  disableApiTermination: option<boolean_>,
  @ocaml.doc("<p>The ID of the RAM disk.</p>
        <important>
            <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more
                information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html\">User Provided
                    Kernels</a> in the <i>Amazon Elastic Compute Cloud User
                    Guide</i>.</p>
        </important>")
  @as("RamDiskId")
  ramDiskId: option<ramdiskId>,
  @ocaml.doc("<p>The placement for the instance.</p>") @as("Placement")
  placement: option<launchTemplatePlacementRequest>,
  @ocaml.doc("<p>The monitoring for the instance.</p>") @as("Monitoring")
  monitoring: option<launchTemplatesMonitoringRequest>,
  @ocaml.doc("<p>The name of the key pair. You can create a key pair using <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html\">CreateKeyPair</a> or
                <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html\">ImportKeyPair</a>.</p>
        <important>
            <p>If you do not specify a key pair, you can't connect to the instance unless you
                choose an AMI that is configured to allow users another way to log in.</p>
        </important>")
  @as("KeyName")
  keyName: option<keyPairName>,
  @ocaml.doc("<p>The instance type. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\">Instance Types</a> in the
                <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
        <p>If you specify <code>InstanceTypes</code>, you can't specify
                <code>InstanceRequirements</code>.</p>")
  @as("InstanceType")
  instanceType: option<instanceType>,
  @ocaml.doc("<p>The ID of the AMI.</p>") @as("ImageId") imageId: option<imageId>,
  @ocaml.doc("<p>One or more network interfaces. If you specify a network interface, you must specify
            any security groups and subnets as part of the network interface.</p>")
  @as("NetworkInterfaces")
  networkInterfaces: option<launchTemplateInstanceNetworkInterfaceSpecificationRequestList>,
  @ocaml.doc("<p>The block device mapping.</p>") @as("BlockDeviceMappings")
  blockDeviceMappings: option<launchTemplateBlockDeviceMappingRequestList>,
  @ocaml.doc("<p>The name or Amazon Resource Name (ARN) of an IAM instance profile.</p>")
  @as("IamInstanceProfile")
  iamInstanceProfile: option<launchTemplateIamInstanceProfileSpecificationRequest>,
  @ocaml.doc("<p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization
            provides dedicated throughput to Amazon EBS and an optimized configuration stack to
            provide optimal Amazon EBS I/O performance. This optimization isn't available with all
            instance types. Additional usage charges apply when using an EBS-optimized
            instance.</p>")
  @as("EbsOptimized")
  ebsOptimized: option<boolean_>,
  @ocaml.doc("<p>The ID of the kernel.</p>
        <important>
            <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more
                information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html\">User Provided
                    Kernels</a> in the <i>Amazon Elastic Compute Cloud User
                    Guide</i>.</p>
        </important>")
  @as("KernelId")
  kernelId: option<kernelId>,
}
type pathComponentList = array<pathComponent>
type networkInterfaceList = array<networkInterface>
type networkAclList = array<networkAcl>
@ocaml.doc("<p>Describes a launch template and overrides.</p>")
type launchTemplateConfig = {
  @ocaml.doc("<p>Any parameters that you specify override the same parameters in the launch
            template.</p>")
  @as("Overrides")
  overrides: option<launchTemplateOverridesList>,
  @ocaml.doc("<p>The launch template.</p>") @as("LaunchTemplateSpecification")
  launchTemplateSpecification: option<fleetLaunchTemplateSpecification>,
}
@ocaml.doc("<p>Describes the launch specification for an instance.</p>")
type launchSpecification = {
  @as("Monitoring") monitoring: option<runInstancesMonitoringEnabled>,
  @ocaml.doc("<p>The ID of the subnet in which to launch the instance.</p>") @as("SubnetId")
  subnetId: option<string_>,
  @ocaml.doc("<p>The ID of the RAM disk.</p>") @as("RamdiskId") ramdiskId: option<string_>,
  @ocaml.doc("<p>The placement information for the instance.</p>") @as("Placement")
  placement: option<spotPlacement>,
  @ocaml.doc("<p>One or more network interfaces. If you specify a network interface, you must specify 
           subnet IDs and security group IDs using the network interface.</p>")
  @as("NetworkInterfaces")
  networkInterfaces: option<instanceNetworkInterfaceSpecificationList>,
  @ocaml.doc("<p>The name of the key pair.</p>") @as("KeyName") keyName: option<string_>,
  @ocaml.doc("<p>The ID of the kernel.</p>") @as("KernelId") kernelId: option<string_>,
  @ocaml.doc("<p>The instance type.</p>") @as("InstanceType") instanceType: option<instanceType>,
  @ocaml.doc("<p>The ID of the AMI.</p>") @as("ImageId") imageId: option<string_>,
  @ocaml.doc("<p>The IAM instance profile.</p>") @as("IamInstanceProfile")
  iamInstanceProfile: option<iamInstanceProfileSpecification>,
  @ocaml.doc("<p>Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p>
         <p>Default: <code>false</code>
         </p>")
  @as("EbsOptimized")
  ebsOptimized: option<boolean_>,
  @ocaml.doc("<p>One or more block device mapping entries.</p>") @as("BlockDeviceMappings")
  blockDeviceMappings: option<blockDeviceMappingList>,
  @ocaml.doc("<p>Deprecated.</p>") @as("AddressingType") addressingType: option<string_>,
  @ocaml.doc(
    "<p>One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.</p>"
  )
  @as("SecurityGroups")
  securityGroups: option<groupIdentifierList>,
  @ocaml.doc("<p>The Base64-encoded user data for the instance.</p>") @as("UserData")
  userData: option<string_>,
}
@ocaml.doc("<p>Describes the instance type.</p>")
type instanceTypeInfo = {
  @ocaml.doc("<p>The supported boot modes. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html\">Boot modes</a> in the
   <i>Amazon EC2 User Guide</i>.</p>")
  @as("SupportedBootModes")
  supportedBootModes: option<bootModeTypeList>,
  @ocaml.doc("<p>Indicates whether auto recovery is supported.</p>") @as("AutoRecoverySupported")
  autoRecoverySupported: option<autoRecoveryFlag>,
  @ocaml.doc("<p>Indicates whether Dedicated Hosts are supported on the instance type.</p>")
  @as("DedicatedHostsSupported")
  dedicatedHostsSupported: option<dedicatedHostFlag>,
  @ocaml.doc("<p>Indicates whether the instance type is a burstable performance instance type.</p>")
  @as("BurstablePerformanceSupported")
  burstablePerformanceSupported: option<burstablePerformanceFlag>,
  @ocaml.doc("<p>Indicates whether On-Demand hibernation is supported.</p>")
  @as("HibernationSupported")
  hibernationSupported: option<hibernationFlag>,
  @ocaml.doc("<p>Describes the Inference accelerator settings for the instance type.</p>")
  @as("InferenceAcceleratorInfo")
  inferenceAcceleratorInfo: option<inferenceAcceleratorInfo>,
  @ocaml.doc("<p>Describes the placement group settings for the instance type.</p>")
  @as("PlacementGroupInfo")
  placementGroupInfo: option<placementGroupInfo>,
  @ocaml.doc("<p>Describes the FPGA accelerator settings for the instance type.</p>")
  @as("FpgaInfo")
  fpgaInfo: option<fpgaInfo>,
  @ocaml.doc("<p>Describes the GPU accelerator settings for the instance type.</p>") @as("GpuInfo")
  gpuInfo: option<gpuInfo>,
  @ocaml.doc("<p>Describes the network settings for the instance type.</p>") @as("NetworkInfo")
  networkInfo: option<networkInfo>,
  @ocaml.doc("<p>Describes the Amazon EBS settings for the instance type.</p>") @as("EbsInfo")
  ebsInfo: option<ebsInfo>,
  @ocaml.doc("<p>Describes the instance storage for the instance type.</p>")
  @as("InstanceStorageInfo")
  instanceStorageInfo: option<instanceStorageInfo>,
  @ocaml.doc("<p>Indicates whether instance storage is supported.</p>")
  @as("InstanceStorageSupported")
  instanceStorageSupported: option<instanceStorageFlag>,
  @ocaml.doc("<p>Describes the memory for the instance type.</p>") @as("MemoryInfo")
  memoryInfo: option<memoryInfo>,
  @ocaml.doc("<p>Describes the vCPU configurations for the instance type.</p>") @as("VCpuInfo")
  vcpuInfo: option<vcpuInfo>,
  @ocaml.doc("<p>Describes the processor.</p>") @as("ProcessorInfo")
  processorInfo: option<processorInfo>,
  @ocaml.doc("<p>The hypervisor for the instance type.</p>") @as("Hypervisor")
  hypervisor: option<instanceTypeHypervisor>,
  @ocaml.doc("<p>Indicates whether the instance is a bare metal instance type.</p>")
  @as("BareMetal")
  bareMetal: option<bareMetalFlag>,
  @ocaml.doc("<p>The supported virtualization types.</p>") @as("SupportedVirtualizationTypes")
  supportedVirtualizationTypes: option<virtualizationTypeList>,
  @ocaml.doc("<p>The supported root device types.</p>") @as("SupportedRootDeviceTypes")
  supportedRootDeviceTypes: option<rootDeviceTypeList>,
  @ocaml.doc("<p>Indicates whether the instance type is offered for spot or On-Demand.</p>")
  @as("SupportedUsageClasses")
  supportedUsageClasses: option<usageClassTypeList>,
  @ocaml.doc("<p>Indicates whether the instance type is eligible for the free tier.</p>")
  @as("FreeTierEligible")
  freeTierEligible: option<freeTierEligibleFlag>,
  @ocaml.doc("<p>Indicates whether the instance type is current generation.</p>")
  @as("CurrentGeneration")
  currentGeneration: option<currentGenerationFlag>,
  @ocaml.doc(
    "<p>The instance type. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p>"
  )
  @as("InstanceType")
  instanceType: option<instanceType>,
}
type instanceStatusList = array<instanceStatus>
type instanceNetworkInterfaceList = array<instanceNetworkInterface>
type instanceEventWindowSet = array<instanceEventWindow>
type importImageTaskList = array<importImageTask>
type imageList = array<image>
type hostList = array<host>
@ocaml.doc("<p>Describes a launch template and overrides.</p>")
type fleetLaunchTemplateConfigRequest = {
  @ocaml.doc("<p>Any parameters that you specify override the same parameters in the launch
         template.</p>
         <p>For fleets of type <code>request</code> and <code>maintain</code>, a maximum of 300
         items is allowed across all launch templates.</p>")
  @as("Overrides")
  overrides: option<fleetLaunchTemplateOverridesListRequest>,
  @ocaml.doc("<p>The launch template to use. You must specify either the launch template ID or launch
         template name in the request. </p>")
  @as("LaunchTemplateSpecification")
  launchTemplateSpecification: option<fleetLaunchTemplateSpecificationRequest>,
}
@ocaml.doc("<p>Describes a launch template and overrides.</p>")
type fleetLaunchTemplateConfig = {
  @ocaml.doc("<p>Any parameters that you specify override the same parameters in the launch
         template.</p>")
  @as("Overrides")
  overrides: option<fleetLaunchTemplateOverridesList>,
  @ocaml.doc("<p>The launch template.</p>") @as("LaunchTemplateSpecification")
  launchTemplateSpecification: option<fleetLaunchTemplateSpecification>,
}
type endpointSet = array<clientVpnEndpoint>
type enableFastSnapshotRestoreErrorSet = array<enableFastSnapshotRestoreErrorItem>
type disableFastSnapshotRestoreErrorSet = array<disableFastSnapshotRestoreErrorItem>
@ocaml.doc("<p>Describes a set of DHCP options.</p>")
type dhcpOptions = {
  @ocaml.doc("<p>Any tags assigned to the DHCP options set.</p>") @as("Tags")
  tags: option<tagList_>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the DHCP options set.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The ID of the set of DHCP options.</p>") @as("DhcpOptionsId")
  dhcpOptionsId: option<string_>,
  @ocaml.doc("<p>One or more DHCP options in the set.</p>") @as("DhcpConfigurations")
  dhcpConfigurations: option<dhcpConfigurationList>,
}
@ocaml.doc("<p>Describes the instances that were launched by the fleet.</p>")
type describeFleetsInstances = {
  @ocaml.doc("<p>The value is <code>Windows</code> for Windows instances. Otherwise, the value is
         blank.</p>")
  @as("Platform")
  platform: option<platformValues>,
  @ocaml.doc("<p>The instance type.</p>") @as("InstanceType") instanceType: option<instanceType>,
  @ocaml.doc("<p>The IDs of the instances.</p>") @as("InstanceIds")
  instanceIds: option<instanceIdsSet>,
  @ocaml.doc(
    "<p>Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.</p>"
  )
  @as("Lifecycle")
  lifecycle: option<instanceLifecycle>,
  @ocaml.doc("<p>The launch templates and overrides that were used for launching the instances. The
         values that you specify in the Overrides replace the values in the launch template.</p>")
  @as("LaunchTemplateAndOverrides")
  launchTemplateAndOverrides: option<launchTemplateAndOverridesResponse>,
}
@ocaml.doc("<p>Describes the instances that could not be launched by the fleet.</p>")
type describeFleetError = {
  @ocaml.doc("<p>The error message that describes why the instance could not be launched. For more
         information about error messages, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html\">Error codes</a>.</p>")
  @as("ErrorMessage")
  errorMessage: option<string_>,
  @ocaml.doc("<p>The error code that indicates why the instance could not be launched. For more
         information about error codes, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html\">Error codes</a>.</p>")
  @as("ErrorCode")
  errorCode: option<string_>,
  @ocaml.doc(
    "<p>Indicates if the instance that could not be launched was a Spot Instance or On-Demand Instance.</p>"
  )
  @as("Lifecycle")
  lifecycle: option<instanceLifecycle>,
  @ocaml.doc("<p>The launch templates and overrides that were used for launching the instances. The
         values that you specify in the Overrides replace the values in the launch template.</p>")
  @as("LaunchTemplateAndOverrides")
  launchTemplateAndOverrides: option<launchTemplateAndOverridesResponse>,
}
@ocaml.doc("<p>Describes the instances that were launched by the fleet.</p>")
type createFleetInstance = {
  @ocaml.doc("<p>The value is <code>Windows</code> for Windows instances. Otherwise, the value is
         blank.</p>")
  @as("Platform")
  platform: option<platformValues>,
  @ocaml.doc("<p>The instance type.</p>") @as("InstanceType") instanceType: option<instanceType>,
  @ocaml.doc("<p>The IDs of the instances.</p>") @as("InstanceIds")
  instanceIds: option<instanceIdsSet>,
  @ocaml.doc(
    "<p>Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.</p>"
  )
  @as("Lifecycle")
  lifecycle: option<instanceLifecycle>,
  @ocaml.doc("<p>The launch templates and overrides that were used for launching the instances. The
         values that you specify in the Overrides replace the values in the launch template.</p>")
  @as("LaunchTemplateAndOverrides")
  launchTemplateAndOverrides: option<launchTemplateAndOverridesResponse>,
}
@ocaml.doc("<p>Describes the instances that could not be launched by the fleet.</p>")
type createFleetError = {
  @ocaml.doc("<p>The error message that describes why the instance could not be launched. For more
         information about error messages, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html\">Error codes</a>.</p>")
  @as("ErrorMessage")
  errorMessage: option<string_>,
  @ocaml.doc("<p>The error code that indicates why the instance could not be launched. For more
         information about error codes, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html\">Error codes</a>.</p>")
  @as("ErrorCode")
  errorCode: option<string_>,
  @ocaml.doc(
    "<p>Indicates if the instance that could not be launched was a Spot Instance or On-Demand Instance.</p>"
  )
  @as("Lifecycle")
  lifecycle: option<instanceLifecycle>,
  @ocaml.doc("<p>The launch templates and overrides that were used for launching the instances. The
         values that you specify in the Overrides replace the values in the launch template.</p>")
  @as("LaunchTemplateAndOverrides")
  launchTemplateAndOverrides: option<launchTemplateAndOverridesResponse>,
}
@ocaml.doc("<p>Describes a conversion task.</p>")
type conversionTask = {
  @ocaml.doc("<p>Any tags assigned to the task.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The status message related to the conversion task.</p>") @as("StatusMessage")
  statusMessage: option<string_>,
  @ocaml.doc("<p>The state of the conversion task.</p>") @as("State")
  state: option<conversionTaskState>,
  @ocaml.doc(
    "<p>If the task is for importing a volume, this contains information about the import volume task.</p>"
  )
  @as("ImportVolume")
  importVolume: option<importVolumeTaskDetails>,
  @ocaml.doc(
    "<p>If the task is for importing an instance, this contains information about the import instance task.</p>"
  )
  @as("ImportInstance")
  importInstance: option<importInstanceTaskDetails>,
  @ocaml.doc("<p>The time when the task expires. If the upload isn't complete before the expiration time, we automatically cancel
   the task.</p>")
  @as("ExpirationTime")
  expirationTime: option<string_>,
  @ocaml.doc("<p>The ID of the conversion task.</p>") @as("ConversionTaskId")
  conversionTaskId: option<string_>,
}
@ocaml.doc("<p>Describes a path.</p>")
type accessScopePathRequest = {
  @ocaml.doc("<p>The through resources.</p>") @as("ThroughResources")
  throughResources: option<throughResourcesStatementRequestList>,
  @ocaml.doc("<p>The destination.</p>") @as("Destination")
  destination: option<pathStatementRequest>,
  @ocaml.doc("<p>The source.</p>") @as("Source") source: option<pathStatementRequest>,
}
@ocaml.doc("<p>Describes a path.</p>")
type accessScopePath = {
  @ocaml.doc("<p>The through resources.</p>") @as("ThroughResources")
  throughResources: option<throughResourcesStatementList>,
  @ocaml.doc("<p>The destination.</p>") @as("Destination") destination: option<pathStatement>,
  @ocaml.doc("<p>The source.</p>") @as("Source") source: option<pathStatement>,
}
@ocaml.doc("<p>Describes a VPN connection.</p>")
type vpnConnection = {
  @ocaml.doc("<p>Information about the VPN tunnel.</p>") @as("VgwTelemetry")
  vgwTelemetry: option<vgwTelemetryList>,
  @ocaml.doc("<p>Any tags assigned to the VPN connection.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The static routes associated with the VPN connection.</p>") @as("Routes")
  routes: option<vpnStaticRouteList>,
  @ocaml.doc("<p>The VPN connection options.</p>") @as("Options")
  options: option<vpnConnectionOptions>,
  @ocaml.doc("<p>The current state of the gateway association.</p>") @as("GatewayAssociationState")
  gatewayAssociationState: option<gatewayAssociationState>,
  @ocaml.doc("<p>The ARN of the core network attachment.</p>") @as("CoreNetworkAttachmentArn")
  coreNetworkAttachmentArn: option<string_>,
  @ocaml.doc("<p>The ARN of the core network.</p>") @as("CoreNetworkArn")
  coreNetworkArn: option<string_>,
  @ocaml.doc("<p>The ID of the transit gateway associated with the VPN connection.</p>")
  @as("TransitGatewayId")
  transitGatewayId: option<string_>,
  @ocaml.doc("<p>The ID of the virtual private gateway at the Amazon Web Services side of the VPN
            connection.</p>")
  @as("VpnGatewayId")
  vpnGatewayId: option<string_>,
  @ocaml.doc("<p>The ID of the VPN connection.</p>") @as("VpnConnectionId")
  vpnConnectionId: option<string_>,
  @ocaml.doc("<p>The type of VPN connection.</p>") @as("Type") type_: option<gatewayType>,
  @ocaml.doc("<p>The current state of the VPN connection.</p>") @as("State")
  state: option<vpnState>,
  @ocaml.doc(
    "<p>The category of the VPN connection. A value of <code>VPN</code> indicates an Amazon Web Services VPN connection. A value of <code>VPN-Classic</code> indicates an Amazon Web Services Classic VPN connection.</p>"
  )
  @as("Category")
  category: option<string_>,
  @ocaml.doc("<p>The ID of the customer gateway at your end of the VPN connection.</p>")
  @as("CustomerGatewayId")
  customerGatewayId: option<string_>,
  @ocaml.doc("<p>The configuration information for the VPN connection's customer gateway (in the native
            XML format). This element is always present in the <a>CreateVpnConnection</a>
            response; however, it's present in the <a>DescribeVpnConnections</a> response
            only if the VPN connection is in the <code>pending</code> or <code>available</code>
            state.</p>")
  @as("CustomerGatewayConfiguration")
  customerGatewayConfiguration: option<string_>,
}
type staleSecurityGroupSet = array<staleSecurityGroup>
@ocaml.doc("<p>Describes a Spot Instance request.</p>")
type spotInstanceRequest = {
  @ocaml.doc("<p>The behavior when a Spot Instance is interrupted.</p>")
  @as("InstanceInterruptionBehavior")
  instanceInterruptionBehavior: option<instanceInterruptionBehavior>,
  @ocaml.doc("<p>The end date of the request, in UTC format
                (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
         <ul>
            <li>
                <p>For a persistent request, the request remains active until the <code>validUntil</code> date
                    and time is reached. Otherwise, the request remains active until you cancel it.
                </p>
            </li>
            <li>
               <p>For a one-time request, the request remains active until all instances launch,
                    the request is canceled, or the <code>validUntil</code> date and time is reached. By default, the
                    request is valid for 7 days from the date the request was created.</p>
           </li>
         </ul>")
  @as("ValidUntil")
  validUntil: option<dateTime>,
  @ocaml.doc("<p>The start date of the request, in UTC format (for example,
                <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
            The request becomes active at this date and time.</p>")
  @as("ValidFrom")
  validFrom: option<dateTime>,
  @ocaml.doc("<p>The Spot Instance request type.</p>") @as("Type") type_: option<spotInstanceType>,
  @ocaml.doc("<p>Any tags assigned to the resource.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The status code and status message describing the Spot Instance request.</p>")
  @as("Status")
  status: option<spotInstanceStatus>,
  @ocaml.doc("<p>The state of the Spot Instance request. Spot status information helps track your Spot
            Instance requests. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html\">Spot status</a> in the
                <i>Amazon EC2 User Guide for Linux Instances</i>.</p>")
  @as("State")
  state: option<spotInstanceState>,
  @ocaml.doc("<p>The maximum price per hour that you are willing to pay for a Spot Instance.</p>")
  @as("SpotPrice")
  spotPrice: option<string_>,
  @ocaml.doc("<p>The ID of the Spot Instance request.</p>") @as("SpotInstanceRequestId")
  spotInstanceRequestId: option<string_>,
  @ocaml.doc("<p>The product description associated with the Spot Instance.</p>")
  @as("ProductDescription")
  productDescription: option<riproductDescription>,
  @ocaml.doc("<p>The Availability Zone in which the request is launched.</p>")
  @as("LaunchedAvailabilityZone")
  launchedAvailabilityZone: option<string_>,
  @ocaml.doc("<p>Additional information for launching instances.</p>") @as("LaunchSpecification")
  launchSpecification: option<launchSpecification>,
  @ocaml.doc(
    "<p>The instance launch group. Launch groups are Spot Instances that launch together and terminate together.</p>"
  )
  @as("LaunchGroup")
  launchGroup: option<string_>,
  @ocaml.doc(
    "<p>The instance ID, if an instance has been launched to fulfill the Spot Instance request.</p>"
  )
  @as("InstanceId")
  instanceId: option<instanceId>,
  @ocaml.doc("<p>The fault codes for the Spot Instance request, if any.</p>") @as("Fault")
  fault: option<spotInstanceStateFault>,
  @ocaml.doc(
    "<p>The date and time when the Spot Instance request was created, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>"
  )
  @as("CreateTime")
  createTime: option<dateTime>,
  @ocaml.doc("<p>Deprecated.</p>") @as("BlockDurationMinutes")
  blockDurationMinutes: option<integer_>,
  @ocaml.doc(
    "<p>The Availability Zone group. If you specify the same Availability Zone group for all Spot Instance requests, all Spot Instances are launched in the same Availability Zone.</p>"
  )
  @as("AvailabilityZoneGroup")
  availabilityZoneGroup: option<string_>,
  @ocaml.doc("<p>Deprecated.</p>") @as("ActualBlockHourlyPrice")
  actualBlockHourlyPrice: option<string_>,
}
type securityGroupList = array<securityGroup>
@ocaml.doc("<p>Describes a network insights analysis.</p>")
type networkInsightsAnalysis = {
  @ocaml.doc("<p>The tags.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>Potential intermediate components.</p>") @as("AlternatePathHints")
  alternatePathHints: option<alternatePathHintList>,
  @ocaml.doc(
    "<p>The explanations. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/reachability/explanation-codes.html\">Reachability Analyzer explanation codes</a>.</p>"
  )
  @as("Explanations")
  explanations: option<explanationList>,
  @ocaml.doc("<p>The components in the path from destination to source.</p>")
  @as("ReturnPathComponents")
  returnPathComponents: option<pathComponentList>,
  @ocaml.doc("<p>The components in the path from source to destination.</p>")
  @as("ForwardPathComponents")
  forwardPathComponents: option<pathComponentList>,
  @ocaml.doc("<p>Indicates whether the destination is reachable from the source.</p>")
  @as("NetworkPathFound")
  networkPathFound: option<boolean_>,
  @ocaml.doc("<p>The warning message.</p>") @as("WarningMessage") warningMessage: option<string_>,
  @ocaml.doc("<p>The status message, if the status is <code>failed</code>.</p>")
  @as("StatusMessage")
  statusMessage: option<string_>,
  @ocaml.doc("<p>The status of the network insights analysis.</p>") @as("Status")
  status: option<analysisStatus>,
  @ocaml.doc("<p>The time the analysis started.</p>") @as("StartDate")
  startDate: option<millisecondDateTime>,
  @ocaml.doc(
    "<p>The Amazon Resource Names (ARN) of the Amazon Web Services resources that the path must traverse.</p>"
  )
  @as("FilterInArns")
  filterInArns: option<arnList>,
  @ocaml.doc("<p>The ID of the path.</p>") @as("NetworkInsightsPathId")
  networkInsightsPathId: option<networkInsightsPathId>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the network insights analysis.</p>")
  @as("NetworkInsightsAnalysisArn")
  networkInsightsAnalysisArn: option<resourceArn>,
  @ocaml.doc("<p>The ID of the network insights analysis.</p>") @as("NetworkInsightsAnalysisId")
  networkInsightsAnalysisId: option<networkInsightsAnalysisId>,
}
@ocaml.doc("<p>Describes a launch template version.</p>")
type launchTemplateVersion = {
  @ocaml.doc("<p>Information about the launch template.</p>") @as("LaunchTemplateData")
  launchTemplateData: option<responseLaunchTemplateData>,
  @ocaml.doc("<p>Indicates whether the version is the default version.</p>") @as("DefaultVersion")
  defaultVersion: option<boolean_>,
  @ocaml.doc("<p>The principal that created the version.</p>") @as("CreatedBy")
  createdBy: option<string_>,
  @ocaml.doc("<p>The time the version was created.</p>") @as("CreateTime")
  createTime: option<dateTime>,
  @ocaml.doc("<p>The description for the version.</p>") @as("VersionDescription")
  versionDescription: option<versionDescription>,
  @ocaml.doc("<p>The version number.</p>") @as("VersionNumber") versionNumber: option<long>,
  @ocaml.doc("<p>The name of the launch template.</p>") @as("LaunchTemplateName")
  launchTemplateName: option<launchTemplateName>,
  @ocaml.doc("<p>The ID of the launch template.</p>") @as("LaunchTemplateId")
  launchTemplateId: option<string_>,
}
type launchTemplateConfigList = array<launchTemplateConfig>
type launchSpecsList = array<spotFleetLaunchSpecification>
type instanceTypeInfoList = array<instanceTypeInfo>
@ocaml.doc("<p>Describes an instance.</p>")
type instance = {
  @ocaml.doc(
    "<p>Provides information on the recovery and maintenance options of your instance.</p>"
  )
  @as("MaintenanceOptions")
  maintenanceOptions: option<instanceMaintenanceOptions>,
  @ocaml.doc("<p>The IPv6 address assigned to the instance.</p>") @as("Ipv6Address")
  ipv6Address: option<string_>,
  @ocaml.doc("<p>The options for the instance hostname.</p>") @as("PrivateDnsNameOptions")
  privateDnsNameOptions: option<privateDnsNameOptionsResponse>,
  @ocaml.doc("<p>The time that the usage operation was last updated.</p>")
  @as("UsageOperationUpdateTime")
  usageOperationUpdateTime: option<millisecondDateTime>,
  @ocaml.doc("<p>The usage operation value for the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html\">AMI
                billing information fields</a> in the
            <i>Amazon EC2 User Guide</i>.</p>")
  @as("UsageOperation")
  usageOperation: option<string_>,
  @ocaml.doc("<p>The platform details value for the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html\">AMI
                billing information fields</a> in the
            <i>Amazon EC2 User Guide</i>.</p>")
  @as("PlatformDetails")
  platformDetails: option<string_>,
  @ocaml.doc("<p>The boot mode of the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html\">Boot modes</a> in the
                <i>Amazon EC2 User Guide</i>.</p>")
  @as("BootMode")
  bootMode: option<bootModeValues>,
  @ocaml.doc("<p>Indicates whether the instance is enabled for Amazon Web Services Nitro
            Enclaves.</p>")
  @as("EnclaveOptions")
  enclaveOptions: option<enclaveOptions>,
  @ocaml.doc("<p>The metadata options for the instance.</p>") @as("MetadataOptions")
  metadataOptions: option<instanceMetadataOptionsResponse>,
  @ocaml.doc("<p>The license configurations for the instance.</p>") @as("Licenses")
  licenses: option<licenseList>,
  @ocaml.doc("<p>Indicates whether the instance is enabled for hibernation.</p>")
  @as("HibernationOptions")
  hibernationOptions: option<hibernationOptions>,
  @ocaml.doc("<p>Information about the Capacity Reservation targeting option.</p>")
  @as("CapacityReservationSpecification")
  capacityReservationSpecification: option<capacityReservationSpecificationResponse>,
  @ocaml.doc("<p>The ID of the Capacity Reservation.</p>") @as("CapacityReservationId")
  capacityReservationId: option<string_>,
  @ocaml.doc("<p>The CPU options for the instance.</p>") @as("CpuOptions")
  cpuOptions: option<cpuOptions>,
  @ocaml.doc("<p>The virtualization type of the instance.</p>") @as("VirtualizationType")
  virtualizationType: option<virtualizationType>,
  @ocaml.doc("<p>Any tags assigned to the instance.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The reason for the most recent state transition.</p>") @as("StateReason")
  stateReason: option<stateReason>,
  @ocaml.doc("<p>Specifies whether enhanced networking with the Intel 82599 Virtual Function interface
            is enabled.</p>")
  @as("SriovNetSupport")
  sriovNetSupport: option<string_>,
  @ocaml.doc("<p>If the request is a Spot Instance request, the ID of the request.</p>")
  @as("SpotInstanceRequestId")
  spotInstanceRequestId: option<string_>,
  @ocaml.doc("<p>Indicates whether source/destination checking is enabled.</p>")
  @as("SourceDestCheck")
  sourceDestCheck: option<boolean_>,
  @ocaml.doc("<p>The security groups for the instance.</p>") @as("SecurityGroups")
  securityGroups: option<groupIdentifierList>,
  @ocaml.doc("<p>The root device type used by the AMI. The AMI can use an EBS volume or an instance
            store volume.</p>")
  @as("RootDeviceType")
  rootDeviceType: option<deviceType>,
  @ocaml.doc("<p>The device name of the root device volume (for example,
            <code>/dev/sda1</code>).</p>")
  @as("RootDeviceName")
  rootDeviceName: option<string_>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Outpost.</p>") @as("OutpostArn")
  outpostArn: option<string_>,
  @ocaml.doc("<p>[EC2-VPC] The network interfaces for the instance.</p>") @as("NetworkInterfaces")
  networkInterfaces: option<instanceNetworkInterfaceList>,
  @ocaml.doc("<p> The elastic inference accelerator associated with the instance.</p>")
  @as("ElasticInferenceAcceleratorAssociations")
  elasticInferenceAcceleratorAssociations: option<elasticInferenceAcceleratorAssociationList>,
  @ocaml.doc("<p>The Elastic GPU associated with the instance.</p>") @as("ElasticGpuAssociations")
  elasticGpuAssociations: option<elasticGpuAssociationList>,
  @ocaml.doc("<p>Indicates whether this is a Spot Instance or a Scheduled Instance.</p>")
  @as("InstanceLifecycle")
  instanceLifecycle: option<instanceLifecycleType>,
  @ocaml.doc("<p>The IAM instance profile associated with the instance, if
            applicable.</p>")
  @as("IamInstanceProfile")
  iamInstanceProfile: option<iamInstanceProfile>,
  @ocaml.doc("<p>The hypervisor type of the instance. The value <code>xen</code> is used for both Xen
            and Nitro hypervisors.</p>")
  @as("Hypervisor")
  hypervisor: option<hypervisorType>,
  @ocaml.doc("<p>Specifies whether enhanced networking with ENA is enabled.</p>") @as("EnaSupport")
  enaSupport: option<boolean_>,
  @ocaml.doc("<p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization
            provides dedicated throughput to Amazon EBS and an optimized configuration stack to
            provide optimal I/O performance. This optimization isn't available with all instance
            types. Additional usage charges apply when using an EBS Optimized instance.</p>")
  @as("EbsOptimized")
  ebsOptimized: option<boolean_>,
  @ocaml.doc("<p>The idempotency token you provided when you launched the instance, if
            applicable.</p>")
  @as("ClientToken")
  clientToken: option<string_>,
  @ocaml.doc("<p>Any block device mapping entries for the instance.</p>") @as("BlockDeviceMappings")
  blockDeviceMappings: option<instanceBlockDeviceMappingList>,
  @ocaml.doc("<p>The architecture of the image.</p>") @as("Architecture")
  architecture: option<architectureValues>,
  @ocaml.doc("<p>[EC2-VPC] The ID of the VPC in which the instance is running.</p>") @as("VpcId")
  vpcId: option<string_>,
  @ocaml.doc("<p>[EC2-VPC] The ID of the subnet in which the instance is running.</p>")
  @as("SubnetId")
  subnetId: option<string_>,
  @ocaml.doc(
    "<p>The reason for the most recent state transition. This might be an empty string.</p>"
  )
  @as("StateTransitionReason")
  stateTransitionReason: option<string_>,
  @ocaml.doc("<p>The current state of the instance.</p>") @as("State") state: option<instanceState>,
  @ocaml.doc("<p>The RAM disk associated with this instance, if applicable.</p>") @as("RamdiskId")
  ramdiskId: option<string_>,
  @ocaml.doc("<p>The public IPv4 address, or the Carrier IP address assigned to the instance, if
            applicable.</p>
        <p>A Carrier IP address only applies to an instance launched in a subnet associated with
            a Wavelength Zone.</p>")
  @as("PublicIpAddress")
  publicIpAddress: option<string_>,
  @ocaml.doc("<p>(IPv4 only) The public DNS name assigned to the instance. This name is not available
            until the instance enters the <code>running</code> state. For EC2-VPC, this name is only
            available if you've enabled DNS hostnames for your VPC.</p>")
  @as("PublicDnsName")
  publicDnsName: option<string_>,
  @ocaml.doc("<p>The product codes attached to this instance, if applicable.</p>")
  @as("ProductCodes")
  productCodes: option<productCodeList>,
  @ocaml.doc("<p>The private IPv4 address assigned to the instance.</p>") @as("PrivateIpAddress")
  privateIpAddress: option<string_>,
  @ocaml.doc("<p>(IPv4 only) The private DNS hostname name assigned to the instance. This DNS hostname
            can only be used inside the Amazon EC2 network. This name is not available until the
            instance enters the <code>running</code> state. </p>
        <p>[EC2-VPC] The Amazon-provided DNS server resolves Amazon-provided private DNS
            hostnames if you've enabled DNS resolution and DNS hostnames in your VPC. If you are not
            using the Amazon-provided DNS server in your VPC, your custom domain name servers must
            resolve the hostname as appropriate.</p>")
  @as("PrivateDnsName")
  privateDnsName: option<string_>,
  @ocaml.doc("<p>The value is <code>Windows</code> for Windows instances; otherwise blank.</p>")
  @as("Platform")
  platform: option<platformValues>,
  @ocaml.doc("<p>The location where the instance launched, if applicable.</p>") @as("Placement")
  placement: option<placement>,
  @ocaml.doc("<p>The monitoring for the instance.</p>") @as("Monitoring")
  monitoring: option<monitoring>,
  @ocaml.doc("<p>The time the instance was launched.</p>") @as("LaunchTime")
  launchTime: option<dateTime>,
  @ocaml.doc("<p>The name of the key pair, if this instance was launched with an associated key
            pair.</p>")
  @as("KeyName")
  keyName: option<string_>,
  @ocaml.doc("<p>The kernel associated with this instance, if applicable.</p>") @as("KernelId")
  kernelId: option<string_>,
  @ocaml.doc("<p>The instance type.</p>") @as("InstanceType") instanceType: option<instanceType>,
  @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<string_>,
  @ocaml.doc("<p>The ID of the AMI used to launch the instance.</p>") @as("ImageId")
  imageId: option<string_>,
  @ocaml.doc("<p>The AMI launch index, which can be used to find this instance in the launch
            group.</p>")
  @as("AmiLaunchIndex")
  amiLaunchIndex: option<integer_>,
}
type fleetLaunchTemplateConfigListRequest = array<fleetLaunchTemplateConfigRequest>
type fleetLaunchTemplateConfigList = array<fleetLaunchTemplateConfig>
type dhcpOptionsList = array<dhcpOptions>
type describeFleetsInstancesSet = array<describeFleetsInstances>
type describeFleetsErrorSet = array<describeFleetError>
type describeConversionTaskList = array<conversionTask>
type createFleetInstancesSet = array<createFleetInstance>
type createFleetErrorsSet = array<createFleetError>
type accessScopePathListRequest = array<accessScopePathRequest>
type accessScopePathList = array<accessScopePath>
@ocaml.doc("<p>Describes a finding for a Network Access Scope.</p>")
type accessScopeAnalysisFinding = {
  @ocaml.doc("<p>The finding components.</p>") @as("FindingComponents")
  findingComponents: option<pathComponentList>,
  @ocaml.doc("<p>The ID of the finding.</p>") @as("FindingId") findingId: option<string_>,
  @ocaml.doc("<p>The ID of the Network Access Scope.</p>") @as("NetworkInsightsAccessScopeId")
  networkInsightsAccessScopeId: option<networkInsightsAccessScopeId>,
  @ocaml.doc("<p>The ID of the Network Access Scope analysis.</p>")
  @as("NetworkInsightsAccessScopeAnalysisId")
  networkInsightsAccessScopeAnalysisId: option<networkInsightsAccessScopeAnalysisId>,
}
type vpnConnectionList = array<vpnConnection>
type spotInstanceRequestList = array<spotInstanceRequest>
@ocaml.doc("<p>Describes the configuration of a Spot Fleet request.</p>")
type spotFleetRequestConfigData = {
  @ocaml.doc("<p>The key-value pair for tagging the Spot Fleet request on creation. The value for
                <code>ResourceType</code> must be <code>spot-fleet-request</code>, otherwise the
            Spot Fleet request fails. To tag instances at launch, specify the tags in the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template\">launch
                template</a> (valid only if you use <code>LaunchTemplateConfigs</code>) or in
            the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetTagSpecification.html\">
               <code>SpotFleetTagSpecification</code>
            </a> (valid only if you use
                <code>LaunchSpecifications</code>). For information about tagging after launch, see
                <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources\">Tagging Your Resources</a>.</p>")
  @as("TagSpecifications")
  tagSpecifications: option<tagSpecificationList>,
  @ocaml.doc("<p>The unit for the target capacity.</p>
         <p>Default: <code>units</code> (translates to number of instances)</p>")
  @as("TargetCapacityUnitType")
  targetCapacityUnitType: option<targetCapacityUnitType>,
  @ocaml.doc("<p>Reserved.</p>") @as("Context") context: option<string_>,
  @ocaml.doc("<p>The number of Spot pools across which to allocate your target Spot capacity. Valid
            only when Spot <b>AllocationStrategy</b> is set to
                <code>lowest-price</code>. Spot Fleet selects the cheapest Spot pools and evenly
            allocates your target Spot capacity across the number of Spot pools that you
            specify.</p>
        <p>Note that Spot Fleet attempts to draw Spot Instances from the number of pools that you specify on a
            best effort basis. If a pool runs out of Spot capacity before fulfilling your target
            capacity, Spot Fleet will continue to fulfill your request by drawing from the next cheapest
            pool. To ensure that your target capacity is met, you might receive Spot Instances from more than
            the number of pools that you specified. Similarly, if most of the pools have no Spot
            capacity, you might receive your full target capacity from fewer than the number of
            pools that you specified.</p>")
  @as("InstancePoolsToUseCount")
  instancePoolsToUseCount: option<integer_>,
  @ocaml.doc("<p>One or more Classic Load Balancers and target groups to attach to the Spot Fleet
            request. Spot Fleet registers the running Spot Instances with the specified Classic Load
            Balancers and target groups.</p>
        <p>With Network Load Balancers, Spot Fleet cannot register instances that have the
            following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2,
            M3, and T1.</p>")
  @as("LoadBalancersConfig")
  loadBalancersConfig: option<loadBalancersConfig>,
  @ocaml.doc("<p>The behavior when a Spot Instance is interrupted. The default is
                <code>terminate</code>.</p>")
  @as("InstanceInterruptionBehavior")
  instanceInterruptionBehavior: option<instanceInterruptionBehavior>,
  @ocaml.doc("<p>Indicates whether Spot Fleet should replace unhealthy instances.</p>")
  @as("ReplaceUnhealthyInstances")
  replaceUnhealthyInstances: option<boolean_>,
  @ocaml.doc("<p>The end date and time of the request, in UTC format
                (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
            After the end date and time, no new Spot Instance requests are placed or able to fulfill
            the request. If no value is specified, the Spot Fleet request remains until you cancel
            it.</p>")
  @as("ValidUntil")
  validUntil: option<dateTime>,
  @ocaml.doc("<p>The start date and time of the request, in UTC format
                (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
            By default, Amazon EC2 starts fulfilling the request immediately.</p>")
  @as("ValidFrom")
  validFrom: option<dateTime>,
  @ocaml.doc("<p>The type of request. Indicates whether the Spot Fleet only requests the target
            capacity or also attempts to maintain it. When this value is <code>request</code>, the
            Spot Fleet only places the required requests. It does not attempt to replenish Spot
            Instances if capacity is diminished, nor does it submit requests in alternative Spot
            pools if capacity is not available. When this value is <code>maintain</code>, the Spot
            Fleet maintains the target capacity. The Spot Fleet places the required requests to meet
            capacity and automatically replenishes any interrupted instances. Default:
                <code>maintain</code>. <code>instant</code> is listed but is not used by Spot
            Fleet.</p>")
  @as("Type")
  type_: option<fleetType>,
  @ocaml.doc("<p>Indicates whether running Spot Instances are terminated when the Spot Fleet request
            expires.</p>")
  @as("TerminateInstancesWithExpiration")
  terminateInstancesWithExpiration: option<boolean_>,
  @ocaml.doc("<p>The maximum amount per hour for Spot Instances that you're willing to pay. You can use
            the <code>spotdMaxTotalPrice</code> parameter, the <code>onDemandMaxTotalPrice</code>
            parameter, or both parameters to ensure that your fleet cost does not exceed your
            budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request,
            Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay.
            When the maximum amount you're willing to pay is reached, the fleet stops launching
            instances even if it hasn’t met the target capacity.</p>")
  @as("SpotMaxTotalPrice")
  spotMaxTotalPrice: option<string_>,
  @ocaml.doc("<p>The maximum amount per hour for On-Demand Instances that you're willing to pay. You
            can use the <code>onDemandMaxTotalPrice</code> parameter, the
                <code>spotMaxTotalPrice</code> parameter, or both parameters to ensure that your
            fleet cost does not exceed your budget. If you set a maximum price per hour for the
            On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the
            maximum amount you're willing to pay. When the maximum amount you're willing to pay is
            reached, the fleet stops launching instances even if it hasn’t met the target
            capacity.</p>")
  @as("OnDemandMaxTotalPrice")
  onDemandMaxTotalPrice: option<string_>,
  @ocaml.doc("<p>The number of On-Demand units to request. You can choose to set the target capacity in
            terms of instances or a performance characteristic that is important to your application
            workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>,
            you can specify a target capacity of 0 and add capacity later.</p>")
  @as("OnDemandTargetCapacity")
  onDemandTargetCapacity: option<integer_>,
  @ocaml.doc("<p>The number of units to request for the Spot Fleet. You can choose to set the target
            capacity in terms of instances or a performance characteristic that is important to your
            application workload, such as vCPUs, memory, or I/O. If the request type is
                <code>maintain</code>, you can specify a target capacity of 0 and add capacity
            later.</p>")
  @as("TargetCapacity")
  targetCapacity: integer_,
  @ocaml.doc("<p>The maximum price per unit hour that you are willing to pay for a Spot Instance. The
            default is the On-Demand price.</p>")
  @as("SpotPrice")
  spotPrice: option<string_>,
  @ocaml.doc("<p>The launch template and overrides. If you specify <code>LaunchTemplateConfigs</code>,
            you can't specify <code>LaunchSpecifications</code>. If you include On-Demand capacity
            in your request, you must use <code>LaunchTemplateConfigs</code>.</p>")
  @as("LaunchTemplateConfigs")
  launchTemplateConfigs: option<launchTemplateConfigList>,
  @ocaml.doc("<p>The launch specifications for the Spot Fleet request. If you specify
                <code>LaunchSpecifications</code>, you can't specify
                <code>LaunchTemplateConfigs</code>. If you include On-Demand capacity in your
            request, you must use <code>LaunchTemplateConfigs</code>.</p>")
  @as("LaunchSpecifications")
  launchSpecifications: option<launchSpecsList>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that
            grants the Spot Fleet the permission to request, launch, terminate, and tag instances on
            your behalf. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html#spot-fleet-prerequisites\">Spot
                Fleet prerequisites</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>. Spot Fleet
            can terminate Spot Instances on your behalf when you cancel its Spot Fleet request using
                <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CancelSpotFleetRequests\">CancelSpotFleetRequests</a> or when the Spot Fleet request expires, if you set
                <code>TerminateInstancesWithExpiration</code>.</p>")
  @as("IamFleetRole")
  iamFleetRole: string_,
  @ocaml.doc("<p>The number of On-Demand units fulfilled by this request compared to the set target
            On-Demand capacity.</p>")
  @as("OnDemandFulfilledCapacity")
  onDemandFulfilledCapacity: option<double>,
  @ocaml.doc("<p>The number of units fulfilled by this request compared to the set target capacity. You
            cannot set this value.</p>")
  @as("FulfilledCapacity")
  fulfilledCapacity: option<double>,
  @ocaml.doc("<p>Indicates whether running Spot Instances should be terminated if you decrease the
            target capacity of the Spot Fleet request below the current size of the Spot
            Fleet.</p>")
  @as("ExcessCapacityTerminationPolicy")
  excessCapacityTerminationPolicy: option<excessCapacityTerminationPolicy>,
  @ocaml.doc("<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of your
            listings. This helps to avoid duplicate listings. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p>")
  @as("ClientToken")
  clientToken: option<string_>,
  @ocaml.doc("<p>The strategies for managing your Spot Instances that are at an elevated risk of being
            interrupted.</p>")
  @as("SpotMaintenanceStrategies")
  spotMaintenanceStrategies: option<spotMaintenanceStrategies>,
  @ocaml.doc("<p>The order of the launch template overrides to use in fulfilling On-Demand capacity. If
            you specify <code>lowestPrice</code>, Spot Fleet uses price to determine the order, launching
            the lowest price first. If you specify <code>prioritized</code>, Spot Fleet uses the priority
            that you assign to each Spot Fleet launch template override, launching the highest priority
            first. If you do not specify a value, Spot Fleet defaults to <code>lowestPrice</code>.</p>")
  @as("OnDemandAllocationStrategy")
  onDemandAllocationStrategy: option<onDemandAllocationStrategy>,
  @ocaml.doc("<p>Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by
            the Spot Fleet request.</p>
        <p>If the allocation strategy is <code>lowestPrice</code>, Spot Fleet launches instances from
            the Spot Instance pools with the lowest price. This is the default allocation strategy.</p>
        <p>If the allocation strategy is <code>diversified</code>, Spot Fleet launches instances from
            all the Spot Instance pools that you specify.</p>
        <p>If the allocation strategy is <code>capacityOptimized</code> (recommended), Spot Fleet
            launches instances from Spot Instance pools with optimal capacity for the number of instances
            that are launching. To give certain instance types a higher chance of launching first,
            use <code>capacityOptimizedPrioritized</code>. Set a priority for each instance type by
            using the <code>Priority</code> parameter for <code>LaunchTemplateOverrides</code>. You
            can assign the same priority to different <code>LaunchTemplateOverrides</code>. EC2
            implements the priorities on a best-effort basis, but optimizes for capacity first.
                <code>capacityOptimizedPrioritized</code> is supported only if your Spot Fleet uses a
            launch template. Note that if the <code>OnDemandAllocationStrategy</code> is set to
                <code>prioritized</code>, the same priority is applied when fulfilling On-Demand
            capacity.</p>")
  @as("AllocationStrategy")
  allocationStrategy: option<allocationStrategy>,
}
type networkInsightsAnalysisList = array<networkInsightsAnalysis>
@ocaml.doc("<p>Describes the Network Access Scope content.</p>")
type networkInsightsAccessScopeContent = {
  @ocaml.doc("<p>The paths to exclude.</p>") @as("ExcludePaths")
  excludePaths: option<accessScopePathList>,
  @ocaml.doc("<p>The paths to match.</p>") @as("MatchPaths")
  matchPaths: option<accessScopePathList>,
  @ocaml.doc("<p>The ID of the Network Access Scope.</p>") @as("NetworkInsightsAccessScopeId")
  networkInsightsAccessScopeId: option<networkInsightsAccessScopeId>,
}
type launchTemplateVersionSet = array<launchTemplateVersion>
type instanceList = array<instance>
@ocaml.doc("<p>Describes an EC2 Fleet.</p>")
type fleetData = {
  @ocaml.doc("<p>Reserved.</p>") @as("Context") context: option<string_>,
  @ocaml.doc("<p>Information about the instances that were launched by the fleet. Valid only when
            <b>Type</b> is set to <code>instant</code>.</p>")
  @as("Instances")
  instances: option<describeFleetsInstancesSet>,
  @ocaml.doc("<p>Information about the instances that could not be launched by the fleet. Valid only when
            <b>Type</b> is set to <code>instant</code>.</p>")
  @as("Errors")
  errors: option<describeFleetsErrorSet>,
  @ocaml.doc("<p>The tags for an EC2 Fleet resource.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The allocation strategy of On-Demand Instances in an EC2 Fleet.</p>")
  @as("OnDemandOptions")
  onDemandOptions: option<onDemandOptions>,
  @ocaml.doc("<p>The configuration of Spot Instances in an EC2 Fleet.</p>") @as("SpotOptions")
  spotOptions: option<spotOptions>,
  @ocaml.doc("<p>Indicates whether EC2 Fleet should replace unhealthy Spot Instances. Supported only for
         fleets of type <code>maintain</code>. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#ec2-fleet-health-checks\">EC2 Fleet
            health checks</a> in the <i>Amazon EC2 User Guide</i>.</p>")
  @as("ReplaceUnhealthyInstances")
  replaceUnhealthyInstances: option<boolean_>,
  @ocaml.doc("<p>The end date and time of the request, in UTC format (for example,
            <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
         At this point, no new instance requests are placed or able to fulfill the request. The
         default end date is 7 days from the current date. </p>")
  @as("ValidUntil")
  validUntil: option<dateTime>,
  @ocaml.doc("<p>The start date and time of the request, in UTC format (for example,
            <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
         The default is to start fulfilling the request immediately. </p>")
  @as("ValidFrom")
  validFrom: option<dateTime>,
  @ocaml.doc("<p>The type of request. Indicates whether the EC2 Fleet only <code>requests</code> the target
         capacity, or also attempts to <code>maintain</code> it. If you request a certain target
         capacity, EC2 Fleet only places the required requests; it does not attempt to replenish
         instances if capacity is diminished, and it does not submit requests in alternative
         capacity pools if capacity is unavailable. To maintain a certain target capacity, EC2 Fleet
         places the required requests to meet this target capacity. It also automatically
         replenishes any interrupted Spot Instances. Default: <code>maintain</code>.</p>")
  @as("Type")
  type_: option<fleetType>,
  @ocaml.doc(
    "<p>Indicates whether running instances should be terminated when the EC2 Fleet expires. </p>"
  )
  @as("TerminateInstancesWithExpiration")
  terminateInstancesWithExpiration: option<boolean_>,
  @ocaml.doc("<p>The number of units to request. You can choose to set the target capacity in terms of
         instances or a performance characteristic that is important to your application workload,
         such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can
         specify a target capacity of 0 and add capacity later.</p>")
  @as("TargetCapacitySpecification")
  targetCapacitySpecification: option<targetCapacitySpecification>,
  @ocaml.doc("<p>The launch template and overrides.</p>") @as("LaunchTemplateConfigs")
  launchTemplateConfigs: option<fleetLaunchTemplateConfigList>,
  @ocaml.doc("<p>The number of units fulfilled by this request compared to the set target On-Demand
         capacity.</p>")
  @as("FulfilledOnDemandCapacity")
  fulfilledOnDemandCapacity: option<double>,
  @ocaml.doc("<p>The number of units fulfilled by this request compared to the set target
         capacity.</p>")
  @as("FulfilledCapacity")
  fulfilledCapacity: option<double>,
  @ocaml.doc("<p>Indicates whether running instances should be terminated if the target capacity of the
         EC2 Fleet is decreased below the current size of the EC2 Fleet.</p>")
  @as("ExcessCapacityTerminationPolicy")
  excessCapacityTerminationPolicy: option<fleetExcessCapacityTerminationPolicy>,
  @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
         request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring
            idempotency</a>.</p>
         <p>Constraints: Maximum 64 ASCII characters</p>")
  @as("ClientToken")
  clientToken: option<string_>,
  @ocaml.doc("<p>The state of the EC2 Fleet.</p>") @as("FleetState")
  fleetState: option<fleetStateCode>,
  @ocaml.doc("<p>The ID of the EC2 Fleet.</p>") @as("FleetId") fleetId: option<fleetId>,
  @ocaml.doc("<p>The creation date and time of the EC2 Fleet.</p>") @as("CreateTime")
  createTime: option<dateTime>,
  @ocaml.doc("<p>The progress of the EC2 Fleet. If there is an error, the status is <code>error</code>. After
         all requests are placed, the status is <code>pending_fulfillment</code>. If the size of the
         EC2 Fleet is equal to or greater than its target capacity, the status is <code>fulfilled</code>.
         If the size of the EC2 Fleet is decreased, the status is <code>pending_termination</code> while
         instances are terminating.</p>")
  @as("ActivityStatus")
  activityStatus: option<fleetActivityStatus>,
}
type accessScopeAnalysisFindingList = array<accessScopeAnalysisFinding>
@ocaml.doc("<p>Describes a Spot Fleet request.</p>")
type spotFleetRequestConfig = {
  @ocaml.doc("<p>The tags for a Spot Fleet resource.</p>") @as("Tags") tags: option<tagList_>,
  @ocaml.doc("<p>The state of the Spot Fleet request.</p>") @as("SpotFleetRequestState")
  spotFleetRequestState: option<batchState>,
  @ocaml.doc("<p>The ID of the Spot Fleet request.</p>") @as("SpotFleetRequestId")
  spotFleetRequestId: option<string_>,
  @ocaml.doc("<p>The configuration of the Spot Fleet request.</p>") @as("SpotFleetRequestConfig")
  spotFleetRequestConfig: option<spotFleetRequestConfigData>,
  @ocaml.doc("<p>The creation date and time of the request.</p>") @as("CreateTime")
  createTime: option<millisecondDateTime>,
  @ocaml.doc("<p>The progress of the Spot Fleet request. 
          If there is an error, the status is <code>error</code>.
          After all requests are placed, the status is <code>pending_fulfillment</code>.
          If the size of the fleet is equal to or greater than its target capacity, the status is <code>fulfilled</code>.
          If the size of the fleet is decreased, the status is <code>pending_termination</code>
          while Spot Instances are terminating.</p>")
  @as("ActivityStatus")
  activityStatus: option<activityStatus>,
}
@ocaml.doc("<p>Describes a launch request for one or more instances, and includes owner, requester,
            and security group information that applies to all instances in the launch
            request.</p>")
type reservation = {
  @ocaml.doc("<p>The ID of the reservation.</p>") @as("ReservationId")
  reservationId: option<string_>,
  @ocaml.doc("<p>The ID of the requester that launched the instances on your behalf (for example,
                Amazon Web Services Management Console or Auto Scaling).</p>")
  @as("RequesterId")
  requesterId: option<string_>,
  @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the reservation.</p>")
  @as("OwnerId")
  ownerId: option<string_>,
  @ocaml.doc("<p>The instances.</p>") @as("Instances") instances: option<instanceList>,
  @ocaml.doc("<p>[EC2-Classic only] The security groups.</p>") @as("Groups")
  groups: option<groupIdentifierList>,
}
type fleetSet = array<fleetData>
type spotFleetRequestConfigSet = array<spotFleetRequestConfig>
type reservationList = array<reservation>
@ocaml.doc("<fullname>Amazon Elastic Compute Cloud</fullname>
         <p>Amazon Elastic Compute Cloud (Amazon EC2) provides secure and resizable computing capacity in the Amazon Web Services Cloud. 
          Using Amazon EC2 eliminates the need to invest in hardware up front, so you can develop and deploy applications 
          faster. Amazon Virtual Private Cloud (Amazon VPC) enables you to provision a logically isolated section of the 
          Amazon Web Services Cloud where you can launch Amazon Web Services resources in a virtual network that you've defined. Amazon Elastic Block Store 
          (Amazon EBS) provides block level storage volumes for use with EC2 instances. EBS volumes are highly available  
          and reliable storage volumes that can be attached to any running instance and used like a hard drive.</p>
         <p>To learn more, see the following resources:</p>
         <ul>
            <li>
               <p>Amazon EC2: <a href=\"http://aws.amazon.com/ec2\">AmazonEC2 product page</a>, <a href=\"http://aws.amazon.com/documentation/ec2\">Amazon EC2 documentation</a>
               </p>
            </li>
            <li>
               <p>Amazon EBS: <a href=\"http://aws.amazon.com/ebs\">Amazon EBS product page</a>, <a href=\"http://aws.amazon.com/documentation/ebs\">Amazon EBS documentation</a>
               </p>
            </li>
            <li>
               <p>Amazon VPC: <a href=\"http://aws.amazon.com/vpc\">Amazon VPC product page</a>, <a href=\"http://aws.amazon.com/documentation/vpc\">Amazon VPC documentation</a>
               </p>
            </li>
            <li>
               <p>Amazon Web Services VPN: <a href=\"http://aws.amazon.com/vpn\">Amazon Web Services VPN product page</a>, <a href=\"http://aws.amazon.com/documentation/vpn\">Amazon Web Services VPN documentation</a>
               </p>
            </li>
         </ul>")
module StartVpcEndpointServicePrivateDnsVerification = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the endpoint service.</p>") @as("ServiceId")
    serviceId: vpcEndpointServiceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("ReturnValue")
    returnValue: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "StartVpcEndpointServicePrivateDnsVerificationCommand"
  let make = (~serviceId, ~dryRun=?, ()) => new({serviceId: serviceId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module SendDiagnosticInterrupt = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: instanceId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "SendDiagnosticInterruptCommand"
  let make = (~instanceId, ~dryRun=?, ()) => new({dryRun: dryRun, instanceId: instanceId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module RestoreSnapshotTier = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Indicates whether to permanently restore an archived snapshot. To permanently restore 
      an archived snapshot, specify <code>true</code> and omit the 
      <b>RestoreSnapshotTierRequest$TemporaryRestoreDays</b> parameter.</p>")
    @as("PermanentRestore")
    permanentRestore: option<boolean_>,
    @ocaml.doc("<p>Specifies the number of days for which to temporarily restore an archived snapshot. 
      Required for temporary restores only. The snapshot will be automatically re-archived 
      after this period.</p>
         <p>To temporarily restore an archived snapshot, specify the number of days and omit 
      the <b>PermanentRestore</b> parameter or set it to 
      <code>false</code>.</p>")
    @as("TemporaryRestoreDays")
    temporaryRestoreDays: option<restoreSnapshotTierRequestTemporaryRestoreDays>,
    @ocaml.doc("<p>The ID of the snapshot to restore.</p>") @as("SnapshotId")
    snapshotId: snapshotId,
  }
  type response = {
    @ocaml.doc("<p>Indicates whether the snapshot is permanently restored. <code>true</code> indicates a permanent 
      restore. <code>false</code> indicates a temporary restore.</p>")
    @as("IsPermanentRestore")
    isPermanentRestore: option<boolean_>,
    @ocaml.doc("<p>For temporary restores only. The number of days for which the archived snapshot 
      is temporarily restored.</p>")
    @as("RestoreDuration")
    restoreDuration: option<integer_>,
    @ocaml.doc("<p>The date and time when the snapshot restore process started.</p>")
    @as("RestoreStartTime")
    restoreStartTime: option<millisecondDateTime>,
    @ocaml.doc("<p>The ID of the snapshot.</p>") @as("SnapshotId") snapshotId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "RestoreSnapshotTierCommand"
  let make = (~snapshotId, ~dryRun=?, ~permanentRestore=?, ~temporaryRestoreDays=?, ()) =>
    new({
      dryRun: dryRun,
      permanentRestore: permanentRestore,
      temporaryRestoreDays: temporaryRestoreDays,
      snapshotId: snapshotId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RestoreSnapshotFromRecycleBin = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the snapshot to restore.</p>") @as("SnapshotId")
    snapshotId: snapshotId,
  }
  type response = {
    @ocaml.doc("<p>The size of the volume, in GiB.</p>") @as("VolumeSize")
    volumeSize: option<integer_>,
    @ocaml.doc("<p>The ID of the volume that was used to create the snapshot.</p>") @as("VolumeId")
    volumeId: option<string_>,
    @ocaml.doc("<p>The state of the snapshot.</p>") @as("State") state: option<snapshotState>,
    @ocaml.doc("<p>The time stamp when the snapshot was initiated.</p>") @as("StartTime")
    startTime: option<millisecondDateTime>,
    @ocaml.doc("<p>The progress of the snapshot, as a percentage.</p>") @as("Progress")
    progress: option<string_>,
    @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the EBS snapshot.</p>")
    @as("OwnerId")
    ownerId: option<string_>,
    @ocaml.doc("<p>Indicates whether the snapshot is encrypted.</p>") @as("Encrypted")
    encrypted: option<boolean_>,
    @ocaml.doc("<p>The description for the snapshot.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The ARN of the Outpost on which the snapshot is stored. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html\">Amazon EBS local snapshots on Outposts</a> in the 
      <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
    @as("OutpostArn")
    outpostArn: option<string_>,
    @ocaml.doc("<p>The ID of the snapshot.</p>") @as("SnapshotId") snapshotId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "RestoreSnapshotFromRecycleBinCommand"
  let make = (~snapshotId, ~dryRun=?, ()) => new({dryRun: dryRun, snapshotId: snapshotId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RestoreImageFromRecycleBin = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the AMI to restore.</p>") @as("ImageId") imageId: imageId,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "RestoreImageFromRecycleBinCommand"
  let make = (~imageId, ~dryRun=?, ()) => new({dryRun: dryRun, imageId: imageId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RestoreAddressToClassic = {
  type t
  type request = {
    @ocaml.doc("<p>The Elastic IP address.</p>") @as("PublicIp") publicIp: string_,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The move status for the IP address.</p>") @as("Status") status: option<status>,
    @ocaml.doc("<p>The Elastic IP address.</p>") @as("PublicIp") publicIp: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "RestoreAddressToClassicCommand"
  let make = (~publicIp, ~dryRun=?, ()) => new({publicIp: publicIp, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ResetSnapshotAttribute = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the snapshot.</p>") @as("SnapshotId") snapshotId: snapshotId,
    @ocaml.doc("<p>The attribute to reset. Currently, only the attribute for permission to create volumes can
      be reset.</p>")
    @as("Attribute")
    attribute: snapshotAttributeName,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ResetSnapshotAttributeCommand"
  let make = (~snapshotId, ~attribute, ~dryRun=?, ()) =>
    new({dryRun: dryRun, snapshotId: snapshotId, attribute: attribute})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ResetNetworkInterfaceAttribute = {
  type t
  @ocaml.doc("<p>Contains the parameters for ResetNetworkInterfaceAttribute.</p>")
  type request = {
    @ocaml.doc(
      "<p>The source/destination checking attribute. Resets the value to <code>true</code>.</p>"
    )
    @as("SourceDestCheck")
    sourceDestCheck: option<string_>,
    @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
    networkInterfaceId: networkInterfaceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
            and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
            Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ResetNetworkInterfaceAttributeCommand"
  let make = (~networkInterfaceId, ~sourceDestCheck=?, ~dryRun=?, ()) =>
    new({sourceDestCheck: sourceDestCheck, networkInterfaceId: networkInterfaceId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ResetInstanceAttribute = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: instanceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The attribute to reset.</p>
        <important>
            <p>You can only reset the following attributes: <code>kernel</code> |
                    <code>ramdisk</code> | <code>sourceDestCheck</code>.</p>
        </important>")
    @as("Attribute")
    attribute: instanceAttributeName,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ResetInstanceAttributeCommand"
  let make = (~instanceId, ~attribute, ~dryRun=?, ()) =>
    new({instanceId: instanceId, dryRun: dryRun, attribute: attribute})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ResetImageAttribute = {
  type t
  @ocaml.doc("<p>Contains the parameters for ResetImageAttribute.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the AMI.</p>") @as("ImageId") imageId: imageId,
    @ocaml.doc(
      "<p>The attribute to reset (currently you can only reset the launch permission attribute).</p>"
    )
    @as("Attribute")
    attribute: resetImageAttributeName,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ResetImageAttributeCommand"
  let make = (~imageId, ~attribute, ~dryRun=?, ()) =>
    new({dryRun: dryRun, imageId: imageId, attribute: attribute})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ResetFpgaImageAttribute = {
  type t
  type request = {
    @ocaml.doc("<p>The attribute.</p>") @as("Attribute")
    attribute: option<resetFpgaImageAttributeName>,
    @ocaml.doc("<p>The ID of the AFI.</p>") @as("FpgaImageId") fpgaImageId: fpgaImageId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>")
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ResetFpgaImageAttributeCommand"
  let make = (~fpgaImageId, ~attribute=?, ~dryRun=?, ()) =>
    new({attribute: attribute, fpgaImageId: fpgaImageId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ResetEbsDefaultKmsKeyId = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) of the default KMS key for EBS encryption by default.</p>"
    )
    @as("KmsKeyId")
    kmsKeyId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ResetEbsDefaultKmsKeyIdCommand"
  let make = (~dryRun=?, ()) => new({dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ReplaceRoute = {
  type t
  type request = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the core network.</p>") @as("CoreNetworkArn")
    coreNetworkArn: option<coreNetworkArn>,
    @ocaml.doc("<p>The ID of a VPC peering connection.</p>") @as("VpcPeeringConnectionId")
    vpcPeeringConnectionId: option<vpcPeeringConnectionId>,
    @ocaml.doc("<p>The ID of the route table.</p>") @as("RouteTableId") routeTableId: routeTableId,
    @ocaml.doc("<p>The ID of a network interface.</p>") @as("NetworkInterfaceId")
    networkInterfaceId: option<networkInterfaceId>,
    @ocaml.doc("<p>[IPv4 traffic only] The ID of a carrier gateway.</p>") @as("CarrierGatewayId")
    carrierGatewayId: option<carrierGatewayId>,
    @ocaml.doc("<p>The ID of the local gateway.</p>") @as("LocalGatewayId")
    localGatewayId: option<localGatewayId>,
    @ocaml.doc("<p>The ID of a transit gateway.</p>") @as("TransitGatewayId")
    transitGatewayId: option<transitGatewayId>,
    @ocaml.doc("<p>[IPv4 traffic only] The ID of a NAT gateway.</p>") @as("NatGatewayId")
    natGatewayId: option<natGatewayId>,
    @ocaml.doc(
      "<p>Specifies whether to reset the local route to its default target (<code>local</code>).</p>"
    )
    @as("LocalTarget")
    localTarget: option<boolean_>,
    @ocaml.doc("<p>The ID of a NAT instance in your VPC.</p>") @as("InstanceId")
    instanceId: option<instanceId>,
    @ocaml.doc("<p>The ID of an internet gateway or virtual private gateway.</p>") @as("GatewayId")
    gatewayId: option<routeGatewayId>,
    @ocaml.doc("<p>[IPv6 traffic only] The ID of an egress-only internet gateway.</p>")
    @as("EgressOnlyInternetGatewayId")
    egressOnlyInternetGatewayId: option<egressOnlyInternetGatewayId>,
    @ocaml.doc(
      "<p>The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.</p>"
    )
    @as("VpcEndpointId")
    vpcEndpointId: option<vpcEndpointId>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the prefix list for the route.</p>") @as("DestinationPrefixListId")
    destinationPrefixListId: option<prefixListResourceId>,
    @ocaml.doc("<p>The IPv6 CIDR address block used for the destination match. The value that you
			provide must match the CIDR of an existing route in the table.</p>")
    @as("DestinationIpv6CidrBlock")
    destinationIpv6CidrBlock: option<string_>,
    @ocaml.doc("<p>The IPv4 CIDR address block used for the destination match. The value that you
			provide must match the CIDR of an existing route in the table.</p>")
    @as("DestinationCidrBlock")
    destinationCidrBlock: option<string_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ReplaceRouteCommand"
  let make = (
    ~routeTableId,
    ~coreNetworkArn=?,
    ~vpcPeeringConnectionId=?,
    ~networkInterfaceId=?,
    ~carrierGatewayId=?,
    ~localGatewayId=?,
    ~transitGatewayId=?,
    ~natGatewayId=?,
    ~localTarget=?,
    ~instanceId=?,
    ~gatewayId=?,
    ~egressOnlyInternetGatewayId=?,
    ~vpcEndpointId=?,
    ~dryRun=?,
    ~destinationPrefixListId=?,
    ~destinationIpv6CidrBlock=?,
    ~destinationCidrBlock=?,
    (),
  ) =>
    new({
      coreNetworkArn: coreNetworkArn,
      vpcPeeringConnectionId: vpcPeeringConnectionId,
      routeTableId: routeTableId,
      networkInterfaceId: networkInterfaceId,
      carrierGatewayId: carrierGatewayId,
      localGatewayId: localGatewayId,
      transitGatewayId: transitGatewayId,
      natGatewayId: natGatewayId,
      localTarget: localTarget,
      instanceId: instanceId,
      gatewayId: gatewayId,
      egressOnlyInternetGatewayId: egressOnlyInternetGatewayId,
      vpcEndpointId: vpcEndpointId,
      dryRun: dryRun,
      destinationPrefixListId: destinationPrefixListId,
      destinationIpv6CidrBlock: destinationIpv6CidrBlock,
      destinationCidrBlock: destinationCidrBlock,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ReplaceNetworkAclAssociation = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the new network ACL to associate with the subnet.</p>")
    @as("NetworkAclId")
    networkAclId: networkAclId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The ID of the current association between the original network ACL and the subnet.</p>"
    )
    @as("AssociationId")
    associationId: networkAclAssociationId,
  }
  type response = {
    @ocaml.doc("<p>The ID of the new association.</p>") @as("NewAssociationId")
    newAssociationId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ReplaceNetworkAclAssociationCommand"
  let make = (~networkAclId, ~associationId, ~dryRun=?, ()) =>
    new({networkAclId: networkAclId, dryRun: dryRun, associationId: associationId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ReleaseIpamPoolAllocation = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the allocation.</p>") @as("IpamPoolAllocationId")
    ipamPoolAllocationId: ipamPoolAllocationId,
    @ocaml.doc("<p>The CIDR of the allocation you want to release.</p>") @as("Cidr") cidr: string_,
    @ocaml.doc("<p>The ID of the IPAM pool which contains the allocation you want to release.</p>")
    @as("IpamPoolId")
    ipamPoolId: ipamPoolId,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Indicates if the release was successful.</p>") @as("Success")
    success: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ReleaseIpamPoolAllocationCommand"
  let make = (~ipamPoolAllocationId, ~cidr, ~ipamPoolId, ~dryRun=?, ()) =>
    new({
      ipamPoolAllocationId: ipamPoolAllocationId,
      cidr: cidr,
      ipamPoolId: ipamPoolId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ReleaseAddress = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises
      IP addresses.</p>
         <p>If you provide an incorrect network border group, you receive an <code>InvalidAddress.NotFound</code> error.</p>
         <p>You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 classic, you 
      receive an <code>InvalidParameterCombination</code> error.</p>")
    @as("NetworkBorderGroup")
    networkBorderGroup: option<string_>,
    @ocaml.doc("<p>[EC2-Classic] The Elastic IP address. Required for EC2-Classic.</p>")
    @as("PublicIp")
    publicIp: option<string_>,
    @ocaml.doc("<p>[EC2-VPC] The allocation ID. Required for EC2-VPC.</p>") @as("AllocationId")
    allocationId: option<allocationId>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ReleaseAddressCommand"
  let make = (~dryRun=?, ~networkBorderGroup=?, ~publicIp=?, ~allocationId=?, ()) =>
    new({
      dryRun: dryRun,
      networkBorderGroup: networkBorderGroup,
      publicIp: publicIp,
      allocationId: allocationId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module RejectVpcPeeringConnection = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the VPC peering connection.</p>") @as("VpcPeeringConnectionId")
    vpcPeeringConnectionId: vpcPeeringConnectionId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "RejectVpcPeeringConnectionCommand"
  let make = (~vpcPeeringConnectionId, ~dryRun=?, ()) =>
    new({vpcPeeringConnectionId: vpcPeeringConnectionId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module MoveAddressToVpc = {
  type t
  type request = {
    @ocaml.doc("<p>The Elastic IP address.</p>") @as("PublicIp") publicIp: string_,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The status of the move of the IP address.</p>") @as("Status")
    status: option<status>,
    @ocaml.doc("<p>The allocation ID for the Elastic IP address.</p>") @as("AllocationId")
    allocationId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "MoveAddressToVpcCommand"
  let make = (~publicIp, ~dryRun=?, ()) => new({publicIp: publicIp, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyVpcTenancy = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The instance tenancy attribute for the VPC. </p>") @as("InstanceTenancy")
    instanceTenancy: vpcTenancy,
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: vpcId,
  }
  type response = {
    @ocaml.doc("<p>Returns <code>true</code> if the request succeeds; otherwise, returns an
            error.</p>")
    @as("ReturnValue")
    returnValue: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyVpcTenancyCommand"
  let make = (~instanceTenancy, ~vpcId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, instanceTenancy: instanceTenancy, vpcId: vpcId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyVpcEndpointServicePayerResponsibility = {
  type t
  type request = {
    @ocaml.doc("<p>The entity that is responsible for the endpoint costs. The default is the endpoint owner.
            If you set the payer responsibility to the service owner, you cannot set it back to the
            endpoint owner.</p>")
    @as("PayerResponsibility")
    payerResponsibility: payerResponsibility,
    @ocaml.doc("<p>The ID of the service.</p>") @as("ServiceId") serviceId: vpcEndpointServiceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("ReturnValue")
    returnValue: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyVpcEndpointServicePayerResponsibilityCommand"
  let make = (~payerResponsibility, ~serviceId, ~dryRun=?, ()) =>
    new({payerResponsibility: payerResponsibility, serviceId: serviceId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifySnapshotTier = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The name of the storage tier. You must specify <code>archive</code>.</p>")
    @as("StorageTier")
    storageTier: option<targetStorageTier>,
    @ocaml.doc("<p>The ID of the snapshot.</p>") @as("SnapshotId") snapshotId: snapshotId,
  }
  type response = {
    @ocaml.doc("<p>The date and time when the archive process was started.</p>")
    @as("TieringStartTime")
    tieringStartTime: option<millisecondDateTime>,
    @ocaml.doc("<p>The ID of the snapshot.</p>") @as("SnapshotId") snapshotId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifySnapshotTierCommand"
  let make = (~snapshotId, ~dryRun=?, ~storageTier=?, ()) =>
    new({dryRun: dryRun, storageTier: storageTier, snapshotId: snapshotId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyPrivateDnsNameOptions = {
  type t
  type request = {
    @ocaml.doc("<p>Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA
            records.</p>")
    @as("EnableResourceNameDnsAAAARecord")
    enableResourceNameDnsAAAARecord: option<boolean_>,
    @ocaml.doc("<p>Indicates whether to respond to DNS queries for instance hostnames with DNS A
            records.</p>")
    @as("EnableResourceNameDnsARecord")
    enableResourceNameDnsARecord: option<boolean_>,
    @ocaml.doc("<p>The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name
            must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name
            must be based on the instance ID. For dual-stack subnets, you can specify whether DNS
            names use the instance IPv4 address or the instance ID.</p>")
    @as("PrivateDnsHostnameType")
    privateDnsHostnameType: option<hostnameType>,
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<instanceId>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an
            error.</p>")
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyPrivateDnsNameOptionsCommand"
  let make = (
    ~enableResourceNameDnsAAAARecord=?,
    ~enableResourceNameDnsARecord=?,
    ~privateDnsHostnameType=?,
    ~instanceId=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      enableResourceNameDnsAAAARecord: enableResourceNameDnsAAAARecord,
      enableResourceNameDnsARecord: enableResourceNameDnsARecord,
      privateDnsHostnameType: privateDnsHostnameType,
      instanceId: instanceId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyInstancePlacement = {
  type t
  type request = {
    @ocaml.doc("<p>The ARN of the host resource group in which to place the instance.</p>")
    @as("HostResourceGroupArn")
    hostResourceGroupArn: option<string_>,
    @ocaml.doc("<p>The number of the partition in which to place the instance. Valid only if the
            placement group strategy is set to <code>partition</code>.</p>")
    @as("PartitionNumber")
    partitionNumber: option<integer_>,
    @ocaml.doc("<p>The tenancy for the instance.</p>
        
        <note>
            <p>For T3 instances, you can't change the tenancy from <code>dedicated</code> 
            to <code>host</code>, or from <code>host</code> to <code>dedicated</code>. 
            Attempting to make one of these unsupported tenancy changes results in the 
            <code>InvalidTenancy</code> error code.</p>
         </note>")
    @as("Tenancy")
    tenancy: option<hostTenancy>,
    @ocaml.doc("<p>The ID of the instance that you are modifying.</p>") @as("InstanceId")
    instanceId: instanceId,
    @ocaml.doc("<p>The ID of the Dedicated Host with which to associate the instance.</p>")
    @as("HostId")
    hostId: option<dedicatedHostId>,
    @ocaml.doc("<p>The name of the placement group in which to place the instance. For spread placement
            groups, the instance must have a tenancy of <code>default</code>. For cluster and
            partition placement groups, the instance must have a tenancy of <code>default</code> or
                <code>dedicated</code>.</p>
        <p>To remove an instance from a placement group, specify an empty string
            (\"\").</p>")
    @as("GroupName")
    groupName: option<placementGroupName>,
    @ocaml.doc("<p>The affinity setting for the instance.</p>") @as("Affinity")
    affinity: option<affinity>,
  }
  type response = {
    @ocaml.doc("<p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>")
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyInstancePlacementCommand"
  let make = (
    ~instanceId,
    ~hostResourceGroupArn=?,
    ~partitionNumber=?,
    ~tenancy=?,
    ~hostId=?,
    ~groupName=?,
    ~affinity=?,
    (),
  ) =>
    new({
      hostResourceGroupArn: hostResourceGroupArn,
      partitionNumber: partitionNumber,
      tenancy: tenancy,
      instanceId: instanceId,
      hostId: hostId,
      groupName: groupName,
      affinity: affinity,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyInstanceMaintenanceOptions = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Disables the automatic recovery behavior of your instance or sets it to
            default.</p>")
    @as("AutoRecovery")
    autoRecovery: option<instanceAutoRecoveryState>,
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: instanceId,
  }
  type response = {
    @ocaml.doc("<p>Provides information on the current automatic recovery behavior of your
            instance.</p>")
    @as("AutoRecovery")
    autoRecovery: option<instanceAutoRecoveryState>,
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyInstanceMaintenanceOptionsCommand"
  let make = (~instanceId, ~dryRun=?, ~autoRecovery=?, ()) =>
    new({dryRun: dryRun, autoRecovery: autoRecovery, instanceId: instanceId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyIdentityIdFormat = {
  type t
  type request = {
    @ocaml.doc("<p>Indicates whether the resource should use longer IDs (17-character IDs)</p>")
    @as("UseLongIds")
    useLongIds: boolean_,
    @ocaml.doc("<p>The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
          <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
          <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
          <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code>
          | <code>network-acl-association</code> | <code>network-interface</code> |
          <code>network-interface-attachment</code> | <code>prefix-list</code> |
          <code>route-table</code> | <code>route-table-association</code> |
          <code>security-group</code> | <code>subnet</code> |
          <code>subnet-cidr-block-association</code> | <code>vpc</code> |
          <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p>
         <p>Alternatively, use the <code>all-current</code> option to include all resource types that are
          currently within their opt-in period for longer IDs.</p>")
    @as("Resource")
    resource: string_,
    @ocaml.doc("<p>The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify
       <code>all</code> to modify the ID format for all IAM users, IAM roles, and the root user of
       the account.</p>")
    @as("PrincipalArn")
    principalArn: string_,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyIdentityIdFormatCommand"
  let make = (~useLongIds, ~resource, ~principalArn, ()) =>
    new({useLongIds: useLongIds, resource: resource, principalArn: principalArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ModifyIdFormat = {
  type t
  type request = {
    @ocaml.doc("<p>Indicate whether the resource should use longer IDs (17-character IDs).</p>")
    @as("UseLongIds")
    useLongIds: boolean_,
    @ocaml.doc("<p>The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
           <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
           <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
           <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code>
           | <code>network-acl-association</code> | <code>network-interface</code> |
           <code>network-interface-attachment</code> | <code>prefix-list</code> |
           <code>route-table</code> | <code>route-table-association</code> |
           <code>security-group</code> | <code>subnet</code> |
           <code>subnet-cidr-block-association</code> | <code>vpc</code> |
           <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p>
         <p>Alternatively, use the <code>all-current</code> option to include all resource types that are
       currently within their opt-in period for longer IDs.</p>")
    @as("Resource")
    resource: string_,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyIdFormatCommand"
  let make = (~useLongIds, ~resource, ()) => new({useLongIds: useLongIds, resource: resource})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ModifyEbsDefaultKmsKeyId = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The identifier of the Key Management Service (KMS) KMS key to use for Amazon EBS encryption.
      If this parameter is not specified, your KMS key for Amazon EBS is used. If <code>KmsKeyId</code> is
      specified, the encrypted state must be <code>true</code>.</p>
         <p>You can specify the KMS key using any of the following:</p>
         <ul>
            <li>
               <p>Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.</p>
            </li>
            <li>
               <p>Key alias. For example, alias/ExampleAlias.</p>
            </li>
            <li>
               <p>Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.</p>
            </li>
            <li>
               <p>Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.</p>
            </li>
         </ul>
         <p>Amazon Web Services authenticates the KMS key asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, 
      the action can appear to complete, but eventually fails.</p>  
         <p>Amazon EBS does not support asymmetric KMS keys.</p>")
    @as("KmsKeyId")
    kmsKeyId: kmsKeyId,
  }
  type response = {
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) of the default KMS key for encryption by default.</p>"
    )
    @as("KmsKeyId")
    kmsKeyId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyEbsDefaultKmsKeyIdCommand"
  let make = (~kmsKeyId, ~dryRun=?, ()) => new({dryRun: dryRun, kmsKeyId: kmsKeyId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyCapacityReservationFleet = {
  type t
  type request = {
    @ocaml.doc("<p>Indicates whether to remove the end date from the Capacity Reservation Fleet. If you remove the 
			end date, the Capacity Reservation Fleet does not expire and it remains active until you explicitly 
			cancel it using the <b>CancelCapacityReservationFleet</b> action.</p>
		       <p>You can't specify <b>RemoveEndDate</b> and <b>
			EndDate</b> in the same request.</p>")
    @as("RemoveEndDate")
    removeEndDate: option<boolean_>,
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The date and time at which the Capacity Reservation Fleet expires. When the Capacity Reservation 
			Fleet expires, its state changes to <code>expired</code> and all of the Capacity Reservations in the 
			Fleet expire.</p>	
		       <p>The Capacity Reservation Fleet expires within an hour after the specified time. For example, if you 
			specify <code>5/31/2019</code>, <code>13:30:55</code>, the Capacity Reservation Fleet is guaranteed 
			to expire between <code>13:30:55</code> and <code>14:30:55</code> on <code>5/31/2019</code>.</p>
		       <p>You can't specify <b>EndDate</b> and <b>
			RemoveEndDate</b> in the same request.</p>")
    @as("EndDate")
    endDate: option<millisecondDateTime>,
    @ocaml.doc("<p>The total number of capacity units to be reserved by the Capacity Reservation Fleet. This value, 
			together with the instance type weights that you assign to each instance type used by the Fleet 
			determine the number of instances for which the Fleet reserves capacity. Both values are based on 
			units that make sense for your workload. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity\">Total target capacity</a> 
			in the Amazon EC2 User Guide.</p>")
    @as("TotalTargetCapacity")
    totalTargetCapacity: option<integer_>,
    @ocaml.doc("<p>The ID of the Capacity Reservation Fleet to modify.</p>")
    @as("CapacityReservationFleetId")
    capacityReservationFleetId: capacityReservationFleetId,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyCapacityReservationFleetCommand"
  let make = (
    ~capacityReservationFleetId,
    ~removeEndDate=?,
    ~dryRun=?,
    ~endDate=?,
    ~totalTargetCapacity=?,
    (),
  ) =>
    new({
      removeEndDate: removeEndDate,
      dryRun: dryRun,
      endDate: endDate,
      totalTargetCapacity: totalTargetCapacity,
      capacityReservationFleetId: capacityReservationFleetId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyCapacityReservation = {
  type t
  type request = {
    @ocaml.doc("<p>Reserved for future use.</p>") @as("AdditionalInfo")
    additionalInfo: option<string_>,
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Reserved. Capacity Reservations you have created are accepted by default.</p>")
    @as("Accept")
    accept: option<boolean_>,
    @ocaml.doc("<p>Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end
			types:</p>
		       <ul>
            <li>
               <p>
                  <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it. Do not
					provide an <code>EndDate</code> value if <code>EndDateType</code> is
						<code>unlimited</code>.</p>
            </li>
            <li>
               <p>
                  <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time. You must
					provide an <code>EndDate</code> value if <code>EndDateType</code> is
						<code>limited</code>.</p>
            </li>
         </ul>")
    @as("EndDateType")
    endDateType: option<endDateType>,
    @ocaml.doc("<p>The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity
			is released and you can no longer launch instances into it. The Capacity Reservation's state changes to
				<code>expired</code> when it reaches its end date and time.</p>
		       <p>The Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 
			5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.</p>
		       <p>You must provide an <code>EndDate</code> value if <code>EndDateType</code> is
				<code>limited</code>. Omit <code>EndDate</code> if <code>EndDateType</code> is
				<code>unlimited</code>.</p>")
    @as("EndDate")
    endDate: option<dateTime>,
    @ocaml.doc("<p>The number of instances for which to reserve capacity. The number of instances can't be increased or 
		    	decreased by more than <code>1000</code> in a single request.</p>")
    @as("InstanceCount")
    instanceCount: option<integer_>,
    @ocaml.doc("<p>The ID of the Capacity Reservation.</p>") @as("CapacityReservationId")
    capacityReservationId: capacityReservationId,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyCapacityReservationCommand"
  let make = (
    ~capacityReservationId,
    ~additionalInfo=?,
    ~dryRun=?,
    ~accept=?,
    ~endDateType=?,
    ~endDate=?,
    ~instanceCount=?,
    (),
  ) =>
    new({
      additionalInfo: additionalInfo,
      dryRun: dryRun,
      accept: accept,
      endDateType: endDateType,
      endDate: endDate,
      instanceCount: instanceCount,
      capacityReservationId: capacityReservationId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyAvailabilityZoneGroup = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Indicates whether you are opted in to the Local Zone group or Wavelength Zone group. The
      only valid value is <code>opted-in</code>. You must contact <a href=\"https://console.aws.amazon.com/support/home#/case/create%3FissueType=customer-service%26serviceCode=general-info%26getting-started%26categoryCode=using-aws%26services\">Amazon Web Services Support</a> to opt out of a Local Zone or Wavelength Zone group.</p>")
    @as("OptInStatus")
    optInStatus: modifyAvailabilityZoneOptInStatus,
    @ocaml.doc("<p>The name of the Availability Zone group, Local Zone group, or Wavelength Zone
      group.</p>")
    @as("GroupName")
    groupName: string_,
  }
  type response = {
    @ocaml.doc("<p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>")
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyAvailabilityZoneGroupCommand"
  let make = (~optInStatus, ~groupName, ~dryRun=?, ()) =>
    new({dryRun: dryRun, optInStatus: optInStatus, groupName: groupName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ImportClientVpnClientCertificateRevocationList = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The client certificate revocation list file. For more information, see <a href=\"https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/cvpn-working-certificates.html#cvpn-working-certificates-generate\">Generate a Client Certificate Revocation List</a> in the
				<i>Client VPN Administrator Guide</i>.</p>")
    @as("CertificateRevocationList")
    certificateRevocationList: string_,
    @ocaml.doc(
      "<p>The ID of the Client VPN endpoint to which the client certificate revocation list applies.</p>"
    )
    @as("ClientVpnEndpointId")
    clientVpnEndpointId: clientVpnEndpointId,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ImportClientVpnClientCertificateRevocationListCommand"
  let make = (~certificateRevocationList, ~clientVpnEndpointId, ~dryRun=?, ()) =>
    new({
      dryRun: dryRun,
      certificateRevocationList: certificateRevocationList,
      clientVpnEndpointId: clientVpnEndpointId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetVpnConnectionDeviceSampleConfiguration = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The IKE version to be used in the sample configuration file for your customer gateway
            device. You can specify one of the following versions: <code>ikev1</code> or
                <code>ikev2</code>.</p>")
    @as("InternetKeyExchangeVersion")
    internetKeyExchangeVersion: option<string_>,
    @ocaml.doc(
      "<p>Device identifier provided by the <code>GetVpnConnectionDeviceTypes</code> API.</p>"
    )
    @as("VpnConnectionDeviceTypeId")
    vpnConnectionDeviceTypeId: vpnConnectionDeviceTypeId,
    @ocaml.doc("<p>The <code>VpnConnectionId</code> specifies the Site-to-Site VPN connection used for the sample
            configuration.</p>")
    @as("VpnConnectionId")
    vpnConnectionId: vpnConnectionId,
  }
  type response = {
    @ocaml.doc("<p>Sample configuration file for the specified customer gateway device.</p>")
    @as("VpnConnectionDeviceSampleConfiguration")
    vpnConnectionDeviceSampleConfiguration: option<vpnConnectionDeviceSampleConfiguration>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetVpnConnectionDeviceSampleConfigurationCommand"
  let make = (
    ~vpnConnectionDeviceTypeId,
    ~vpnConnectionId,
    ~dryRun=?,
    ~internetKeyExchangeVersion=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      internetKeyExchangeVersion: internetKeyExchangeVersion,
      vpnConnectionDeviceTypeId: vpnConnectionDeviceTypeId,
      vpnConnectionId: vpnConnectionId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetSerialConsoleAccessStatus = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for
			your account. If <code>false</code>, access to the EC2 serial console of all instances
			is disabled for your account.</p>")
    @as("SerialConsoleAccessEnabled")
    serialConsoleAccessEnabled: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetSerialConsoleAccessStatusCommand"
  let make = (~dryRun=?, ()) => new({dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetPasswordData = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Windows instance.</p>") @as("InstanceId") instanceId: instanceId,
  }
  type response = {
    @ocaml.doc("<p>The time the data was last updated.</p>") @as("Timestamp")
    timestamp_: option<dateTime>,
    @ocaml.doc("<p>The password of the instance. Returns an empty string if the password is not
            available.</p>")
    @as("PasswordData")
    passwordData: option<string_>,
    @ocaml.doc("<p>The ID of the Windows instance.</p>") @as("InstanceId")
    instanceId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "GetPasswordDataCommand"
  let make = (~instanceId, ~dryRun=?, ()) => new({dryRun: dryRun, instanceId: instanceId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetEbsEncryptionByDefault = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Indicates whether encryption by default is enabled.</p>")
    @as("EbsEncryptionByDefault")
    ebsEncryptionByDefault: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetEbsEncryptionByDefaultCommand"
  let make = (~dryRun=?, ()) => new({dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetEbsDefaultKmsKeyId = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) of the default KMS key for encryption by default.</p>"
    )
    @as("KmsKeyId")
    kmsKeyId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "GetEbsDefaultKmsKeyIdCommand"
  let make = (~dryRun=?, ()) => new({dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetConsoleScreenshot = {
  type t
  type request = {
    @ocaml.doc("<p>When set to <code>true</code>, acts as keystroke input and wakes up an instance that's
            in standby or \"sleep\" mode.</p>")
    @as("WakeUp")
    wakeUp: option<boolean_>,
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: instanceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<string_>,
    @ocaml.doc("<p>The data that comprises the image.</p>") @as("ImageData")
    imageData: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "GetConsoleScreenshotCommand"
  let make = (~instanceId, ~wakeUp=?, ~dryRun=?, ()) =>
    new({wakeUp: wakeUp, instanceId: instanceId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetConsoleOutput = {
  type t
  type request = {
    @ocaml.doc("<p>When enabled, retrieves the latest console output for the instance.</p>
        <p>Default: disabled (<code>false</code>)</p>")
    @as("Latest")
    latest: option<boolean_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: instanceId,
  }
  type response = {
    @ocaml.doc("<p>The time at which the output was last updated.</p>") @as("Timestamp")
    timestamp_: option<dateTime>,
    @ocaml.doc("<p>The console output, base64-encoded. If you are using a command line tool, the tool
            decodes the output for you.</p>")
    @as("Output")
    output: option<string_>,
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "GetConsoleOutputCommand"
  let make = (~instanceId, ~latest=?, ~dryRun=?, ()) =>
    new({latest: latest, dryRun: dryRun, instanceId: instanceId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ExportClientVpnClientConfiguration = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Client VPN endpoint.</p>") @as("ClientVpnEndpointId")
    clientVpnEndpointId: clientVpnEndpointId,
  }
  type response = {
    @ocaml.doc("<p>The contents of the Client VPN endpoint configuration file.</p>")
    @as("ClientConfiguration")
    clientConfiguration: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ExportClientVpnClientConfigurationCommand"
  let make = (~clientVpnEndpointId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, clientVpnEndpointId: clientVpnEndpointId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module EnableVpcClassicLinkDnsSupport = {
  type t
  type request = {@ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<vpcId>}
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "EnableVpcClassicLinkDnsSupportCommand"
  let make = (~vpcId=?, ()) => new({vpcId: vpcId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module EnableVpcClassicLink = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: vpcId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "EnableVpcClassicLinkCommand"
  let make = (~vpcId, ~dryRun=?, ()) => new({vpcId: vpcId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module EnableVolumeIO = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the volume.</p>") @as("VolumeId") volumeId: volumeId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "EnableVolumeIOCommand"
  let make = (~volumeId, ~dryRun=?, ()) => new({volumeId: volumeId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module EnableVgwRoutePropagation = {
  type t
  @ocaml.doc("<p>Contains the parameters for EnableVgwRoutePropagation.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the route table. The routing table must be associated with the same VPC that
            the virtual private gateway is attached to. </p>")
    @as("RouteTableId")
    routeTableId: routeTableId,
    @ocaml.doc("<p>The ID of the virtual private gateway that is attached to a VPC. The virtual private
            gateway must be attached to the same VPC that the routing tables are associated with.
        </p>")
    @as("GatewayId")
    gatewayId: vpnGatewayId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "EnableVgwRoutePropagationCommand"
  let make = (~routeTableId, ~gatewayId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, routeTableId: routeTableId, gatewayId: gatewayId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module EnableSerialConsoleAccess = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for
			your account. If <code>false</code>, access to the EC2 serial console of all instances
			is disabled for your account.</p>")
    @as("SerialConsoleAccessEnabled")
    serialConsoleAccessEnabled: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "EnableSerialConsoleAccessCommand"
  let make = (~dryRun=?, ()) => new({dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module EnableIpamOrganizationAdminAccount = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The Organizations member account ID that you want to enable as the IPAM account.</p>"
    )
    @as("DelegatedAdminAccountId")
    delegatedAdminAccountId: string_,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The result of enabling the IPAM account.</p>") @as("Success")
    success: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "EnableIpamOrganizationAdminAccountCommand"
  let make = (~delegatedAdminAccountId, ~dryRun=?, ()) =>
    new({delegatedAdminAccountId: delegatedAdminAccountId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module EnableImageDeprecation = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The date and time to deprecate the AMI, in UTC, in the following format:
        <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z.
      If you specify a value for seconds, Amazon EC2 rounds the seconds to the
      nearest minute.</p>
         <p>You can’t specify a date in the past. The upper limit for <code>DeprecateAt</code> is 10
      years from now.</p>")
    @as("DeprecateAt")
    deprecateAt: millisecondDateTime,
    @ocaml.doc("<p>The ID of the AMI.</p>") @as("ImageId") imageId: imageId,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "EnableImageDeprecationCommand"
  let make = (~deprecateAt, ~imageId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, deprecateAt: deprecateAt, imageId: imageId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module EnableEbsEncryptionByDefault = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The updated status of encryption by default.</p>") @as("EbsEncryptionByDefault")
    ebsEncryptionByDefault: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "EnableEbsEncryptionByDefaultCommand"
  let make = (~dryRun=?, ()) => new({dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DisassociateTrunkInterface = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to Ensure
                Idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The ID of the association</p>") @as("AssociationId")
    associationId: trunkInterfaceAssociationId,
  }
  type response = {
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to Ensure
                Idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DisassociateTrunkInterfaceCommand"
  let make = (~associationId, ~dryRun=?, ~clientToken=?, ()) =>
    new({dryRun: dryRun, clientToken: clientToken, associationId: associationId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DisassociateRouteTable = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The association ID representing the current association between the route table and subnet or gateway.</p>"
    )
    @as("AssociationId")
    associationId: routeTableAssociationId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DisassociateRouteTableCommand"
  let make = (~associationId, ~dryRun=?, ()) => new({dryRun: dryRun, associationId: associationId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DisassociateEnclaveCertificateIamRole = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ARN of the IAM role to disassociate.</p>") @as("RoleArn")
    roleArn: option<resourceArn>,
    @ocaml.doc("<p>The ARN of the ACM certificate from which to disassociate the IAM role.</p>")
    @as("CertificateArn")
    certificateArn: option<resourceArn>,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DisassociateEnclaveCertificateIamRoleCommand"
  let make = (~dryRun=?, ~roleArn=?, ~certificateArn=?, ()) =>
    new({dryRun: dryRun, roleArn: roleArn, certificateArn: certificateArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DisassociateAddress = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>[EC2-Classic] The Elastic IP address. Required for EC2-Classic.</p>")
    @as("PublicIp")
    publicIp: option<string_>,
    @ocaml.doc("<p>[EC2-VPC] The association ID. Required for EC2-VPC.</p>") @as("AssociationId")
    associationId: option<elasticIpAssociationId>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DisassociateAddressCommand"
  let make = (~dryRun=?, ~publicIp=?, ~associationId=?, ()) =>
    new({dryRun: dryRun, publicIp: publicIp, associationId: associationId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DisableVpcClassicLinkDnsSupport = {
  type t
  type request = {@ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<vpcId>}
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DisableVpcClassicLinkDnsSupportCommand"
  let make = (~vpcId=?, ()) => new({vpcId: vpcId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DisableVpcClassicLink = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: vpcId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DisableVpcClassicLinkCommand"
  let make = (~vpcId, ~dryRun=?, ()) => new({vpcId: vpcId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DisableVgwRoutePropagation = {
  type t
  @ocaml.doc("<p>Contains the parameters for DisableVgwRoutePropagation.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the route table.</p>") @as("RouteTableId") routeTableId: routeTableId,
    @ocaml.doc("<p>The ID of the virtual private gateway.</p>") @as("GatewayId")
    gatewayId: vpnGatewayId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DisableVgwRoutePropagationCommand"
  let make = (~routeTableId, ~gatewayId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, routeTableId: routeTableId, gatewayId: gatewayId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DisableSerialConsoleAccess = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for
			your account. If <code>false</code>, access to the EC2 serial console of all instances
			is disabled for your account.</p>")
    @as("SerialConsoleAccessEnabled")
    serialConsoleAccessEnabled: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DisableSerialConsoleAccessCommand"
  let make = (~dryRun=?, ()) => new({dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DisableIpamOrganizationAdminAccount = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The Organizations member account ID that you want to disable as IPAM account.</p>"
    )
    @as("DelegatedAdminAccountId")
    delegatedAdminAccountId: string_,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The result of disabling the IPAM account.</p>") @as("Success")
    success: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DisableIpamOrganizationAdminAccountCommand"
  let make = (~delegatedAdminAccountId, ~dryRun=?, ()) =>
    new({delegatedAdminAccountId: delegatedAdminAccountId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DisableImageDeprecation = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the AMI.</p>") @as("ImageId") imageId: imageId,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DisableImageDeprecationCommand"
  let make = (~imageId, ~dryRun=?, ()) => new({dryRun: dryRun, imageId: imageId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DisableEbsEncryptionByDefault = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The updated status of encryption by default.</p>") @as("EbsEncryptionByDefault")
    ebsEncryptionByDefault: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DisableEbsEncryptionByDefaultCommand"
  let make = (~dryRun=?, ()) => new({dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DetachVpnGateway = {
  type t
  @ocaml.doc("<p>Contains the parameters for DetachVpnGateway.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the virtual private gateway.</p>") @as("VpnGatewayId")
    vpnGatewayId: vpnGatewayId,
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: vpcId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DetachVpnGatewayCommand"
  let make = (~vpnGatewayId, ~vpcId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, vpnGatewayId: vpnGatewayId, vpcId: vpcId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DetachVolume = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the volume.</p>") @as("VolumeId") volumeId: volumeId,
    @ocaml.doc(
      "<p>The ID of the instance. If you are detaching a Multi-Attach enabled volume, you must specify an instance ID.</p>"
    )
    @as("InstanceId")
    instanceId: option<instanceId>,
    @ocaml.doc("<p>Forces detachment if the previous detachment attempt did not occur cleanly (for example,
      logging into an instance, unmounting the volume, and detaching normally). This option can lead
      to data loss or a corrupted file system. Use this option only as a last resort to detach a
      volume from a failed instance. The instance won't have an opportunity to flush file system
      caches or file system metadata. If you use this option, you must perform file system check and
      repair procedures.</p>")
    @as("Force")
    force: option<boolean_>,
    @ocaml.doc("<p>The device name.</p>") @as("Device") device: option<string_>,
  }
  type response = volumeAttachment
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DetachVolumeCommand"
  let make = (~volumeId, ~dryRun=?, ~instanceId=?, ~force=?, ~device=?, ()) =>
    new({dryRun: dryRun, volumeId: volumeId, instanceId: instanceId, force: force, device: device})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DetachNetworkInterface = {
  type t
  @ocaml.doc("<p>Contains the parameters for DetachNetworkInterface.</p>")
  type request = {
    @ocaml.doc("<p>Specifies whether to force a detachment.</p>
        <note>
            <ul>
               <li>
                    <p>Use the <code>Force</code> parameter only as a last resort to detach a network interface from a failed instance. </p>
                </li>
               <li>
                    <p>If you use the <code>Force</code> parameter to detach a network interface, you might not be able to attach a different network interface to the same index on the instance without first stopping and starting the instance.</p>
                </li>
               <li>
                    <p>If you force the detachment of a network interface, the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\">instance metadata</a>
                        might not get updated. This means that the attributes associated
                        with the detached network interface might still be visible. The
                        instance metadata will get updated when you stop and start the
                        instance.</p>
                </li>
            </ul>
        </note>")
    @as("Force")
    force: option<boolean_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
            and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
            Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the attachment.</p>") @as("AttachmentId")
    attachmentId: networkInterfaceAttachmentId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DetachNetworkInterfaceCommand"
  let make = (~attachmentId, ~force=?, ~dryRun=?, ()) =>
    new({force: force, dryRun: dryRun, attachmentId: attachmentId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DetachInternetGateway = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: vpcId,
    @ocaml.doc("<p>The ID of the internet gateway.</p>") @as("InternetGatewayId")
    internetGatewayId: internetGatewayId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DetachInternetGatewayCommand"
  let make = (~vpcId, ~internetGatewayId, ~dryRun=?, ()) =>
    new({vpcId: vpcId, internetGatewayId: internetGatewayId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DetachClassicLinkVpc = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the VPC to which the instance is linked.</p>") @as("VpcId")
    vpcId: vpcId,
    @ocaml.doc("<p>The ID of the instance to unlink from the VPC.</p>") @as("InstanceId")
    instanceId: instanceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DetachClassicLinkVpcCommand"
  let make = (~vpcId, ~instanceId, ~dryRun=?, ()) =>
    new({vpcId: vpcId, instanceId: instanceId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeregisterImage = {
  type t
  @ocaml.doc("<p>Contains the parameters for DeregisterImage.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the AMI.</p>") @as("ImageId") imageId: imageId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeregisterImageCommand"
  let make = (~imageId, ~dryRun=?, ()) => new({dryRun: dryRun, imageId: imageId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteVpnGateway = {
  type t
  @ocaml.doc("<p>Contains the parameters for DeleteVpnGateway.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the virtual private gateway.</p>") @as("VpnGatewayId")
    vpnGatewayId: vpnGatewayId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteVpnGatewayCommand"
  let make = (~vpnGatewayId, ~dryRun=?, ()) => new({dryRun: dryRun, vpnGatewayId: vpnGatewayId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteVpnConnectionRoute = {
  type t
  @ocaml.doc("<p>Contains the parameters for DeleteVpnConnectionRoute.</p>")
  type request = {
    @ocaml.doc("<p>The ID of the VPN connection.</p>") @as("VpnConnectionId")
    vpnConnectionId: vpnConnectionId,
    @ocaml.doc("<p>The CIDR block associated with the local subnet of the customer network.</p>")
    @as("DestinationCidrBlock")
    destinationCidrBlock: string_,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteVpnConnectionRouteCommand"
  let make = (~vpnConnectionId, ~destinationCidrBlock, ()) =>
    new({vpnConnectionId: vpnConnectionId, destinationCidrBlock: destinationCidrBlock})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteVpnConnection = {
  type t
  @ocaml.doc("<p>Contains the parameters for DeleteVpnConnection.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the VPN connection.</p>") @as("VpnConnectionId")
    vpnConnectionId: vpnConnectionId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteVpnConnectionCommand"
  let make = (~vpnConnectionId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, vpnConnectionId: vpnConnectionId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteVpcPeeringConnection = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the VPC peering connection.</p>") @as("VpcPeeringConnectionId")
    vpcPeeringConnectionId: vpcPeeringConnectionId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteVpcPeeringConnectionCommand"
  let make = (~vpcPeeringConnectionId, ~dryRun=?, ()) =>
    new({vpcPeeringConnectionId: vpcPeeringConnectionId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteVpc = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: vpcId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteVpcCommand"
  let make = (~vpcId, ~dryRun=?, ()) => new({dryRun: dryRun, vpcId: vpcId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteVolume = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the volume.</p>") @as("VolumeId") volumeId: volumeId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteVolumeCommand"
  let make = (~volumeId, ~dryRun=?, ()) => new({dryRun: dryRun, volumeId: volumeId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteTrafficMirrorTarget = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Traffic Mirror target.</p>") @as("TrafficMirrorTargetId")
    trafficMirrorTargetId: trafficMirrorTargetId,
  }
  type response = {
    @ocaml.doc("<p>The ID of the deleted Traffic Mirror target.</p>") @as("TrafficMirrorTargetId")
    trafficMirrorTargetId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteTrafficMirrorTargetCommand"
  let make = (~trafficMirrorTargetId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, trafficMirrorTargetId: trafficMirrorTargetId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteTrafficMirrorSession = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Traffic Mirror session.</p>") @as("TrafficMirrorSessionId")
    trafficMirrorSessionId: trafficMirrorSessionId,
  }
  type response = {
    @ocaml.doc("<p>The ID of the deleted Traffic Mirror session.</p>") @as("TrafficMirrorSessionId")
    trafficMirrorSessionId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteTrafficMirrorSessionCommand"
  let make = (~trafficMirrorSessionId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, trafficMirrorSessionId: trafficMirrorSessionId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteTrafficMirrorFilterRule = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Traffic Mirror rule.</p>") @as("TrafficMirrorFilterRuleId")
    trafficMirrorFilterRuleId: trafficMirrorFilterRuleId,
  }
  type response = {
    @ocaml.doc("<p>The ID of the deleted Traffic Mirror rule.</p>") @as("TrafficMirrorFilterRuleId")
    trafficMirrorFilterRuleId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteTrafficMirrorFilterRuleCommand"
  let make = (~trafficMirrorFilterRuleId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, trafficMirrorFilterRuleId: trafficMirrorFilterRuleId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteTrafficMirrorFilter = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Traffic Mirror filter.</p>") @as("TrafficMirrorFilterId")
    trafficMirrorFilterId: trafficMirrorFilterId,
  }
  type response = {
    @ocaml.doc("<p>The ID of the Traffic Mirror filter.</p>") @as("TrafficMirrorFilterId")
    trafficMirrorFilterId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteTrafficMirrorFilterCommand"
  let make = (~trafficMirrorFilterId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, trafficMirrorFilterId: trafficMirrorFilterId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteSubnet = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the subnet.</p>") @as("SubnetId") subnetId: subnetId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteSubnetCommand"
  let make = (~subnetId, ~dryRun=?, ()) => new({dryRun: dryRun, subnetId: subnetId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteSpotDatafeedSubscription = {
  type t
  @ocaml.doc("<p>Contains the parameters for DeleteSpotDatafeedSubscription.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteSpotDatafeedSubscriptionCommand"
  let make = (~dryRun=?, ()) => new({dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteSnapshot = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the EBS snapshot.</p>") @as("SnapshotId") snapshotId: snapshotId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteSnapshotCommand"
  let make = (~snapshotId, ~dryRun=?, ()) => new({dryRun: dryRun, snapshotId: snapshotId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteSecurityGroup = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>[EC2-Classic, default VPC] The name of the security group. You can specify either the security group name or the security group ID.</p>"
    )
    @as("GroupName")
    groupName: option<securityGroupName>,
    @ocaml.doc("<p>The ID of the security group. Required for a nondefault VPC.</p>") @as("GroupId")
    groupId: option<securityGroupId>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteSecurityGroupCommand"
  let make = (~dryRun=?, ~groupName=?, ~groupId=?, ()) =>
    new({dryRun: dryRun, groupName: groupName, groupId: groupId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteRouteTable = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the route table.</p>") @as("RouteTableId") routeTableId: routeTableId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteRouteTableCommand"
  let make = (~routeTableId, ~dryRun=?, ()) => new({routeTableId: routeTableId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteRoute = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the route table.</p>") @as("RouteTableId") routeTableId: routeTableId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the prefix list for the route.</p>") @as("DestinationPrefixListId")
    destinationPrefixListId: option<prefixListResourceId>,
    @ocaml.doc(
      "<p>The IPv6 CIDR range for the route. The value you specify must match the CIDR for the route exactly.</p>"
    )
    @as("DestinationIpv6CidrBlock")
    destinationIpv6CidrBlock: option<string_>,
    @ocaml.doc(
      "<p>The IPv4 CIDR range for the route. The value you specify must match the CIDR for the route exactly.</p>"
    )
    @as("DestinationCidrBlock")
    destinationCidrBlock: option<string_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteRouteCommand"
  let make = (
    ~routeTableId,
    ~dryRun=?,
    ~destinationPrefixListId=?,
    ~destinationIpv6CidrBlock=?,
    ~destinationCidrBlock=?,
    (),
  ) =>
    new({
      routeTableId: routeTableId,
      dryRun: dryRun,
      destinationPrefixListId: destinationPrefixListId,
      destinationIpv6CidrBlock: destinationIpv6CidrBlock,
      destinationCidrBlock: destinationCidrBlock,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeletePublicIpv4Pool = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the public IPv4 pool you want to delete.</p>") @as("PoolId")
    poolId: ipv4PoolEc2Id,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the result of deleting the public IPv4 pool.</p>")
    @as("ReturnValue")
    returnValue: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeletePublicIpv4PoolCommand"
  let make = (~poolId, ~dryRun=?, ()) => new({poolId: poolId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeletePlacementGroup = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the placement group.</p>") @as("GroupName")
    groupName: placementGroupName,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeletePlacementGroupCommand"
  let make = (~groupName, ~dryRun=?, ()) => new({groupName: groupName, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteNetworkInterfacePermission = {
  type t
  @ocaml.doc("<p>Contains the parameters for DeleteNetworkInterfacePermission.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
			Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Specify <code>true</code> to remove the permission even if the network interface is
			attached to an instance.</p>")
    @as("Force")
    force: option<boolean_>,
    @ocaml.doc("<p>The ID of the network interface permission.</p>")
    @as("NetworkInterfacePermissionId")
    networkInterfacePermissionId: networkInterfacePermissionId,
  }
  @ocaml.doc("<p>Contains the output for DeleteNetworkInterfacePermission.</p>")
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds, otherwise returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteNetworkInterfacePermissionCommand"
  let make = (~networkInterfacePermissionId, ~dryRun=?, ~force=?, ()) =>
    new({dryRun: dryRun, force: force, networkInterfacePermissionId: networkInterfacePermissionId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteNetworkInterface = {
  type t
  @ocaml.doc("<p>Contains the parameters for DeleteNetworkInterface.</p>")
  type request = {
    @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
    networkInterfaceId: networkInterfaceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
            and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
            Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteNetworkInterfaceCommand"
  let make = (~networkInterfaceId, ~dryRun=?, ()) =>
    new({networkInterfaceId: networkInterfaceId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteNetworkInsightsPath = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the path.</p>") @as("NetworkInsightsPathId")
    networkInsightsPathId: networkInsightsPathId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The ID of the path.</p>") @as("NetworkInsightsPathId")
    networkInsightsPathId: option<networkInsightsPathId>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteNetworkInsightsPathCommand"
  let make = (~networkInsightsPathId, ~dryRun=?, ()) =>
    new({networkInsightsPathId: networkInsightsPathId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteNetworkInsightsAnalysis = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the network insights analysis.</p>") @as("NetworkInsightsAnalysisId")
    networkInsightsAnalysisId: networkInsightsAnalysisId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The ID of the network insights analysis.</p>") @as("NetworkInsightsAnalysisId")
    networkInsightsAnalysisId: option<networkInsightsAnalysisId>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteNetworkInsightsAnalysisCommand"
  let make = (~networkInsightsAnalysisId, ~dryRun=?, ()) =>
    new({networkInsightsAnalysisId: networkInsightsAnalysisId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteNetworkInsightsAccessScopeAnalysis = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Network Access Scope analysis.</p>")
    @as("NetworkInsightsAccessScopeAnalysisId")
    networkInsightsAccessScopeAnalysisId: networkInsightsAccessScopeAnalysisId,
  }
  type response = {
    @ocaml.doc("<p>The ID of the Network Access Scope analysis.</p>")
    @as("NetworkInsightsAccessScopeAnalysisId")
    networkInsightsAccessScopeAnalysisId: option<networkInsightsAccessScopeAnalysisId>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteNetworkInsightsAccessScopeAnalysisCommand"
  let make = (~networkInsightsAccessScopeAnalysisId, ~dryRun=?, ()) =>
    new({
      dryRun: dryRun,
      networkInsightsAccessScopeAnalysisId: networkInsightsAccessScopeAnalysisId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteNetworkInsightsAccessScope = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the Network Access Scope.</p>") @as("NetworkInsightsAccessScopeId")
    networkInsightsAccessScopeId: networkInsightsAccessScopeId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The ID of the Network Access Scope.</p>") @as("NetworkInsightsAccessScopeId")
    networkInsightsAccessScopeId: option<networkInsightsAccessScopeId>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteNetworkInsightsAccessScopeCommand"
  let make = (~networkInsightsAccessScopeId, ~dryRun=?, ()) =>
    new({networkInsightsAccessScopeId: networkInsightsAccessScopeId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteNetworkAclEntry = {
  type t
  type request = {
    @ocaml.doc("<p>The rule number of the entry to delete.</p>") @as("RuleNumber")
    ruleNumber: integer_,
    @ocaml.doc("<p>The ID of the network ACL.</p>") @as("NetworkAclId") networkAclId: networkAclId,
    @ocaml.doc("<p>Indicates whether the rule is an egress rule.</p>") @as("Egress")
    egress: boolean_,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteNetworkAclEntryCommand"
  let make = (~ruleNumber, ~networkAclId, ~egress, ~dryRun=?, ()) =>
    new({ruleNumber: ruleNumber, networkAclId: networkAclId, egress: egress, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteNetworkAcl = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the network ACL.</p>") @as("NetworkAclId") networkAclId: networkAclId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteNetworkAclCommand"
  let make = (~networkAclId, ~dryRun=?, ()) => new({networkAclId: networkAclId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteNatGateway = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the NAT gateway.</p>") @as("NatGatewayId") natGatewayId: natGatewayId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The ID of the NAT gateway.</p>") @as("NatGatewayId")
    natGatewayId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteNatGatewayCommand"
  let make = (~natGatewayId, ~dryRun=?, ()) => new({natGatewayId: natGatewayId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteKeyPair = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the key pair.</p>") @as("KeyPairId") keyPairId: option<keyPairId>,
    @ocaml.doc("<p>The name of the key pair.</p>") @as("KeyName") keyName: option<keyPairName>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteKeyPairCommand"
  let make = (~dryRun=?, ~keyPairId=?, ~keyName=?, ()) =>
    new({dryRun: dryRun, keyPairId: keyPairId, keyName: keyName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteInternetGateway = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the internet gateway.</p>") @as("InternetGatewayId")
    internetGatewayId: internetGatewayId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteInternetGatewayCommand"
  let make = (~internetGatewayId, ~dryRun=?, ()) =>
    new({internetGatewayId: internetGatewayId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteFpgaImage = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the AFI.</p>") @as("FpgaImageId") fpgaImageId: fpgaImageId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>")
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteFpgaImageCommand"
  let make = (~fpgaImageId, ~dryRun=?, ()) => new({fpgaImageId: fpgaImageId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteEgressOnlyInternetGateway = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the egress-only internet gateway.</p>")
    @as("EgressOnlyInternetGatewayId")
    egressOnlyInternetGatewayId: egressOnlyInternetGatewayId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("ReturnCode")
    returnCode: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteEgressOnlyInternetGatewayCommand"
  let make = (~egressOnlyInternetGatewayId, ~dryRun=?, ()) =>
    new({egressOnlyInternetGatewayId: egressOnlyInternetGatewayId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteDhcpOptions = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the DHCP options set.</p>") @as("DhcpOptionsId")
    dhcpOptionsId: dhcpOptionsId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteDhcpOptionsCommand"
  let make = (~dhcpOptionsId, ~dryRun=?, ()) => new({dryRun: dryRun, dhcpOptionsId: dhcpOptionsId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteCustomerGateway = {
  type t
  @ocaml.doc("<p>Contains the parameters for DeleteCustomerGateway.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the customer gateway.</p>") @as("CustomerGatewayId")
    customerGatewayId: customerGatewayId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteCustomerGatewayCommand"
  let make = (~customerGatewayId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, customerGatewayId: customerGatewayId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module CreateVpnConnectionRoute = {
  type t
  @ocaml.doc("<p>Contains the parameters for CreateVpnConnectionRoute.</p>")
  type request = {
    @ocaml.doc("<p>The ID of the VPN connection.</p>") @as("VpnConnectionId")
    vpnConnectionId: vpnConnectionId,
    @ocaml.doc("<p>The CIDR block associated with the local subnet of the customer network.</p>")
    @as("DestinationCidrBlock")
    destinationCidrBlock: string_,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateVpnConnectionRouteCommand"
  let make = (~vpnConnectionId, ~destinationCidrBlock, ()) =>
    new({vpnConnectionId: vpnConnectionId, destinationCidrBlock: destinationCidrBlock})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module CreateRoute = {
  type t
  type request = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the core network.</p>") @as("CoreNetworkArn")
    coreNetworkArn: option<coreNetworkArn>,
    @ocaml.doc("<p>The ID of a VPC peering connection.</p>") @as("VpcPeeringConnectionId")
    vpcPeeringConnectionId: option<vpcPeeringConnectionId>,
    @ocaml.doc("<p>The ID of the route table for the route.</p>") @as("RouteTableId")
    routeTableId: routeTableId,
    @ocaml.doc("<p>The ID of a network interface.</p>") @as("NetworkInterfaceId")
    networkInterfaceId: option<networkInterfaceId>,
    @ocaml.doc("<p>The ID of the carrier gateway.</p>
        <p>You can only use this option when the VPC contains a subnet which is associated with a Wavelength Zone.</p>")
    @as("CarrierGatewayId")
    carrierGatewayId: option<carrierGatewayId>,
    @ocaml.doc("<p>The ID of the local gateway.</p>") @as("LocalGatewayId")
    localGatewayId: option<localGatewayId>,
    @ocaml.doc("<p>The ID of a transit gateway.</p>") @as("TransitGatewayId")
    transitGatewayId: option<transitGatewayId>,
    @ocaml.doc("<p>[IPv4 traffic only] The ID of a NAT gateway.</p>") @as("NatGatewayId")
    natGatewayId: option<natGatewayId>,
    @ocaml.doc(
      "<p>The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.</p>"
    )
    @as("InstanceId")
    instanceId: option<instanceId>,
    @ocaml.doc("<p>The ID of an internet gateway or virtual private gateway attached to your
			VPC.</p>")
    @as("GatewayId")
    gatewayId: option<routeGatewayId>,
    @ocaml.doc("<p>[IPv6 traffic only] The ID of an egress-only internet gateway.</p>")
    @as("EgressOnlyInternetGatewayId")
    egressOnlyInternetGatewayId: option<egressOnlyInternetGatewayId>,
    @ocaml.doc(
      "<p>The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.</p>"
    )
    @as("VpcEndpointId")
    vpcEndpointId: option<vpcEndpointId>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of a prefix list used for the destination match.</p>")
    @as("DestinationPrefixListId")
    destinationPrefixListId: option<prefixListResourceId>,
    @ocaml.doc(
      "<p>The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match.</p>"
    )
    @as("DestinationIpv6CidrBlock")
    destinationIpv6CidrBlock: option<string_>,
    @ocaml.doc(
      "<p>The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match. We modify the specified CIDR block to its canonical form; for example, if you specify <code>100.68.0.18/18</code>, we modify it to <code>100.68.0.0/18</code>.</p>"
    )
    @as("DestinationCidrBlock")
    destinationCidrBlock: option<string_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateRouteCommand"
  let make = (
    ~routeTableId,
    ~coreNetworkArn=?,
    ~vpcPeeringConnectionId=?,
    ~networkInterfaceId=?,
    ~carrierGatewayId=?,
    ~localGatewayId=?,
    ~transitGatewayId=?,
    ~natGatewayId=?,
    ~instanceId=?,
    ~gatewayId=?,
    ~egressOnlyInternetGatewayId=?,
    ~vpcEndpointId=?,
    ~dryRun=?,
    ~destinationPrefixListId=?,
    ~destinationIpv6CidrBlock=?,
    ~destinationCidrBlock=?,
    (),
  ) =>
    new({
      coreNetworkArn: coreNetworkArn,
      vpcPeeringConnectionId: vpcPeeringConnectionId,
      routeTableId: routeTableId,
      networkInterfaceId: networkInterfaceId,
      carrierGatewayId: carrierGatewayId,
      localGatewayId: localGatewayId,
      transitGatewayId: transitGatewayId,
      natGatewayId: natGatewayId,
      instanceId: instanceId,
      gatewayId: gatewayId,
      egressOnlyInternetGatewayId: egressOnlyInternetGatewayId,
      vpcEndpointId: vpcEndpointId,
      dryRun: dryRun,
      destinationPrefixListId: destinationPrefixListId,
      destinationIpv6CidrBlock: destinationIpv6CidrBlock,
      destinationCidrBlock: destinationCidrBlock,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CopyImage = {
  type t
  @ocaml.doc("<p>Contains the parameters for CopyImage.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Outpost to which to copy the AMI. Only 
  		specify this parameter when copying an AMI from an Amazon Web Services Region to an Outpost. 
  		The AMI must be in the Region of the destination Outpost. You cannot copy an 
  		AMI from an Outpost to a Region, from one Outpost to another, or within the same 
  		Outpost.</p>
  	
  	      <p>For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#copy-amis\">
  		Copying AMIs from an Amazon Web Services Region to an Outpost</a> in the 
  		<i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
    @as("DestinationOutpostArn")
    destinationOutpostArn: option<string_>,
    @ocaml.doc("<p>The name of the Region that contains the AMI to copy.</p>") @as("SourceRegion")
    sourceRegion: string_,
    @ocaml.doc("<p>The ID of the AMI to copy.</p>") @as("SourceImageId") sourceImageId: string_,
    @ocaml.doc("<p>The name of the new AMI in the destination Region.</p>") @as("Name")
    name: string_,
    @ocaml.doc("<p>The identifier of the symmetric Key Management Service (KMS) KMS key to use when creating
   		encrypted volumes. If this parameter is not specified, your Amazon Web Services managed KMS key for Amazon EBS is used. 
   		If you specify a KMS key, you must also set the encrypted state to <code>true</code>.</p>
   	     <p>You can specify a KMS key using any of the following:</p>
   	     <ul>
            <li>
   			         <p>Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.</p>
   		       </li>
            <li>
   	           <p>Key alias. For example, alias/ExampleAlias.</p>
   	        </li>
            <li>
   	           <p>Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.</p>
   		       </li>
            <li>
   		          <p>Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.</p>
   		       </li>
         </ul>
   	     <p>Amazon Web Services authenticates the KMS key asynchronously. Therefore, if you specify an identifier that is not valid,
      the action can appear to complete, but eventually fails.</p>
   	     <p>The specified KMS key must exist in the destination Region.</p>
   	     <p>Amazon EBS does not support asymmetric KMS keys.</p>")
    @as("KmsKeyId")
    kmsKeyId: option<kmsKeyId>,
    @ocaml.doc("<p>Specifies whether the destination snapshots of the copied image should be encrypted.
       You can encrypt a copy of an unencrypted snapshot, but you cannot create an unencrypted
       copy of an encrypted snapshot. The default KMS key for Amazon EBS is used unless you specify a non-default 
       Key Management Service (KMS) KMS key using <code>KmsKeyId</code>. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
    @as("Encrypted")
    encrypted: option<boolean_>,
    @ocaml.doc("<p>A description for the new AMI in the destination Region.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>Unique, case-sensitive identifier you provide to ensure
       idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring idempotency</a> 
       in the <i>Amazon EC2 API Reference</i>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
  }
  @ocaml.doc("<p>Contains the output of CopyImage.</p>")
  type response = {
    @ocaml.doc("<p>The ID of the new AMI.</p>") @as("ImageId") imageId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CopyImageCommand"
  let make = (
    ~sourceRegion,
    ~sourceImageId,
    ~name,
    ~dryRun=?,
    ~destinationOutpostArn=?,
    ~kmsKeyId=?,
    ~encrypted=?,
    ~description=?,
    ~clientToken=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      destinationOutpostArn: destinationOutpostArn,
      sourceRegion: sourceRegion,
      sourceImageId: sourceImageId,
      name: name,
      kmsKeyId: kmsKeyId,
      encrypted: encrypted,
      description: description,
      clientToken: clientToken,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CopyFpgaImage = {
  type t
  type request = {
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. 
         For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">Ensuring idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The Region that contains the source AFI.</p>") @as("SourceRegion")
    sourceRegion: string_,
    @ocaml.doc("<p>The name for the new AFI. The default is the name of the source AFI.</p>")
    @as("Name")
    name: option<string_>,
    @ocaml.doc("<p>The description for the new AFI.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The ID of the source AFI.</p>") @as("SourceFpgaImageId")
    sourceFpgaImageId: string_,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The ID of the new AFI.</p>") @as("FpgaImageId") fpgaImageId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CopyFpgaImageCommand"
  let make = (
    ~sourceRegion,
    ~sourceFpgaImageId,
    ~clientToken=?,
    ~name=?,
    ~description=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      clientToken: clientToken,
      sourceRegion: sourceRegion,
      name: name,
      description: description,
      sourceFpgaImageId: sourceFpgaImageId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ConfirmProductInstance = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The product code. This must be a product code that you own.</p>")
    @as("ProductCode")
    productCode: string_,
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: instanceId,
  }
  type response = {
    @ocaml.doc("<p>The return value of the request. Returns <code>true</code> if the specified product
            code is owned by the requester and associated with the specified instance.</p>")
    @as("Return")
    return: option<boolean_>,
    @ocaml.doc("<p>The Amazon Web Services account ID of the instance owner. This is only present if the
            product code is attached to the instance.</p>")
    @as("OwnerId")
    ownerId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ConfirmProductInstanceCommand"
  let make = (~productCode, ~instanceId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, productCode: productCode, instanceId: instanceId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CancelImportTask = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the import image or import snapshot task to be canceled.</p>")
    @as("ImportTaskId")
    importTaskId: option<importTaskId>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The reason for canceling the task.</p>") @as("CancelReason")
    cancelReason: option<string_>,
  }
  type response = {
    @ocaml.doc("<p>The current state of the task being canceled.</p>") @as("State")
    state: option<string_>,
    @ocaml.doc("<p>The current state of the task being canceled.</p>") @as("PreviousState")
    previousState: option<string_>,
    @ocaml.doc("<p>The ID of the task being canceled.</p>") @as("ImportTaskId")
    importTaskId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CancelImportTaskCommand"
  let make = (~importTaskId=?, ~dryRun=?, ~cancelReason=?, ()) =>
    new({importTaskId: importTaskId, dryRun: dryRun, cancelReason: cancelReason})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CancelExportTask = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The ID of the export task. This is the ID returned by <code>CreateInstanceExportTask</code>.</p>"
    )
    @as("ExportTaskId")
    exportTaskId: exportVmTaskId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CancelExportTaskCommand"
  let make = (~exportTaskId, ()) => new({exportTaskId: exportTaskId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module CancelConversionTask = {
  type t
  type request = {
    @ocaml.doc("<p>The reason for canceling the conversion task.</p>") @as("ReasonMessage")
    reasonMessage: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the conversion task.</p>") @as("ConversionTaskId")
    conversionTaskId: conversionTaskId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CancelConversionTaskCommand"
  let make = (~conversionTaskId, ~reasonMessage=?, ~dryRun=?, ()) =>
    new({reasonMessage: reasonMessage, dryRun: dryRun, conversionTaskId: conversionTaskId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module CancelCapacityReservation = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Capacity Reservation to be cancelled.</p>")
    @as("CapacityReservationId")
    capacityReservationId: capacityReservationId,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CancelCapacityReservationCommand"
  let make = (~capacityReservationId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, capacityReservationId: capacityReservationId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AttachVolume = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the EBS volume. The volume and instance must be within the same Availability
      Zone.</p>")
    @as("VolumeId")
    volumeId: volumeId,
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: instanceId,
    @ocaml.doc("<p>The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>")
    @as("Device")
    device: string_,
  }
  type response = volumeAttachment
  @module("@aws-sdk/client-ec2") @new external new: request => t = "AttachVolumeCommand"
  let make = (~volumeId, ~instanceId, ~device, ~dryRun=?, ()) =>
    new({dryRun: dryRun, volumeId: volumeId, instanceId: instanceId, device: device})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AttachNetworkInterface = {
  type t
  @ocaml.doc("<p>Contains the parameters for AttachNetworkInterface.</p>")
  type request = {
    @ocaml.doc("<p>The index of the network card. Some instance types support multiple network cards. 
            The primary network interface must be assigned to network card index 0. 
            The default is network card index 0.</p>")
    @as("NetworkCardIndex")
    networkCardIndex: option<integer_>,
    @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
    networkInterfaceId: networkInterfaceId,
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: instanceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
            and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
            Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The index of the device for the network interface attachment.</p>")
    @as("DeviceIndex")
    deviceIndex: integer_,
  }
  @ocaml.doc("<p>Contains the output of AttachNetworkInterface.</p>")
  type response = {
    @ocaml.doc("<p>The index of the network card.</p>") @as("NetworkCardIndex")
    networkCardIndex: option<integer_>,
    @ocaml.doc("<p>The ID of the network interface attachment.</p>") @as("AttachmentId")
    attachmentId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "AttachNetworkInterfaceCommand"
  let make = (~networkInterfaceId, ~instanceId, ~deviceIndex, ~networkCardIndex=?, ~dryRun=?, ()) =>
    new({
      networkCardIndex: networkCardIndex,
      networkInterfaceId: networkInterfaceId,
      instanceId: instanceId,
      dryRun: dryRun,
      deviceIndex: deviceIndex,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AttachInternetGateway = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: vpcId,
    @ocaml.doc("<p>The ID of the internet gateway.</p>") @as("InternetGatewayId")
    internetGatewayId: internetGatewayId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "AttachInternetGatewayCommand"
  let make = (~vpcId, ~internetGatewayId, ~dryRun=?, ()) =>
    new({vpcId: vpcId, internetGatewayId: internetGatewayId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module AssociateEnclaveCertificateIamRole = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ARN of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM roles with an ACM 
			certificate.</p>")
    @as("RoleArn")
    roleArn: option<resourceArn>,
    @ocaml.doc("<p>The ARN of the ACM certificate with which to associate the IAM role.</p>")
    @as("CertificateArn")
    certificateArn: option<resourceArn>,
  }
  type response = {
    @ocaml.doc("<p>The ID of the KMS key used to encrypt the private key of the certificate.</p>")
    @as("EncryptionKmsKeyId")
    encryptionKmsKeyId: option<string_>,
    @ocaml.doc("<p>The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored. The 
			object key is formatted as follows:  <code>role_arn</code>/<code>certificate_arn</code>.</p>")
    @as("CertificateS3ObjectKey")
    certificateS3ObjectKey: option<string_>,
    @ocaml.doc("<p>The name of the Amazon S3 bucket to which the certificate was uploaded.</p>")
    @as("CertificateS3BucketName")
    certificateS3BucketName: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "AssociateEnclaveCertificateIamRoleCommand"
  let make = (~dryRun=?, ~roleArn=?, ~certificateArn=?, ()) =>
    new({dryRun: dryRun, roleArn: roleArn, certificateArn: certificateArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AssociateDhcpOptions = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: vpcId,
    @ocaml.doc("<p>The ID of the DHCP options set, or <code>default</code> to associate 
        no DHCP options with the VPC.</p>")
    @as("DhcpOptionsId")
    dhcpOptionsId: defaultingDhcpOptionsId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "AssociateDhcpOptionsCommand"
  let make = (~vpcId, ~dhcpOptionsId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, vpcId: vpcId, dhcpOptionsId: dhcpOptionsId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module AssociateAddress = {
  type t
  type request = {
    @ocaml.doc(
      "<p>[EC2-VPC] The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.</p>"
    )
    @as("PrivateIpAddress")
    privateIpAddress: option<string_>,
    @ocaml.doc("<p>[EC2-VPC] The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID.</p>
   	     <p>For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. </p>")
    @as("NetworkInterfaceId")
    networkInterfaceId: option<networkInterfaceId>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>[EC2-VPC] For a VPC in an EC2-Classic account, specify true to allow an Elastic IP address that is already associated with an instance or network interface to be reassociated with the specified instance or network interface. Otherwise, the operation fails. In a VPC in an EC2-VPC-only account, reassociation is automatic, therefore you can specify false to ensure the operation fails if the Elastic IP address is already associated with another resource.</p>"
    )
    @as("AllowReassociation")
    allowReassociation: option<boolean_>,
    @ocaml.doc("<p>[EC2-Classic] The Elastic IP address to associate with the instance. This is required for
      EC2-Classic.</p>")
    @as("PublicIp")
    publicIp: option<string_>,
    @ocaml.doc("<p>The ID of the instance. The instance must have exactly one attached network interface.
      For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both.
      For EC2-Classic, you must specify an instance ID and the instance must be in the running
      state.</p>")
    @as("InstanceId")
    instanceId: option<instanceId>,
    @ocaml.doc("<p>[EC2-VPC] The allocation ID. This is required for EC2-VPC.</p>")
    @as("AllocationId")
    allocationId: option<allocationId>,
  }
  type response = {
    @ocaml.doc(
      "<p>[EC2-VPC] The ID that represents the association of the Elastic IP address with an instance.</p>"
    )
    @as("AssociationId")
    associationId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "AssociateAddressCommand"
  let make = (
    ~privateIpAddress=?,
    ~networkInterfaceId=?,
    ~dryRun=?,
    ~allowReassociation=?,
    ~publicIp=?,
    ~instanceId=?,
    ~allocationId=?,
    (),
  ) =>
    new({
      privateIpAddress: privateIpAddress,
      networkInterfaceId: networkInterfaceId,
      dryRun: dryRun,
      allowReassociation: allowReassociation,
      publicIp: publicIp,
      instanceId: instanceId,
      allocationId: allocationId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module WithdrawByoipCidr = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The address range, in CIDR notation.</p>") @as("Cidr") cidr: string_,
  }
  type response = {
    @ocaml.doc("<p>Information about the address pool.</p>") @as("ByoipCidr")
    byoipCidr: option<byoipCidr>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "WithdrawByoipCidrCommand"
  let make = (~cidr, ~dryRun=?, ()) => new({dryRun: dryRun, cidr: cidr})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module UnassignPrivateIpAddresses = {
  type t
  @ocaml.doc("<p>Contains the parameters for UnassignPrivateIpAddresses.</p>")
  type request = {
    @ocaml.doc("<p>The IPv4 prefixes to unassign from  the network interface.</p>")
    @as("Ipv4Prefixes")
    ipv4Prefixes: option<ipPrefixList>,
    @ocaml.doc(
      "<p>The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.</p>"
    )
    @as("PrivateIpAddresses")
    privateIpAddresses: option<privateIpAddressStringList>,
    @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
    networkInterfaceId: networkInterfaceId,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "UnassignPrivateIpAddressesCommand"
  let make = (~networkInterfaceId, ~ipv4Prefixes=?, ~privateIpAddresses=?, ()) =>
    new({
      ipv4Prefixes: ipv4Prefixes,
      privateIpAddresses: privateIpAddresses,
      networkInterfaceId: networkInterfaceId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module UnassignIpv6Addresses = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
    networkInterfaceId: networkInterfaceId,
    @ocaml.doc("<p>One or more IPv6 prefixes to unassign from the network interface.</p>")
    @as("Ipv6Prefixes")
    ipv6Prefixes: option<ipPrefixList>,
    @ocaml.doc("<p>The IPv6 addresses to unassign from the network interface.</p>")
    @as("Ipv6Addresses")
    ipv6Addresses: option<ipv6AddressList>,
  }
  type response = {
    @ocaml.doc("<p>The IPv4 prefixes that have been unassigned from  the network interface.</p>")
    @as("UnassignedIpv6Prefixes")
    unassignedIpv6Prefixes: option<ipPrefixList>,
    @ocaml.doc("<p>The IPv6 addresses that have been unassigned from the network interface.</p>")
    @as("UnassignedIpv6Addresses")
    unassignedIpv6Addresses: option<ipv6AddressList>,
    @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
    networkInterfaceId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "UnassignIpv6AddressesCommand"
  let make = (~networkInterfaceId, ~ipv6Prefixes=?, ~ipv6Addresses=?, ()) =>
    new({
      networkInterfaceId: networkInterfaceId,
      ipv6Prefixes: ipv6Prefixes,
      ipv6Addresses: ipv6Addresses,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RevokeClientVpnIngress = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Indicates whether access should be revoked for all clients.</p>")
    @as("RevokeAllGroups")
    revokeAllGroups: option<boolean_>,
    @ocaml.doc("<p>The ID of the Active Directory group for which to revoke access. </p>")
    @as("AccessGroupId")
    accessGroupId: option<string_>,
    @ocaml.doc(
      "<p>The IPv4 address range, in CIDR notation, of the network for which access is being removed.</p>"
    )
    @as("TargetNetworkCidr")
    targetNetworkCidr: string_,
    @ocaml.doc(
      "<p>The ID of the Client VPN endpoint with which the authorization rule is associated.</p>"
    )
    @as("ClientVpnEndpointId")
    clientVpnEndpointId: clientVpnEndpointId,
  }
  type response = {
    @ocaml.doc("<p>The current state of the authorization rule.</p>") @as("Status")
    status: option<clientVpnAuthorizationRuleStatus>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "RevokeClientVpnIngressCommand"
  let make = (
    ~targetNetworkCidr,
    ~clientVpnEndpointId,
    ~dryRun=?,
    ~revokeAllGroups=?,
    ~accessGroupId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      revokeAllGroups: revokeAllGroups,
      accessGroupId: accessGroupId,
      targetNetworkCidr: targetNetworkCidr,
      clientVpnEndpointId: clientVpnEndpointId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ReportInstanceStatus = {
  type t
  type request = {
    @ocaml.doc("<p>The status of all instances listed.</p>") @as("Status") status: reportStatusType,
    @ocaml.doc("<p>The time at which the reported instance health state began.</p>")
    @as("StartTime")
    startTime: option<dateTime>,
    @ocaml.doc("<p>The reason codes that describe the health state of your instance.</p>
        <ul>
            <li>
                <p>
                    <code>instance-stuck-in-state</code>: My instance is stuck in a state.</p>
            </li>
            <li>
                <p>
                    <code>unresponsive</code>: My instance is unresponsive.</p>
            </li>
            <li>
                <p>
                    <code>not-accepting-credentials</code>: My instance is not accepting my
                    credentials.</p>
            </li>
            <li>
                <p>
                    <code>password-not-available</code>: A password is not available for my
                    instance.</p>
            </li>
            <li>
                <p>
                    <code>performance-network</code>: My instance is experiencing performance
                    problems that I believe are network related.</p>
            </li>
            <li>
                <p>
                    <code>performance-instance-store</code>: My instance is experiencing performance
                    problems that I believe are related to the instance stores.</p>
            </li>
            <li>
                <p>
                    <code>performance-ebs-volume</code>: My instance is experiencing performance
                    problems that I believe are related to an EBS volume.</p>
            </li>
            <li>
                <p>
                    <code>performance-other</code>: My instance is experiencing performance
                    problems.</p>
            </li>
            <li>
                <p>
                    <code>other</code>: [explain using the description parameter]</p>
            </li>
         </ul>")
    @as("ReasonCodes")
    reasonCodes: reasonCodesList,
    @ocaml.doc("<p>The instances.</p>") @as("Instances") instances: instanceIdStringList,
    @ocaml.doc("<p>The time at which the reported instance health state ended.</p>") @as("EndTime")
    endTime: option<dateTime>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Descriptive text about the health state of your instance.</p>")
    @as("Description")
    description: option<string_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ReportInstanceStatusCommand"
  let make = (
    ~status,
    ~reasonCodes,
    ~instances,
    ~startTime=?,
    ~endTime=?,
    ~dryRun=?,
    ~description=?,
    (),
  ) =>
    new({
      status: status,
      startTime: startTime,
      reasonCodes: reasonCodes,
      instances: instances,
      endTime: endTime,
      dryRun: dryRun,
      description: description,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ReplaceRouteTableAssociation = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the new route table to associate with the subnet.</p>")
    @as("RouteTableId")
    routeTableId: routeTableId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The association ID.</p>") @as("AssociationId")
    associationId: routeTableAssociationId,
  }
  type response = {
    @ocaml.doc("<p>The state of the association.</p>") @as("AssociationState")
    associationState: option<routeTableAssociationState>,
    @ocaml.doc("<p>The ID of the new association.</p>") @as("NewAssociationId")
    newAssociationId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ReplaceRouteTableAssociationCommand"
  let make = (~routeTableId, ~associationId, ~dryRun=?, ()) =>
    new({routeTableId: routeTableId, dryRun: dryRun, associationId: associationId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ReplaceNetworkAclEntry = {
  type t
  type request = {
    @ocaml.doc("<p>The rule number of the entry to replace.</p>") @as("RuleNumber")
    ruleNumber: integer_,
    @ocaml.doc("<p>Indicates whether to allow or deny the traffic that matches the rule.</p>")
    @as("RuleAction")
    ruleAction: ruleAction,
    @ocaml.doc("<p>The protocol number. A value of \"-1\" means all protocols. If you specify \"-1\" or a
           protocol number other than \"6\" (TCP), \"17\" (UDP), or \"1\" (ICMP), traffic on all ports is 
           allowed, regardless of any ports or ICMP types or codes that you specify. If you specify 
           protocol \"58\" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and 
           codes allowed, regardless of any that you specify. If you specify protocol \"58\" (ICMPv6) 
           and specify an IPv6 CIDR block, you must specify an ICMP type and code.</p>")
    @as("Protocol")
    protocol: string_,
    @ocaml.doc("<p>TCP or UDP protocols: The range of ports the rule applies to. 
		        Required if specifying protocol 6 (TCP) or 17 (UDP).</p>")
    @as("PortRange")
    portRange: option<portRange>,
    @ocaml.doc("<p>The ID of the ACL.</p>") @as("NetworkAclId") networkAclId: networkAclId,
    @ocaml.doc("<p>The IPv6 network range to allow or deny, in CIDR notation (for example
                <code>2001:bd8:1234:1a00::/64</code>).</p>")
    @as("Ipv6CidrBlock")
    ipv6CidrBlock: option<string_>,
    @ocaml.doc("<p>ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol
		        1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.</p>")
    @as("IcmpTypeCode")
    icmpTypeCode: option<icmpTypeCode>,
    @ocaml.doc("<p>Indicates whether to replace the egress rule.</p>
		       <p>Default: If no value is specified, we replace the ingress rule.</p>")
    @as("Egress")
    egress: boolean_,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The IPv4 network range to allow or deny, in CIDR notation (for example
                <code>172.16.0.0/24</code>).</p>")
    @as("CidrBlock")
    cidrBlock: option<string_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ReplaceNetworkAclEntryCommand"
  let make = (
    ~ruleNumber,
    ~ruleAction,
    ~protocol,
    ~networkAclId,
    ~egress,
    ~portRange=?,
    ~ipv6CidrBlock=?,
    ~icmpTypeCode=?,
    ~dryRun=?,
    ~cidrBlock=?,
    (),
  ) =>
    new({
      ruleNumber: ruleNumber,
      ruleAction: ruleAction,
      protocol: protocol,
      portRange: portRange,
      networkAclId: networkAclId,
      ipv6CidrBlock: ipv6CidrBlock,
      icmpTypeCode: icmpTypeCode,
      egress: egress,
      dryRun: dryRun,
      cidrBlock: cidrBlock,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module RebootInstances = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The instance IDs.</p>") @as("InstanceIds") instanceIds: instanceIdStringList,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "RebootInstancesCommand"
  let make = (~instanceIds, ~dryRun=?, ()) => new({dryRun: dryRun, instanceIds: instanceIds})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PurchaseReservedInstancesOffering = {
  type t
  @ocaml.doc("<p>Contains the parameters for PurchaseReservedInstancesOffering.</p>")
  type request = {
    @ocaml.doc(
      "<p>The time at which to purchase the Reserved Instance, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>"
    )
    @as("PurchaseTime")
    purchaseTime: option<dateTime>,
    @ocaml.doc(
      "<p>Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.</p>"
    )
    @as("LimitPrice")
    limitPrice: option<reservedInstanceLimitPrice>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
       and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
       Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Reserved Instance offering to purchase.</p>")
    @as("ReservedInstancesOfferingId")
    reservedInstancesOfferingId: reservedInstancesOfferingId,
    @ocaml.doc("<p>The number of Reserved Instances to purchase.</p>") @as("InstanceCount")
    instanceCount: integer_,
  }
  @ocaml.doc("<p>Contains the output of PurchaseReservedInstancesOffering.</p>")
  type response = {
    @ocaml.doc("<p>The IDs of the purchased Reserved Instances. If your purchase crosses into a discounted
      pricing tier, the final Reserved Instances IDs might change. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-reserved-instances-application.html#crossing-pricing-tiers\">Crossing
        pricing tiers</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
    @as("ReservedInstancesId")
    reservedInstancesId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "PurchaseReservedInstancesOfferingCommand"
  let make = (
    ~reservedInstancesOfferingId,
    ~instanceCount,
    ~purchaseTime=?,
    ~limitPrice=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      purchaseTime: purchaseTime,
      limitPrice: limitPrice,
      dryRun: dryRun,
      reservedInstancesOfferingId: reservedInstancesOfferingId,
      instanceCount: instanceCount,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ProvisionPublicIpv4PoolCidr = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The netmask length of the CIDR you would like to allocate to the public IPv4 pool.</p>"
    )
    @as("NetmaskLength")
    netmaskLength: integer_,
    @ocaml.doc("<p>The ID of the public IPv4 pool you would like to use for this CIDR.</p>")
    @as("PoolId")
    poolId: ipv4PoolEc2Id,
    @ocaml.doc("<p>The ID of the IPAM pool you would like to use to allocate this CIDR.</p>")
    @as("IpamPoolId")
    ipamPoolId: ipamPoolId,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @as("PoolAddressRange") poolAddressRange: option<publicIpv4PoolRange>,
    @ocaml.doc("<p>The ID of the pool that you want to provision the CIDR to.</p>") @as("PoolId")
    poolId: option<ipv4PoolEc2Id>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ProvisionPublicIpv4PoolCidrCommand"
  let make = (~netmaskLength, ~poolId, ~ipamPoolId, ~dryRun=?, ()) =>
    new({netmaskLength: netmaskLength, poolId: poolId, ipamPoolId: ipamPoolId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module MoveByoipCidrToIpam = {
  type t
  type request = {
    @ocaml.doc("<p>The Amazon Web Services account ID of the owner of the IPAM pool.</p>")
    @as("IpamPoolOwner")
    ipamPoolOwner: string_,
    @ocaml.doc("<p>The IPAM pool ID.</p>") @as("IpamPoolId") ipamPoolId: ipamPoolId,
    @ocaml.doc("<p>The BYOIP CIDR.</p>") @as("Cidr") cidr: string_,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {@as("ByoipCidr") byoipCidr: option<byoipCidr>}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "MoveByoipCidrToIpamCommand"
  let make = (~ipamPoolOwner, ~ipamPoolId, ~cidr, ~dryRun=?, ()) =>
    new({ipamPoolOwner: ipamPoolOwner, ipamPoolId: ipamPoolId, cidr: cidr, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyVpcPeeringConnectionOptions = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the VPC peering connection.</p>") @as("VpcPeeringConnectionId")
    vpcPeeringConnectionId: vpcPeeringConnectionId,
    @ocaml.doc("<p>The VPC peering connection options for the requester VPC.</p>")
    @as("RequesterPeeringConnectionOptions")
    requesterPeeringConnectionOptions: option<peeringConnectionOptionsRequest>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The VPC peering connection options for the accepter VPC.</p>")
    @as("AccepterPeeringConnectionOptions")
    accepterPeeringConnectionOptions: option<peeringConnectionOptionsRequest>,
  }
  type response = {
    @ocaml.doc("<p>Information about the VPC peering connection options for the requester VPC.</p>")
    @as("RequesterPeeringConnectionOptions")
    requesterPeeringConnectionOptions: option<peeringConnectionOptions>,
    @ocaml.doc("<p>Information about the VPC peering connection options for the accepter VPC.</p>")
    @as("AccepterPeeringConnectionOptions")
    accepterPeeringConnectionOptions: option<peeringConnectionOptions>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyVpcPeeringConnectionOptionsCommand"
  let make = (
    ~vpcPeeringConnectionId,
    ~requesterPeeringConnectionOptions=?,
    ~dryRun=?,
    ~accepterPeeringConnectionOptions=?,
    (),
  ) =>
    new({
      vpcPeeringConnectionId: vpcPeeringConnectionId,
      requesterPeeringConnectionOptions: requesterPeeringConnectionOptions,
      dryRun: dryRun,
      accepterPeeringConnectionOptions: accepterPeeringConnectionOptions,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyVpcEndpointServicePermissions = {
  type t
  type request = {
    @ocaml.doc("<p>The Amazon Resource Names (ARN) of one or more principals.
	        Permissions are revoked for principals in this list.</p>")
    @as("RemoveAllowedPrincipals")
    removeAllowedPrincipals: option<valueStringList>,
    @ocaml.doc("<p>The Amazon Resource Names (ARN) of one or more principals.
	        Permissions are granted to the principals in this list.
	        To grant permissions to all principals, specify an asterisk (*).</p>")
    @as("AddAllowedPrincipals")
    addAllowedPrincipals: option<valueStringList>,
    @ocaml.doc("<p>The ID of the service.</p>") @as("ServiceId") serviceId: vpcEndpointServiceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("ReturnValue")
    returnValue: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyVpcEndpointServicePermissionsCommand"
  let make = (~serviceId, ~removeAllowedPrincipals=?, ~addAllowedPrincipals=?, ~dryRun=?, ()) =>
    new({
      removeAllowedPrincipals: removeAllowedPrincipals,
      addAllowedPrincipals: addAllowedPrincipals,
      serviceId: serviceId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyVpcEndpointServiceConfiguration = {
  type t
  type request = {
    @ocaml.doc("<p>The Amazon Resource Names (ARNs) of Gateway Load Balancers to remove from your service
            configuration.</p>")
    @as("RemoveGatewayLoadBalancerArns")
    removeGatewayLoadBalancerArns: option<valueStringList>,
    @ocaml.doc("<p>The Amazon Resource Names (ARNs) of Gateway Load Balancers to add to your service
            configuration.</p>")
    @as("AddGatewayLoadBalancerArns")
    addGatewayLoadBalancerArns: option<valueStringList>,
    @ocaml.doc("<p>The Amazon Resource Names (ARNs) of Network Load Balancers to remove from your service
            configuration.</p>")
    @as("RemoveNetworkLoadBalancerArns")
    removeNetworkLoadBalancerArns: option<valueStringList>,
    @ocaml.doc("<p>The Amazon Resource Names (ARNs) of Network Load Balancers to add to your service
            configuration.</p>")
    @as("AddNetworkLoadBalancerArns")
    addNetworkLoadBalancerArns: option<valueStringList>,
    @ocaml.doc(
      "<p>Indicates whether requests to create an endpoint to your service must be accepted.</p>"
    )
    @as("AcceptanceRequired")
    acceptanceRequired: option<boolean_>,
    @ocaml.doc(
      "<p>(Interface endpoint configuration) Removes the private DNS name of the endpoint service.</p>"
    )
    @as("RemovePrivateDnsName")
    removePrivateDnsName: option<boolean_>,
    @ocaml.doc(
      "<p>(Interface endpoint configuration) The private DNS name to assign to the endpoint service.</p>"
    )
    @as("PrivateDnsName")
    privateDnsName: option<string_>,
    @ocaml.doc("<p>The ID of the service.</p>") @as("ServiceId") serviceId: vpcEndpointServiceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyVpcEndpointServiceConfigurationCommand"
  let make = (
    ~serviceId,
    ~removeGatewayLoadBalancerArns=?,
    ~addGatewayLoadBalancerArns=?,
    ~removeNetworkLoadBalancerArns=?,
    ~addNetworkLoadBalancerArns=?,
    ~acceptanceRequired=?,
    ~removePrivateDnsName=?,
    ~privateDnsName=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      removeGatewayLoadBalancerArns: removeGatewayLoadBalancerArns,
      addGatewayLoadBalancerArns: addGatewayLoadBalancerArns,
      removeNetworkLoadBalancerArns: removeNetworkLoadBalancerArns,
      addNetworkLoadBalancerArns: addNetworkLoadBalancerArns,
      acceptanceRequired: acceptanceRequired,
      removePrivateDnsName: removePrivateDnsName,
      privateDnsName: privateDnsName,
      serviceId: serviceId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyVpcEndpointConnectionNotification = {
  type t
  type request = {
    @ocaml.doc("<p>One or more events for the endpoint. Valid values are <code>Accept</code>,
                <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.</p>")
    @as("ConnectionEvents")
    connectionEvents: option<valueStringList>,
    @ocaml.doc("<p>The ARN for the SNS topic for the notification.</p>")
    @as("ConnectionNotificationArn")
    connectionNotificationArn: option<string_>,
    @ocaml.doc("<p>The ID of the notification.</p>") @as("ConnectionNotificationId")
    connectionNotificationId: connectionNotificationId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("ReturnValue")
    returnValue: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyVpcEndpointConnectionNotificationCommand"
  let make = (
    ~connectionNotificationId,
    ~connectionEvents=?,
    ~connectionNotificationArn=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      connectionEvents: connectionEvents,
      connectionNotificationArn: connectionNotificationArn,
      connectionNotificationId: connectionNotificationId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyVpcEndpoint = {
  type t
  @ocaml.doc("<p>Contains the parameters for ModifyVpcEndpoint.</p>")
  type request = {
    @ocaml.doc("<p>(Interface endpoint) Indicates whether a private hosted zone is associated with the
            VPC.</p>")
    @as("PrivateDnsEnabled")
    privateDnsEnabled: option<boolean_>,
    @ocaml.doc(
      "<p>(Interface endpoint) One or more security group IDs to disassociate from the network interface.</p>"
    )
    @as("RemoveSecurityGroupIds")
    removeSecurityGroupIds: option<vpcEndpointSecurityGroupIdList>,
    @ocaml.doc(
      "<p>(Interface endpoint) One or more security group IDs to associate with the network interface.</p>"
    )
    @as("AddSecurityGroupIds")
    addSecurityGroupIds: option<vpcEndpointSecurityGroupIdList>,
    @ocaml.doc(
      "<p>(Interface endpoint) One or more subnets IDs in which to remove the endpoint.</p>"
    )
    @as("RemoveSubnetIds")
    removeSubnetIds: option<vpcEndpointSubnetIdList>,
    @ocaml.doc(
      "<p>(Interface and Gateway Load Balancer endpoints) One or more subnet IDs in which to serve the endpoint. For a Gateway Load Balancer endpoint, you can specify only one subnet.</p>"
    )
    @as("AddSubnetIds")
    addSubnetIds: option<vpcEndpointSubnetIdList>,
    @ocaml.doc(
      "<p>(Gateway endpoint) One or more route table IDs to disassociate from the endpoint.</p>"
    )
    @as("RemoveRouteTableIds")
    removeRouteTableIds: option<vpcEndpointRouteTableIdList>,
    @ocaml.doc(
      "<p>(Gateway endpoint) One or more route tables IDs to associate with the endpoint.</p>"
    )
    @as("AddRouteTableIds")
    addRouteTableIds: option<vpcEndpointRouteTableIdList>,
    @ocaml.doc("<p>(Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must
            be in valid JSON format.</p>")
    @as("PolicyDocument")
    policyDocument: option<string_>,
    @ocaml.doc("<p>(Gateway endpoint) Specify <code>true</code> to reset the policy document to the
            default policy. The default policy allows full access to the service.</p>")
    @as("ResetPolicy")
    resetPolicy: option<boolean_>,
    @ocaml.doc("<p>The ID of the endpoint.</p>") @as("VpcEndpointId") vpcEndpointId: vpcEndpointId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyVpcEndpointCommand"
  let make = (
    ~vpcEndpointId,
    ~privateDnsEnabled=?,
    ~removeSecurityGroupIds=?,
    ~addSecurityGroupIds=?,
    ~removeSubnetIds=?,
    ~addSubnetIds=?,
    ~removeRouteTableIds=?,
    ~addRouteTableIds=?,
    ~policyDocument=?,
    ~resetPolicy=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      privateDnsEnabled: privateDnsEnabled,
      removeSecurityGroupIds: removeSecurityGroupIds,
      addSecurityGroupIds: addSecurityGroupIds,
      removeSubnetIds: removeSubnetIds,
      addSubnetIds: addSubnetIds,
      removeRouteTableIds: removeRouteTableIds,
      addRouteTableIds: addRouteTableIds,
      policyDocument: policyDocument,
      resetPolicy: resetPolicy,
      vpcEndpointId: vpcEndpointId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyVpcAttribute = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: vpcId,
    @ocaml.doc("<p>Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to
			the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP
			address at the base of the VPC network range \"plus two\" succeed. If disabled, the Amazon
			provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is
			not enabled.</p>
         <p>You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute.</p>")
    @as("EnableDnsSupport")
    enableDnsSupport: option<attributeBooleanValue>,
    @ocaml.doc("<p>Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not.</p>
         <p>You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute. You can only enable DNS hostnames if you've enabled DNS support.</p>")
    @as("EnableDnsHostnames")
    enableDnsHostnames: option<attributeBooleanValue>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyVpcAttributeCommand"
  let make = (~vpcId, ~enableDnsSupport=?, ~enableDnsHostnames=?, ()) =>
    new({vpcId: vpcId, enableDnsSupport: enableDnsSupport, enableDnsHostnames: enableDnsHostnames})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ModifyVolumeAttribute = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the volume.</p>") @as("VolumeId") volumeId: volumeId,
    @ocaml.doc("<p>Indicates whether the volume should be auto-enabled for I/O operations.</p>")
    @as("AutoEnableIO")
    autoEnableIO: option<attributeBooleanValue>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyVolumeAttributeCommand"
  let make = (~volumeId, ~dryRun=?, ~autoEnableIO=?, ()) =>
    new({dryRun: dryRun, volumeId: volumeId, autoEnableIO: autoEnableIO})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ModifyVolume = {
  type t
  type request = {
    @ocaml.doc("<p>Specifies whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach, you can attach the 
		volume to up to 16 <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances\">
			Nitro-based instances</a> in the same Availability Zone. This parameter is 
		supported with <code>io1</code> and <code>io2</code> volumes only. For more information, see 
		<a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html\">
			Amazon EBS Multi-Attach</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
    @as("MultiAttachEnabled")
    multiAttachEnabled: option<boolean_>,
    @ocaml.doc("<p>The target throughput of the volume, in MiB/s. This parameter is valid only for <code>gp3</code> volumes. 
      The maximum value is 1,000.</p>
         <p>Default: The existing value is retained if the source and target volume type is <code>gp3</code>.
      Otherwise, the default value is 125.</p>
  	      <p>Valid Range: Minimum value of 125. Maximum value of 1000.</p>")
    @as("Throughput")
    throughput: option<integer_>,
    @ocaml.doc("<p>The target IOPS rate of the volume. This parameter is valid only for <code>gp3</code>, <code>io1</code>, and <code>io2</code> volumes.</p>
         <p>The following are the supported values for each volume type:</p>
         <ul>
            <li>
               <p>
                  <code>gp3</code>: 3,000-16,000 IOPS</p>
            </li>
            <li>
               <p>
                  <code>io1</code>: 100-64,000 IOPS</p>
            </li>
            <li>
               <p>
                  <code>io2</code>: 100-64,000 IOPS</p>
            </li>
         </ul>
         <p>Default: The existing value is retained if you keep the same volume type. If you change
      the volume type to <code>io1</code>, <code>io2</code>, or <code>gp3</code>, the default is 3,000.</p>")
    @as("Iops")
    iops: option<integer_>,
    @ocaml.doc("<p>The target EBS volume type of the volume. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html\">Amazon EBS volume types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
         <p>Default: The existing type is retained.</p>")
    @as("VolumeType")
    volumeType: option<volumeType>,
    @ocaml.doc("<p>The target size of the volume, in GiB. The target volume size must be greater than or
      equal to the existing size of the volume.</p>
         <p>The following are the supported volumes sizes for each volume type:</p>
         <ul>
            <li>
               <p>
                  <code>gp2</code> and <code>gp3</code>: 1-16,384</p>
            </li>
            <li>
               <p>
                  <code>io1</code> and <code>io2</code>: 4-16,384</p>
            </li>
            <li>
               <p>
                  <code>st1</code> and <code>sc1</code>: 125-16,384</p>
            </li>
            <li>
               <p>
                  <code>standard</code>: 1-1,024</p>
            </li>
         </ul>
         <p>Default: The existing size is retained.</p>")
    @as("Size")
    size: option<integer_>,
    @ocaml.doc("<p>The ID of the volume.</p>") @as("VolumeId") volumeId: volumeId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the volume modification.</p>") @as("VolumeModification")
    volumeModification: option<volumeModification>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyVolumeCommand"
  let make = (
    ~volumeId,
    ~multiAttachEnabled=?,
    ~throughput=?,
    ~iops=?,
    ~volumeType=?,
    ~size=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      multiAttachEnabled: multiAttachEnabled,
      throughput: throughput,
      iops: iops,
      volumeType: volumeType,
      size: size,
      volumeId: volumeId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifySubnetAttribute = {
  type t
  type request = {
    @ocaml.doc("<p>
            Specify <code>true</code> to indicate that local network interfaces at the current 
            position should be disabled. 
        </p>")
    @as("DisableLniAtDeviceIndex")
    disableLniAtDeviceIndex: option<attributeBooleanValue>,
    @ocaml.doc("<p>
            Indicates the device position for local network interfaces in this subnet. For example, 
            <code>1</code> indicates local network interfaces in this subnet are the secondary 
            network interface (eth1). A local network interface cannot be the primary network
            interface (eth0).
        </p>")
    @as("EnableLniAtDeviceIndex")
    enableLniAtDeviceIndex: option<integer_>,
    @ocaml.doc(
      "<p>Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.</p>"
    )
    @as("EnableResourceNameDnsAAAARecordOnLaunch")
    enableResourceNameDnsAAAARecordOnLaunch: option<attributeBooleanValue>,
    @ocaml.doc(
      "<p>Indicates whether to respond to DNS queries for instance hostnames with DNS A records.</p>"
    )
    @as("EnableResourceNameDnsARecordOnLaunch")
    enableResourceNameDnsARecordOnLaunch: option<attributeBooleanValue>,
    @ocaml.doc("<p>The type of hostnames to assign to instances in the subnet at launch. For IPv4 only subnets, an
            instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance
            DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS
            names use the instance IPv4 address or the instance ID.</p>")
    @as("PrivateDnsHostnameTypeOnLaunch")
    privateDnsHostnameTypeOnLaunch: option<hostnameType>,
    @ocaml.doc("<p>Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet 
            should return synthetic IPv6 addresses for IPv4-only destinations.</p>")
    @as("EnableDns64")
    enableDns64: option<attributeBooleanValue>,
    @ocaml.doc("<p>The customer-owned IPv4 address pool associated with the subnet.</p>
        <p>You must set this value when you specify <code>true</code> for <code>MapCustomerOwnedIpOnLaunch</code>.</p>")
    @as("CustomerOwnedIpv4Pool")
    customerOwnedIpv4Pool: option<coipPoolId>,
    @ocaml.doc("<p>Specify <code>true</code> to indicate that network interfaces  attached to instances created in the
            specified subnet should be assigned a customer-owned IPv4 address.</p>
        <p>When this value is <code>true</code>, you must specify the customer-owned IP pool using <code>CustomerOwnedIpv4Pool</code>.</p>")
    @as("MapCustomerOwnedIpOnLaunch")
    mapCustomerOwnedIpOnLaunch: option<attributeBooleanValue>,
    @ocaml.doc("<p>The ID of the subnet.</p>") @as("SubnetId") subnetId: subnetId,
    @ocaml.doc("<p>Specify <code>true</code> to indicate that network interfaces attached to instances created in the
            specified subnet should be assigned a public IPv4 address.</p>")
    @as("MapPublicIpOnLaunch")
    mapPublicIpOnLaunch: option<attributeBooleanValue>,
    @ocaml.doc("<p>Specify <code>true</code> to indicate that network interfaces created in the
            specified subnet should be assigned an IPv6 address. This includes a network interface
            that's created when launching an instance into the subnet (the instance therefore
            receives an IPv6 address). </p>
        <p>If you enable the IPv6 addressing feature for your subnet, your network interface
            or instance only receives an IPv6 address if it's created using version
                <code>2016-11-15</code> or later of the Amazon EC2 API.</p>")
    @as("AssignIpv6AddressOnCreation")
    assignIpv6AddressOnCreation: option<attributeBooleanValue>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifySubnetAttributeCommand"
  let make = (
    ~subnetId,
    ~disableLniAtDeviceIndex=?,
    ~enableLniAtDeviceIndex=?,
    ~enableResourceNameDnsAAAARecordOnLaunch=?,
    ~enableResourceNameDnsARecordOnLaunch=?,
    ~privateDnsHostnameTypeOnLaunch=?,
    ~enableDns64=?,
    ~customerOwnedIpv4Pool=?,
    ~mapCustomerOwnedIpOnLaunch=?,
    ~mapPublicIpOnLaunch=?,
    ~assignIpv6AddressOnCreation=?,
    (),
  ) =>
    new({
      disableLniAtDeviceIndex: disableLniAtDeviceIndex,
      enableLniAtDeviceIndex: enableLniAtDeviceIndex,
      enableResourceNameDnsAAAARecordOnLaunch: enableResourceNameDnsAAAARecordOnLaunch,
      enableResourceNameDnsARecordOnLaunch: enableResourceNameDnsARecordOnLaunch,
      privateDnsHostnameTypeOnLaunch: privateDnsHostnameTypeOnLaunch,
      enableDns64: enableDns64,
      customerOwnedIpv4Pool: customerOwnedIpv4Pool,
      mapCustomerOwnedIpOnLaunch: mapCustomerOwnedIpOnLaunch,
      subnetId: subnetId,
      mapPublicIpOnLaunch: mapPublicIpOnLaunch,
      assignIpv6AddressOnCreation: assignIpv6AddressOnCreation,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ModifyNetworkInterfaceAttribute = {
  type t
  @ocaml.doc("<p>Contains the parameters for ModifyNetworkInterfaceAttribute.</p>")
  type request = {
    @ocaml.doc("<p>Enable or disable source/destination checks, which ensure that the instance
            is either the source or the destination of any traffic that it receives.
            If the value is <code>true</code>, source/destination checks are enabled;
            otherwise, they are disabled. The default value is <code>true</code>. 
            You must disable source/destination checks if the instance runs services 
            such as network address translation, routing, or firewalls.</p>")
    @as("SourceDestCheck")
    sourceDestCheck: option<attributeBooleanValue>,
    @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
    networkInterfaceId: networkInterfaceId,
    @ocaml.doc(
      "<p>Changes the security groups for the network interface. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.</p>"
    )
    @as("Groups")
    groups: option<securityGroupIdStringList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
            and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
            Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>A description for the network interface.</p>") @as("Description")
    description: option<attributeValue>,
    @ocaml.doc(
      "<p>Information about the interface attachment. If modifying the 'delete on termination' attribute, you must specify the ID of the interface attachment.</p>"
    )
    @as("Attachment")
    attachment: option<networkInterfaceAttachmentChanges>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyNetworkInterfaceAttributeCommand"
  let make = (
    ~networkInterfaceId,
    ~sourceDestCheck=?,
    ~groups=?,
    ~dryRun=?,
    ~description=?,
    ~attachment=?,
    (),
  ) =>
    new({
      sourceDestCheck: sourceDestCheck,
      networkInterfaceId: networkInterfaceId,
      groups: groups,
      dryRun: dryRun,
      description: description,
      attachment: attachment,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ModifyInstanceMetadataOptions = {
  type t
  type request = {
    @ocaml.doc("<p>Set to <code>enabled</code> to allow access to instance tags from the instance
            metadata. Set to <code>disabled</code> to turn off access to instance tags from the
            instance metadata. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS\">Work with
                instance tags using the instance metadata</a>.</p>
        <p>Default: <code>disabled</code>
         </p>")
    @as("InstanceMetadataTags")
    instanceMetadataTags: option<instanceMetadataTagsState>,
    @ocaml.doc("<p>Enables or disables the IPv6 endpoint for the instance metadata service. This setting
            applies only if you have enabled the HTTP metadata endpoint.</p>")
    @as("HttpProtocolIpv6")
    httpProtocolIpv6: option<instanceMetadataProtocolState>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Enables or disables the HTTP metadata endpoint on your instances. If this parameter is
            not specified, the existing state is maintained.</p>
        <p>If you specify a value of <code>disabled</code>, you cannot access your instance
            metadata.</p>")
    @as("HttpEndpoint")
    httpEndpoint: option<instanceMetadataEndpointState>,
    @ocaml.doc("<p>The desired HTTP PUT response hop limit for instance metadata requests. The larger the
            number, the further instance metadata requests can travel. If no parameter is specified,
            the existing state is maintained.</p>
        <p>Possible values: Integers from 1 to 64</p>")
    @as("HttpPutResponseHopLimit")
    httpPutResponseHopLimit: option<integer_>,
    @ocaml.doc("<p>The state of token usage for your instance metadata requests. If the parameter is not
            specified in the request, the default state is <code>optional</code>.</p>
        <p>If the state is <code>optional</code>, you can choose to retrieve instance metadata
            with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are
            returned. If you retrieve the IAM role credentials using a valid signed
            token, the version 2.0 role credentials are returned.</p>
        <p>If the state is <code>required</code>, you must send a signed token header with any
            instance metadata retrieval requests. In this state, retrieving the IAM
            role credential always returns the version 2.0 credentials; the version 1.0 credentials
            are not available.</p>")
    @as("HttpTokens")
    httpTokens: option<httpTokensState>,
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: instanceId,
  }
  type response = {
    @ocaml.doc("<p>The metadata options for the instance.</p>") @as("InstanceMetadataOptions")
    instanceMetadataOptions: option<instanceMetadataOptionsResponse>,
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyInstanceMetadataOptionsCommand"
  let make = (
    ~instanceId,
    ~instanceMetadataTags=?,
    ~httpProtocolIpv6=?,
    ~dryRun=?,
    ~httpEndpoint=?,
    ~httpPutResponseHopLimit=?,
    ~httpTokens=?,
    (),
  ) =>
    new({
      instanceMetadataTags: instanceMetadataTags,
      httpProtocolIpv6: httpProtocolIpv6,
      dryRun: dryRun,
      httpEndpoint: httpEndpoint,
      httpPutResponseHopLimit: httpPutResponseHopLimit,
      httpTokens: httpTokens,
      instanceId: instanceId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyInstanceEventStartTime = {
  type t
  type request = {
    @ocaml.doc("<p>The new date and time when the event will take place.</p>") @as("NotBefore")
    notBefore: dateTime,
    @ocaml.doc("<p>The ID of the event whose date and time you are modifying.</p>")
    @as("InstanceEventId")
    instanceEventId: string_,
    @ocaml.doc("<p>The ID of the instance with the scheduled event.</p>") @as("InstanceId")
    instanceId: instanceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {@as("Event") event: option<instanceStatusEvent>}
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyInstanceEventStartTimeCommand"
  let make = (~notBefore, ~instanceEventId, ~instanceId, ~dryRun=?, ()) =>
    new({
      notBefore: notBefore,
      instanceEventId: instanceEventId,
      instanceId: instanceId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyDefaultCreditSpecification = {
  type t
  type request = {
    @ocaml.doc("<p>The credit option for CPU usage of the instance family.</p>
        <p>Valid Values: <code>standard</code> | <code>unlimited</code>
         </p>")
    @as("CpuCredits")
    cpuCredits: string_,
    @ocaml.doc("<p>The instance family.</p>") @as("InstanceFamily")
    instanceFamily: unlimitedSupportedInstanceFamily,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The default credit option for CPU usage of the instance family.</p>")
    @as("InstanceFamilyCreditSpecification")
    instanceFamilyCreditSpecification: option<instanceFamilyCreditSpecification>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyDefaultCreditSpecificationCommand"
  let make = (~cpuCredits, ~instanceFamily, ~dryRun=?, ()) =>
    new({cpuCredits: cpuCredits, instanceFamily: instanceFamily, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetDefaultCreditSpecification = {
  type t
  type request = {
    @ocaml.doc("<p>The instance family.</p>") @as("InstanceFamily")
    instanceFamily: unlimitedSupportedInstanceFamily,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The default credit option for CPU usage of the instance family.</p>")
    @as("InstanceFamilyCreditSpecification")
    instanceFamilyCreditSpecification: option<instanceFamilyCreditSpecification>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetDefaultCreditSpecificationCommand"
  let make = (~instanceFamily, ~dryRun=?, ()) =>
    new({instanceFamily: instanceFamily, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ExportClientVpnClientCertificateRevocationList = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Client VPN endpoint.</p>") @as("ClientVpnEndpointId")
    clientVpnEndpointId: clientVpnEndpointId,
  }
  type response = {
    @ocaml.doc("<p>The current state of the client certificate revocation list.</p>") @as("Status")
    status: option<clientCertificateRevocationListStatus>,
    @ocaml.doc("<p>Information about the client certificate revocation list.</p>")
    @as("CertificateRevocationList")
    certificateRevocationList: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ExportClientVpnClientCertificateRevocationListCommand"
  let make = (~clientVpnEndpointId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, clientVpnEndpointId: clientVpnEndpointId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module EnableTransitGatewayRouteTablePropagation = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: transitGatewayAttachmentId,
    @ocaml.doc("<p>The ID of the propagation route table.</p>") @as("TransitGatewayRouteTableId")
    transitGatewayRouteTableId: transitGatewayRouteTableId,
  }
  type response = {
    @ocaml.doc("<p>Information about route propagation.</p>") @as("Propagation")
    propagation: option<transitGatewayPropagation>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "EnableTransitGatewayRouteTablePropagationCommand"
  let make = (~transitGatewayAttachmentId, ~transitGatewayRouteTableId, ~dryRun=?, ()) =>
    new({
      dryRun: dryRun,
      transitGatewayAttachmentId: transitGatewayAttachmentId,
      transitGatewayRouteTableId: transitGatewayRouteTableId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module EnableFastLaunch = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The maximum number of parallel instances to launch for creating resources. Value must be <code>6</code> or greater. </p>"
    )
    @as("MaxParallelLaunches")
    maxParallelLaunches: option<integer_>,
    @ocaml.doc("<p>The launch template to use when launching Windows instances from pre-provisioned 
			snapshots. Launch template parameters can include either the name or ID of the launch 
			template, but not both.</p>")
    @as("LaunchTemplate")
    launchTemplate: option<fastLaunchLaunchTemplateSpecificationRequest>,
    @ocaml.doc("<p>Configuration settings for creating and managing the snapshots that are used for 
			pre-provisioning the Windows AMI for faster launching. The associated <code>ResourceType</code> 
			must be <code>snapshot</code>.</p>")
    @as("SnapshotConfiguration")
    snapshotConfiguration: option<fastLaunchSnapshotConfigurationRequest>,
    @ocaml.doc("<p>The type of resource to use for pre-provisioning the Windows AMI for faster launching. 
			Supported values include: <code>snapshot</code>, which is the default value.</p>")
    @as("ResourceType")
    resourceType: option<string_>,
    @ocaml.doc("<p>The ID of the image for which you’re enabling faster launching.</p>")
    @as("ImageId")
    imageId: imageId,
  }
  type response = {
    @ocaml.doc("<p>The time that the state changed for faster launching for the Windows AMI.</p>")
    @as("StateTransitionTime")
    stateTransitionTime: option<millisecondDateTime>,
    @ocaml.doc("<p>The reason that the state changed for faster launching for the Windows AMI.</p>")
    @as("StateTransitionReason")
    stateTransitionReason: option<string_>,
    @ocaml.doc("<p>The current state of faster launching for the specified Windows AMI.</p>")
    @as("State")
    state: option<fastLaunchStateCode>,
    @ocaml.doc("<p>The owner ID for the Windows AMI for which faster launching was enabled.</p>")
    @as("OwnerId")
    ownerId: option<string_>,
    @ocaml.doc("<p>The maximum number of parallel instances to launch for creating resources.</p>")
    @as("MaxParallelLaunches")
    maxParallelLaunches: option<integer_>,
    @ocaml.doc(
      "<p>The launch template that is used when launching Windows instances from pre-provisioned snapshots.</p>"
    )
    @as("LaunchTemplate")
    launchTemplate: option<fastLaunchLaunchTemplateSpecificationResponse>,
    @ocaml.doc("<p>The configuration settings that were defined for creating and managing the pre-provisioned snapshots 
			for faster launching of the Windows AMI. This property is returned when the associated 
			<code>resourceType</code> is <code>snapshot</code>.</p>")
    @as("SnapshotConfiguration")
    snapshotConfiguration: option<fastLaunchSnapshotConfigurationResponse>,
    @ocaml.doc(
      "<p>The type of resource that was defined for pre-provisioning the Windows AMI for faster launching.</p>"
    )
    @as("ResourceType")
    resourceType: option<fastLaunchResourceType>,
    @ocaml.doc(
      "<p>The image ID that identifies the Windows AMI for which faster launching was enabled.</p>"
    )
    @as("ImageId")
    imageId: option<imageId>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "EnableFastLaunchCommand"
  let make = (
    ~imageId,
    ~dryRun=?,
    ~maxParallelLaunches=?,
    ~launchTemplate=?,
    ~snapshotConfiguration=?,
    ~resourceType=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      maxParallelLaunches: maxParallelLaunches,
      launchTemplate: launchTemplate,
      snapshotConfiguration: snapshotConfiguration,
      resourceType: resourceType,
      imageId: imageId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DisassociateTransitGatewayRouteTable = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: transitGatewayAttachmentId,
    @ocaml.doc("<p>The ID of the transit gateway route table.</p>")
    @as("TransitGatewayRouteTableId")
    transitGatewayRouteTableId: transitGatewayRouteTableId,
  }
  type response = {
    @ocaml.doc("<p>Information about the association.</p>") @as("Association")
    association: option<transitGatewayAssociation>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DisassociateTransitGatewayRouteTableCommand"
  let make = (~transitGatewayAttachmentId, ~transitGatewayRouteTableId, ~dryRun=?, ()) =>
    new({
      dryRun: dryRun,
      transitGatewayAttachmentId: transitGatewayAttachmentId,
      transitGatewayRouteTableId: transitGatewayRouteTableId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DisassociateClientVpnTargetNetwork = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the target network association.</p>") @as("AssociationId")
    associationId: clientVpnAssociationId,
    @ocaml.doc(
      "<p>The ID of the Client VPN endpoint from which to disassociate the target network.</p>"
    )
    @as("ClientVpnEndpointId")
    clientVpnEndpointId: clientVpnEndpointId,
  }
  type response = {
    @ocaml.doc("<p>The current state of the target network association.</p>") @as("Status")
    status: option<associationStatus>,
    @ocaml.doc("<p>The ID of the target network association.</p>") @as("AssociationId")
    associationId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DisassociateClientVpnTargetNetworkCommand"
  let make = (~associationId, ~clientVpnEndpointId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, associationId: associationId, clientVpnEndpointId: clientVpnEndpointId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DisableTransitGatewayRouteTablePropagation = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: transitGatewayAttachmentId,
    @ocaml.doc("<p>The ID of the propagation route table.</p>") @as("TransitGatewayRouteTableId")
    transitGatewayRouteTableId: transitGatewayRouteTableId,
  }
  type response = {
    @ocaml.doc("<p>Information about route propagation.</p>") @as("Propagation")
    propagation: option<transitGatewayPropagation>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DisableTransitGatewayRouteTablePropagationCommand"
  let make = (~transitGatewayAttachmentId, ~transitGatewayRouteTableId, ~dryRun=?, ()) =>
    new({
      dryRun: dryRun,
      transitGatewayAttachmentId: transitGatewayAttachmentId,
      transitGatewayRouteTableId: transitGatewayRouteTableId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DisableFastLaunch = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Forces the image settings to turn off faster launching for your Windows AMI. This parameter overrides 
			any errors that are encountered while cleaning up resources in your account.</p>")
    @as("Force")
    force: option<boolean_>,
    @ocaml.doc(
      "<p>The ID of the image for which you’re turning off faster launching, and removing pre-provisioned snapshots.</p>"
    )
    @as("ImageId")
    imageId: imageId,
  }
  type response = {
    @ocaml.doc("<p>The time that the state changed for faster launching for the Windows AMI.</p>")
    @as("StateTransitionTime")
    stateTransitionTime: option<millisecondDateTime>,
    @ocaml.doc("<p>The reason that the state changed for faster launching for the Windows AMI.</p>")
    @as("StateTransitionReason")
    stateTransitionReason: option<string_>,
    @ocaml.doc("<p>The current state of faster launching for the specified Windows AMI.</p>")
    @as("State")
    state: option<fastLaunchStateCode>,
    @ocaml.doc("<p>The owner of the Windows AMI for which faster launching was turned off.</p>")
    @as("OwnerId")
    ownerId: option<string_>,
    @ocaml.doc("<p>The maximum number of parallel instances to launch for creating resources.</p>")
    @as("MaxParallelLaunches")
    maxParallelLaunches: option<integer_>,
    @ocaml.doc(
      "<p>The launch template that was used to launch Windows instances from pre-provisioned snapshots.</p>"
    )
    @as("LaunchTemplate")
    launchTemplate: option<fastLaunchLaunchTemplateSpecificationResponse>,
    @ocaml.doc("<p>Parameters that were used for faster launching for the Windows AMI before 
			faster launching was turned off. This informs the clean-up process.</p>")
    @as("SnapshotConfiguration")
    snapshotConfiguration: option<fastLaunchSnapshotConfigurationResponse>,
    @ocaml.doc("<p>The pre-provisioning resource type that must be cleaned after turning off faster launching 
			for the Windows AMI. Supported values include: <code>snapshot</code>.</p>")
    @as("ResourceType")
    resourceType: option<fastLaunchResourceType>,
    @ocaml.doc("<p>The ID of the image for which faster-launching has been turned off.</p>")
    @as("ImageId")
    imageId: option<imageId>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DisableFastLaunchCommand"
  let make = (~imageId, ~dryRun=?, ~force=?, ()) =>
    new({dryRun: dryRun, force: force, imageId: imageId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeVpcAttribute = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: vpcId,
    @ocaml.doc("<p>The VPC attribute.</p>") @as("Attribute") attribute: vpcAttributeName,
  }
  type response = {
    @ocaml.doc("<p>Indicates whether DNS resolution is enabled for
				the VPC. If this attribute is <code>true</code>, the Amazon DNS server
				resolves DNS hostnames for your instances to their corresponding
				IP addresses; otherwise, it does not.</p>")
    @as("EnableDnsSupport")
    enableDnsSupport: option<attributeBooleanValue>,
    @ocaml.doc("<p>Indicates whether the instances launched in the VPC get DNS hostnames.
				If this attribute is <code>true</code>, instances in the VPC get DNS hostnames;
				otherwise, they do not.</p>")
    @as("EnableDnsHostnames")
    enableDnsHostnames: option<attributeBooleanValue>,
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeVpcAttributeCommand"
  let make = (~vpcId, ~attribute, ~dryRun=?, ()) =>
    new({dryRun: dryRun, vpcId: vpcId, attribute: attribute})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeprovisionPublicIpv4PoolCidr = {
  type t
  type request = {
    @ocaml.doc("<p>The CIDR you want to deprovision from the pool.</p>") @as("Cidr") cidr: string_,
    @ocaml.doc("<p>The ID of the pool that you want to deprovision the CIDR from.</p>")
    @as("PoolId")
    poolId: ipv4PoolEc2Id,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The deprovisioned CIDRs.</p>") @as("DeprovisionedAddresses")
    deprovisionedAddresses: option<deprovisionedAddressSet>,
    @ocaml.doc("<p>The ID of the pool that you deprovisioned the CIDR from.</p>") @as("PoolId")
    poolId: option<ipv4PoolEc2Id>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeprovisionPublicIpv4PoolCidrCommand"
  let make = (~cidr, ~poolId, ~dryRun=?, ()) => new({cidr: cidr, poolId: poolId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeprovisionByoipCidr = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The address range, in CIDR notation. The prefix must be the same prefix 
         that you specified when you provisioned the address range.</p>")
    @as("Cidr")
    cidr: string_,
  }
  type response = {
    @ocaml.doc("<p>Information about the address range.</p>") @as("ByoipCidr")
    byoipCidr: option<byoipCidr>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeprovisionByoipCidrCommand"
  let make = (~cidr, ~dryRun=?, ()) => new({dryRun: dryRun, cidr: cidr})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteLocalGatewayRoute = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the local gateway route table.</p>") @as("LocalGatewayRouteTableId")
    localGatewayRouteTableId: localGatewayRoutetableId,
    @ocaml.doc(
      "<p>The CIDR range for the route. This must match the CIDR for the route exactly.</p>"
    )
    @as("DestinationCidrBlock")
    destinationCidrBlock: string_,
  }
  type response = {
    @ocaml.doc("<p>Information about the route.</p>") @as("Route") route: option<localGatewayRoute>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteLocalGatewayRouteCommand"
  let make = (~localGatewayRouteTableId, ~destinationCidrBlock, ~dryRun=?, ()) =>
    new({
      dryRun: dryRun,
      localGatewayRouteTableId: localGatewayRouteTableId,
      destinationCidrBlock: destinationCidrBlock,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteInstanceEventWindow = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the event window.</p>") @as("InstanceEventWindowId")
    instanceEventWindowId: instanceEventWindowId,
    @ocaml.doc("<p>Specify <code>true</code> to force delete the event window. Use the force delete parameter
         if the event window is currently associated with targets.</p>")
    @as("ForceDelete")
    forceDelete: option<boolean_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The state of the event window.</p>") @as("InstanceEventWindowState")
    instanceEventWindowState: option<instanceEventWindowStateChange>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteInstanceEventWindowCommand"
  let make = (~instanceEventWindowId, ~forceDelete=?, ~dryRun=?, ()) =>
    new({instanceEventWindowId: instanceEventWindowId, forceDelete: forceDelete, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteClientVpnRoute = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The IPv4 address range, in CIDR notation, of the route to be deleted.</p>")
    @as("DestinationCidrBlock")
    destinationCidrBlock: string_,
    @ocaml.doc("<p>The ID of the target subnet used by the route.</p>") @as("TargetVpcSubnetId")
    targetVpcSubnetId: option<subnetId>,
    @ocaml.doc("<p>The ID of the Client VPN endpoint from which the route is to be deleted.</p>")
    @as("ClientVpnEndpointId")
    clientVpnEndpointId: clientVpnEndpointId,
  }
  type response = {
    @ocaml.doc("<p>The current state of the route.</p>") @as("Status")
    status: option<clientVpnRouteStatus>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteClientVpnRouteCommand"
  let make = (~destinationCidrBlock, ~clientVpnEndpointId, ~dryRun=?, ~targetVpcSubnetId=?, ()) =>
    new({
      dryRun: dryRun,
      destinationCidrBlock: destinationCidrBlock,
      targetVpcSubnetId: targetVpcSubnetId,
      clientVpnEndpointId: clientVpnEndpointId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteClientVpnEndpoint = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Client VPN to be deleted.</p>") @as("ClientVpnEndpointId")
    clientVpnEndpointId: clientVpnEndpointId,
  }
  type response = {
    @ocaml.doc("<p>The current state of the Client VPN endpoint.</p>") @as("Status")
    status: option<clientVpnEndpointStatus>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteClientVpnEndpointCommand"
  let make = (~clientVpnEndpointId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, clientVpnEndpointId: clientVpnEndpointId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateNetworkAclEntry = {
  type t
  type request = {
    @ocaml.doc("<p>The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.</p>
         <p>Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.</p>")
    @as("RuleNumber")
    ruleNumber: integer_,
    @ocaml.doc("<p>Indicates whether to allow or deny the traffic that matches the rule.</p>")
    @as("RuleAction")
    ruleAction: ruleAction,
    @ocaml.doc("<p>The protocol number. A value of \"-1\" means all protocols. If you specify \"-1\" or a
  			protocol number other than \"6\" (TCP), \"17\" (UDP), or \"1\" (ICMP), traffic on all ports is 
			allowed, regardless of any ports or ICMP types or codes that you specify. If you specify 
			protocol \"58\" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and 
			codes allowed, regardless of any that you specify. If you specify protocol \"58\" (ICMPv6) 
			and specify an IPv6 CIDR block, you must specify an ICMP type and code.</p>")
    @as("Protocol")
    protocol: string_,
    @ocaml.doc("<p>TCP or UDP protocols: The range of ports the rule applies to.
		        Required if specifying protocol 6 (TCP) or 17 (UDP).</p>")
    @as("PortRange")
    portRange: option<portRange>,
    @ocaml.doc("<p>The ID of the network ACL.</p>") @as("NetworkAclId") networkAclId: networkAclId,
    @ocaml.doc("<p>The IPv6 network range to allow or deny, in CIDR notation (for example
                <code>2001:db8:1234:1a00::/64</code>).</p>")
    @as("Ipv6CidrBlock")
    ipv6CidrBlock: option<string_>,
    @ocaml.doc("<p>ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 
		        1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.</p>")
    @as("IcmpTypeCode")
    icmpTypeCode: option<icmpTypeCode>,
    @ocaml.doc(
      "<p>Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet).</p>"
    )
    @as("Egress")
    egress: boolean_,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The IPv4 network range to allow or deny, in CIDR notation (for example
		        <code>172.16.0.0/24</code>). We modify the specified CIDR block to its canonical form; for example, if you specify <code>100.68.0.18/18</code>, we modify it to <code>100.68.0.0/18</code>.</p>")
    @as("CidrBlock")
    cidrBlock: option<string_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateNetworkAclEntryCommand"
  let make = (
    ~ruleNumber,
    ~ruleAction,
    ~protocol,
    ~networkAclId,
    ~egress,
    ~portRange=?,
    ~ipv6CidrBlock=?,
    ~icmpTypeCode=?,
    ~dryRun=?,
    ~cidrBlock=?,
    (),
  ) =>
    new({
      ruleNumber: ruleNumber,
      ruleAction: ruleAction,
      protocol: protocol,
      portRange: portRange,
      networkAclId: networkAclId,
      ipv6CidrBlock: ipv6CidrBlock,
      icmpTypeCode: icmpTypeCode,
      egress: egress,
      dryRun: dryRun,
      cidrBlock: cidrBlock,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module CreateLocalGatewayRoute = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the virtual interface group.</p>")
    @as("LocalGatewayVirtualInterfaceGroupId")
    localGatewayVirtualInterfaceGroupId: localGatewayVirtualInterfaceGroupId,
    @ocaml.doc("<p>The ID of the local gateway route table.</p>") @as("LocalGatewayRouteTableId")
    localGatewayRouteTableId: localGatewayRoutetableId,
    @ocaml.doc("<p>The CIDR range used for destination matches. Routing decisions are based on 
        the most specific match.</p>")
    @as("DestinationCidrBlock")
    destinationCidrBlock: string_,
  }
  type response = {
    @ocaml.doc("<p>Information about the route.</p>") @as("Route") route: option<localGatewayRoute>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateLocalGatewayRouteCommand"
  let make = (
    ~localGatewayVirtualInterfaceGroupId,
    ~localGatewayRouteTableId,
    ~destinationCidrBlock,
    ~dryRun=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      localGatewayVirtualInterfaceGroupId: localGatewayVirtualInterfaceGroupId,
      localGatewayRouteTableId: localGatewayRouteTableId,
      destinationCidrBlock: destinationCidrBlock,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateClientVpnRoute = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>A brief description of the route.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The ID of the subnet through which you want to route traffic. The specified subnet must be
			an existing target network of the Client VPN endpoint.</p>
	        <p>Alternatively, if you're adding a route for the local network, specify <code>local</code>.</p>")
    @as("TargetVpcSubnetId")
    targetVpcSubnetId: subnetId,
    @ocaml.doc("<p>The IPv4 address range, in CIDR notation, of the route destination. For example:</p>
		       <ul>
            <li>
               <p>To add a route for Internet access, enter <code>0.0.0.0/0</code>
               </p>
            </li>
            <li>
               <p>To add a route for a peered VPC, enter the peered VPC's IPv4 CIDR range</p>
            </li>
            <li>
               <p>To add a route for an on-premises network, enter the Amazon Web Services Site-to-Site VPN connection's IPv4 CIDR range</p>
            </li>
            <li>
               <p>To add a route for the local network, enter the client CIDR range</p>
            </li>
         </ul>")
    @as("DestinationCidrBlock")
    destinationCidrBlock: string_,
    @ocaml.doc("<p>The ID of the Client VPN endpoint to which to add the route.</p>")
    @as("ClientVpnEndpointId")
    clientVpnEndpointId: clientVpnEndpointId,
  }
  type response = {
    @ocaml.doc("<p>The current state of the route.</p>") @as("Status")
    status: option<clientVpnRouteStatus>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateClientVpnRouteCommand"
  let make = (
    ~targetVpcSubnetId,
    ~destinationCidrBlock,
    ~clientVpnEndpointId,
    ~dryRun=?,
    ~clientToken=?,
    ~description=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      clientToken: clientToken,
      description: description,
      targetVpcSubnetId: targetVpcSubnetId,
      destinationCidrBlock: destinationCidrBlock,
      clientVpnEndpointId: clientVpnEndpointId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AuthorizeClientVpnIngress = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>A brief description of the authorization rule.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>Indicates whether to grant access to all clients. Specify <code>true</code> to grant all
            clients who successfully establish a VPN connection access to the network. Must be set
            to <code>true</code> if <code>AccessGroupId</code> is not specified.</p>")
    @as("AuthorizeAllGroups")
    authorizeAllGroups: option<boolean_>,
    @ocaml.doc(
      "<p>The ID of the group to grant access to, for example, the Active Directory group or identity provider (IdP) group. Required if <code>AuthorizeAllGroups</code> is <code>false</code> or not specified.</p>"
    )
    @as("AccessGroupId")
    accessGroupId: option<string_>,
    @ocaml.doc(
      "<p>The IPv4 address range, in CIDR notation, of the network for which access is being authorized.</p>"
    )
    @as("TargetNetworkCidr")
    targetNetworkCidr: string_,
    @ocaml.doc("<p>The ID of the Client VPN endpoint.</p>") @as("ClientVpnEndpointId")
    clientVpnEndpointId: clientVpnEndpointId,
  }
  type response = {
    @ocaml.doc("<p>The current state of the authorization rule.</p>") @as("Status")
    status: option<clientVpnAuthorizationRuleStatus>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "AuthorizeClientVpnIngressCommand"
  let make = (
    ~targetNetworkCidr,
    ~clientVpnEndpointId,
    ~dryRun=?,
    ~clientToken=?,
    ~description=?,
    ~authorizeAllGroups=?,
    ~accessGroupId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      clientToken: clientToken,
      description: description,
      authorizeAllGroups: authorizeAllGroups,
      accessGroupId: accessGroupId,
      targetNetworkCidr: targetNetworkCidr,
      clientVpnEndpointId: clientVpnEndpointId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AttachVpnGateway = {
  type t
  @ocaml.doc("<p>Contains the parameters for AttachVpnGateway.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the virtual private gateway.</p>") @as("VpnGatewayId")
    vpnGatewayId: vpnGatewayId,
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: vpcId,
  }
  @ocaml.doc("<p>Contains the output of AttachVpnGateway.</p>")
  type response = {
    @ocaml.doc("<p>Information about the attachment.</p>") @as("VpcAttachment")
    vpcAttachment: option<vpcAttachment>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "AttachVpnGatewayCommand"
  let make = (~vpnGatewayId, ~vpcId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, vpnGatewayId: vpnGatewayId, vpcId: vpcId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AttachClassicLinkVpc = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of a ClassicLink-enabled VPC.</p>") @as("VpcId") vpcId: vpcId,
    @ocaml.doc("<p>The ID of an EC2-Classic instance to link to the ClassicLink-enabled VPC.</p>")
    @as("InstanceId")
    instanceId: instanceId,
    @ocaml.doc(
      "<p>The ID of one or more of the VPC's security groups. You cannot specify security groups from a different VPC.</p>"
    )
    @as("Groups")
    groups: groupIdStringList,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "AttachClassicLinkVpcCommand"
  let make = (~vpcId, ~instanceId, ~groups, ~dryRun=?, ()) =>
    new({vpcId: vpcId, instanceId: instanceId, groups: groups, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AssociateTransitGatewayRouteTable = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: transitGatewayAttachmentId,
    @ocaml.doc("<p>The ID of the transit gateway route table.</p>")
    @as("TransitGatewayRouteTableId")
    transitGatewayRouteTableId: transitGatewayRouteTableId,
  }
  type response = {
    @ocaml.doc("<p>The ID of the association.</p>") @as("Association")
    association: option<transitGatewayAssociation>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "AssociateTransitGatewayRouteTableCommand"
  let make = (~transitGatewayAttachmentId, ~transitGatewayRouteTableId, ~dryRun=?, ()) =>
    new({
      dryRun: dryRun,
      transitGatewayAttachmentId: transitGatewayAttachmentId,
      transitGatewayRouteTableId: transitGatewayRouteTableId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AssociateRouteTable = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the internet gateway or virtual private gateway.</p>") @as("GatewayId")
    gatewayId: option<routeGatewayId>,
    @ocaml.doc("<p>The ID of the subnet.</p>") @as("SubnetId") subnetId: option<subnetId>,
    @ocaml.doc("<p>The ID of the route table.</p>") @as("RouteTableId") routeTableId: routeTableId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The state of the association.</p>") @as("AssociationState")
    associationState: option<routeTableAssociationState>,
    @ocaml.doc("<p>The route table association ID. This ID is required for disassociating the route
			table.</p>")
    @as("AssociationId")
    associationId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "AssociateRouteTableCommand"
  let make = (~routeTableId, ~gatewayId=?, ~subnetId=?, ~dryRun=?, ()) =>
    new({gatewayId: gatewayId, subnetId: subnetId, routeTableId: routeTableId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AssociateClientVpnTargetNetwork = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The ID of the subnet to associate with the Client VPN endpoint.</p>")
    @as("SubnetId")
    subnetId: subnetId,
    @ocaml.doc("<p>The ID of the Client VPN endpoint.</p>") @as("ClientVpnEndpointId")
    clientVpnEndpointId: clientVpnEndpointId,
  }
  type response = {
    @ocaml.doc("<p>The current state of the target network association.</p>") @as("Status")
    status: option<associationStatus>,
    @ocaml.doc("<p>The unique ID of the target network association.</p>") @as("AssociationId")
    associationId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "AssociateClientVpnTargetNetworkCommand"
  let make = (~subnetId, ~clientVpnEndpointId, ~dryRun=?, ~clientToken=?, ()) =>
    new({
      dryRun: dryRun,
      clientToken: clientToken,
      subnetId: subnetId,
      clientVpnEndpointId: clientVpnEndpointId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AssignIpv6Addresses = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
    networkInterfaceId: networkInterfaceId,
    @ocaml.doc(
      "<p>One or more IPv6 prefixes assigned to the network interface. You cannot use this option if you use the <code>Ipv6PrefixCount</code> option.</p>"
    )
    @as("Ipv6Prefixes")
    ipv6Prefixes: option<ipPrefixList>,
    @ocaml.doc("<p>The number of IPv6 prefixes that Amazon Web Services automatically assigns to the
            network interface. You cannot use this option if you use the <code>Ipv6Prefixes</code>
            option.</p>")
    @as("Ipv6PrefixCount")
    ipv6PrefixCount: option<integer_>,
    @ocaml.doc(
      "<p>One or more specific IPv6 addresses to be assigned to the network interface. You can't use this option if you're specifying a number of IPv6 addresses.</p>"
    )
    @as("Ipv6Addresses")
    ipv6Addresses: option<ipv6AddressList>,
    @ocaml.doc("<p>The number of additional IPv6 addresses to assign to the network interface. 
    		The specified number of IPv6 addresses are assigned in addition to the 
    		existing IPv6 addresses that are already assigned to the network interface. 
    		Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You 
    		can't use this option if specifying specific IPv6 addresses.</p>")
    @as("Ipv6AddressCount")
    ipv6AddressCount: option<integer_>,
  }
  type response = {
    @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
    networkInterfaceId: option<string_>,
    @ocaml.doc("<p>The IPv6 prefixes that are assigned to the network interface.</p>")
    @as("AssignedIpv6Prefixes")
    assignedIpv6Prefixes: option<ipPrefixList>,
    @ocaml.doc("<p>The new IPv6 addresses assigned to the network interface. Existing IPv6 addresses 
        	that were assigned to the network interface before the request are not included.</p>")
    @as("AssignedIpv6Addresses")
    assignedIpv6Addresses: option<ipv6AddressList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "AssignIpv6AddressesCommand"
  let make = (
    ~networkInterfaceId,
    ~ipv6Prefixes=?,
    ~ipv6PrefixCount=?,
    ~ipv6Addresses=?,
    ~ipv6AddressCount=?,
    (),
  ) =>
    new({
      networkInterfaceId: networkInterfaceId,
      ipv6Prefixes: ipv6Prefixes,
      ipv6PrefixCount: ipv6PrefixCount,
      ipv6Addresses: ipv6Addresses,
      ipv6AddressCount: ipv6AddressCount,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ApplySecurityGroupsToClientVpnTargetNetwork = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The IDs of the security groups to apply to the associated target network. Up to 5 security groups can 
			be applied to an associated target network.</p>")
    @as("SecurityGroupIds")
    securityGroupIds: clientVpnSecurityGroupIdSet,
    @ocaml.doc("<p>The ID of the VPC in which the associated target network is located.</p>")
    @as("VpcId")
    vpcId: vpcId,
    @ocaml.doc("<p>The ID of the Client VPN endpoint.</p>") @as("ClientVpnEndpointId")
    clientVpnEndpointId: clientVpnEndpointId,
  }
  type response = {
    @ocaml.doc("<p>The IDs of the applied security groups.</p>") @as("SecurityGroupIds")
    securityGroupIds: option<clientVpnSecurityGroupIdSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ApplySecurityGroupsToClientVpnTargetNetworkCommand"
  let make = (~securityGroupIds, ~vpcId, ~clientVpnEndpointId, ~dryRun=?, ()) =>
    new({
      dryRun: dryRun,
      securityGroupIds: securityGroupIds,
      vpcId: vpcId,
      clientVpnEndpointId: clientVpnEndpointId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AllocateIpamPoolCidr = {
  type t
  type request = {
    @ocaml.doc("<p>Exclude a particular CIDR range from being returned by the pool.</p>")
    @as("DisallowedCidrs")
    disallowedCidrs: option<ipamPoolAllocationDisallowedCidrs>,
    @ocaml.doc("<p>A preview of the next available CIDR in a pool.</p>") @as("PreviewNextCidr")
    previewNextCidr: option<boolean_>,
    @ocaml.doc("<p>A description for the allocation.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc(
      "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The netmask length of the CIDR you would like to allocate from the IPAM pool. Note the following:</p>
         <ul>
            <li>
               <p>If there is no DefaultNetmaskLength allocation rule set on the pool, you must specify either the NetmaskLength or the CIDR.</p>
            </li>
            <li>
               <p>If the DefaultNetmaskLength allocation rule is set on the pool, you can specify either the NetmaskLength or the CIDR and the DefaultNetmaskLength allocation rule will be ignored.</p>
            </li>
         </ul>
         <p>Possible netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are 0 - 128.</p>")
    @as("NetmaskLength")
    netmaskLength: option<integer_>,
    @ocaml.doc("<p>The CIDR you would like to allocate from the IPAM pool. Note the following:</p>
         <ul>
            <li>
               <p>If there is no DefaultNetmaskLength allocation rule set on the pool, you must specify either the NetmaskLength or the CIDR.</p>
            </li>
            <li>
               <p>If the DefaultNetmaskLength allocation rule is set on the pool, you can specify either the NetmaskLength or the CIDR and the DefaultNetmaskLength allocation rule will be ignored.</p>
            </li>
         </ul>
         <p>Possible values: Any available IPv4 or IPv6 CIDR.</p>")
    @as("Cidr")
    cidr: option<string_>,
    @ocaml.doc("<p>The ID of the IPAM pool from which you would like to allocate a CIDR.</p>")
    @as("IpamPoolId")
    ipamPoolId: ipamPoolId,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the allocation created.</p>") @as("IpamPoolAllocation")
    ipamPoolAllocation: option<ipamPoolAllocation>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "AllocateIpamPoolCidrCommand"
  let make = (
    ~ipamPoolId,
    ~disallowedCidrs=?,
    ~previewNextCidr=?,
    ~description=?,
    ~clientToken=?,
    ~netmaskLength=?,
    ~cidr=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      disallowedCidrs: disallowedCidrs,
      previewNextCidr: previewNextCidr,
      description: description,
      clientToken: clientToken,
      netmaskLength: netmaskLength,
      cidr: cidr,
      ipamPoolId: ipamPoolId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AdvertiseByoipCidr = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The address range, in CIDR notation. This must be the exact range that you provisioned. 
         You can't advertise only a portion of the provisioned range.</p>")
    @as("Cidr")
    cidr: string_,
  }
  type response = {
    @ocaml.doc("<p>Information about the address range.</p>") @as("ByoipCidr")
    byoipCidr: option<byoipCidr>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "AdvertiseByoipCidrCommand"
  let make = (~cidr, ~dryRun=?, ()) => new({dryRun: dryRun, cidr: cidr})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ResetAddressAttribute = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The attribute of the IP address.</p>") @as("Attribute")
    attribute: addressAttributeName,
    @ocaml.doc("<p>[EC2-VPC] The allocation ID.</p>") @as("AllocationId")
    allocationId: allocationId,
  }
  type response = {
    @ocaml.doc("<p>Information about the IP address.</p>") @as("Address")
    address: option<addressAttribute>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ResetAddressAttributeCommand"
  let make = (~attribute, ~allocationId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, attribute: attribute, allocationId: allocationId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ReplaceIamInstanceProfileAssociation = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the existing IAM instance profile association.</p>")
    @as("AssociationId")
    associationId: iamInstanceProfileAssociationId,
    @ocaml.doc("<p>The IAM instance profile.</p>") @as("IamInstanceProfile")
    iamInstanceProfile: iamInstanceProfileSpecification,
  }
  type response = {
    @ocaml.doc("<p>Information about the IAM instance profile association.</p>")
    @as("IamInstanceProfileAssociation")
    iamInstanceProfileAssociation: option<iamInstanceProfileAssociation>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ReplaceIamInstanceProfileAssociationCommand"
  let make = (~associationId, ~iamInstanceProfile, ()) =>
    new({associationId: associationId, iamInstanceProfile: iamInstanceProfile})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RegisterTransitGatewayMulticastGroupSources = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The group sources' network interface IDs to register with the  transit gateway multicast group.</p>"
    )
    @as("NetworkInterfaceIds")
    networkInterfaceIds: option<transitGatewayNetworkInterfaceIdList>,
    @ocaml.doc("<p>The IP address assigned to the  transit gateway multicast group.</p>")
    @as("GroupIpAddress")
    groupIpAddress: option<string_>,
    @ocaml.doc("<p>The ID of the transit gateway multicast domain.</p>")
    @as("TransitGatewayMulticastDomainId")
    transitGatewayMulticastDomainId: option<transitGatewayMulticastDomainId>,
  }
  type response = {
    @ocaml.doc("<p>Information about the  transit gateway multicast group sources.</p>")
    @as("RegisteredMulticastGroupSources")
    registeredMulticastGroupSources: option<transitGatewayMulticastRegisteredGroupSources>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "RegisterTransitGatewayMulticastGroupSourcesCommand"
  let make = (
    ~dryRun=?,
    ~networkInterfaceIds=?,
    ~groupIpAddress=?,
    ~transitGatewayMulticastDomainId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      networkInterfaceIds: networkInterfaceIds,
      groupIpAddress: groupIpAddress,
      transitGatewayMulticastDomainId: transitGatewayMulticastDomainId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RegisterTransitGatewayMulticastGroupMembers = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The group members' network interface IDs to register with the  transit gateway multicast group.</p>"
    )
    @as("NetworkInterfaceIds")
    networkInterfaceIds: option<transitGatewayNetworkInterfaceIdList>,
    @ocaml.doc("<p>The IP address assigned to the  transit gateway multicast group.</p>")
    @as("GroupIpAddress")
    groupIpAddress: option<string_>,
    @ocaml.doc("<p>The ID of the transit gateway multicast domain.</p>")
    @as("TransitGatewayMulticastDomainId")
    transitGatewayMulticastDomainId: option<transitGatewayMulticastDomainId>,
  }
  type response = {
    @ocaml.doc("<p>Information about the registered  transit gateway multicast group members.</p>")
    @as("RegisteredMulticastGroupMembers")
    registeredMulticastGroupMembers: option<transitGatewayMulticastRegisteredGroupMembers>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "RegisterTransitGatewayMulticastGroupMembersCommand"
  let make = (
    ~dryRun=?,
    ~networkInterfaceIds=?,
    ~groupIpAddress=?,
    ~transitGatewayMulticastDomainId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      networkInterfaceIds: networkInterfaceIds,
      groupIpAddress: groupIpAddress,
      transitGatewayMulticastDomainId: transitGatewayMulticastDomainId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RegisterInstanceEventNotificationAttributes = {
  type t
  type request = {
    @ocaml.doc("<p>Information about the tag keys to register.</p>") @as("InstanceTagAttribute")
    instanceTagAttribute: option<registerInstanceTagAttributeRequest>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The resulting set of tag keys.</p>") @as("InstanceTagAttribute")
    instanceTagAttribute: option<instanceTagNotificationAttribute>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "RegisterInstanceEventNotificationAttributesCommand"
  let make = (~instanceTagAttribute=?, ~dryRun=?, ()) =>
    new({instanceTagAttribute: instanceTagAttribute, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ProvisionIpamPoolCidr = {
  type t
  type request = {
    @ocaml.doc(
      "<p>A signed document that proves that you are authorized to bring a specified IP address range to Amazon using BYOIP. This option applies to public pools only.</p>"
    )
    @as("CidrAuthorizationContext")
    cidrAuthorizationContext: option<ipamCidrAuthorizationContext>,
    @ocaml.doc("<p>The CIDR you want to assign to the IPAM pool.</p>") @as("Cidr")
    cidr: option<string_>,
    @ocaml.doc("<p>The ID of the IPAM pool to which you want to assign a CIDR.</p>")
    @as("IpamPoolId")
    ipamPoolId: ipamPoolId,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the provisioned CIDR.</p>") @as("IpamPoolCidr")
    ipamPoolCidr: option<ipamPoolCidr>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ProvisionIpamPoolCidrCommand"
  let make = (~ipamPoolId, ~cidrAuthorizationContext=?, ~cidr=?, ~dryRun=?, ()) =>
    new({
      cidrAuthorizationContext: cidrAuthorizationContext,
      cidr: cidr,
      ipamPoolId: ipamPoolId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyTransitGatewayPrefixListReference = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Indicates whether to drop traffic that matches this route.</p>") @as("Blackhole")
    blackhole: option<boolean_>,
    @ocaml.doc("<p>The ID of the attachment to which traffic is routed.</p>")
    @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: option<transitGatewayAttachmentId>,
    @ocaml.doc("<p>The ID of the prefix list.</p>") @as("PrefixListId")
    prefixListId: prefixListResourceId,
    @ocaml.doc("<p>The ID of the transit gateway route table.</p>")
    @as("TransitGatewayRouteTableId")
    transitGatewayRouteTableId: transitGatewayRouteTableId,
  }
  type response = {
    @ocaml.doc("<p>Information about the prefix list reference.</p>")
    @as("TransitGatewayPrefixListReference")
    transitGatewayPrefixListReference: option<transitGatewayPrefixListReference>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyTransitGatewayPrefixListReferenceCommand"
  let make = (
    ~prefixListId,
    ~transitGatewayRouteTableId,
    ~dryRun=?,
    ~blackhole=?,
    ~transitGatewayAttachmentId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      blackhole: blackhole,
      transitGatewayAttachmentId: transitGatewayAttachmentId,
      prefixListId: prefixListId,
      transitGatewayRouteTableId: transitGatewayRouteTableId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyTrafficMirrorFilterRule = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The properties that you want to remove from the Traffic Mirror filter rule.</p>
         <p>When you remove a property from a Traffic Mirror filter rule, the property is set to the default.</p>")
    @as("RemoveFields")
    removeFields: option<trafficMirrorFilterRuleFieldList>,
    @ocaml.doc("<p>The description to assign to the Traffic Mirror rule.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The source CIDR block to assign to the Traffic Mirror rule.</p>")
    @as("SourceCidrBlock")
    sourceCidrBlock: option<string_>,
    @ocaml.doc("<p>The destination CIDR block to assign to the Traffic Mirror rule.</p>")
    @as("DestinationCidrBlock")
    destinationCidrBlock: option<string_>,
    @ocaml.doc("<p>The protocol, for example TCP, to assign to the Traffic Mirror rule.</p>")
    @as("Protocol")
    protocol: option<integer_>,
    @ocaml.doc("<p>The port range to assign to the Traffic Mirror rule.</p>") @as("SourcePortRange")
    sourcePortRange: option<trafficMirrorPortRangeRequest>,
    @ocaml.doc("<p>The destination ports that are associated with the Traffic Mirror rule.</p>")
    @as("DestinationPortRange")
    destinationPortRange: option<trafficMirrorPortRangeRequest>,
    @ocaml.doc("<p>The action to assign to the rule.</p>") @as("RuleAction")
    ruleAction: option<trafficMirrorRuleAction>,
    @ocaml.doc("<p>The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given
         direction. The rules are processed in ascending order by rule number.</p>")
    @as("RuleNumber")
    ruleNumber: option<integer_>,
    @ocaml.doc("<p>The type of traffic to assign to the rule.</p>") @as("TrafficDirection")
    trafficDirection: option<trafficDirection>,
    @ocaml.doc("<p>The ID of the Traffic Mirror rule.</p>") @as("TrafficMirrorFilterRuleId")
    trafficMirrorFilterRuleId: trafficMirrorFilterRuleId,
  }
  type response = {
    @ocaml.doc("<p>Modifies a Traffic Mirror rule.</p>") @as("TrafficMirrorFilterRule")
    trafficMirrorFilterRule: option<trafficMirrorFilterRule>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyTrafficMirrorFilterRuleCommand"
  let make = (
    ~trafficMirrorFilterRuleId,
    ~dryRun=?,
    ~removeFields=?,
    ~description=?,
    ~sourceCidrBlock=?,
    ~destinationCidrBlock=?,
    ~protocol=?,
    ~sourcePortRange=?,
    ~destinationPortRange=?,
    ~ruleAction=?,
    ~ruleNumber=?,
    ~trafficDirection=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      removeFields: removeFields,
      description: description,
      sourceCidrBlock: sourceCidrBlock,
      destinationCidrBlock: destinationCidrBlock,
      protocol: protocol,
      sourcePortRange: sourcePortRange,
      destinationPortRange: destinationPortRange,
      ruleAction: ruleAction,
      ruleNumber: ruleNumber,
      trafficDirection: trafficDirection,
      trafficMirrorFilterRuleId: trafficMirrorFilterRuleId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyReservedInstances = {
  type t
  @ocaml.doc("<p>Contains the parameters for ModifyReservedInstances.</p>")
  type request = {
    @ocaml.doc("<p>The configuration settings for the Reserved Instances to modify.</p>")
    @as("TargetConfigurations")
    targetConfigurations: reservedInstancesConfigurationList,
    @ocaml.doc("<p>A unique, case-sensitive token you provide to ensure idempotency of your modification request. For more information, see 
   		<a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The IDs of the Reserved Instances to modify.</p>") @as("ReservedInstancesIds")
    reservedInstancesIds: reservedInstancesIdStringList,
  }
  @ocaml.doc("<p>Contains the output of ModifyReservedInstances.</p>")
  type response = {
    @ocaml.doc("<p>The ID for the modification.</p>") @as("ReservedInstancesModificationId")
    reservedInstancesModificationId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyReservedInstancesCommand"
  let make = (~targetConfigurations, ~reservedInstancesIds, ~clientToken=?, ()) =>
    new({
      targetConfigurations: targetConfigurations,
      clientToken: clientToken,
      reservedInstancesIds: reservedInstancesIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyInstanceCapacityReservationAttributes = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Information about the Capacity Reservation targeting option.</p>")
    @as("CapacityReservationSpecification")
    capacityReservationSpecification: capacityReservationSpecification,
    @ocaml.doc("<p>The ID of the instance to be modified.</p>") @as("InstanceId")
    instanceId: instanceId,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyInstanceCapacityReservationAttributesCommand"
  let make = (~capacityReservationSpecification, ~instanceId, ~dryRun=?, ()) =>
    new({
      dryRun: dryRun,
      capacityReservationSpecification: capacityReservationSpecification,
      instanceId: instanceId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyClientVpnEndpoint = {
  type t
  type request = {
    @ocaml.doc("<p>Options for enabling a customizable text banner that will be displayed on
			Amazon Web Services provided clients when a VPN session is established.</p>")
    @as("ClientLoginBannerOptions")
    clientLoginBannerOptions: option<clientLoginBannerOptions>,
    @ocaml.doc("<p>The maximum VPN session duration time in hours.</p>
		       <p>Valid values: <code>8 | 10 | 12 | 24</code>
         </p>
		       <p>Default value: <code>24</code>
         </p>")
    @as("SessionTimeoutHours")
    sessionTimeoutHours: option<integer_>,
    @ocaml.doc(
      "<p>The options for managing connection authorization for new client connections.</p>"
    )
    @as("ClientConnectOptions")
    clientConnectOptions: option<clientConnectOptions>,
    @ocaml.doc(
      "<p>Specify whether to enable the self-service portal for the Client VPN endpoint.</p>"
    )
    @as("SelfServicePortal")
    selfServicePortal: option<selfServicePortal>,
    @ocaml.doc("<p>The ID of the VPC to associate with the Client VPN endpoint.</p>") @as("VpcId")
    vpcId: option<vpcId>,
    @ocaml.doc("<p>The IDs of one or more security groups to apply to the target network.</p>")
    @as("SecurityGroupIds")
    securityGroupIds: option<clientVpnSecurityGroupIdSet>,
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Indicates whether the VPN is split-tunnel.</p>
        <p>For information about split-tunnel VPN endpoints, see <a href=\"https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html\">Split-tunnel Client VPN endpoint</a> in the 
        	<i>Client VPN Administrator Guide</i>.</p>")
    @as("SplitTunnel")
    splitTunnel: option<boolean_>,
    @ocaml.doc("<p>A brief description of the Client VPN endpoint.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The port number to assign to the Client VPN endpoint for TCP and UDP traffic.</p>
	        <p>Valid Values: <code>443</code> | <code>1194</code>
         </p>
	        <p>Default Value: <code>443</code>
         </p>")
    @as("VpnPort")
    vpnPort: option<integer_>,
    @ocaml.doc("<p>Information about the DNS servers to be used by Client VPN connections. A Client VPN endpoint can have 
			up to two DNS servers.</p>")
    @as("DnsServers")
    dnsServers: option<dnsServersOptionsModifyStructure>,
    @ocaml.doc("<p>Information about the client connection logging options.</p>
		       <p>If you enable client connection logging, data about client connections is sent to a
			Cloudwatch Logs log stream. The following information is logged:</p>
		       <ul>
            <li>
               <p>Client connection requests</p>
            </li>
            <li>
               <p>Client connection results (successful and unsuccessful)</p>
            </li>
            <li>
               <p>Reasons for unsuccessful client connection requests</p>
            </li>
            <li>
               <p>Client connection termination time</p>
            </li>
         </ul>")
    @as("ConnectionLogOptions")
    connectionLogOptions: option<connectionLogOptions>,
    @ocaml.doc("<p>The ARN of the server certificate to be used. The server certificate must be provisioned in 
			Certificate Manager (ACM).</p>")
    @as("ServerCertificateArn")
    serverCertificateArn: option<string_>,
    @ocaml.doc("<p>The ID of the Client VPN endpoint to modify.</p>") @as("ClientVpnEndpointId")
    clientVpnEndpointId: clientVpnEndpointId,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyClientVpnEndpointCommand"
  let make = (
    ~clientVpnEndpointId,
    ~clientLoginBannerOptions=?,
    ~sessionTimeoutHours=?,
    ~clientConnectOptions=?,
    ~selfServicePortal=?,
    ~vpcId=?,
    ~securityGroupIds=?,
    ~dryRun=?,
    ~splitTunnel=?,
    ~description=?,
    ~vpnPort=?,
    ~dnsServers=?,
    ~connectionLogOptions=?,
    ~serverCertificateArn=?,
    (),
  ) =>
    new({
      clientLoginBannerOptions: clientLoginBannerOptions,
      sessionTimeoutHours: sessionTimeoutHours,
      clientConnectOptions: clientConnectOptions,
      selfServicePortal: selfServicePortal,
      vpcId: vpcId,
      securityGroupIds: securityGroupIds,
      dryRun: dryRun,
      splitTunnel: splitTunnel,
      description: description,
      vpnPort: vpnPort,
      dnsServers: dnsServers,
      connectionLogOptions: connectionLogOptions,
      serverCertificateArn: serverCertificateArn,
      clientVpnEndpointId: clientVpnEndpointId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyAddressAttribute = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The domain name to modify for the IP address.</p>") @as("DomainName")
    domainName: option<string_>,
    @ocaml.doc("<p>[EC2-VPC] The allocation ID.</p>") @as("AllocationId")
    allocationId: allocationId,
  }
  type response = {
    @ocaml.doc("<p>Information about the Elastic IP address.</p>") @as("Address")
    address: option<addressAttribute>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyAddressAttributeCommand"
  let make = (~allocationId, ~dryRun=?, ~domainName=?, ()) =>
    new({dryRun: dryRun, domainName: domainName, allocationId: allocationId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ListSnapshotsInRecycleBin = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The IDs of the snapshots to list. Omit this parameter to list all of the 
      snapshots that are in the Recycle Bin.</p>")
    @as("SnapshotIds")
    snapshotIds: option<snapshotIdStringList>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<listSnapshotsInRecycleBinMaxResults>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the snapshots.</p>") @as("Snapshots")
    snapshots: option<snapshotRecycleBinInfoList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ListSnapshotsInRecycleBinCommand"
  let make = (~dryRun=?, ~snapshotIds=?, ~nextToken=?, ~maxResults=?, ()) =>
    new({dryRun: dryRun, snapshotIds: snapshotIds, nextToken: nextToken, maxResults: maxResults})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ListImagesInRecycleBin = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
         <p>If you do not specify a value for <i>MaxResults</i>, the request 
      returns 1,000 items per page by default. For more information, see 
      <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination\">
        Pagination</a>.</p>")
    @as("MaxResults")
    maxResults: option<listImagesInRecycleBinMaxResults>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The IDs of the AMIs to list. Omit this parameter to list all of the AMIs that 
      are in the Recycle Bin. You can specify up to 20 IDs in a single request.</p>")
    @as("ImageIds")
    imageIds: option<imageIdStringList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the AMIs.</p>") @as("Images")
    images: option<imageRecycleBinInfoList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ListImagesInRecycleBinCommand"
  let make = (~dryRun=?, ~maxResults=?, ~nextToken=?, ~imageIds=?, ()) =>
    new({dryRun: dryRun, maxResults: maxResults, nextToken: nextToken, imageIds: imageIds})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetVpnConnectionDeviceTypes = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The <code>NextToken</code> value returned from a previous paginated
                <code>GetVpnConnectionDeviceTypes</code> request where <code>MaxResults</code> was
            used and the results exceeded the value of that parameter. Pagination continues from the
            end of the previous results that returned the <code>NextToken</code> value. This value
            is null when there are no more results to return. </p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results returned by <code>GetVpnConnectionDeviceTypes</code> in
            paginated output. When this parameter is used, <code>GetVpnConnectionDeviceTypes</code>
            only returns <code>MaxResults</code> results in a single page along with a
                <code>NextToken</code> response element. The remaining results of the initial
            request can be seen by sending another <code>GetVpnConnectionDeviceTypes</code> request
            with the returned <code>NextToken</code> value. This value can be between 200 and 1000.
            If this parameter is not used, then <code>GetVpnConnectionDeviceTypes</code> returns all
            results.</p>")
    @as("MaxResults")
    maxResults: option<gvcdmaxResults>,
  }
  type response = {
    @ocaml.doc("<p>The <code>NextToken</code> value to include in a future
                <code>GetVpnConnectionDeviceTypes</code> request. When the results of a
                <code>GetVpnConnectionDeviceTypes</code> request exceed <code>MaxResults</code>,
            this value can be used to retrieve the next page of results. This value is null when
            there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>List of customer gateway devices that have a sample configuration file available for
            use.</p>")
    @as("VpnConnectionDeviceTypes")
    vpnConnectionDeviceTypes: option<vpnConnectionDeviceTypeList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetVpnConnectionDeviceTypesCommand"
  let make = (~dryRun=?, ~nextToken=?, ~maxResults=?, ()) =>
    new({dryRun: dryRun, nextToken: nextToken, maxResults: maxResults})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetManagedPrefixListEntries = {
  type t
  type request = {
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<prefixListMaxResults>,
    @ocaml.doc(
      "<p>The version of the prefix list for which to return the entries. The default is the current version.</p>"
    )
    @as("TargetVersion")
    targetVersion: option<long>,
    @ocaml.doc("<p>The ID of the prefix list.</p>") @as("PrefixListId")
    prefixListId: prefixListResourceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Information about the prefix list entries.</p>") @as("Entries")
    entries: option<prefixListEntrySet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetManagedPrefixListEntriesCommand"
  let make = (~prefixListId, ~nextToken=?, ~maxResults=?, ~targetVersion=?, ~dryRun=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      targetVersion: targetVersion,
      prefixListId: prefixListId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetManagedPrefixListAssociations = {
  type t
  type request = {
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<getManagedPrefixListAssociationsMaxResults>,
    @ocaml.doc("<p>The ID of the prefix list.</p>") @as("PrefixListId")
    prefixListId: prefixListResourceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the associations.</p>") @as("PrefixListAssociations")
    prefixListAssociations: option<prefixListAssociationSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetManagedPrefixListAssociationsCommand"
  let make = (~prefixListId, ~nextToken=?, ~maxResults=?, ~dryRun=?, ()) =>
    new({nextToken: nextToken, maxResults: maxResults, prefixListId: prefixListId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetIpamAddressHistory = {
  type t
  type request = {
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>The maximum number of historical results you would like returned per page. Defaults to 100.</p>"
    )
    @as("MaxResults")
    maxResults: option<ipamAddressHistoryMaxResults>,
    @ocaml.doc(
      "<p>The end of the time period for which you are looking for history. If you omit this option, it will default to the current time.</p>"
    )
    @as("EndTime")
    endTime: option<millisecondDateTime>,
    @ocaml.doc(
      "<p>The start of the time period for which you are looking for history. If you omit this option, it will default to the value of EndTime.</p>"
    )
    @as("StartTime")
    startTime: option<millisecondDateTime>,
    @ocaml.doc("<p>The ID of the VPC you want your history records filtered by.</p>") @as("VpcId")
    vpcId: option<string_>,
    @ocaml.doc("<p>The ID of the IPAM scope that the CIDR is in.</p>") @as("IpamScopeId")
    ipamScopeId: ipamScopeId,
    @ocaml.doc("<p>The CIDR you want the history of. The CIDR can be an IPv4 or IPv6 IP address range. 
         If you enter a /16 IPv4 CIDR, you will get records that match it exactly. You will not get records for any subnets within the /16 CIDR.</p>")
    @as("Cidr")
    cidr: string_,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>A historical record for a CIDR within an IPAM scope. If the CIDR is associated with an EC2 instance, you will see an object in the response for the instance and one for the network interface.</p>"
    )
    @as("HistoryRecords")
    historyRecords: option<ipamAddressHistoryRecordSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "GetIpamAddressHistoryCommand"
  let make = (
    ~ipamScopeId,
    ~cidr,
    ~nextToken=?,
    ~maxResults=?,
    ~endTime=?,
    ~startTime=?,
    ~vpcId=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      endTime: endTime,
      startTime: startTime,
      vpcId: vpcId,
      ipamScopeId: ipamScopeId,
      cidr: cidr,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetInstanceTypesFromInstanceRequirements = {
  type t
  type request = {
    @ocaml.doc("<p>The token for the next set of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. Specify a value between 1 and  
         1000. The default value is 1000. To retrieve the remaining results, make another call with  
         the returned <code>NextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>The attributes required for the instance types.</p>") @as("InstanceRequirements")
    instanceRequirements: instanceRequirementsRequest,
    @ocaml.doc("<p>The virtualization type.</p>") @as("VirtualizationTypes")
    virtualizationTypes: virtualizationTypeSet,
    @ocaml.doc("<p>The processor architecture type.</p>") @as("ArchitectureTypes")
    architectureTypes: architectureTypeSet,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The token for the next set of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The instance types with the specified instance attributes.</p>")
    @as("InstanceTypes")
    instanceTypes: option<instanceTypeInfoFromInstanceRequirementsSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetInstanceTypesFromInstanceRequirementsCommand"
  let make = (
    ~instanceRequirements,
    ~virtualizationTypes,
    ~architectureTypes,
    ~nextToken=?,
    ~maxResults=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      instanceRequirements: instanceRequirements,
      virtualizationTypes: virtualizationTypes,
      architectureTypes: architectureTypes,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetGroupsForCapacityReservation = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p>"
    )
    @as("MaxResults")
    maxResults: option<getGroupsForCapacityReservationRequestMaxResults>,
    @ocaml.doc("<p>The token to use to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The ID of the Capacity Reservation.</p>") @as("CapacityReservationId")
    capacityReservationId: capacityReservationId,
  }
  type response = {
    @ocaml.doc(
      "<p>Information about the resource groups to which the Capacity Reservation has been added.</p>"
    )
    @as("CapacityReservationGroups")
    capacityReservationGroups: option<capacityReservationGroupSet>,
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetGroupsForCapacityReservationCommand"
  let make = (~capacityReservationId, ~dryRun=?, ~maxResults=?, ~nextToken=?, ()) =>
    new({
      dryRun: dryRun,
      maxResults: maxResults,
      nextToken: nextToken,
      capacityReservationId: capacityReservationId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetCapacityReservationUsage = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p>
		       <p>Valid range: Minimum value of 1. Maximum value of 1000.</p>")
    @as("MaxResults")
    maxResults: option<getCapacityReservationUsageRequestMaxResults>,
    @ocaml.doc("<p>The token to use to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The ID of the Capacity Reservation.</p>") @as("CapacityReservationId")
    capacityReservationId: capacityReservationId,
  }
  type response = {
    @ocaml.doc("<p>Information about the Capacity Reservation usage.</p>") @as("InstanceUsages")
    instanceUsages: option<instanceUsageSet>,
    @ocaml.doc("<p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p>
			      <ul>
            <li>
               <p>
                  <code>active</code> - The Capacity Reservation is active and the capacity is available for your use.</p>
            </li>
            <li>
               <p>
                  <code>expired</code> - The Capacity Reservation expired automatically at the date and time specified 
					in your request. The reserved capacity is no longer available for your use.</p>
            </li>
            <li>
               <p>
                  <code>cancelled</code> - The Capacity Reservation was cancelled. The reserved capacity is no
					longer available for your use.</p>
            </li>
            <li>
               <p>
                  <code>pending</code> - The Capacity Reservation request was successful but the capacity 
					provisioning is still pending.</p>
            </li>
            <li>
               <p>
                  <code>failed</code> - The Capacity Reservation request has failed. A request might fail 
					due to invalid request parameters, capacity constraints, or instance limit constraints. 
					Failed requests are retained for 60 minutes.</p>
            </li>
         </ul>")
    @as("State")
    state: option<capacityReservationState>,
    @ocaml.doc(
      "<p>The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.</p>"
    )
    @as("AvailableInstanceCount")
    availableInstanceCount: option<integer_>,
    @ocaml.doc(
      "<p>The number of instances for which the Capacity Reservation reserves capacity.</p>"
    )
    @as("TotalInstanceCount")
    totalInstanceCount: option<integer_>,
    @ocaml.doc("<p>The type of instance for which the Capacity Reservation reserves capacity.</p>")
    @as("InstanceType")
    instanceType: option<string_>,
    @ocaml.doc("<p>The ID of the Capacity Reservation.</p>") @as("CapacityReservationId")
    capacityReservationId: option<string_>,
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetCapacityReservationUsageCommand"
  let make = (~capacityReservationId, ~dryRun=?, ~maxResults=?, ~nextToken=?, ()) =>
    new({
      dryRun: dryRun,
      maxResults: maxResults,
      nextToken: nextToken,
      capacityReservationId: capacityReservationId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetAssociatedIpv6PoolCidrs = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<ipv6PoolMaxResults>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The ID of the IPv6 address pool.</p>") @as("PoolId") poolId: ipv6PoolEc2Id,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the IPv6 CIDR block associations.</p>")
    @as("Ipv6CidrAssociations")
    ipv6CidrAssociations: option<ipv6CidrAssociationSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetAssociatedIpv6PoolCidrsCommand"
  let make = (~poolId, ~dryRun=?, ~maxResults=?, ~nextToken=?, ()) =>
    new({dryRun: dryRun, maxResults: maxResults, nextToken: nextToken, poolId: poolId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetAssociatedEnclaveCertificateIamRoles = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ARN of the ACM certificate for which to view the associated IAM roles, encryption keys, and Amazon 
			S3 object information.</p>")
    @as("CertificateArn")
    certificateArn: option<resourceArn>,
  }
  type response = {
    @ocaml.doc("<p>Information about the associated IAM roles.</p>") @as("AssociatedRoles")
    associatedRoles: option<associatedRolesList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetAssociatedEnclaveCertificateIamRolesCommand"
  let make = (~dryRun=?, ~certificateArn=?, ()) =>
    new({dryRun: dryRun, certificateArn: certificateArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DisassociateVpcCidrBlock = {
  type t
  type request = {
    @ocaml.doc("<p>The association ID for the CIDR block.</p>") @as("AssociationId")
    associationId: vpcCidrAssociationId,
  }
  type response = {
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<string_>,
    @ocaml.doc("<p>Information about the IPv4 CIDR block association.</p>")
    @as("CidrBlockAssociation")
    cidrBlockAssociation: option<vpcCidrBlockAssociation>,
    @ocaml.doc("<p>Information about the IPv6 CIDR block association.</p>")
    @as("Ipv6CidrBlockAssociation")
    ipv6CidrBlockAssociation: option<vpcIpv6CidrBlockAssociation>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DisassociateVpcCidrBlockCommand"
  let make = (~associationId, ()) => new({associationId: associationId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DisassociateSubnetCidrBlock = {
  type t
  type request = {
    @ocaml.doc("<p>The association ID for the CIDR block.</p>") @as("AssociationId")
    associationId: subnetCidrAssociationId,
  }
  type response = {
    @ocaml.doc("<p>The ID of the subnet.</p>") @as("SubnetId") subnetId: option<string_>,
    @ocaml.doc("<p>Information about the IPv6 CIDR block association.</p>")
    @as("Ipv6CidrBlockAssociation")
    ipv6CidrBlockAssociation: option<subnetIpv6CidrBlockAssociation>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DisassociateSubnetCidrBlockCommand"
  let make = (~associationId, ()) => new({associationId: associationId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DisassociateIamInstanceProfile = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the IAM instance profile association.</p>") @as("AssociationId")
    associationId: iamInstanceProfileAssociationId,
  }
  type response = {
    @ocaml.doc("<p>Information about the IAM instance profile association.</p>")
    @as("IamInstanceProfileAssociation")
    iamInstanceProfileAssociation: option<iamInstanceProfileAssociation>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DisassociateIamInstanceProfileCommand"
  let make = (~associationId, ()) => new({associationId: associationId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeVpcClassicLinkDnsSupport = {
  type t
  type request = {
    @ocaml.doc("<p>One or more VPC IDs.</p>") @as("VpcIds") vpcIds: option<vpcClassicLinkIdList>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<describeVpcClassicLinkDnsSupportNextToken>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<describeVpcClassicLinkDnsSupportMaxResults>,
  }
  type response = {
    @ocaml.doc("<p>Information about the ClassicLink DNS support status of the VPCs.</p>")
    @as("Vpcs")
    vpcs: option<classicLinkDnsSupportList>,
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<describeVpcClassicLinkDnsSupportNextToken>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeVpcClassicLinkDnsSupportCommand"
  let make = (~vpcIds=?, ~nextToken=?, ~maxResults=?, ()) =>
    new({vpcIds: vpcIds, nextToken: nextToken, maxResults: maxResults})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeVolumeAttribute = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the volume.</p>") @as("VolumeId") volumeId: volumeId,
    @ocaml.doc("<p>The attribute of the volume. This parameter is required.</p>") @as("Attribute")
    attribute: volumeAttributeName,
  }
  type response = {
    @ocaml.doc("<p>The ID of the volume.</p>") @as("VolumeId") volumeId: option<string_>,
    @ocaml.doc("<p>A list of product codes.</p>") @as("ProductCodes")
    productCodes: option<productCodeList>,
    @ocaml.doc("<p>The state of <code>autoEnableIO</code> attribute.</p>") @as("AutoEnableIO")
    autoEnableIO: option<attributeBooleanValue>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeVolumeAttributeCommand"
  let make = (~volumeId, ~attribute, ~dryRun=?, ()) =>
    new({dryRun: dryRun, volumeId: volumeId, attribute: attribute})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeSpotFleetInstances = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeSpotFleetInstances.</p>")
  type request = {
    @ocaml.doc("<p>The ID of the Spot Fleet request.</p>") @as("SpotFleetRequestId")
    spotFleetRequestId: spotFleetRequestId,
    @ocaml.doc("<p>The token for the next set of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. Specify a value between 1
            and 1000. The default value is 1000. To retrieve the remaining results, make another
            call with the returned <code>NextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<describeSpotFleetInstancesMaxResults>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  @ocaml.doc("<p>Contains the output of DescribeSpotFleetInstances.</p>")
  type response = {
    @ocaml.doc("<p>The ID of the Spot Fleet request.</p>") @as("SpotFleetRequestId")
    spotFleetRequestId: option<string_>,
    @ocaml.doc("<p>The token required to retrieve the next set of results. This value is
                <code>null</code> when there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The running instances. This list is refreshed periodically and might be out of
            date.</p>")
    @as("ActiveInstances")
    activeInstances: option<activeInstanceSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeSpotFleetInstancesCommand"
  let make = (~spotFleetRequestId, ~nextToken=?, ~maxResults=?, ~dryRun=?, ()) =>
    new({
      spotFleetRequestId: spotFleetRequestId,
      nextToken: nextToken,
      maxResults: maxResults,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeSpotDatafeedSubscription = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeSpotDatafeedSubscription.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  @ocaml.doc("<p>Contains the output of DescribeSpotDatafeedSubscription.</p>")
  type response = {
    @ocaml.doc("<p>The Spot Instance data feed subscription.</p>") @as("SpotDatafeedSubscription")
    spotDatafeedSubscription: option<spotDatafeedSubscription>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeSpotDatafeedSubscriptionCommand"
  let make = (~dryRun=?, ()) => new({dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeSnapshotAttribute = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the EBS snapshot.</p>") @as("SnapshotId") snapshotId: snapshotId,
    @ocaml.doc("<p>The snapshot attribute you would like to view.</p>") @as("Attribute")
    attribute: snapshotAttributeName,
  }
  type response = {
    @ocaml.doc("<p>The ID of the EBS snapshot.</p>") @as("SnapshotId") snapshotId: option<string_>,
    @ocaml.doc("<p>The product codes.</p>") @as("ProductCodes")
    productCodes: option<productCodeList>,
    @ocaml.doc("<p>The users and groups that have the permissions for creating volumes from the
      snapshot.</p>")
    @as("CreateVolumePermissions")
    createVolumePermissions: option<createVolumePermissionList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeSnapshotAttributeCommand"
  let make = (~snapshotId, ~attribute, ~dryRun=?, ()) =>
    new({dryRun: dryRun, snapshotId: snapshotId, attribute: attribute})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeSecurityGroupReferences = {
  type t
  type request = {
    @ocaml.doc("<p>The IDs of the security groups in your account.</p>") @as("GroupId")
    groupId: groupIds,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the VPCs with the referencing security groups.</p>")
    @as("SecurityGroupReferenceSet")
    securityGroupReferenceSet: option<securityGroupReferences>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeSecurityGroupReferencesCommand"
  let make = (~groupId, ~dryRun=?, ()) => new({groupId: groupId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeNetworkInterfaceAttribute = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeNetworkInterfaceAttribute.</p>")
  type request = {
    @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
    networkInterfaceId: networkInterfaceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
       and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
       Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The attribute of the network interface. This parameter is required.</p>")
    @as("Attribute")
    attribute: option<networkInterfaceAttribute>,
  }
  @ocaml.doc("<p>Contains the output of DescribeNetworkInterfaceAttribute.</p>")
  type response = {
    @ocaml.doc("<p>Indicates whether source/destination checking is enabled.</p>")
    @as("SourceDestCheck")
    sourceDestCheck: option<attributeBooleanValue>,
    @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
    networkInterfaceId: option<string_>,
    @ocaml.doc("<p>The security groups associated with the network interface.</p>") @as("Groups")
    groups: option<groupIdentifierList>,
    @ocaml.doc("<p>The description of the network interface.</p>") @as("Description")
    description: option<attributeValue>,
    @ocaml.doc("<p>The attachment (if any) of the network interface.</p>") @as("Attachment")
    attachment: option<networkInterfaceAttachment>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeNetworkInterfaceAttributeCommand"
  let make = (~networkInterfaceId, ~dryRun=?, ~attribute=?, ()) =>
    new({networkInterfaceId: networkInterfaceId, dryRun: dryRun, attribute: attribute})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeInstanceEventNotificationAttributes = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the registered tag keys.</p>") @as("InstanceTagAttribute")
    instanceTagAttribute: option<instanceTagNotificationAttribute>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeInstanceEventNotificationAttributesCommand"
  let make = (~dryRun=?, ()) => new({dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeIdentityIdFormat = {
  type t
  type request = {
    @ocaml.doc("<p>The type of resource: <code>bundle</code> |
          <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
          <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
          <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
          <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
          <code>network-acl</code> | <code>network-acl-association</code> |
          <code>network-interface</code> | <code>network-interface-attachment</code> |
          <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
          <code>route-table-association</code> | <code>security-group</code> |
          <code>snapshot</code> | <code>subnet</code> |
          <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code>
          | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
          <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>
         </p>")
    @as("Resource")
    resource: option<string_>,
    @ocaml.doc(
      "<p>The ARN of the principal, which can be an IAM role, IAM user, or the root user.</p>"
    )
    @as("PrincipalArn")
    principalArn: string_,
  }
  type response = {
    @ocaml.doc("<p>Information about the ID format for the resources.</p>") @as("Statuses")
    statuses: option<idFormatList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeIdentityIdFormatCommand"
  let make = (~principalArn, ~resource=?, ()) =>
    new({resource: resource, principalArn: principalArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeIdFormat = {
  type t
  type request = {
    @ocaml.doc("<p>The type of resource: <code>bundle</code> |
           <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
           <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
           <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
           <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
           <code>network-acl</code> | <code>network-acl-association</code> |
           <code>network-interface</code> | <code>network-interface-attachment</code> |
           <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
           <code>route-table-association</code> | <code>security-group</code> |
           <code>snapshot</code> | <code>subnet</code> |
           <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code>
           | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
           <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>
         </p>")
    @as("Resource")
    resource: option<string_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the ID format for the resource.</p>") @as("Statuses")
    statuses: option<idFormatList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeIdFormatCommand"
  let make = (~resource=?, ()) => new({resource: resource})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeByoipCidrs = {
  type t
  type request = {
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: describeByoipCidrsMaxResults,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about your address ranges.</p>") @as("ByoipCidrs")
    byoipCidrs: option<byoipCidrSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeByoipCidrsCommand"
  let make = (~maxResults, ~nextToken=?, ~dryRun=?, ()) =>
    new({nextToken: nextToken, maxResults: maxResults, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeAggregateIdFormat = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about each resource's ID format.</p>") @as("Statuses")
    statuses: option<idFormatList>,
    @ocaml.doc("<p>Indicates whether all resource types in the Region are configured to use longer IDs.
            This value is only <code>true</code> if all users are configured to use longer IDs for
            all resources types in the Region.</p>")
    @as("UseLongIdsAggregated")
    useLongIdsAggregated: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeAggregateIdFormatCommand"
  let make = (~dryRun=?, ()) => new({dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeregisterTransitGatewayMulticastGroupSources = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The IDs of the group sources' network interfaces.</p>")
    @as("NetworkInterfaceIds")
    networkInterfaceIds: option<transitGatewayNetworkInterfaceIdList>,
    @ocaml.doc("<p>The IP address assigned to the  transit gateway multicast group.</p>")
    @as("GroupIpAddress")
    groupIpAddress: option<string_>,
    @ocaml.doc("<p>The ID of the transit gateway multicast domain.</p>")
    @as("TransitGatewayMulticastDomainId")
    transitGatewayMulticastDomainId: option<transitGatewayMulticastDomainId>,
  }
  type response = {
    @ocaml.doc("<p>Information about the deregistered group sources.</p>")
    @as("DeregisteredMulticastGroupSources")
    deregisteredMulticastGroupSources: option<transitGatewayMulticastDeregisteredGroupSources>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeregisterTransitGatewayMulticastGroupSourcesCommand"
  let make = (
    ~dryRun=?,
    ~networkInterfaceIds=?,
    ~groupIpAddress=?,
    ~transitGatewayMulticastDomainId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      networkInterfaceIds: networkInterfaceIds,
      groupIpAddress: groupIpAddress,
      transitGatewayMulticastDomainId: transitGatewayMulticastDomainId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeregisterTransitGatewayMulticastGroupMembers = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The IDs of the group members' network interfaces.</p>")
    @as("NetworkInterfaceIds")
    networkInterfaceIds: option<transitGatewayNetworkInterfaceIdList>,
    @ocaml.doc("<p>The IP address assigned to the  transit gateway multicast group.</p>")
    @as("GroupIpAddress")
    groupIpAddress: option<string_>,
    @ocaml.doc("<p>The ID of the transit gateway multicast domain.</p>")
    @as("TransitGatewayMulticastDomainId")
    transitGatewayMulticastDomainId: option<transitGatewayMulticastDomainId>,
  }
  type response = {
    @ocaml.doc("<p>Information about the deregistered members.</p>")
    @as("DeregisteredMulticastGroupMembers")
    deregisteredMulticastGroupMembers: option<transitGatewayMulticastDeregisteredGroupMembers>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeregisterTransitGatewayMulticastGroupMembersCommand"
  let make = (
    ~dryRun=?,
    ~networkInterfaceIds=?,
    ~groupIpAddress=?,
    ~transitGatewayMulticastDomainId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      networkInterfaceIds: networkInterfaceIds,
      groupIpAddress: groupIpAddress,
      transitGatewayMulticastDomainId: transitGatewayMulticastDomainId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeregisterInstanceEventNotificationAttributes = {
  type t
  type request = {
    @ocaml.doc("<p>Information about the tag keys to deregister.</p>") @as("InstanceTagAttribute")
    instanceTagAttribute: option<deregisterInstanceTagAttributeRequest>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The resulting set of tag keys.</p>") @as("InstanceTagAttribute")
    instanceTagAttribute: option<instanceTagNotificationAttribute>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeregisterInstanceEventNotificationAttributesCommand"
  let make = (~instanceTagAttribute=?, ~dryRun=?, ()) =>
    new({instanceTagAttribute: instanceTagAttribute, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeprovisionIpamPoolCidr = {
  type t
  type request = {
    @ocaml.doc("<p>The CIDR which you want to deprovision from the pool.</p>") @as("Cidr")
    cidr: option<string_>,
    @ocaml.doc("<p>The ID of the pool that has the CIDR you want to deprovision.</p>")
    @as("IpamPoolId")
    ipamPoolId: ipamPoolId,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The deprovisioned pool CIDR.</p>") @as("IpamPoolCidr")
    ipamPoolCidr: option<ipamPoolCidr>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeprovisionIpamPoolCidrCommand"
  let make = (~ipamPoolId, ~cidr=?, ~dryRun=?, ()) =>
    new({cidr: cidr, ipamPoolId: ipamPoolId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteTransitGatewayPrefixListReference = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the prefix list.</p>") @as("PrefixListId")
    prefixListId: prefixListResourceId,
    @ocaml.doc("<p>The ID of the route table.</p>") @as("TransitGatewayRouteTableId")
    transitGatewayRouteTableId: transitGatewayRouteTableId,
  }
  type response = {
    @ocaml.doc("<p>Information about the deleted prefix list reference.</p>")
    @as("TransitGatewayPrefixListReference")
    transitGatewayPrefixListReference: option<transitGatewayPrefixListReference>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteTransitGatewayPrefixListReferenceCommand"
  let make = (~prefixListId, ~transitGatewayRouteTableId, ~dryRun=?, ()) =>
    new({
      dryRun: dryRun,
      prefixListId: prefixListId,
      transitGatewayRouteTableId: transitGatewayRouteTableId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteTags = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to delete. Specify a tag key and an optional tag value to delete
            specific tags. If you specify a tag key without a tag value, we delete any tag with this
            key regardless of its value. If you specify a tag key with an empty string as the tag
            value, we delete the tag only if its value is an empty string.</p>
        <p>If you omit this parameter, we delete all user-defined tags for the specified
            resources. We do not delete Amazon Web Services-generated tags (tags that have the <code>aws:</code>
            prefix).</p>
         <p>Constraints: Up to 1000 tags.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The IDs of the resources, separated by spaces.</p>
   	     <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p>")
    @as("Resources")
    resources: resourceIdList,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteTagsCommand"
  let make = (~resources, ~tags=?, ~dryRun=?, ()) =>
    new({tags: tags, resources: resources, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module CreateVpcEndpointConnectionNotification = {
  type t
  type request = {
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure
                idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>One or more endpoint events for which to receive notifications. Valid values are
                <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and
                <code>Reject</code>.</p>")
    @as("ConnectionEvents")
    connectionEvents: valueStringList,
    @ocaml.doc("<p>The ARN of the SNS topic for the notifications.</p>")
    @as("ConnectionNotificationArn")
    connectionNotificationArn: string_,
    @ocaml.doc("<p>The ID of the endpoint.</p>") @as("VpcEndpointId")
    vpcEndpointId: option<vpcEndpointId>,
    @ocaml.doc("<p>The ID of the endpoint service.</p>") @as("ServiceId")
    serviceId: option<vpcEndpointServiceId>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Information about the notification.</p>") @as("ConnectionNotification")
    connectionNotification: option<connectionNotification>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateVpcEndpointConnectionNotificationCommand"
  let make = (
    ~connectionEvents,
    ~connectionNotificationArn,
    ~clientToken=?,
    ~vpcEndpointId=?,
    ~serviceId=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      clientToken: clientToken,
      connectionEvents: connectionEvents,
      connectionNotificationArn: connectionNotificationArn,
      vpcEndpointId: vpcEndpointId,
      serviceId: serviceId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateTransitGatewayPrefixListReference = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Indicates whether to drop traffic that matches this route.</p>") @as("Blackhole")
    blackhole: option<boolean_>,
    @ocaml.doc("<p>The ID of the attachment to which traffic is routed.</p>")
    @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: option<transitGatewayAttachmentId>,
    @ocaml.doc("<p>The ID of the prefix list that is used for destination matches.</p>")
    @as("PrefixListId")
    prefixListId: prefixListResourceId,
    @ocaml.doc("<p>The ID of the transit gateway route table.</p>")
    @as("TransitGatewayRouteTableId")
    transitGatewayRouteTableId: transitGatewayRouteTableId,
  }
  type response = {
    @ocaml.doc("<p>Information about the prefix list reference.</p>")
    @as("TransitGatewayPrefixListReference")
    transitGatewayPrefixListReference: option<transitGatewayPrefixListReference>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateTransitGatewayPrefixListReferenceCommand"
  let make = (
    ~prefixListId,
    ~transitGatewayRouteTableId,
    ~dryRun=?,
    ~blackhole=?,
    ~transitGatewayAttachmentId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      blackhole: blackhole,
      transitGatewayAttachmentId: transitGatewayAttachmentId,
      prefixListId: prefixListId,
      transitGatewayRouteTableId: transitGatewayRouteTableId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateTrafficMirrorFilterRule = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The description of the Traffic Mirror rule.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The source CIDR block to assign to the Traffic Mirror rule.</p>")
    @as("SourceCidrBlock")
    sourceCidrBlock: string_,
    @ocaml.doc("<p>The destination CIDR block to assign to the Traffic Mirror rule.</p>")
    @as("DestinationCidrBlock")
    destinationCidrBlock: string_,
    @ocaml.doc("<p>The protocol, for example UDP, to assign to the Traffic Mirror rule.</p>
         <p>For information about the protocol value, see <a href=\"https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\">Protocol Numbers</a> on the  Internet Assigned Numbers Authority (IANA) website.</p>")
    @as("Protocol")
    protocol: option<integer_>,
    @ocaml.doc("<p>The source port range.</p>") @as("SourcePortRange")
    sourcePortRange: option<trafficMirrorPortRangeRequest>,
    @ocaml.doc("<p>The destination port range.</p>") @as("DestinationPortRange")
    destinationPortRange: option<trafficMirrorPortRangeRequest>,
    @ocaml.doc("<p>The action to take on the filtered traffic.</p>") @as("RuleAction")
    ruleAction: trafficMirrorRuleAction,
    @ocaml.doc("<p>The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given
         direction. The rules are processed in ascending order by rule number.</p>")
    @as("RuleNumber")
    ruleNumber: integer_,
    @ocaml.doc("<p>The type of traffic.</p>") @as("TrafficDirection")
    trafficDirection: trafficDirection,
    @ocaml.doc("<p>The ID of the filter that this rule is associated with.</p>")
    @as("TrafficMirrorFilterId")
    trafficMirrorFilterId: trafficMirrorFilterId,
  }
  type response = {
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The Traffic Mirror rule.</p>") @as("TrafficMirrorFilterRule")
    trafficMirrorFilterRule: option<trafficMirrorFilterRule>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateTrafficMirrorFilterRuleCommand"
  let make = (
    ~sourceCidrBlock,
    ~destinationCidrBlock,
    ~ruleAction,
    ~ruleNumber,
    ~trafficDirection,
    ~trafficMirrorFilterId,
    ~clientToken=?,
    ~dryRun=?,
    ~description=?,
    ~protocol=?,
    ~sourcePortRange=?,
    ~destinationPortRange=?,
    (),
  ) =>
    new({
      clientToken: clientToken,
      dryRun: dryRun,
      description: description,
      sourceCidrBlock: sourceCidrBlock,
      destinationCidrBlock: destinationCidrBlock,
      protocol: protocol,
      sourcePortRange: sourcePortRange,
      destinationPortRange: destinationPortRange,
      ruleAction: ruleAction,
      ruleNumber: ruleNumber,
      trafficDirection: trafficDirection,
      trafficMirrorFilterId: trafficMirrorFilterId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateTags = {
  type t
  type request = {
    @ocaml.doc("<p>The tags. The <code>value</code> parameter is required, but if you don't want the tag to have a value,
        specify the parameter with no value, and we set the value to an empty string.</p>")
    @as("Tags")
    tags: tagList_,
    @ocaml.doc("<p>The IDs of the resources, separated by spaces.</p>
   	     <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p>")
    @as("Resources")
    resources: resourceIdList,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateTagsCommand"
  let make = (~tags, ~resources, ~dryRun=?, ()) =>
    new({tags: tags, resources: resources, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module CreateStoreImageTask = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The tags to apply to the AMI object that will be stored in the Amazon S3 bucket. </p>"
    )
    @as("S3ObjectTags")
    s3ObjectTags: option<s3ObjectTagList>,
    @ocaml.doc("<p>The name of the Amazon S3 bucket in which the AMI object will be stored. The bucket must be in
      the Region in which the request is being made. The AMI object appears in the bucket only after
      the upload task has completed. </p>")
    @as("Bucket")
    bucket: string_,
    @ocaml.doc("<p>The ID of the AMI.</p>") @as("ImageId") imageId: imageId,
  }
  type response = {
    @ocaml.doc("<p>The name of the stored AMI object in the S3 bucket.</p>") @as("ObjectKey")
    objectKey: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateStoreImageTaskCommand"
  let make = (~bucket, ~imageId, ~dryRun=?, ~s3ObjectTags=?, ()) =>
    new({dryRun: dryRun, s3ObjectTags: s3ObjectTags, bucket: bucket, imageId: imageId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateSpotDatafeedSubscription = {
  type t
  @ocaml.doc("<p>Contains the parameters for CreateSpotDatafeedSubscription.</p>")
  type request = {
    @ocaml.doc("<p>The prefix for the data feed file names.</p>") @as("Prefix")
    prefix: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The name of the Amazon S3 bucket in which to store the Spot Instance data feed. For
            more information about bucket names, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html#bucketnamingrules\">Rules for bucket
                naming</a> in the <i>Amazon S3 Developer Guide</i>.</p>")
    @as("Bucket")
    bucket: string_,
  }
  @ocaml.doc("<p>Contains the output of CreateSpotDatafeedSubscription.</p>")
  type response = {
    @ocaml.doc("<p>The Spot Instance data feed subscription.</p>") @as("SpotDatafeedSubscription")
    spotDatafeedSubscription: option<spotDatafeedSubscription>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateSpotDatafeedSubscriptionCommand"
  let make = (~bucket, ~prefix=?, ~dryRun=?, ()) =>
    new({prefix: prefix, dryRun: dryRun, bucket: bucket})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateNetworkInterfacePermission = {
  type t
  @ocaml.doc("<p>Contains the parameters for CreateNetworkInterfacePermission.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
			Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The type of permission to grant.</p>") @as("Permission")
    permission: interfacePermissionType,
    @ocaml.doc("<p>The Amazon Web Service. Currently not supported.</p>") @as("AwsService")
    awsService: option<string_>,
    @ocaml.doc("<p>The Amazon Web Services account ID.</p>") @as("AwsAccountId")
    awsAccountId: option<string_>,
    @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
    networkInterfaceId: networkInterfaceId,
  }
  @ocaml.doc("<p>Contains the output of CreateNetworkInterfacePermission.</p>")
  type response = {
    @ocaml.doc("<p>Information about the permission for the network interface.</p>")
    @as("InterfacePermission")
    interfacePermission: option<networkInterfacePermission>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateNetworkInterfacePermissionCommand"
  let make = (~permission, ~networkInterfaceId, ~dryRun=?, ~awsService=?, ~awsAccountId=?, ()) =>
    new({
      dryRun: dryRun,
      permission: permission,
      awsService: awsService,
      awsAccountId: awsAccountId,
      networkInterfaceId: networkInterfaceId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CancelSpotInstanceRequests = {
  type t
  @ocaml.doc("<p>Contains the parameters for CancelSpotInstanceRequests.</p>")
  type request = {
    @ocaml.doc("<p>One or more Spot Instance request IDs.</p>") @as("SpotInstanceRequestIds")
    spotInstanceRequestIds: spotInstanceRequestIdList,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  @ocaml.doc("<p>Contains the output of CancelSpotInstanceRequests.</p>")
  type response = {
    @ocaml.doc("<p>One or more Spot Instance requests.</p>") @as("CancelledSpotInstanceRequests")
    cancelledSpotInstanceRequests: option<cancelledSpotInstanceRequestList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CancelSpotInstanceRequestsCommand"
  let make = (~spotInstanceRequestIds, ~dryRun=?, ()) =>
    new({spotInstanceRequestIds: spotInstanceRequestIds, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AssociateVpcCidrBlock = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The netmask length of the IPv6 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see <a href=\"/vpc/latest/ipam/what-is-it-ipam.html\">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>. </p>"
    )
    @as("Ipv6NetmaskLength")
    ipv6NetmaskLength: option<netmaskLength>,
    @ocaml.doc(
      "<p>Associates a CIDR allocated from an IPv6 IPAM pool to a VPC. For more information about Amazon VPC IP Address Manager (IPAM), see <a href=\"/vpc/latest/ipam/what-is-it-ipam.html\">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>"
    )
    @as("Ipv6IpamPoolId")
    ipv6IpamPoolId: option<ipamPoolId>,
    @ocaml.doc("<p>The netmask length of the IPv4 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see <a href=\"/vpc/latest/ipam/what-is-it-ipam.html\">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.
      </p>")
    @as("Ipv4NetmaskLength")
    ipv4NetmaskLength: option<netmaskLength>,
    @ocaml.doc(
      "<p>Associate a CIDR allocated from an IPv4 IPAM pool to a VPC. For more information about Amazon VPC IP Address Manager (IPAM), see <a href=\"/vpc/latest/ipam/what-is-it-ipam.html\">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>"
    )
    @as("Ipv4IpamPoolId")
    ipv4IpamPoolId: option<ipamPoolId>,
    @ocaml.doc("<p>An IPv6 CIDR block from the IPv6 address pool. You must also specify <code>Ipv6Pool</code> in the request.</p>
        <p>To let Amazon choose the IPv6 CIDR block for you, omit this parameter.</p>")
    @as("Ipv6CidrBlock")
    ipv6CidrBlock: option<string_>,
    @ocaml.doc("<p>The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.</p>")
    @as("Ipv6Pool")
    ipv6Pool: option<ipv6PoolEc2Id>,
    @ocaml.doc("<p>The name of the location from which we advertise the IPV6 CIDR block. Use this parameter
      to limit the CIDR block to this location.</p>
         <p> You must set <code>AmazonProvidedIpv6CidrBlock</code> to <code>true</code> to use this parameter.</p>
         <p> You can have one IPv6 CIDR block association per network border group.</p>")
    @as("Ipv6CidrBlockNetworkBorderGroup")
    ipv6CidrBlockNetworkBorderGroup: option<string_>,
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: vpcId,
    @ocaml.doc("<p>An IPv4 CIDR block to associate with the VPC.</p>") @as("CidrBlock")
    cidrBlock: option<string_>,
    @ocaml.doc(
      "<p>Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.</p>"
    )
    @as("AmazonProvidedIpv6CidrBlock")
    amazonProvidedIpv6CidrBlock: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: option<string_>,
    @ocaml.doc("<p>Information about the IPv4 CIDR block association.</p>")
    @as("CidrBlockAssociation")
    cidrBlockAssociation: option<vpcCidrBlockAssociation>,
    @ocaml.doc("<p>Information about the IPv6 CIDR block association.</p>")
    @as("Ipv6CidrBlockAssociation")
    ipv6CidrBlockAssociation: option<vpcIpv6CidrBlockAssociation>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "AssociateVpcCidrBlockCommand"
  let make = (
    ~vpcId,
    ~ipv6NetmaskLength=?,
    ~ipv6IpamPoolId=?,
    ~ipv4NetmaskLength=?,
    ~ipv4IpamPoolId=?,
    ~ipv6CidrBlock=?,
    ~ipv6Pool=?,
    ~ipv6CidrBlockNetworkBorderGroup=?,
    ~cidrBlock=?,
    ~amazonProvidedIpv6CidrBlock=?,
    (),
  ) =>
    new({
      ipv6NetmaskLength: ipv6NetmaskLength,
      ipv6IpamPoolId: ipv6IpamPoolId,
      ipv4NetmaskLength: ipv4NetmaskLength,
      ipv4IpamPoolId: ipv4IpamPoolId,
      ipv6CidrBlock: ipv6CidrBlock,
      ipv6Pool: ipv6Pool,
      ipv6CidrBlockNetworkBorderGroup: ipv6CidrBlockNetworkBorderGroup,
      vpcId: vpcId,
      cidrBlock: cidrBlock,
      amazonProvidedIpv6CidrBlock: amazonProvidedIpv6CidrBlock,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AssociateSubnetCidrBlock = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of your subnet.</p>") @as("SubnetId") subnetId: subnetId,
    @ocaml.doc("<p>The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix
            length.</p>")
    @as("Ipv6CidrBlock")
    ipv6CidrBlock: string_,
  }
  type response = {
    @ocaml.doc("<p>The ID of the subnet.</p>") @as("SubnetId") subnetId: option<string_>,
    @ocaml.doc("<p>Information about the IPv6 association.</p>") @as("Ipv6CidrBlockAssociation")
    ipv6CidrBlockAssociation: option<subnetIpv6CidrBlockAssociation>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "AssociateSubnetCidrBlockCommand"
  let make = (~subnetId, ~ipv6CidrBlock, ()) =>
    new({subnetId: subnetId, ipv6CidrBlock: ipv6CidrBlock})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AssociateIamInstanceProfile = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: instanceId,
    @ocaml.doc("<p>The IAM instance profile.</p>") @as("IamInstanceProfile")
    iamInstanceProfile: iamInstanceProfileSpecification,
  }
  type response = {
    @ocaml.doc("<p>Information about the IAM instance profile association.</p>")
    @as("IamInstanceProfileAssociation")
    iamInstanceProfileAssociation: option<iamInstanceProfileAssociation>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "AssociateIamInstanceProfileCommand"
  let make = (~instanceId, ~iamInstanceProfile, ()) =>
    new({instanceId: instanceId, iamInstanceProfile: iamInstanceProfile})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AssignPrivateIpAddresses = {
  type t
  @ocaml.doc("<p>Contains the parameters for AssignPrivateIpAddresses.</p>")
  type request = {
    @ocaml.doc(
      "<p>The number of IPv4 prefixes that Amazon Web Services automatically assigns to the network interface. You cannot use this option if you use the <code>Ipv4 Prefixes</code> option.</p>"
    )
    @as("Ipv4PrefixCount")
    ipv4PrefixCount: option<integer_>,
    @ocaml.doc(
      "<p>One or more IPv4 prefixes assigned to the network interface. You cannot use this option if you use the <code>Ipv4PrefixCount</code> option.</p>"
    )
    @as("Ipv4Prefixes")
    ipv4Prefixes: option<ipPrefixList>,
    @ocaml.doc(
      "<p>The number of secondary IP addresses to assign to the network interface. You can't specify this parameter when also specifying private IP addresses.</p>"
    )
    @as("SecondaryPrivateIpAddressCount")
    secondaryPrivateIpAddressCount: option<integer_>,
    @ocaml.doc("<p>One or more IP addresses to be assigned as a secondary private IP address to the network interface. You can't specify this parameter when also specifying a number of secondary IP addresses.</p>
        <p>If you don't specify an IP address, Amazon EC2 automatically selects an IP address within the subnet range.</p>")
    @as("PrivateIpAddresses")
    privateIpAddresses: option<privateIpAddressStringList>,
    @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
    networkInterfaceId: networkInterfaceId,
    @ocaml.doc(
      "<p>Indicates whether to allow an IP address that is already assigned to another network interface or instance to be reassigned to the specified network interface.</p>"
    )
    @as("AllowReassignment")
    allowReassignment: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The IPv4 prefixes that are assigned to the network interface.</p>")
    @as("AssignedIpv4Prefixes")
    assignedIpv4Prefixes: option<ipv4PrefixesList>,
    @ocaml.doc("<p>The private IP addresses assigned to the network interface.</p>")
    @as("AssignedPrivateIpAddresses")
    assignedPrivateIpAddresses: option<assignedPrivateIpAddressList>,
    @ocaml.doc("<p>The ID of the network interface.</p>") @as("NetworkInterfaceId")
    networkInterfaceId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "AssignPrivateIpAddressesCommand"
  let make = (
    ~networkInterfaceId,
    ~ipv4PrefixCount=?,
    ~ipv4Prefixes=?,
    ~secondaryPrivateIpAddressCount=?,
    ~privateIpAddresses=?,
    ~allowReassignment=?,
    (),
  ) =>
    new({
      ipv4PrefixCount: ipv4PrefixCount,
      ipv4Prefixes: ipv4Prefixes,
      secondaryPrivateIpAddressCount: secondaryPrivateIpAddressCount,
      privateIpAddresses: privateIpAddresses,
      networkInterfaceId: networkInterfaceId,
      allowReassignment: allowReassignment,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AcceptReservedInstancesExchangeQuote = {
  type t
  @ocaml.doc("<p>Contains the parameters for accepting the quote.</p>")
  type request = {
    @ocaml.doc("<p>The configuration of the target Convertible Reserved Instance to exchange for your
            current Convertible Reserved Instances.</p>")
    @as("TargetConfigurations")
    targetConfigurations: option<targetConfigurationRequestSet>,
    @ocaml.doc("<p>The IDs of the Convertible Reserved Instances to exchange for another Convertible
            Reserved Instance of the same or higher value.</p>")
    @as("ReservedInstanceIds")
    reservedInstanceIds: reservedInstanceIdSet,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
      Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  @ocaml.doc("<p>The result of the exchange and whether it was <code>successful</code>.</p>")
  type response = {
    @ocaml.doc("<p>The ID of the successful exchange.</p>") @as("ExchangeId")
    exchangeId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "AcceptReservedInstancesExchangeQuoteCommand"
  let make = (~reservedInstanceIds, ~targetConfigurations=?, ~dryRun=?, ()) =>
    new({
      targetConfigurations: targetConfigurations,
      reservedInstanceIds: reservedInstanceIds,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module UnmonitorInstances = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The IDs of the instances.</p>") @as("InstanceIds")
    instanceIds: instanceIdStringList,
  }
  type response = {
    @ocaml.doc("<p>The monitoring information.</p>") @as("InstanceMonitorings")
    instanceMonitorings: option<instanceMonitoringList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "UnmonitorInstancesCommand"
  let make = (~instanceIds, ~dryRun=?, ()) => new({dryRun: dryRun, instanceIds: instanceIds})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module TerminateInstances = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The IDs of the instances.</p>
        <p>Constraints: Up to 1000 instance IDs. We recommend breaking up this request into
            smaller batches.</p>")
    @as("InstanceIds")
    instanceIds: instanceIdStringList,
  }
  type response = {
    @ocaml.doc("<p>Information about the terminated instances.</p>") @as("TerminatingInstances")
    terminatingInstances: option<instanceStateChangeList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "TerminateInstancesCommand"
  let make = (~instanceIds, ~dryRun=?, ()) => new({dryRun: dryRun, instanceIds: instanceIds})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module TerminateClientVpnConnections = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The name of the user who initiated the connection. Use this option to terminate all active connections for 
			the specified user. This option can only be used if the user has established up to five connections.</p>")
    @as("Username")
    username: option<string_>,
    @ocaml.doc("<p>The ID of the client connection to be terminated.</p>") @as("ConnectionId")
    connectionId: option<vpnConnectionId>,
    @ocaml.doc("<p>The ID of the Client VPN endpoint to which the client is connected.</p>")
    @as("ClientVpnEndpointId")
    clientVpnEndpointId: clientVpnEndpointId,
  }
  type response = {
    @ocaml.doc("<p>The current state of the client connections.</p>") @as("ConnectionStatuses")
    connectionStatuses: option<terminateConnectionStatusSet>,
    @ocaml.doc("<p>The user who established the terminated client connections.</p>") @as("Username")
    username: option<string_>,
    @ocaml.doc("<p>The ID of the Client VPN endpoint.</p>") @as("ClientVpnEndpointId")
    clientVpnEndpointId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "TerminateClientVpnConnectionsCommand"
  let make = (~clientVpnEndpointId, ~dryRun=?, ~username=?, ~connectionId=?, ()) =>
    new({
      dryRun: dryRun,
      username: username,
      connectionId: connectionId,
      clientVpnEndpointId: clientVpnEndpointId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module StopInstances = {
  type t
  type request = {
    @ocaml.doc("<p>Forces the instances to stop. The instances do not have an opportunity to flush file
            system caches or file system metadata. If you use this option, you must perform file
            system check and repair procedures. This option is not recommended for Windows
            instances.</p>
        <p>Default: <code>false</code>
        </p>")
    @as("Force")
    force: option<boolean_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Hibernates the instance if the instance was enabled for hibernation at launch. If the
            instance cannot hibernate successfully, a normal shutdown occurs. For more information,
            see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html\">Hibernate
                your instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
        <p> Default: <code>false</code>
         </p>")
    @as("Hibernate")
    hibernate: option<boolean_>,
    @ocaml.doc("<p>The IDs of the instances.</p>") @as("InstanceIds")
    instanceIds: instanceIdStringList,
  }
  type response = {
    @ocaml.doc("<p>Information about the stopped instances.</p>") @as("StoppingInstances")
    stoppingInstances: option<instanceStateChangeList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "StopInstancesCommand"
  let make = (~instanceIds, ~force=?, ~dryRun=?, ~hibernate=?, ()) =>
    new({force: force, dryRun: dryRun, hibernate: hibernate, instanceIds: instanceIds})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module StartInstances = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Reserved.</p>") @as("AdditionalInfo") additionalInfo: option<string_>,
    @ocaml.doc("<p>The IDs of the instances.</p>") @as("InstanceIds")
    instanceIds: instanceIdStringList,
  }
  type response = {
    @ocaml.doc("<p>Information about the started instances.</p>") @as("StartingInstances")
    startingInstances: option<instanceStateChangeList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "StartInstancesCommand"
  let make = (~instanceIds, ~dryRun=?, ~additionalInfo=?, ()) =>
    new({dryRun: dryRun, additionalInfo: additionalInfo, instanceIds: instanceIds})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module SearchTransitGatewayMulticastGroups = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<transitGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
        <ul>
            <li>
                <p>
                  <code>group-ip-address</code> - The IP address of the  transit gateway multicast group.</p>
            </li>
            <li>
                <p>
                  <code>is-group-member</code> - The resource is a group member. Valid values are <code>true</code> | <code>false</code>.</p>
            </li>
            <li>
                <p>
                  <code>is-group-source</code> - The resource is a group source. Valid values are <code>true</code> | <code>false</code>.</p>
            </li>
            <li>
                <p>
                  <code>member-type</code> - The member type. Valid values are <code>igmp</code> | <code>static</code>.</p>
            </li>
            <li>
                <p>
                  <code>resource-id</code> - The ID of the resource.</p>
            </li>
            <li>
                <p>
                  <code>resource-type</code> - The type of resource. Valid values are <code>vpc</code> | <code>vpn</code> | <code>direct-connect-gateway</code> | <code>tgw-peering</code>.</p>
            </li>
            <li>
                <p>
                  <code>source-type</code> - The source type. Valid values are <code>igmp</code> | <code>static</code>.</p>
            </li>
            <li>
                <p>
                  <code>subnet-id</code> - The ID of the subnet.</p>
            </li>
            <li>
                <p>
                  <code>transit-gateway-attachment-id</code> - The id of the transit gateway attachment.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The ID of the transit gateway multicast domain.</p>")
    @as("TransitGatewayMulticastDomainId")
    transitGatewayMulticastDomainId: option<transitGatewayMulticastDomainId>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the  transit gateway multicast group.</p>")
    @as("MulticastGroups")
    multicastGroups: option<transitGatewayMulticastGroupList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "SearchTransitGatewayMulticastGroupsCommand"
  let make = (
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~transitGatewayMulticastDomainId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      transitGatewayMulticastDomainId: transitGatewayMulticastDomainId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module SearchLocalGatewayRoutes = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<maxResults>,
    @ocaml.doc("<p>One or more filters.</p>
         <ul>
            <li>
               <p>
                  <code>route-search.exact-match</code> - The exact match of the specified filter.</p>
            </li>
            <li>
               <p>
                  <code>route-search.longest-prefix-match</code> - The longest prefix that matches the route.</p>
            </li>
            <li>
               <p>
                  <code>route-search.subnet-of-match</code> - The routes with a subnet that match the specified CIDR filter.</p>
            </li>
            <li>
               <p>
                  <code>route-search.supernet-of-match</code> - The routes with a CIDR that encompass the CIDR filter. 
               For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify <code>supernet-of-match</code> 
               as 10.0.1.0/30, then the result returns 10.0.1.0/29.</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The state of the route.</p>
            </li>
            <li>
               <p>
                  <code>type</code> - The route type.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The ID of the local gateway route table.</p>") @as("LocalGatewayRouteTableId")
    localGatewayRouteTableId: localGatewayRoutetableId,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the routes.</p>") @as("Routes")
    routes: option<localGatewayRouteList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "SearchLocalGatewayRoutesCommand"
  let make = (~localGatewayRouteTableId, ~dryRun=?, ~nextToken=?, ~maxResults=?, ~filters=?, ()) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      localGatewayRouteTableId: localGatewayRouteTableId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RestoreManagedPrefixListVersion = {
  type t
  type request = {
    @ocaml.doc("<p>The current version number for the prefix list.</p>") @as("CurrentVersion")
    currentVersion: long,
    @ocaml.doc("<p>The version to restore.</p>") @as("PreviousVersion") previousVersion: long,
    @ocaml.doc("<p>The ID of the prefix list.</p>") @as("PrefixListId")
    prefixListId: prefixListResourceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the prefix list.</p>") @as("PrefixList")
    prefixList: option<managedPrefixList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "RestoreManagedPrefixListVersionCommand"
  let make = (~currentVersion, ~previousVersion, ~prefixListId, ~dryRun=?, ()) =>
    new({
      currentVersion: currentVersion,
      previousVersion: previousVersion,
      prefixListId: prefixListId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ReplaceTransitGatewayRoute = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Indicates whether traffic matching this route is to be dropped.</p>")
    @as("Blackhole")
    blackhole: option<boolean_>,
    @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: option<transitGatewayAttachmentId>,
    @ocaml.doc("<p>The ID of the route table.</p>") @as("TransitGatewayRouteTableId")
    transitGatewayRouteTableId: transitGatewayRouteTableId,
    @ocaml.doc(
      "<p>The CIDR range used for the destination match. Routing decisions are based on the most specific match.</p>"
    )
    @as("DestinationCidrBlock")
    destinationCidrBlock: string_,
  }
  type response = {
    @ocaml.doc("<p>Information about the modified route.</p>") @as("Route")
    route: option<transitGatewayRoute>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ReplaceTransitGatewayRouteCommand"
  let make = (
    ~transitGatewayRouteTableId,
    ~destinationCidrBlock,
    ~dryRun=?,
    ~blackhole=?,
    ~transitGatewayAttachmentId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      blackhole: blackhole,
      transitGatewayAttachmentId: transitGatewayAttachmentId,
      transitGatewayRouteTableId: transitGatewayRouteTableId,
      destinationCidrBlock: destinationCidrBlock,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ReleaseHosts = {
  type t
  type request = {
    @ocaml.doc("<p>The IDs of the Dedicated Hosts to release.</p>") @as("HostIds")
    hostIds: requestHostIdList,
  }
  type response = {
    @ocaml.doc("<p>The IDs of the Dedicated Hosts that could not be released, including an error
            message.</p>")
    @as("Unsuccessful")
    unsuccessful: option<unsuccessfulItemList>,
    @ocaml.doc("<p>The IDs of the Dedicated Hosts that were successfully released.</p>")
    @as("Successful")
    successful: option<responseHostIdList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ReleaseHostsCommand"
  let make = (~hostIds, ()) => new({hostIds: hostIds})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RejectVpcEndpointConnections = {
  type t
  type request = {
    @ocaml.doc("<p>The IDs of one or more VPC endpoints.</p>") @as("VpcEndpointIds")
    vpcEndpointIds: vpcEndpointIdList,
    @ocaml.doc("<p>The ID of the service.</p>") @as("ServiceId") serviceId: vpcEndpointServiceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the endpoints that were not rejected, if applicable.</p>")
    @as("Unsuccessful")
    unsuccessful: option<unsuccessfulItemSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "RejectVpcEndpointConnectionsCommand"
  let make = (~vpcEndpointIds, ~serviceId, ~dryRun=?, ()) =>
    new({vpcEndpointIds: vpcEndpointIds, serviceId: serviceId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RejectTransitGatewayVpcAttachment = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: transitGatewayAttachmentId,
  }
  type response = {
    @ocaml.doc("<p>Information about the attachment.</p>") @as("TransitGatewayVpcAttachment")
    transitGatewayVpcAttachment: option<transitGatewayVpcAttachment>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "RejectTransitGatewayVpcAttachmentCommand"
  let make = (~transitGatewayAttachmentId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, transitGatewayAttachmentId: transitGatewayAttachmentId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RejectTransitGatewayPeeringAttachment = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the transit gateway peering attachment.</p>")
    @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: transitGatewayAttachmentId,
  }
  type response = {
    @ocaml.doc("<p>The transit gateway peering attachment.</p>")
    @as("TransitGatewayPeeringAttachment")
    transitGatewayPeeringAttachment: option<transitGatewayPeeringAttachment>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "RejectTransitGatewayPeeringAttachmentCommand"
  let make = (~transitGatewayAttachmentId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, transitGatewayAttachmentId: transitGatewayAttachmentId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RejectTransitGatewayMulticastDomainAssociations = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The IDs of the subnets to associate with the transit gateway multicast domain.</p>"
    )
    @as("SubnetIds")
    subnetIds: option<valueStringList>,
    @ocaml.doc("<p>The ID of the transit gateway attachment.</p>") @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: option<transitGatewayAttachmentId>,
    @ocaml.doc("<p>The ID of the transit gateway multicast domain.</p>")
    @as("TransitGatewayMulticastDomainId")
    transitGatewayMulticastDomainId: option<transitGatewayMulticastDomainId>,
  }
  type response = {
    @as("Associations") associations: option<transitGatewayMulticastDomainAssociations>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "RejectTransitGatewayMulticastDomainAssociationsCommand"
  let make = (
    ~dryRun=?,
    ~subnetIds=?,
    ~transitGatewayAttachmentId=?,
    ~transitGatewayMulticastDomainId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      subnetIds: subnetIds,
      transitGatewayAttachmentId: transitGatewayAttachmentId,
      transitGatewayMulticastDomainId: transitGatewayMulticastDomainId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RegisterImage = {
  type t
  @ocaml.doc("<p>Contains the parameters for RegisterImage.</p>")
  type request = {
    @ocaml.doc("<p>The boot mode of the AMI. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html\">Boot modes</a> in the
        <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
    @as("BootMode")
    bootMode: option<bootModeValues>,
    @ocaml.doc("<p>The type of virtualization (<code>hvm</code> | <code>paravirtual</code>).</p>
         <p>Default: <code>paravirtual</code>
         </p>")
    @as("VirtualizationType")
    virtualizationType: option<string_>,
    @ocaml.doc("<p>Set to <code>simple</code> to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI.</p>
         <p>There is no way to disable <code>sriovNetSupport</code> at this time.</p>
         <p>This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.</p>")
    @as("SriovNetSupport")
    sriovNetSupport: option<string_>,
    @ocaml.doc(
      "<p>The device name of the root device volume (for example, <code>/dev/sda1</code>).</p>"
    )
    @as("RootDeviceName")
    rootDeviceName: option<string_>,
    @ocaml.doc("<p>The ID of the RAM disk.</p>") @as("RamdiskId") ramdiskId: option<ramdiskId>,
    @ocaml.doc("<p>The billing product codes. Your account must be authorized to specify billing product codes. Otherwise,
     	you can use the Amazon Web Services Marketplace to bill for the use of an AMI.</p>")
    @as("BillingProducts")
    billingProducts: option<billingProductList>,
    @ocaml.doc("<p>A name for your AMI.</p>
         <p>Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)</p>")
    @as("Name")
    name: string_,
    @ocaml.doc("<p>The ID of the kernel.</p>") @as("KernelId") kernelId: option<kernelId>,
    @ocaml.doc("<p>Set to <code>true</code> to enable enhanced networking with ENA for the AMI and any instances that you launch from the AMI.</p>
         <p>This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.</p>")
    @as("EnaSupport")
    enaSupport: option<boolean_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>A description for your AMI.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The block device mapping entries.</p>
   	     <p>If you specify an Amazon EBS volume using the ID of an Amazon EBS snapshot, you can't specify the encryption state of the volume.</p>
         <p>If you create an AMI on an Outpost, then all backing snapshots must be on the same Outpost or in the Region 
    	 of that Outpost. AMIs on an Outpost that include local snapshots can be used to launch instances on the same Outpost 
    	 only. For more information, <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#ami\">
    	 	Amazon EBS local snapshots on Outposts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
    @as("BlockDeviceMappings")
    blockDeviceMappings: option<blockDeviceMappingRequestList>,
    @ocaml.doc("<p>The architecture of the AMI.</p>
   	     <p>Default: For Amazon EBS-backed AMIs, <code>i386</code>.
        For instance store-backed AMIs, the architecture specified in the manifest file.</p>")
    @as("Architecture")
    architecture: option<architectureValues>,
    @ocaml.doc("<p>The full path to your AMI manifest in Amazon S3 storage. The specified bucket must have the 
   		<code>aws-exec-read</code> canned access control list (ACL) to ensure that it can be accessed 
   		by Amazon EC2. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl\">Canned ACLs</a> in the 
   		<i>Amazon S3 Service Developer Guide</i>.</p>")
    @as("ImageLocation")
    imageLocation: option<string_>,
  }
  @ocaml.doc("<p>Contains the output of RegisterImage.</p>")
  type response = {
    @ocaml.doc("<p>The ID of the newly registered AMI.</p>") @as("ImageId")
    imageId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "RegisterImageCommand"
  let make = (
    ~name,
    ~bootMode=?,
    ~virtualizationType=?,
    ~sriovNetSupport=?,
    ~rootDeviceName=?,
    ~ramdiskId=?,
    ~billingProducts=?,
    ~kernelId=?,
    ~enaSupport=?,
    ~dryRun=?,
    ~description=?,
    ~blockDeviceMappings=?,
    ~architecture=?,
    ~imageLocation=?,
    (),
  ) =>
    new({
      bootMode: bootMode,
      virtualizationType: virtualizationType,
      sriovNetSupport: sriovNetSupport,
      rootDeviceName: rootDeviceName,
      ramdiskId: ramdiskId,
      billingProducts: billingProducts,
      name: name,
      kernelId: kernelId,
      enaSupport: enaSupport,
      dryRun: dryRun,
      description: description,
      blockDeviceMappings: blockDeviceMappings,
      architecture: architecture,
      imageLocation: imageLocation,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module MonitorInstances = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The IDs of the instances.</p>") @as("InstanceIds")
    instanceIds: instanceIdStringList,
  }
  type response = {
    @ocaml.doc("<p>The monitoring information.</p>") @as("InstanceMonitorings")
    instanceMonitorings: option<instanceMonitoringList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "MonitorInstancesCommand"
  let make = (~instanceIds, ~dryRun=?, ()) => new({dryRun: dryRun, instanceIds: instanceIds})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyTransitGatewayVpcAttachment = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The new VPC attachment options.</p>") @as("Options")
    options: option<modifyTransitGatewayVpcAttachmentRequestOptions>,
    @ocaml.doc("<p>The IDs of one or more subnets to remove.</p>") @as("RemoveSubnetIds")
    removeSubnetIds: option<transitGatewaySubnetIdList>,
    @ocaml.doc(
      "<p>The IDs of one or more subnets to add. You can specify at most one subnet per Availability Zone.</p>"
    )
    @as("AddSubnetIds")
    addSubnetIds: option<transitGatewaySubnetIdList>,
    @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: transitGatewayAttachmentId,
  }
  type response = {
    @ocaml.doc("<p>Information about the modified attachment.</p>")
    @as("TransitGatewayVpcAttachment")
    transitGatewayVpcAttachment: option<transitGatewayVpcAttachment>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyTransitGatewayVpcAttachmentCommand"
  let make = (
    ~transitGatewayAttachmentId,
    ~dryRun=?,
    ~options=?,
    ~removeSubnetIds=?,
    ~addSubnetIds=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      options: options,
      removeSubnetIds: removeSubnetIds,
      addSubnetIds: addSubnetIds,
      transitGatewayAttachmentId: transitGatewayAttachmentId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyTransitGateway = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The options to modify.</p>") @as("Options")
    options: option<modifyTransitGatewayOptions>,
    @ocaml.doc("<p>The description for the transit gateway.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The ID of the transit gateway.</p>") @as("TransitGatewayId")
    transitGatewayId: transitGatewayId,
  }
  type response = {@as("TransitGateway") transitGateway: option<transitGateway>}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyTransitGatewayCommand"
  let make = (~transitGatewayId, ~dryRun=?, ~options=?, ~description=?, ()) =>
    new({
      dryRun: dryRun,
      options: options,
      description: description,
      transitGatewayId: transitGatewayId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyTrafficMirrorSession = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The properties that you want to remove from the Traffic Mirror session.</p>
         <p>When you remove a property from a Traffic Mirror session, the property is set to the default.</p>")
    @as("RemoveFields")
    removeFields: option<trafficMirrorSessionFieldList>,
    @ocaml.doc("<p>The description to assign to the Traffic Mirror session.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The virtual network ID of the Traffic Mirror session.</p>")
    @as("VirtualNetworkId")
    virtualNetworkId: option<integer_>,
    @ocaml.doc("<p>The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.</p>
         <p>Valid values are 1-32766.</p>")
    @as("SessionNumber")
    sessionNumber: option<integer_>,
    @ocaml.doc(
      "<p>The number of bytes in each packet to mirror. These are bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet.</p>"
    )
    @as("PacketLength")
    packetLength: option<integer_>,
    @ocaml.doc("<p>The ID of the Traffic Mirror filter.</p>") @as("TrafficMirrorFilterId")
    trafficMirrorFilterId: option<trafficMirrorFilterId>,
    @ocaml.doc(
      "<p>The Traffic Mirror target. The target must be in the same VPC as the source, or have a VPC peering connection with the source.</p>"
    )
    @as("TrafficMirrorTargetId")
    trafficMirrorTargetId: option<trafficMirrorTargetId>,
    @ocaml.doc("<p>The ID of the Traffic Mirror session.</p>") @as("TrafficMirrorSessionId")
    trafficMirrorSessionId: trafficMirrorSessionId,
  }
  type response = {
    @ocaml.doc("<p>Information about the Traffic Mirror session.</p>") @as("TrafficMirrorSession")
    trafficMirrorSession: option<trafficMirrorSession>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyTrafficMirrorSessionCommand"
  let make = (
    ~trafficMirrorSessionId,
    ~dryRun=?,
    ~removeFields=?,
    ~description=?,
    ~virtualNetworkId=?,
    ~sessionNumber=?,
    ~packetLength=?,
    ~trafficMirrorFilterId=?,
    ~trafficMirrorTargetId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      removeFields: removeFields,
      description: description,
      virtualNetworkId: virtualNetworkId,
      sessionNumber: sessionNumber,
      packetLength: packetLength,
      trafficMirrorFilterId: trafficMirrorFilterId,
      trafficMirrorTargetId: trafficMirrorTargetId,
      trafficMirrorSessionId: trafficMirrorSessionId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifySnapshotAttribute = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The account ID to modify for the snapshot.</p>") @as("UserIds")
    userIds: option<userIdStringList>,
    @ocaml.doc("<p>The ID of the snapshot.</p>") @as("SnapshotId") snapshotId: snapshotId,
    @ocaml.doc("<p>The type of operation to perform to the attribute.</p>") @as("OperationType")
    operationType: option<operationType>,
    @ocaml.doc("<p>The group to modify for the snapshot.</p>") @as("GroupNames")
    groupNames: option<groupNameStringList>,
    @ocaml.doc("<p>A JSON representation of the snapshot attribute modification.</p>")
    @as("CreateVolumePermission")
    createVolumePermission: option<createVolumePermissionModifications>,
    @ocaml.doc(
      "<p>The snapshot attribute to modify. Only volume creation permissions can be modified.</p>"
    )
    @as("Attribute")
    attribute: option<snapshotAttributeName>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifySnapshotAttributeCommand"
  let make = (
    ~snapshotId,
    ~dryRun=?,
    ~userIds=?,
    ~operationType=?,
    ~groupNames=?,
    ~createVolumePermission=?,
    ~attribute=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      userIds: userIds,
      snapshotId: snapshotId,
      operationType: operationType,
      groupNames: groupNames,
      createVolumePermission: createVolumePermission,
      attribute: attribute,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ModifySecurityGroupRules = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Information about the security group properties to update.</p>")
    @as("SecurityGroupRules")
    securityGroupRules: securityGroupRuleUpdateList,
    @ocaml.doc("<p>The ID of the security group.</p>") @as("GroupId") groupId: securityGroupId,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifySecurityGroupRulesCommand"
  let make = (~securityGroupRules, ~groupId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, securityGroupRules: securityGroupRules, groupId: groupId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyManagedPrefixList = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of entries for the prefix list. You cannot modify the entries  
            of a prefix list and modify the size of a prefix list at the same time.</p>
        <p>If any of the resources that reference the prefix list cannot support the new
            maximum size, the modify operation fails. Check the state message for the IDs of 
            the first ten resources that do not support the new maximum size.</p>")
    @as("MaxEntries")
    maxEntries: option<integer_>,
    @ocaml.doc("<p>One or more entries to remove from the prefix list.</p>") @as("RemoveEntries")
    removeEntries: option<removePrefixListEntries>,
    @ocaml.doc("<p>One or more entries to add to the prefix list.</p>") @as("AddEntries")
    addEntries: option<addPrefixListEntries>,
    @ocaml.doc("<p>A name for the prefix list.</p>") @as("PrefixListName")
    prefixListName: option<string_>,
    @ocaml.doc("<p>The current version of the prefix list.</p>") @as("CurrentVersion")
    currentVersion: option<long>,
    @ocaml.doc("<p>The ID of the prefix list.</p>") @as("PrefixListId")
    prefixListId: prefixListResourceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the prefix list.</p>") @as("PrefixList")
    prefixList: option<managedPrefixList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyManagedPrefixListCommand"
  let make = (
    ~prefixListId,
    ~maxEntries=?,
    ~removeEntries=?,
    ~addEntries=?,
    ~prefixListName=?,
    ~currentVersion=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      maxEntries: maxEntries,
      removeEntries: removeEntries,
      addEntries: addEntries,
      prefixListName: prefixListName,
      currentVersion: currentVersion,
      prefixListId: prefixListId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyLaunchTemplate = {
  type t
  type request = {
    @ocaml.doc("<p>The version number of the launch template to set as the default version.</p>")
    @as("DefaultVersion")
    defaultVersion: option<string_>,
    @ocaml.doc("<p>The name of the launch template. You must specify either the launch template ID or
            launch template name in the request.</p>")
    @as("LaunchTemplateName")
    launchTemplateName: option<launchTemplateName>,
    @ocaml.doc("<p>The ID of the launch template. You must specify either the launch template ID or
            launch template name in the request.</p>")
    @as("LaunchTemplateId")
    launchTemplateId: option<launchTemplateId>,
    @ocaml.doc("<p>Unique, case-sensitive identifier you provide to ensure the idempotency of the
            request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring
                Idempotency</a>.</p>
        <p>Constraint: Maximum 128 ASCII characters.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the launch template.</p>") @as("LaunchTemplate")
    launchTemplate: option<launchTemplate>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyLaunchTemplateCommand"
  let make = (
    ~defaultVersion=?,
    ~launchTemplateName=?,
    ~launchTemplateId=?,
    ~clientToken=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      defaultVersion: defaultVersion,
      launchTemplateName: launchTemplateName,
      launchTemplateId: launchTemplateId,
      clientToken: clientToken,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyIpamScope = {
  type t
  type request = {
    @ocaml.doc("<p>The description of the scope you want to modify.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The ID of the scope you want to modify.</p>") @as("IpamScopeId")
    ipamScopeId: ipamScopeId,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The results of the modification.</p>") @as("IpamScope")
    ipamScope: option<ipamScope>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyIpamScopeCommand"
  let make = (~ipamScopeId, ~description=?, ~dryRun=?, ()) =>
    new({description: description, ipamScopeId: ipamScopeId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyIpamResourceCidr = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Determines if the resource is monitored by IPAM. If a resource is monitored, the resource is discovered by IPAM and you can view details about the resource’s CIDR.</p>"
    )
    @as("Monitored")
    monitored: boolean_,
    @ocaml.doc("<p>The ID of the scope you want to transfer the resource CIDR to.</p>")
    @as("DestinationIpamScopeId")
    destinationIpamScopeId: option<ipamScopeId>,
    @ocaml.doc("<p>The ID of the current scope that the resource CIDR is in.</p>")
    @as("CurrentIpamScopeId")
    currentIpamScopeId: ipamScopeId,
    @ocaml.doc("<p>The Amazon Web Services Region of the resource you want to modify.</p>")
    @as("ResourceRegion")
    resourceRegion: string_,
    @ocaml.doc("<p>The CIDR of the resource you want to modify.</p>") @as("ResourceCidr")
    resourceCidr: string_,
    @ocaml.doc("<p>The ID of the resource you want to modify.</p>") @as("ResourceId")
    resourceId: string_,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {@as("IpamResourceCidr") ipamResourceCidr: option<ipamResourceCidr>}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyIpamResourceCidrCommand"
  let make = (
    ~monitored,
    ~currentIpamScopeId,
    ~resourceRegion,
    ~resourceCidr,
    ~resourceId,
    ~destinationIpamScopeId=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      monitored: monitored,
      destinationIpamScopeId: destinationIpamScopeId,
      currentIpamScopeId: currentIpamScopeId,
      resourceRegion: resourceRegion,
      resourceCidr: resourceCidr,
      resourceId: resourceId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyIpamPool = {
  type t
  type request = {
    @ocaml.doc("<p>Remove tag allocation rules from a pool.</p>")
    @as("RemoveAllocationResourceTags")
    removeAllocationResourceTags: option<requestIpamResourceTagList>,
    @ocaml.doc(
      "<p>Add tag allocation rules to a pool. For more information about allocation rules, see <a href=\"/vpc/latest/ipam/create-top-ipam.html\">Create a top-level pool</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>"
    )
    @as("AddAllocationResourceTags")
    addAllocationResourceTags: option<requestIpamResourceTagList>,
    @ocaml.doc("<p>Clear the default netmask length allocation rule for this pool.</p>")
    @as("ClearAllocationDefaultNetmaskLength")
    clearAllocationDefaultNetmaskLength: option<boolean_>,
    @ocaml.doc(
      "<p>The default netmask length for allocations added to this pool. If, for example, the CIDR assigned to this pool is 10.0.0.0/8 and you enter 16 here, new allocations will default to 10.0.0.0/16.</p>"
    )
    @as("AllocationDefaultNetmaskLength")
    allocationDefaultNetmaskLength: option<ipamNetmaskLength>,
    @ocaml.doc("<p>The maximum netmask length possible for CIDR allocations in this IPAM pool to be compliant. Possible 
         netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128.The maximum netmask 
         length must be greater than the minimum netmask length.</p>")
    @as("AllocationMaxNetmaskLength")
    allocationMaxNetmaskLength: option<ipamNetmaskLength>,
    @ocaml.doc("<p>The minimum netmask length required for CIDR allocations in this IPAM pool to be compliant. Possible 
         netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128. The minimum netmask 
         length must be less than the maximum netmask length.</p>")
    @as("AllocationMinNetmaskLength")
    allocationMinNetmaskLength: option<ipamNetmaskLength>,
    @ocaml.doc("<p>If true, IPAM will continuously look for resources within the CIDR range of this pool 
         and automatically import them as allocations into your IPAM. The CIDRs that will be allocated for
         these resources must not already be allocated to other resources in order for the import to succeed. IPAM will import 
         a CIDR regardless of its compliance with the pool's allocation rules, so a resource might be imported and subsequently 
         marked as noncompliant. If IPAM discovers multiple CIDRs that overlap, IPAM will import the largest CIDR only. If IPAM 
         discovers multiple CIDRs with matching CIDRs, IPAM will randomly import one of them only.
      </p>
         <p>A locale must be set on the pool for this feature to work.</p>")
    @as("AutoImport")
    autoImport: option<boolean_>,
    @ocaml.doc("<p>The description of the IPAM pool you want to modify.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The ID of the IPAM pool you want to modify.</p>") @as("IpamPoolId")
    ipamPoolId: ipamPoolId,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The results of the modification.</p>") @as("IpamPool")
    ipamPool: option<ipamPool>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyIpamPoolCommand"
  let make = (
    ~ipamPoolId,
    ~removeAllocationResourceTags=?,
    ~addAllocationResourceTags=?,
    ~clearAllocationDefaultNetmaskLength=?,
    ~allocationDefaultNetmaskLength=?,
    ~allocationMaxNetmaskLength=?,
    ~allocationMinNetmaskLength=?,
    ~autoImport=?,
    ~description=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      removeAllocationResourceTags: removeAllocationResourceTags,
      addAllocationResourceTags: addAllocationResourceTags,
      clearAllocationDefaultNetmaskLength: clearAllocationDefaultNetmaskLength,
      allocationDefaultNetmaskLength: allocationDefaultNetmaskLength,
      allocationMaxNetmaskLength: allocationMaxNetmaskLength,
      allocationMinNetmaskLength: allocationMinNetmaskLength,
      autoImport: autoImport,
      description: description,
      ipamPoolId: ipamPoolId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyIpam = {
  type t
  type request = {
    @ocaml.doc("<p>The operating Regions to remove.</p>") @as("RemoveOperatingRegions")
    removeOperatingRegions: option<removeIpamOperatingRegionSet>,
    @ocaml.doc("<p>Choose the operating Regions for the IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only
         discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.</p>
         <p>For more information about operating Regions, see <a href=\"/vpc/latest/ipam/create-ipam.html\">Create an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>")
    @as("AddOperatingRegions")
    addOperatingRegions: option<addIpamOperatingRegionSet>,
    @ocaml.doc("<p>The description of the IPAM you want to modify.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The ID of the IPAM you want to modify.</p>") @as("IpamId") ipamId: ipamId,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The results of the modification.</p>") @as("Ipam") ipam: option<ipam>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyIpamCommand"
  let make = (
    ~ipamId,
    ~removeOperatingRegions=?,
    ~addOperatingRegions=?,
    ~description=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      removeOperatingRegions: removeOperatingRegions,
      addOperatingRegions: addOperatingRegions,
      description: description,
      ipamId: ipamId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyInstanceCreditSpecification = {
  type t
  type request = {
    @ocaml.doc("<p>Information about the credit option for CPU usage.</p>")
    @as("InstanceCreditSpecifications")
    instanceCreditSpecifications: instanceCreditSpecificationListRequest,
    @ocaml.doc("<p>A unique, case-sensitive token that you provide to ensure idempotency of your
            modification request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring
                Idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the instances whose credit option for CPU usage was not
            modified.</p>")
    @as("UnsuccessfulInstanceCreditSpecifications")
    unsuccessfulInstanceCreditSpecifications: option<unsuccessfulInstanceCreditSpecificationSet>,
    @ocaml.doc("<p>Information about the instances whose credit option for CPU usage was successfully
            modified.</p>")
    @as("SuccessfulInstanceCreditSpecifications")
    successfulInstanceCreditSpecifications: option<successfulInstanceCreditSpecificationSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyInstanceCreditSpecificationCommand"
  let make = (~instanceCreditSpecifications, ~clientToken=?, ~dryRun=?, ()) =>
    new({
      instanceCreditSpecifications: instanceCreditSpecifications,
      clientToken: clientToken,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyInstanceAttribute = {
  type t
  type request = {
    @ocaml.doc("<p>A new value for the attribute. Use only with the <code>kernel</code>,
                <code>ramdisk</code>, <code>userData</code>, <code>disableApiTermination</code>, or
                <code>instanceInitiatedShutdownBehavior</code> attribute.</p>")
    @as("Value")
    value: option<string_>,
    @ocaml.doc("<p>Changes the instance's user data to the specified value. If you are using an Amazon Web Services SDK or command line tool, base64-encoding is performed for you, and you
            can load the text from a file. Otherwise, you must provide base64-encoded text.</p>")
    @as("UserData")
    userData: option<blobAttributeValue>,
    @ocaml.doc("<p>Set to <code>simple</code> to enable enhanced networking with the Intel 82599 Virtual
            Function interface for the instance.</p>
        <p>There is no way to disable enhanced networking with the Intel 82599 Virtual Function
            interface at this time.</p>
        <p>This option is supported only for HVM instances. Specifying this option with a PV
            instance can make it unreachable.</p>")
    @as("SriovNetSupport")
    sriovNetSupport: option<attributeValue>,
    @ocaml.doc("<p>Changes the instance's RAM disk to the specified value. We recommend that you use
            PV-GRUB instead of kernels and RAM disks. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html\">PV-GRUB</a>.</p>")
    @as("Ramdisk")
    ramdisk: option<attributeValue>,
    @ocaml.doc("<p>Changes the instance's kernel to the specified value. We recommend that you use
            PV-GRUB instead of kernels and RAM disks. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html\">PV-GRUB</a>.</p>")
    @as("Kernel")
    kernel: option<attributeValue>,
    @ocaml.doc("<p>Changes the instance type to the specified value. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\">Instance
                types</a> in the <i>Amazon EC2 User Guide</i>. If the instance type is
            not valid, the error returned is <code>InvalidInstanceAttributeValue</code>.</p>")
    @as("InstanceType")
    instanceType: option<attributeValue>,
    @ocaml.doc("<p>Specifies whether an instance stops or terminates when you initiate shutdown from the
            instance (using the operating system command for system shutdown).</p>")
    @as("InstanceInitiatedShutdownBehavior")
    instanceInitiatedShutdownBehavior: option<attributeValue>,
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: instanceId,
    @ocaml.doc("<p>[EC2-VPC] Replaces the security groups of the instance with the specified security
            groups. You must specify at least one security group, even if it's just the default
            security group for the VPC. You must specify the security group ID, not the security
            group name.</p>")
    @as("Groups")
    groups: option<groupIdStringList>,
    @ocaml.doc("<p>Set to <code>true</code> to enable enhanced networking with ENA for the
            instance.</p>
        <p>This option is supported only for HVM instances. Specifying this option with a PV
            instance can make it unreachable.</p>")
    @as("EnaSupport")
    enaSupport: option<attributeBooleanValue>,
    @ocaml.doc("<p>Specifies whether the instance is optimized for Amazon EBS I/O. This optimization
            provides dedicated throughput to Amazon EBS and an optimized configuration stack to
            provide optimal EBS I/O performance. This optimization isn't available with all instance
            types. Additional usage charges apply when using an EBS Optimized instance.</p>")
    @as("EbsOptimized")
    ebsOptimized: option<attributeBooleanValue>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>If the value is <code>true</code>, you can't terminate the instance using the Amazon
            EC2 console, CLI, or API; otherwise, you can. You cannot use this parameter for Spot
            Instances.</p>")
    @as("DisableApiTermination")
    disableApiTermination: option<attributeBooleanValue>,
    @ocaml.doc("<p>Modifies the <code>DeleteOnTermination</code> attribute for volumes that are currently
            attached. The volume must be owned by the caller. If no value is specified for
                <code>DeleteOnTermination</code>, the default is <code>true</code> and the volume is
            deleted when the instance is terminated.</p>
        <p>To add instance store volumes to an Amazon EBS-backed instance, you must add them when
            you launch the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html#Using_OverridingAMIBDM\">Update the block device mapping when launching an instance</a> in the
                <i>Amazon EC2 User Guide</i>.</p>")
    @as("BlockDeviceMappings")
    blockDeviceMappings: option<instanceBlockDeviceMappingSpecificationList>,
    @ocaml.doc("<p>The name of the attribute.</p>") @as("Attribute")
    attribute: option<instanceAttributeName>,
    @ocaml.doc("<p>Enable or disable source/destination checks, which ensure that the instance is either
            the source or the destination of any traffic that it receives. If the value is
                <code>true</code>, source/destination checks are enabled; otherwise, they are
            disabled. The default value is <code>true</code>. You must disable source/destination
            checks if the instance runs services such as network address translation, routing, or
            firewalls.</p>")
    @as("SourceDestCheck")
    sourceDestCheck: option<attributeBooleanValue>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyInstanceAttributeCommand"
  let make = (
    ~instanceId,
    ~value=?,
    ~userData=?,
    ~sriovNetSupport=?,
    ~ramdisk=?,
    ~kernel=?,
    ~instanceType=?,
    ~instanceInitiatedShutdownBehavior=?,
    ~groups=?,
    ~enaSupport=?,
    ~ebsOptimized=?,
    ~dryRun=?,
    ~disableApiTermination=?,
    ~blockDeviceMappings=?,
    ~attribute=?,
    ~sourceDestCheck=?,
    (),
  ) =>
    new({
      value: value,
      userData: userData,
      sriovNetSupport: sriovNetSupport,
      ramdisk: ramdisk,
      kernel: kernel,
      instanceType: instanceType,
      instanceInitiatedShutdownBehavior: instanceInitiatedShutdownBehavior,
      instanceId: instanceId,
      groups: groups,
      enaSupport: enaSupport,
      ebsOptimized: ebsOptimized,
      dryRun: dryRun,
      disableApiTermination: disableApiTermination,
      blockDeviceMappings: blockDeviceMappings,
      attribute: attribute,
      sourceDestCheck: sourceDestCheck,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ModifyImageAttribute = {
  type t
  @ocaml.doc("<p>Contains the parameters for ModifyImageAttribute.</p>")
  type request = {
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) of an organizational unit (OU). This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.</p>"
    )
    @as("OrganizationalUnitArns")
    organizationalUnitArns: option<organizationalUnitArnStringList>,
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) of an organization. This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.</p>"
    )
    @as("OrganizationArns")
    organizationArns: option<organizationArnStringList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The value of the attribute being modified. 
       This parameter can be used only when the <code>Attribute</code> parameter is <code>description</code>.</p>")
    @as("Value")
    value: option<string_>,
    @ocaml.doc("<p>The Amazon Web Services account IDs. 
       This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.</p>")
    @as("UserIds")
    userIds: option<userIdStringList>,
    @ocaml.doc("<p>The user groups. 
       This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.</p>")
    @as("UserGroups")
    userGroups: option<userGroupStringList>,
    @ocaml.doc("<p>Not supported.</p>") @as("ProductCodes")
    productCodes: option<productCodeStringList>,
    @ocaml.doc("<p>The operation type. 
       This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.</p>")
    @as("OperationType")
    operationType: option<operationType>,
    @ocaml.doc("<p>A new launch permission for the AMI.</p>") @as("LaunchPermission")
    launchPermission: option<launchPermissionModifications>,
    @ocaml.doc("<p>The ID of the AMI.</p>") @as("ImageId") imageId: imageId,
    @ocaml.doc("<p>A new description for the AMI.</p>") @as("Description")
    description: option<attributeValue>,
    @ocaml.doc("<p>The name of the attribute to modify.</p>
         <p>Valid values: <code>description</code> | <code>launchPermission</code>
         </p>")
    @as("Attribute")
    attribute: option<string_>,
  }
  type response = {.}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyImageAttributeCommand"
  let make = (
    ~imageId,
    ~organizationalUnitArns=?,
    ~organizationArns=?,
    ~dryRun=?,
    ~value=?,
    ~userIds=?,
    ~userGroups=?,
    ~productCodes=?,
    ~operationType=?,
    ~launchPermission=?,
    ~description=?,
    ~attribute=?,
    (),
  ) =>
    new({
      organizationalUnitArns: organizationalUnitArns,
      organizationArns: organizationArns,
      dryRun: dryRun,
      value: value,
      userIds: userIds,
      userGroups: userGroups,
      productCodes: productCodes,
      operationType: operationType,
      launchPermission: launchPermission,
      imageId: imageId,
      description: description,
      attribute: attribute,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ModifyHosts = {
  type t
  type request = {
    @ocaml.doc("<p>Specifies the instance family to be supported by the Dedicated Host. Specify this parameter
			to modify a Dedicated Host to support multiple instance types within its current
			instance family.</p>
		
		       <p>If you want to modify a Dedicated Host to support a specific instance type only, omit this parameter 
			and specify <b>InstanceType</b> instead. You cannot specify 
			<b>InstanceFamily</b> and <b>InstanceType</b> 
			in the same request.</p>")
    @as("InstanceFamily")
    instanceFamily: option<string_>,
    @ocaml.doc("<p>Specifies the instance type to be supported by the Dedicated Host. Specify this parameter to
			modify a Dedicated Host to support only a specific instance type.</p>
		
		       <p>If you want to modify a Dedicated Host to support multiple instance types in its current instance 
			family, omit this parameter and specify <b>InstanceFamily</b> 
			instead. You cannot specify <b>InstanceType</b> and
			<b>InstanceFamily</b> in the same request.</p>")
    @as("InstanceType")
    instanceType: option<string_>,
    @ocaml.doc("<p>Indicates whether to enable or disable host recovery for the Dedicated Host. For more information, 
			see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html\">
				Host recovery</a> in the <i>Amazon EC2 User Guide</i>.</p>")
    @as("HostRecovery")
    hostRecovery: option<hostRecovery>,
    @ocaml.doc("<p>The IDs of the Dedicated Hosts to modify.</p>") @as("HostIds")
    hostIds: requestHostIdList,
    @ocaml.doc("<p>Specify whether to enable or disable auto-placement.</p>") @as("AutoPlacement")
    autoPlacement: option<autoPlacement>,
  }
  type response = {
    @ocaml.doc("<p>The IDs of the Dedicated Hosts that could not be modified. Check whether the
            setting you requested can be used.</p>")
    @as("Unsuccessful")
    unsuccessful: option<unsuccessfulItemList>,
    @ocaml.doc("<p>The IDs of the Dedicated Hosts that were successfully modified.</p>")
    @as("Successful")
    successful: option<responseHostIdList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyHostsCommand"
  let make = (
    ~hostIds,
    ~instanceFamily=?,
    ~instanceType=?,
    ~hostRecovery=?,
    ~autoPlacement=?,
    (),
  ) =>
    new({
      instanceFamily: instanceFamily,
      instanceType: instanceType,
      hostRecovery: hostRecovery,
      hostIds: hostIds,
      autoPlacement: autoPlacement,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyFpgaImageAttribute = {
  type t
  type request = {
    @ocaml.doc("<p>A name for the AFI.</p>") @as("Name") name: option<string_>,
    @ocaml.doc("<p>A description for the AFI.</p>") @as("Description") description: option<string_>,
    @ocaml.doc("<p>The load permission for the AFI.</p>") @as("LoadPermission")
    loadPermission: option<loadPermissionModifications>,
    @ocaml.doc("<p>The product codes. After you add a product code to an AFI, it can't be removed.
		    This parameter is valid only when modifying the <code>productCodes</code> attribute.</p>")
    @as("ProductCodes")
    productCodes: option<productCodeStringList>,
    @ocaml.doc(
      "<p>The user groups. This parameter is valid only when modifying the <code>loadPermission</code> attribute.</p>"
    )
    @as("UserGroups")
    userGroups: option<userGroupStringList>,
    @ocaml.doc(
      "<p>The Amazon Web Services account IDs. This parameter is valid only when modifying the <code>loadPermission</code> attribute.</p>"
    )
    @as("UserIds")
    userIds: option<userIdStringList>,
    @ocaml.doc("<p>The operation type.</p>") @as("OperationType")
    operationType: option<operationType>,
    @ocaml.doc("<p>The name of the attribute.</p>") @as("Attribute")
    attribute: option<fpgaImageAttributeName>,
    @ocaml.doc("<p>The ID of the AFI.</p>") @as("FpgaImageId") fpgaImageId: fpgaImageId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the attribute.</p>") @as("FpgaImageAttribute")
    fpgaImageAttribute: option<fpgaImageAttribute>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyFpgaImageAttributeCommand"
  let make = (
    ~fpgaImageId,
    ~name=?,
    ~description=?,
    ~loadPermission=?,
    ~productCodes=?,
    ~userGroups=?,
    ~userIds=?,
    ~operationType=?,
    ~attribute=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      name: name,
      description: description,
      loadPermission: loadPermission,
      productCodes: productCodes,
      userGroups: userGroups,
      userIds: userIds,
      operationType: operationType,
      attribute: attribute,
      fpgaImageId: fpgaImageId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetTransitGatewayRouteTablePropagations = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<transitGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
         <ul>
            <li>
               <p>
                  <code>resource-id</code> - The ID of the resource.</p>
            </li>
            <li>
               <p>
                  <code>resource-type</code> - The resource type. Valid values are <code>vpc</code>
                    | <code>vpn</code> | <code>direct-connect-gateway</code> | <code>peering</code>
                    | <code>connect</code>.</p>
            </li>
            <li>
               <p>
                  <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The ID of the transit gateway route table.</p>")
    @as("TransitGatewayRouteTableId")
    transitGatewayRouteTableId: transitGatewayRouteTableId,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the route table propagations.</p>")
    @as("TransitGatewayRouteTablePropagations")
    transitGatewayRouteTablePropagations: option<transitGatewayRouteTablePropagationList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetTransitGatewayRouteTablePropagationsCommand"
  let make = (
    ~transitGatewayRouteTableId,
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      transitGatewayRouteTableId: transitGatewayRouteTableId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetTransitGatewayRouteTableAssociations = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<transitGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
         <ul>
            <li>
               <p>
                  <code>resource-id</code> - The ID of the resource.</p>
            </li>
            <li>
               <p>
                  <code>resource-type</code> - The resource type. Valid values are <code>vpc</code>
                    | <code>vpn</code> | <code>direct-connect-gateway</code> | <code>peering</code>
                    | <code>connect</code>.</p>
            </li>
            <li>
               <p>
                  <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The ID of the transit gateway route table.</p>")
    @as("TransitGatewayRouteTableId")
    transitGatewayRouteTableId: transitGatewayRouteTableId,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the associations.</p>") @as("Associations")
    associations: option<transitGatewayRouteTableAssociationList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetTransitGatewayRouteTableAssociationsCommand"
  let make = (
    ~transitGatewayRouteTableId,
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      transitGatewayRouteTableId: transitGatewayRouteTableId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetTransitGatewayPrefixListReferences = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<transitGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
        <ul>
            <li>
                <p>
                  <code>attachment.resource-id</code> - The ID of the resource for the attachment.</p>
            </li>
            <li>
                <p>
                  <code>attachment.resource-type</code> - The type of resource for the
                    attachment. Valid values are <code>vpc</code> | <code>vpn</code> |
                        <code>direct-connect-gateway</code> | <code>peering</code>.</p>
            </li>
            <li>
                <p>
                  <code>attachment.transit-gateway-attachment-id</code> - The ID of the attachment.</p>
            </li>
            <li>
                <p>
                  <code>is-blackhole</code> - Whether traffic matching the route is blocked (<code>true</code> | <code>false</code>).</p>
            </li>
            <li>
                <p>
                  <code>prefix-list-id</code> - The ID of the prefix list.</p>
            </li>
            <li>
                <p>
                  <code>prefix-list-owner-id</code> - The ID of the owner of the prefix list.</p>
            </li>
            <li>
                <p>
                  <code>state</code> - The state of the prefix list reference (<code>pending</code> | <code>available</code> | <code>modifying</code> | <code>deleting</code>).</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The ID of the transit gateway route table.</p>")
    @as("TransitGatewayRouteTableId")
    transitGatewayRouteTableId: transitGatewayRouteTableId,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the prefix list references.</p>")
    @as("TransitGatewayPrefixListReferences")
    transitGatewayPrefixListReferences: option<transitGatewayPrefixListReferenceSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetTransitGatewayPrefixListReferencesCommand"
  let make = (
    ~transitGatewayRouteTableId,
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      transitGatewayRouteTableId: transitGatewayRouteTableId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetTransitGatewayMulticastDomainAssociations = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<transitGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
        <ul>
            <li>
                <p>
                  <code>resource-id</code> - The ID of the resource.</p>
            </li>
            <li>
                <p>
                  <code>resource-type</code> - The type of resource. The valid value is: <code>vpc</code>.</p>
            </li>
            <li>
                
                <p>
                  <code>state</code> - The state of the subnet association. Valid values are
                        <code>associated</code> |
                        <code>associating</code>
                    | <code>disassociated</code> | <code>disassociating</code>.</p>
            </li>
            <li>
                <p>
                  <code>subnet-id</code> - The ID of the subnet.</p>
            </li>
            <li>
                <p>
                  <code>transit-gateway-attachment-id</code> - The id of the transit gateway attachment.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The ID of the transit gateway multicast domain.</p>")
    @as("TransitGatewayMulticastDomainId")
    transitGatewayMulticastDomainId: option<transitGatewayMulticastDomainId>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the multicast domain associations.</p>")
    @as("MulticastDomainAssociations")
    multicastDomainAssociations: option<transitGatewayMulticastDomainAssociationList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetTransitGatewayMulticastDomainAssociationsCommand"
  let make = (
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~transitGatewayMulticastDomainId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      transitGatewayMulticastDomainId: transitGatewayMulticastDomainId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetTransitGatewayAttachmentPropagations = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<transitGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
         <ul>
            <li>
               <p>
                  <code>transit-gateway-route-table-id</code> - The ID of the transit gateway route table.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: transitGatewayAttachmentId,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the propagation route tables.</p>")
    @as("TransitGatewayAttachmentPropagations")
    transitGatewayAttachmentPropagations: option<transitGatewayAttachmentPropagationList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetTransitGatewayAttachmentPropagationsCommand"
  let make = (
    ~transitGatewayAttachmentId,
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      transitGatewayAttachmentId: transitGatewayAttachmentId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetSpotPlacementScores = {
  type t
  type request = {
    @ocaml.doc("<p>The token for the next set of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. Specify a value between 1 and       
      1000. The default value is 1000. To retrieve the remaining results, make another call with       
      the returned <code>NextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<spotPlacementScoresMaxResults>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will
         identify instance types with those attributes.</p>
         <p>If you specify <code>InstanceRequirementsWithMetadata</code>, you can't specify
            <code>InstanceTypes</code>.</p>")
    @as("InstanceRequirementsWithMetadata")
    instanceRequirementsWithMetadata: option<instanceRequirementsWithMetadataRequest>,
    @ocaml.doc("<p>The Regions used to narrow down the list of Regions to be scored. Enter the Region code,
         for example, <code>us-east-1</code>.</p>")
    @as("RegionNames")
    regionNames: option<regionNames>,
    @ocaml.doc("<p>Specify <code>true</code> so that the response returns a list of scored Availability Zones.
         Otherwise, the response returns a list of scored Regions.</p>
         <p>A list of scored Availability Zones is useful if you want to launch all of your Spot
         capacity into a single Availability Zone.</p>")
    @as("SingleAvailabilityZone")
    singleAvailabilityZone: option<boolean_>,
    @ocaml.doc("<p>The unit for the target capacity.</p>
         <p>Default: <code>units</code> (translates to number of instances)</p>")
    @as("TargetCapacityUnitType")
    targetCapacityUnitType: option<targetCapacityUnitType>,
    @ocaml.doc("<p>The target capacity.</p>") @as("TargetCapacity")
    targetCapacity: spotPlacementScoresTargetCapacity,
    @ocaml.doc("<p>The instance types. We recommend that you specify at least three instance types. If you
         specify one or two instance types, or specify variations of a single instance type (for
         example, an <code>m3.xlarge</code> with and without instance storage), the returned
         placement score will always be low. </p>
         <p>If you specify <code>InstanceTypes</code>, you can't specify
            <code>InstanceRequirementsWithMetadata</code>.</p>")
    @as("InstanceTypes")
    instanceTypes: option<instanceTypes>,
  }
  type response = {
    @ocaml.doc("<p>The token for the next set of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The Spot placement score for the top 10 Regions or Availability Zones, scored on a scale
         from 1 to 10. Each score  reflects how likely it is that each Region or Availability Zone
         will succeed at fulfilling the specified target capacity  <i>at the time of the Spot
            placement score request</i>. A score of <code>10</code> means that your Spot
         capacity request is highly likely to succeed in that Region or Availability Zone. </p>
         <p>If you request a Spot placement score for Regions, a high score assumes that your fleet
         request will be configured to use all Availability Zones and the
            <code>capacity-optimized</code> allocation strategy. If you request a Spot placement
         score for Availability Zones, a high score assumes that your fleet request will be
         configured to use a single Availability Zone and the <code>capacity-optimized</code>
         allocation strategy.</p>
         <p>Different  Regions or Availability Zones might return the same score.</p>
         <note>
            <p>The Spot placement score serves as a recommendation only. No score guarantees that your
            Spot request will be fully or partially fulfilled.</p>
         </note>")
    @as("SpotPlacementScores")
    spotPlacementScores: option<spotPlacementScores>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "GetSpotPlacementScoresCommand"
  let make = (
    ~targetCapacity,
    ~nextToken=?,
    ~maxResults=?,
    ~dryRun=?,
    ~instanceRequirementsWithMetadata=?,
    ~regionNames=?,
    ~singleAvailabilityZone=?,
    ~targetCapacityUnitType=?,
    ~instanceTypes=?,
    (),
  ) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      dryRun: dryRun,
      instanceRequirementsWithMetadata: instanceRequirementsWithMetadata,
      regionNames: regionNames,
      singleAvailabilityZone: singleAvailabilityZone,
      targetCapacityUnitType: targetCapacityUnitType,
      targetCapacity: targetCapacity,
      instanceTypes: instanceTypes,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetReservedInstancesExchangeQuote = {
  type t
  @ocaml.doc("<p>Contains the parameters for GetReservedInstanceExchangeQuote.</p>")
  type request = {
    @ocaml.doc("<p>The configuration of the target Convertible Reserved Instance to exchange for your
            current Convertible Reserved Instances.</p>")
    @as("TargetConfigurations")
    targetConfigurations: option<targetConfigurationRequestSet>,
    @ocaml.doc("<p>The IDs of the Convertible Reserved Instances to exchange.</p>")
    @as("ReservedInstanceIds")
    reservedInstanceIds: reservedInstanceIdSet,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
      Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  @ocaml.doc("<p>Contains the output of GetReservedInstancesExchangeQuote.</p>")
  type response = {
    @ocaml.doc("<p>Describes the reason why the exchange cannot be completed.</p>")
    @as("ValidationFailureReason")
    validationFailureReason: option<string_>,
    @ocaml.doc("<p>The values of the target Convertible Reserved Instances.</p>")
    @as("TargetConfigurationValueSet")
    targetConfigurationValueSet: option<targetReservationValueSet>,
    @ocaml.doc("<p>The cost associated with the Reserved Instance.</p>")
    @as("TargetConfigurationValueRollup")
    targetConfigurationValueRollup: option<reservationValue>,
    @ocaml.doc("<p>The configuration of your Convertible Reserved Instances.</p>")
    @as("ReservedInstanceValueSet")
    reservedInstanceValueSet: option<reservedInstanceReservationValueSet>,
    @ocaml.doc("<p>The cost associated with the Reserved Instance.</p>")
    @as("ReservedInstanceValueRollup")
    reservedInstanceValueRollup: option<reservationValue>,
    @ocaml.doc("<p>The total true upfront charge for the exchange.</p>") @as("PaymentDue")
    paymentDue: option<string_>,
    @ocaml.doc("<p>The new end date of the reservation term.</p>")
    @as("OutputReservedInstancesWillExpireAt")
    outputReservedInstancesWillExpireAt: option<dateTime>,
    @ocaml.doc(
      "<p>If <code>true</code>, the exchange is valid. If <code>false</code>, the exchange cannot be completed.</p>"
    )
    @as("IsValidExchange")
    isValidExchange: option<boolean_>,
    @ocaml.doc("<p>The currency of the transaction.</p>") @as("CurrencyCode")
    currencyCode: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetReservedInstancesExchangeQuoteCommand"
  let make = (~reservedInstanceIds, ~targetConfigurations=?, ~dryRun=?, ()) =>
    new({
      targetConfigurations: targetConfigurations,
      reservedInstanceIds: reservedInstanceIds,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetIpamPoolCidrs = {
  type t
  type request = {
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return in the request.</p>") @as("MaxResults")
    maxResults: option<ipamMaxResults>,
    @ocaml.doc(
      "<p>One or more filters for the request. For more information about filtering, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html\">Filtering CLI output</a>.</p>"
    )
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The ID of the IPAM pool you want the CIDR for.</p>") @as("IpamPoolId")
    ipamPoolId: ipamPoolId,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Information about the CIDRs provisioned to an IPAM pool.</p>")
    @as("IpamPoolCidrs")
    ipamPoolCidrs: option<ipamPoolCidrSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "GetIpamPoolCidrsCommand"
  let make = (~ipamPoolId, ~nextToken=?, ~maxResults=?, ~filters=?, ~dryRun=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      ipamPoolId: ipamPoolId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetIpamPoolAllocations = {
  type t
  type request = {
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results you would like returned per page.</p>")
    @as("MaxResults")
    maxResults: option<getIpamPoolAllocationsMaxResults>,
    @ocaml.doc(
      "<p>One or more filters for the request. For more information about filtering, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html\">Filtering CLI output</a>.</p>"
    )
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The ID of the allocation.</p>") @as("IpamPoolAllocationId")
    ipamPoolAllocationId: option<ipamPoolAllocationId>,
    @ocaml.doc("<p>The ID of the IPAM pool you want to see the allocations for.</p>")
    @as("IpamPoolId")
    ipamPoolId: ipamPoolId,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The IPAM pool allocations you want information on.</p>")
    @as("IpamPoolAllocations")
    ipamPoolAllocations: option<ipamPoolAllocationSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "GetIpamPoolAllocationsCommand"
  let make = (
    ~ipamPoolId,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~ipamPoolAllocationId=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      ipamPoolAllocationId: ipamPoolAllocationId,
      ipamPoolId: ipamPoolId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetHostReservationPurchasePreview = {
  type t
  type request = {
    @ocaml.doc("<p>The offering ID of the reservation.</p>") @as("OfferingId")
    offeringId: offeringId,
    @ocaml.doc("<p>The IDs of the Dedicated Hosts with which the reservation is associated.</p>")
    @as("HostIdSet")
    hostIdSet: requestHostIdSet,
  }
  type response = {
    @ocaml.doc("<p>The potential total upfront price. This is billed immediately.</p>")
    @as("TotalUpfrontPrice")
    totalUpfrontPrice: option<string_>,
    @ocaml.doc("<p>The potential total hourly price of the reservation per hour.</p>")
    @as("TotalHourlyPrice")
    totalHourlyPrice: option<string_>,
    @ocaml.doc("<p>The purchase information of the Dedicated Host reservation and the Dedicated Hosts
            associated with it.</p>")
    @as("Purchase")
    purchase: option<purchaseSet>,
    @ocaml.doc("<p>The currency in which the <code>totalUpfrontPrice</code> and
                <code>totalHourlyPrice</code> amounts are specified. At this time, the only
            supported currency is <code>USD</code>.</p>")
    @as("CurrencyCode")
    currencyCode: option<currencyCodeValues>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetHostReservationPurchasePreviewCommand"
  let make = (~offeringId, ~hostIdSet, ()) => new({offeringId: offeringId, hostIdSet: hostIdSet})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetFlowLogsIntegrationTemplate = {
  type t
  type request = {
    @ocaml.doc("<p>Information about the service integration.</p>") @as("IntegrateServices")
    integrateServices: integrateServices,
    @ocaml.doc(
      "<p>To store the CloudFormation template in Amazon S3, specify the location in Amazon S3.</p>"
    )
    @as("ConfigDeliveryS3DestinationArn")
    configDeliveryS3DestinationArn: string_,
    @ocaml.doc("<p>The ID of the flow log.</p>") @as("FlowLogId") flowLogId: vpcFlowLogId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The generated CloudFormation template.</p>") @as("Result")
    result: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetFlowLogsIntegrationTemplateCommand"
  let make = (~integrateServices, ~configDeliveryS3DestinationArn, ~flowLogId, ~dryRun=?, ()) =>
    new({
      integrateServices: integrateServices,
      configDeliveryS3DestinationArn: configDeliveryS3DestinationArn,
      flowLogId: flowLogId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetCoipPoolUsage = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<coipPoolMaxResults>,
    @ocaml.doc("<p>One or more filters.</p>
         <ul>
            <li>
               <p>
                  <code>coip-address-usage.allocation-id</code> - The allocation ID of the address.</p>
            </li>
            <li>
               <p>
                  <code>coip-address-usage.aws-account-id</code> - The ID of the Amazon Web Services account that is using the customer-owned IP address.</p>
            </li>
            <li>
               <p>
                  <code>coip-address-usage.aws-service</code> - The Amazon Web Services service that is using the customer-owned IP address.</p>
            </li>
            <li>
               <p>
                  <code>coip-address-usage.co-ip</code> - The customer-owned IP address.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The ID of the address pool.</p>") @as("PoolId") poolId: ipv4PoolCoipId,
  }
  type response = {
    @ocaml.doc("<p>The ID of the local gateway route table.</p>") @as("LocalGatewayRouteTableId")
    localGatewayRouteTableId: option<string_>,
    @ocaml.doc("<p>Information about the address usage.</p>") @as("CoipAddressUsages")
    coipAddressUsages: option<coipAddressUsageSet>,
    @ocaml.doc("<p>The ID of the customer-owned address pool.</p>") @as("CoipPoolId")
    coipPoolId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "GetCoipPoolUsageCommand"
  let make = (~poolId, ~dryRun=?, ~nextToken=?, ~maxResults=?, ~filters=?, ()) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      poolId: poolId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ExportTransitGatewayRoutes = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The name of the S3 bucket.</p>") @as("S3Bucket") s3Bucket: string_,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
         <ul>
            <li>
               <p>
                  <code>attachment.transit-gateway-attachment-id</code> - The id of the transit gateway attachment.</p>
            </li>
            <li>
               <p>
                  <code>attachment.resource-id</code> - The resource id of the transit gateway attachment.</p>
            </li>
            <li>
               <p>
                  <code>route-search.exact-match</code> - The exact match of the specified filter.</p>
            </li>
            <li>
               <p>
                  <code>route-search.longest-prefix-match</code> - The longest prefix that matches the route.</p>
            </li>
            <li>
               <p>
                  <code>route-search.subnet-of-match</code> - The routes with a subnet that match the specified CIDR filter.</p>
            </li>
            <li>
               <p>
                  <code>route-search.supernet-of-match</code> - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The state of the route (<code>active</code> | <code>blackhole</code>).</p>
            </li>
            <li>
               <p>
                  <code>transit-gateway-route-destination-cidr-block</code> - The CIDR range.</p>
            </li>
            <li>
               <p>
                  <code>type</code> - The type of route (<code>propagated</code> |
               <code>static</code>).</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The ID of the route table.</p>") @as("TransitGatewayRouteTableId")
    transitGatewayRouteTableId: transitGatewayRouteTableId,
  }
  type response = {
    @ocaml.doc("<p>The URL of the exported file in Amazon S3. For example, 
         s3://<i>bucket_name</i>/VPCTransitGateway/TransitGatewayRouteTables/<i>file_name</i>.</p>")
    @as("S3Location")
    s3Location: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ExportTransitGatewayRoutesCommand"
  let make = (~s3Bucket, ~transitGatewayRouteTableId, ~dryRun=?, ~filters=?, ()) =>
    new({
      dryRun: dryRun,
      s3Bucket: s3Bucket,
      filters: filters,
      transitGatewayRouteTableId: transitGatewayRouteTableId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DisassociateTransitGatewayMulticastDomain = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The IDs of the subnets;</p>") @as("SubnetIds")
    subnetIds: option<transitGatewaySubnetIdList>,
    @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: option<transitGatewayAttachmentId>,
    @ocaml.doc("<p>The ID of the transit gateway multicast domain.</p>")
    @as("TransitGatewayMulticastDomainId")
    transitGatewayMulticastDomainId: option<transitGatewayMulticastDomainId>,
  }
  type response = {
    @ocaml.doc("<p>Information about the association.</p>") @as("Associations")
    associations: option<transitGatewayMulticastDomainAssociations>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DisassociateTransitGatewayMulticastDomainCommand"
  let make = (
    ~dryRun=?,
    ~subnetIds=?,
    ~transitGatewayAttachmentId=?,
    ~transitGatewayMulticastDomainId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      subnetIds: subnetIds,
      transitGatewayAttachmentId: transitGatewayAttachmentId,
      transitGatewayMulticastDomainId: transitGatewayMulticastDomainId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeVpcEndpointServicePermissions = {
  type t
  type request = {
    @ocaml.doc("<p>The token to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return for the request in a single page. The remaining
            results of the initial request can be seen by sending another request with the returned
                <code>NextToken</code> value. This value can be between 5 and 1,000; if
                <code>MaxResults</code> is given a value larger than 1,000, only 1,000 results are
            returned.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>One or more filters.</p>
		       <ul>
            <li>
				           <p>
                  <code>principal</code> - The ARN of the principal.</p>
			         </li>
            <li>
				           <p>
                  <code>principal-type</code> - The principal type (<code>All</code> |
						<code>Service</code> | <code>OrganizationUnit</code> | <code>Account</code>
					| <code>User</code> | <code>Role</code>).</p>
			         </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The ID of the service.</p>") @as("ServiceId") serviceId: vpcEndpointServiceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about one or more allowed principals.</p>") @as("AllowedPrincipals")
    allowedPrincipals: option<allowedPrincipalSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeVpcEndpointServicePermissionsCommand"
  let make = (~serviceId, ~nextToken=?, ~maxResults=?, ~filters=?, ~dryRun=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      serviceId: serviceId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeVpcEndpointConnectionNotifications = {
  type t
  type request = {
    @ocaml.doc("<p>The token to request the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. To retrieve the remaining
            results, make another request with the returned <code>NextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                  <code>connection-notification-arn</code> - The ARN of the SNS topic for the
                    notification.</p>
            </li>
            <li>
                <p>
                  <code>connection-notification-id</code> - The ID of the
                    notification.</p>
            </li>
            <li>
                <p>
                  <code>connection-notification-state</code> - The state of the notification
                        (<code>Enabled</code> | <code>Disabled</code>).</p>
            </li>
            <li>
                <p>
                  <code>connection-notification-type</code> - The type of notification
                        (<code>Topic</code>).</p>
            </li>
            <li>
                <p>
                  <code>service-id</code> - The ID of the endpoint service.</p>
            </li>
            <li>
                <p>
                  <code>vpc-endpoint-id</code> - The ID of the VPC endpoint.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The ID of the notification.</p>") @as("ConnectionNotificationId")
    connectionNotificationId: option<connectionNotificationId>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The token to use to retrieve the next page of results. This value is
            <code>null</code> when there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>One or more notifications.</p>") @as("ConnectionNotificationSet")
    connectionNotificationSet: option<connectionNotificationSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeVpcEndpointConnectionNotificationsCommand"
  let make = (
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~connectionNotificationId=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      connectionNotificationId: connectionNotificationId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeVolumesModifications = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of results (up to a limit of 500) to be returned in a paginated
      request.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>The <code>nextToken</code> value returned by a previous paginated request.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The filters.</p>
         <ul>
            <li>
               <p>
                  <code>modification-state</code> - The current modification state (modifying | 
          optimizing | completed | failed).</p>
            </li>
            <li>
               <p>
                  <code>original-iops</code> - The original IOPS rate of the volume.</p>
            </li>
            <li>
               <p>
                  <code>original-size</code> - The original size of the volume, in GiB.</p>
            </li>
            <li>
               <p>
                  <code>original-volume-type</code> - The original volume type of the volume (standard | 
          io1 | io2 | gp2 | sc1 | st1).</p>
            </li>
            <li>
               <p>
                  <code>originalMultiAttachEnabled</code> - Indicates whether Multi-Attach support was enabled (true | false).</p>
            </li>
            <li>
               <p>
                  <code>start-time</code> - The modification start time.</p>
            </li>
            <li>
               <p>
                  <code>target-iops</code> - The target IOPS rate of the volume.</p>
            </li>
            <li>
               <p>
                  <code>target-size</code> - The target size of the volume, in GiB.</p>
            </li>
            <li>
               <p>
                  <code>target-volume-type</code> - The target volume type of the volume (standard | 
          io1 | io2 | gp2 | sc1 | st1).</p>
            </li>
            <li>
               <p>
                  <code>targetMultiAttachEnabled</code> - Indicates whether Multi-Attach support is to be enabled (true | false).</p>
            </li>
            <li>
               <p>
                  <code>volume-id</code> - The ID of the volume.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of the volumes.</p>") @as("VolumeIds")
    volumeIds: option<volumeIdStringList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Token for pagination, null if there are no more results </p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the volume modifications.</p>") @as("VolumesModifications")
    volumesModifications: option<volumeModificationList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeVolumesModificationsCommand"
  let make = (~maxResults=?, ~nextToken=?, ~filters=?, ~volumeIds=?, ~dryRun=?, ()) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      filters: filters,
      volumeIds: volumeIds,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeTags = {
  type t
  type request = {
    @ocaml.doc("<p>The token to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call.
      This value can be between 5 and 1000. 
			To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>The filters.</p>
         <ul>
            <li>
               <p>
                  <code>key</code> - The tag key.</p>
            </li>
            <li>
               <p>
                  <code>resource-id</code> - The ID of the resource.</p>
            </li>
            <li>
               <p>
                  <code>resource-type</code> - The resource type (<code>customer-gateway</code> | <code>dedicated-host</code> | <code>dhcp-options</code> | <code>elastic-ip</code> | <code>fleet</code> | <code>fpga-image</code> | <code>host-reservation</code> | <code>image</code> | <code>instance</code> | <code>internet-gateway</code> | <code>key-pair</code> | <code>launch-template</code> | <code>natgateway</code> | <code>network-acl</code> | <code>network-interface</code> | <code>placement-group</code> | <code>reserved-instances</code> | <code>route-table</code> | <code>security-group</code> | <code>snapshot</code> | <code>spot-instances-request</code> | <code>subnet</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-endpoint</code> | <code>vpc-endpoint-service</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>).</p>
            </li>
            <li>
               <p>
                  <code>tag</code>:<key> - The key/value combination of the tag. For example,
                specify \"tag:Owner\" for the filter name and \"TeamA\" for the filter value to find
                resources with the tag \"Owner=TeamA\".</p>
            </li>
            <li>
               <p>
                  <code>value</code> - The tag value.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The tags.</p>") @as("Tags") tags: option<tagDescriptionList>,
    @ocaml.doc("<p>The token to use to retrieve the next page of results. This value is
         <code>null</code> when there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeTagsCommand"
  let make = (~nextToken=?, ~maxResults=?, ~filters=?, ~dryRun=?, ()) =>
    new({nextToken: nextToken, maxResults: maxResults, filters: filters, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeStoreImageTasks = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of results to return in a single call. To retrieve the remaining
      results, make another call with the returned <code>NextToken</code> value. This value can be
      between 1 and 200. You cannot specify this parameter and the <code>ImageIDs</code> parameter
      in the same call.</p>")
    @as("MaxResults")
    maxResults: option<describeStoreImageTasksRequestMaxResults>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The filters.</p>
         <ul>
            <li>
               <p>
                  <code>task-state</code> - Returns tasks in a certain state (<code>InProgress</code> |
            <code>Completed</code> | <code>Failed</code>)</p>
            </li>
            <li>
               <p>
                  <code>bucket</code> - Returns task information for tasks that targeted a specific
          bucket. For the filter value, specify the bucket name.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The AMI IDs for which to show progress. Up to 20 AMI IDs can be included in a request.</p>"
    )
    @as("ImageIds")
    imageIds: option<imageIdList>,
  }
  type response = {
    @ocaml.doc("<p>The token to use to retrieve the next page of results. This value is <code>null</code>
      when there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The information about the AMI store tasks.</p>") @as("StoreImageTaskResults")
    storeImageTaskResults: option<storeImageTaskResultSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeStoreImageTasksCommand"
  let make = (~maxResults=?, ~nextToken=?, ~filters=?, ~dryRun=?, ~imageIds=?, ()) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      filters: filters,
      dryRun: dryRun,
      imageIds: imageIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeSpotPriceHistory = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeSpotPriceHistory.</p>")
  type request = {
    @ocaml.doc("<p>The date and time, up to the past 90 days, from which to start retrieving the price
            history data, in UTC format (for example,
                <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>")
    @as("StartTime")
    startTime: option<dateTime>,
    @ocaml.doc("<p>Filters the results by the specified basic product descriptions.</p>")
    @as("ProductDescriptions")
    productDescriptions: option<productDescriptionList>,
    @ocaml.doc("<p>The token for the next set of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. Specify a value between 1
            and 1000. The default value is 1000. To retrieve the remaining results, make another
            call with the returned <code>NextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>Filters the results by the specified instance types.</p>") @as("InstanceTypes")
    instanceTypes: option<instanceTypeList>,
    @ocaml.doc("<p>The date and time, up to the current date, from which to stop retrieving the price
            history data, in UTC format (for example,
                <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>")
    @as("EndTime")
    endTime: option<dateTime>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Filters the results by the specified Availability Zone.</p>")
    @as("AvailabilityZone")
    availabilityZone: option<string_>,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                    <code>availability-zone</code> - The Availability Zone for which prices should
                    be returned.</p>
            </li>
            <li>
                <p>
                    <code>instance-type</code> - The type of instance (for example,
                        <code>m3.medium</code>).</p>
            </li>
            <li>
                <p>
                    <code>product-description</code> - The product description for the Spot price
                        (<code>Linux/UNIX</code> | <code>Red Hat Enterprise Linux</code> |
                        <code>SUSE Linux</code> | <code>Windows</code> | <code>Linux/UNIX (Amazon
                        VPC)</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> |
                        <code>SUSE Linux (Amazon VPC)</code> | <code>Windows (Amazon
                    VPC)</code>).</p>
            </li>
            <li>
                <p>
                    <code>spot-price</code> - The Spot price. The value must match exactly (or use
                    wildcards; greater than or less than comparison is not supported).</p>
            </li>
            <li>
                <p>
                    <code>timestamp</code> - The time stamp of the Spot price history, in UTC format
                    (for example,
                        <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
                    You can use wildcards (* and ?). Greater than or less than comparison is not
                    supported.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  @ocaml.doc("<p>Contains the output of DescribeSpotPriceHistory.</p>")
  type response = {
    @ocaml.doc("<p>The historical Spot prices.</p>") @as("SpotPriceHistory")
    spotPriceHistory: option<spotPriceHistoryList>,
    @ocaml.doc("<p>The token required to retrieve the next set of results. This value is null or an empty
            string when there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeSpotPriceHistoryCommand"
  let make = (
    ~startTime=?,
    ~productDescriptions=?,
    ~nextToken=?,
    ~maxResults=?,
    ~instanceTypes=?,
    ~endTime=?,
    ~dryRun=?,
    ~availabilityZone=?,
    ~filters=?,
    (),
  ) =>
    new({
      startTime: startTime,
      productDescriptions: productDescriptions,
      nextToken: nextToken,
      maxResults: maxResults,
      instanceTypes: instanceTypes,
      endTime: endTime,
      dryRun: dryRun,
      availabilityZone: availabilityZone,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeSpotFleetRequestHistory = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeSpotFleetRequestHistory.</p>")
  type request = {
    @ocaml.doc("<p>The starting date and time for the events, in UTC format (for example,
                <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>")
    @as("StartTime")
    startTime: dateTime,
    @ocaml.doc("<p>The ID of the Spot Fleet request.</p>") @as("SpotFleetRequestId")
    spotFleetRequestId: spotFleetRequestId,
    @ocaml.doc("<p>The token for the next set of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. Specify a value between 1
            and 1000. The default value is 1000. To retrieve the remaining results, make another
            call with the returned <code>NextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<describeSpotFleetRequestHistoryMaxResults>,
    @ocaml.doc("<p>The type of events to describe. By default, all events are described.</p>")
    @as("EventType")
    eventType: option<eventType>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  @ocaml.doc("<p>Contains the output of DescribeSpotFleetRequestHistory.</p>")
  type response = {
    @ocaml.doc("<p>The starting date and time for the events, in UTC format (for example,
                <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>")
    @as("StartTime")
    startTime: option<dateTime>,
    @ocaml.doc("<p>The ID of the Spot Fleet request.</p>") @as("SpotFleetRequestId")
    spotFleetRequestId: option<string_>,
    @ocaml.doc("<p>The token required to retrieve the next set of results. This value is
                <code>null</code> when there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The last date and time for the events, in UTC format (for example,
                <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
            All records up to this time were retrieved.</p>
        <p>If <code>nextToken</code> indicates that there are more results, this value is not
            present.</p>")
    @as("LastEvaluatedTime")
    lastEvaluatedTime: option<dateTime>,
    @ocaml.doc("<p>Information about the events in the history of the Spot Fleet request.</p>")
    @as("HistoryRecords")
    historyRecords: option<historyRecords>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeSpotFleetRequestHistoryCommand"
  let make = (
    ~startTime,
    ~spotFleetRequestId,
    ~nextToken=?,
    ~maxResults=?,
    ~eventType=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      startTime: startTime,
      spotFleetRequestId: spotFleetRequestId,
      nextToken: nextToken,
      maxResults: maxResults,
      eventType: eventType,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeRegions = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Indicates whether to display all Regions, including Regions that are disabled for your account.</p>"
    )
    @as("AllRegions")
    allRegions: option<boolean_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The names of the Regions. You can specify any Regions, whether they are enabled and disabled for your account.</p>"
    )
    @as("RegionNames")
    regionNames: option<regionNameStringList>,
    @ocaml.doc("<p>The filters.</p>
         <ul>
            <li>
               <p>
                  <code>endpoint</code> - The endpoint of the Region (for example, <code>ec2.us-east-1.amazonaws.com</code>).</p>
            </li>
            <li>
               <p>
                  <code>opt-in-status</code> - The opt-in status of the Region (<code>opt-in-not-required</code> | <code>opted-in</code> | 
                 <code>not-opted-in</code>).</p>
            </li>
            <li>
               <p>
                  <code>region-name</code> - The name of the Region (for example, <code>us-east-1</code>).</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc("<p>Information about the Regions.</p>") @as("Regions") regions: option<regionList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeRegionsCommand"
  let make = (~allRegions=?, ~dryRun=?, ~regionNames=?, ~filters=?, ()) =>
    new({allRegions: allRegions, dryRun: dryRun, regionNames: regionNames, filters: filters})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribePrefixLists = {
  type t
  type request = {
    @ocaml.doc("<p>One or more prefix list IDs.</p>") @as("PrefixListIds")
    prefixListIds: option<prefixListResourceIdStringList>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                    <code>prefix-list-id</code>: The ID of a prefix list.</p>
            </li>
            <li>
                <p>
                    <code>prefix-list-name</code>: The name of a prefix list.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>All available prefix lists.</p>") @as("PrefixLists")
    prefixLists: option<prefixListSet>,
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribePrefixListsCommand"
  let make = (~prefixListIds=?, ~nextToken=?, ~maxResults=?, ~filters=?, ~dryRun=?, ()) =>
    new({
      prefixListIds: prefixListIds,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeNetworkInterfacePermissions = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeNetworkInterfacePermissions.</p>")
  type request = {
    @ocaml.doc("<p>The maximum number of results to return in a single call. To retrieve the remaining results,
			make another call with the returned <code>NextToken</code> value. If this parameter is not specified, up to 50 results are returned by default.</p>")
    @as("MaxResults")
    maxResults: option<describeNetworkInterfacePermissionsMaxResults>,
    @ocaml.doc("<p>The token to request the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>One or more filters.</p>
		       <ul>
            <li>
               <p>
                  <code>network-interface-permission.network-interface-permission-id</code> - The ID of the
				permission.</p>
            </li>
            <li>
				           <p>
                  <code>network-interface-permission.network-interface-id</code> - The ID of
					the network interface.</p>
			         </li>
            <li>
			            <p>
                  <code>network-interface-permission.aws-account-id</code> - The Amazon Web Services account ID.</p>
			         </li>
            <li>
			            <p>
                  <code>network-interface-permission.aws-service</code> - The Amazon Web Service.</p>
			         </li>
            <li>
				           <p>
                  <code>network-interface-permission.permission</code> - The type of
					permission (<code>INSTANCE-ATTACH</code> |
					<code>EIP-ASSOCIATE</code>).</p>
			         </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>One or more network interface permission IDs.</p>")
    @as("NetworkInterfacePermissionIds")
    networkInterfacePermissionIds: option<networkInterfacePermissionIdList>,
  }
  @ocaml.doc("<p>Contains the output for DescribeNetworkInterfacePermissions.</p>")
  type response = {
    @ocaml.doc("<p>The token to use to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The network interface permissions.</p>") @as("NetworkInterfacePermissions")
    networkInterfacePermissions: option<networkInterfacePermissionList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeNetworkInterfacePermissionsCommand"
  let make = (~maxResults=?, ~nextToken=?, ~filters=?, ~networkInterfacePermissionIds=?, ()) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      filters: filters,
      networkInterfacePermissionIds: networkInterfacePermissionIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeMovingAddresses = {
  type t
  type request = {
    @ocaml.doc("<p>One or more Elastic IP addresses.</p>") @as("PublicIps")
    publicIps: option<valueStringList>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return for the request in a single page. The remaining
      results of the initial request can be seen by sending another request with the returned
      <code>NextToken</code> value. This value can be between 5 and 1000; if
      <code>MaxResults</code> is given a value outside of this range, an error is returned.</p>
         <p>Default: If no value is provided, the default is 1000.</p>")
    @as("MaxResults")
    maxResults: option<describeMovingAddressesMaxResults>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more filters.</p>
         <ul>
            <li>
               <p>
                  <code>moving-status</code> - The status of the Elastic IP address
          (<code>MovingToVpc</code> | <code>RestoringToClassic</code>).</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The status for each Elastic IP address.</p>") @as("MovingAddressStatuses")
    movingAddressStatuses: option<movingAddressStatusSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeMovingAddressesCommand"
  let make = (~publicIps=?, ~nextToken=?, ~maxResults=?, ~dryRun=?, ~filters=?, ()) =>
    new({
      publicIps: publicIps,
      nextToken: nextToken,
      maxResults: maxResults,
      dryRun: dryRun,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeInstanceTypeOfferings = {
  type t
  type request = {
    @ocaml.doc("<p>The token to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return for the request in a single page. The remaining results
         can be seen by sending another request with the next token value.</p>")
    @as("MaxResults")
    maxResults: option<ditomaxResults>,
    @ocaml.doc("<p>One or more filters. Filter names and values are case-sensitive.</p>
         <ul>
            <li>
               <p>
                  <code>location</code> - This depends on the location type. For example, if the location type is
      <code>region</code> (default), the location is the Region code (for example, <code>us-east-2</code>.)</p>
            </li>
            <li>
               <p>
                  <code>instance-type</code> - The instance type. For example,
     <code>c5.2xlarge</code>.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The location type.</p>") @as("LocationType") locationType: option<locationType>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request,
         and provides an error response. If you have the required permissions, the error response is
         <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there
         are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The instance types offered.</p>") @as("InstanceTypeOfferings")
    instanceTypeOfferings: option<instanceTypeOfferingsList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeInstanceTypeOfferingsCommand"
  let make = (~nextToken=?, ~maxResults=?, ~filters=?, ~locationType=?, ~dryRun=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      locationType: locationType,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeInstanceCreditSpecifications = {
  type t
  type request = {
    @ocaml.doc("<p>The token to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. To retrieve the remaining
            results, make another call with the returned <code>NextToken</code> value. This value
            can be between 5 and 1000. You cannot specify this parameter and the instance IDs
            parameter in the same call.</p>")
    @as("MaxResults")
    maxResults: option<describeInstanceCreditSpecificationsMaxResults>,
    @ocaml.doc("<p>The instance IDs.</p>
        <p>Default: Describes all your instances.</p>
        <p>Constraints: Maximum 1000 explicitly specified instance IDs.</p>")
    @as("InstanceIds")
    instanceIds: option<instanceIdStringList>,
    @ocaml.doc("<p>The filters.</p>
        <ul>
            <li>
                <p>
                  <code>instance-id</code> - The ID of the instance.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The token to use to retrieve the next page of results. This value is <code>null</code>
            when there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the credit option for CPU usage of an instance.</p>")
    @as("InstanceCreditSpecifications")
    instanceCreditSpecifications: option<instanceCreditSpecificationList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeInstanceCreditSpecificationsCommand"
  let make = (~nextToken=?, ~maxResults=?, ~instanceIds=?, ~filters=?, ~dryRun=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      instanceIds: instanceIds,
      filters: filters,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeInstanceAttribute = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: instanceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The instance attribute.</p>
        <p>Note: The <code>enaSupport</code> attribute is not supported at this time.</p>")
    @as("Attribute")
    attribute: instanceAttributeName,
  }
  @ocaml.doc("<p>Describes an instance attribute.</p>")
  type response = {
    @ocaml.doc("<p>The user data.</p>") @as("UserData") userData: option<attributeValue>,
    @ocaml.doc("<p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface
            is enabled.</p>")
    @as("SriovNetSupport")
    sriovNetSupport: option<attributeValue>,
    @ocaml.doc("<p>Enable or disable source/destination checks, which ensure that the instance is either
            the source or the destination of any traffic that it receives. If the value is
                <code>true</code>, source/destination checks are enabled; otherwise, they are
            disabled. The default value is <code>true</code>. You must disable source/destination
            checks if the instance runs services such as network address translation, routing, or
            firewalls.</p>")
    @as("SourceDestCheck")
    sourceDestCheck: option<attributeBooleanValue>,
    @ocaml.doc("<p>The device name of the root device volume (for example,
            <code>/dev/sda1</code>).</p>")
    @as("RootDeviceName")
    rootDeviceName: option<attributeValue>,
    @ocaml.doc("<p>The RAM disk ID.</p>") @as("RamdiskId") ramdiskId: option<attributeValue>,
    @ocaml.doc("<p>A list of product codes.</p>") @as("ProductCodes")
    productCodes: option<productCodeList>,
    @ocaml.doc("<p>The kernel ID.</p>") @as("KernelId") kernelId: option<attributeValue>,
    @ocaml.doc("<p>The instance type.</p>") @as("InstanceType")
    instanceType: option<attributeValue>,
    @ocaml.doc("<p>Indicates whether an instance stops or terminates when you initiate shutdown from the
            instance (using the operating system command for system shutdown).</p>")
    @as("InstanceInitiatedShutdownBehavior")
    instanceInitiatedShutdownBehavior: option<attributeValue>,
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: option<string_>,
    @ocaml.doc("<p>Indicates whether the instance is optimized for Amazon EBS I/O.</p>")
    @as("EbsOptimized")
    ebsOptimized: option<attributeBooleanValue>,
    @ocaml.doc("<p>To enable the instance for Amazon Web Services Nitro Enclaves, set this parameter to
                <code>true</code>; otherwise, set it to <code>false</code>.</p>")
    @as("EnclaveOptions")
    enclaveOptions: option<enclaveOptions>,
    @ocaml.doc("<p>Indicates whether enhanced networking with ENA is enabled.</p>")
    @as("EnaSupport")
    enaSupport: option<attributeBooleanValue>,
    @ocaml.doc("<p>If the value is <code>true</code>, you can't terminate the instance through the Amazon
            EC2 console, CLI, or API; otherwise, you can.</p>")
    @as("DisableApiTermination")
    disableApiTermination: option<attributeBooleanValue>,
    @ocaml.doc("<p>The block device mapping of the instance.</p>") @as("BlockDeviceMappings")
    blockDeviceMappings: option<instanceBlockDeviceMappingList>,
    @ocaml.doc("<p>The security groups associated with the instance.</p>") @as("Groups")
    groups: option<groupIdentifierList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeInstanceAttributeCommand"
  let make = (~instanceId, ~attribute, ~dryRun=?, ()) =>
    new({instanceId: instanceId, dryRun: dryRun, attribute: attribute})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeImageAttribute = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeImageAttribute.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the AMI.</p>") @as("ImageId") imageId: imageId,
    @ocaml.doc("<p>The AMI attribute.</p>
   	     <p>
            <b>Note</b>: The <code>blockDeviceMapping</code> attribute is deprecated. 
   	    Using this attribute returns the <code>Client.AuthFailure</code> error. To get information about 
   	    the block device mappings for an AMI, use the <a>DescribeImages</a> action.</p>")
    @as("Attribute")
    attribute: imageAttributeName,
  }
  @ocaml.doc("<p>Describes an image attribute.</p>")
  type response = {
    @ocaml.doc("<p>The date and time, in <a href=\"http://www.iso.org/iso/iso8601\">ISO 8601 date-time
        format</a>, when the AMI was last used to launch an EC2 instance. When the AMI is used,
      there is a 24-hour delay before that usage is reported.</p>
         <note>
            <p>
               <code>lastLaunchedTime</code> data is available starting April 2017.</p>
         </note>")
    @as("LastLaunchedTime")
    lastLaunchedTime: option<attributeValue>,
    @ocaml.doc("<p>The boot mode.</p>") @as("BootMode") bootMode: option<attributeValue>,
    @ocaml.doc(
      "<p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>"
    )
    @as("SriovNetSupport")
    sriovNetSupport: option<attributeValue>,
    @ocaml.doc("<p>The RAM disk ID.</p>") @as("RamdiskId") ramdiskId: option<attributeValue>,
    @ocaml.doc("<p>The kernel ID.</p>") @as("KernelId") kernelId: option<attributeValue>,
    @ocaml.doc("<p>A description for the AMI.</p>") @as("Description")
    description: option<attributeValue>,
    @ocaml.doc("<p>The product codes.</p>") @as("ProductCodes")
    productCodes: option<productCodeList>,
    @ocaml.doc("<p>The launch permissions.</p>") @as("LaunchPermissions")
    launchPermissions: option<launchPermissionList>,
    @ocaml.doc("<p>The ID of the AMI.</p>") @as("ImageId") imageId: option<string_>,
    @ocaml.doc("<p>The block device mapping entries.</p>") @as("BlockDeviceMappings")
    blockDeviceMappings: option<blockDeviceMappingList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeImageAttributeCommand"
  let make = (~imageId, ~attribute, ~dryRun=?, ()) =>
    new({dryRun: dryRun, imageId: imageId, attribute: attribute})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeIamInstanceProfileAssociations = {
  type t
  type request = {
    @ocaml.doc("<p>The token to request the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. To retrieve the remaining
            results, make another call with the returned <code>NextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<describeIamInstanceProfileAssociationsMaxResults>,
    @ocaml.doc("<p>The filters.</p>
        <ul>
            <li>
               <p>
                  <code>instance-id</code> - The ID of the instance.</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The state of the association (<code>associating</code> |
                <code>associated</code> | <code>disassociating</code>).</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IAM instance profile associations.</p>") @as("AssociationIds")
    associationIds: option<associationIdList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Information about the IAM instance profile associations.</p>")
    @as("IamInstanceProfileAssociations")
    iamInstanceProfileAssociations: option<iamInstanceProfileAssociationSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeIamInstanceProfileAssociationsCommand"
  let make = (~nextToken=?, ~maxResults=?, ~filters=?, ~associationIds=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      associationIds: associationIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeHostReservationOfferings = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the reservation offering.</p>") @as("OfferingId")
    offeringId: option<offeringId>,
    @ocaml.doc("<p>The token to use to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>This is the minimum duration of the reservation you'd like to purchase, specified
            in seconds. Reservations are available in one-year and three-year terms. The number of
            seconds specified must be the number of seconds in a year (365x24x60x60) times one of
            the supported durations (1 or 3). For example, specify 31536000 for one year.</p>")
    @as("MinDuration")
    minDuration: option<integer_>,
    @ocaml.doc(
      "<p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p>"
    )
    @as("MaxResults")
    maxResults: option<describeHostReservationsMaxResults>,
    @ocaml.doc("<p>This is the maximum duration of the reservation to purchase, specified in seconds.
            Reservations are available in one-year and three-year terms. The number of seconds
            specified must be the number of seconds in a year (365x24x60x60) times one of the
            supported durations (1 or 3). For example, specify 94608000 for three years.</p>")
    @as("MaxDuration")
    maxDuration: option<integer_>,
    @ocaml.doc("<p>The filters.</p>
        <ul>
            <li>
                <p>
                    <code>instance-family</code> - The instance family of the offering (for example,
                        <code>m4</code>).</p>
            </li>
            <li>
                <p>
                    <code>payment-option</code> - The payment option (<code>NoUpfront</code> |
                        <code>PartialUpfront</code> | <code>AllUpfront</code>).</p>
            </li>
         </ul>")
    @as("Filter")
    filter: option<filterList>,
  }
  type response = {
    @ocaml.doc("<p>Information about the offerings.</p>") @as("OfferingSet")
    offeringSet: option<hostOfferingSet>,
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeHostReservationOfferingsCommand"
  let make = (
    ~offeringId=?,
    ~nextToken=?,
    ~minDuration=?,
    ~maxResults=?,
    ~maxDuration=?,
    ~filter=?,
    (),
  ) =>
    new({
      offeringId: offeringId,
      nextToken: nextToken,
      minDuration: minDuration,
      maxResults: maxResults,
      maxDuration: maxDuration,
      filter: filter,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeFpgaImageAttribute = {
  type t
  type request = {
    @ocaml.doc("<p>The AFI attribute.</p>") @as("Attribute") attribute: fpgaImageAttributeName,
    @ocaml.doc("<p>The ID of the AFI.</p>") @as("FpgaImageId") fpgaImageId: fpgaImageId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the attribute.</p>") @as("FpgaImageAttribute")
    fpgaImageAttribute: option<fpgaImageAttribute>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeFpgaImageAttributeCommand"
  let make = (~attribute, ~fpgaImageId, ~dryRun=?, ()) =>
    new({attribute: attribute, fpgaImageId: fpgaImageId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeFleetInstances = {
  type t
  type request = {
    @ocaml.doc("<p>The filters.</p>
         <ul>
            <li>
               <p>
                  <code>instance-type</code> - The instance type.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The ID of the EC2 Fleet.</p>") @as("FleetId") fleetId: fleetId,
    @ocaml.doc("<p>The token for the next set of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. Specify a value between 1 and
         1000. The default value is 1000. To retrieve the remaining results, make another call with
         the returned <code>NextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The ID of the EC2 Fleet.</p>") @as("FleetId") fleetId: option<fleetId>,
    @ocaml.doc("<p>The token for the next set of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The running instances. This list is refreshed periodically and might be out of
         date.</p>")
    @as("ActiveInstances")
    activeInstances: option<activeInstanceSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeFleetInstancesCommand"
  let make = (~fleetId, ~filters=?, ~nextToken=?, ~maxResults=?, ~dryRun=?, ()) =>
    new({
      filters: filters,
      fleetId: fleetId,
      nextToken: nextToken,
      maxResults: maxResults,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeFleetHistory = {
  type t
  type request = {
    @ocaml.doc("<p>The start date and time for the events, in UTC format (for example,
            <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>")
    @as("StartTime")
    startTime: dateTime,
    @ocaml.doc("<p>The ID of the EC2 Fleet.</p>") @as("FleetId") fleetId: fleetId,
    @ocaml.doc("<p>The token for the next set of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. Specify a value between 1 and
         1000. The default value is 1000. To retrieve the remaining results, make another call with
         the returned <code>NextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>The type of events to describe. By default, all events are described.</p>")
    @as("EventType")
    eventType: option<fleetEventType>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The start date and time for the events, in UTC format (for example,
            <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>")
    @as("StartTime")
    startTime: option<dateTime>,
    @ocaml.doc("<p>The ID of the EC Fleet.</p>") @as("FleetId") fleetId: option<fleetId>,
    @ocaml.doc("<p>The token for the next set of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The last date and time for the events, in UTC format (for example,
            <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
         All records up to this time were retrieved.</p>
         <p>If <code>nextToken</code> indicates that there are more results, this value is not
         present.</p>")
    @as("LastEvaluatedTime")
    lastEvaluatedTime: option<dateTime>,
    @ocaml.doc("<p>Information about the events in the history of the EC2 Fleet.</p>")
    @as("HistoryRecords")
    historyRecords: option<historyRecordSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeFleetHistoryCommand"
  let make = (~startTime, ~fleetId, ~nextToken=?, ~maxResults=?, ~eventType=?, ~dryRun=?, ()) =>
    new({
      startTime: startTime,
      fleetId: fleetId,
      nextToken: nextToken,
      maxResults: maxResults,
      eventType: eventType,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeFastSnapshotRestores = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<describeFastSnapshotRestoresMaxResults>,
    @ocaml.doc("<p>The filters. The possible values are:</p>
         <ul>
            <li>
               <p>
                  <code>availability-zone</code>: The Availability Zone of the snapshot.</p>
            </li>
            <li>
               <p>
                  <code>owner-id</code>: The ID of the Amazon Web Services account that enabled fast snapshot restore on the snapshot.</p>
            </li>
            <li>
               <p>
                  <code>snapshot-id</code>: The ID of the snapshot.</p>
            </li>
            <li>
               <p>
                  <code>state</code>: The state of fast snapshot restores for the snapshot 
         (<code>enabling</code> | 
          <code>optimizing</code> | 
          <code>enabled</code> | 
          <code>disabling</code> | 
          <code>disabled</code>).</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Information about the state of fast snapshot restores.</p>")
    @as("FastSnapshotRestores")
    fastSnapshotRestores: option<describeFastSnapshotRestoreSuccessSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeFastSnapshotRestoresCommand"
  let make = (~dryRun=?, ~nextToken=?, ~maxResults=?, ~filters=?, ()) =>
    new({dryRun: dryRun, nextToken: nextToken, maxResults: maxResults, filters: filters})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeFastLaunchImages = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next set of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. To retrieve the remaining results, 
			make another request with the returned NextToken value. If this parameter is not specified, 
			then all results are returned.</p>")
    @as("MaxResults")
    maxResults: option<describeFastLaunchImagesRequestMaxResults>,
    @ocaml.doc("<p>Use the following filters to streamline results.</p>
		       <ul>
            <li>
				           <p>
                  <code>resource-type</code> - The resource type for pre-provisioning.</p>
			         </li>
            <li>
				           <p>
                  <code>launch-template</code> - The launch template that is associated with the pre-provisioned Windows AMI.</p>
			         </li>
            <li>
				           <p>
                  <code>owner-id</code> - The owner ID for the pre-provisioning resource.</p>
			         </li>
            <li>
				           <p>
                  <code>state</code> - The current state of fast launching for the Windows AMI.</p>
			         </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Details for one or more Windows AMI image IDs.</p>") @as("ImageIds")
    imageIds: option<fastLaunchImageIdList>,
  }
  type response = {
    @ocaml.doc("<p>The token to use for the next set of results. This value is null when there are 
			no more results to return.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A collection of details about the fast-launch enabled Windows images that meet 
			the requested criteria.</p>")
    @as("FastLaunchImages")
    fastLaunchImages: option<describeFastLaunchImagesSuccessSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeFastLaunchImagesCommand"
  let make = (~dryRun=?, ~nextToken=?, ~maxResults=?, ~filters=?, ~imageIds=?, ()) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      imageIds: imageIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeClientVpnTargetNetworks = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more filters. Filter names and values are case-sensitive.</p>
	        <ul>
            <li>
               <p>
                  <code>association-id</code> - The ID of the association.</p>
            </li>
            <li>
               <p>
                  <code>target-network-id</code> - The ID of the subnet specified as the target network.</p>
            </li>
            <li>
               <p>
                  <code>vpc-id</code> - The ID of the VPC in which the target network is located.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The token to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</p>"
    )
    @as("MaxResults")
    maxResults: option<describeClientVpnTargetNetworksMaxResults>,
    @ocaml.doc("<p>The IDs of the target network associations.</p>") @as("AssociationIds")
    associationIds: option<valueStringList>,
    @ocaml.doc("<p>The ID of the Client VPN endpoint.</p>") @as("ClientVpnEndpointId")
    clientVpnEndpointId: clientVpnEndpointId,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Information about the associated target networks.</p>")
    @as("ClientVpnTargetNetworks")
    clientVpnTargetNetworks: option<targetNetworkSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeClientVpnTargetNetworksCommand"
  let make = (
    ~clientVpnEndpointId,
    ~dryRun=?,
    ~filters=?,
    ~nextToken=?,
    ~maxResults=?,
    ~associationIds=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      filters: filters,
      nextToken: nextToken,
      maxResults: maxResults,
      associationIds: associationIds,
      clientVpnEndpointId: clientVpnEndpointId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeClientVpnRoutes = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</p>"
    )
    @as("MaxResults")
    maxResults: option<describeClientVpnRoutesMaxResults>,
    @ocaml.doc("<p>One or more filters. Filter names and values are case-sensitive.</p>
	        <ul>
            <li>
               <p>
                  <code>destination-cidr</code> - The CIDR of the route destination.</p>
            </li>
            <li>
               <p>
                  <code>origin</code> - How the route was associated with the Client VPN endpoint (<code>associate</code> | <code>add-route</code>).</p>
            </li>
            <li>
               <p>
                  <code>target-subnet</code> - The ID of the subnet through which traffic is routed.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The ID of the Client VPN endpoint.</p>") @as("ClientVpnEndpointId")
    clientVpnEndpointId: clientVpnEndpointId,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Information about the Client VPN endpoint routes.</p>") @as("Routes")
    routes: option<clientVpnRouteSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeClientVpnRoutesCommand"
  let make = (~clientVpnEndpointId, ~dryRun=?, ~nextToken=?, ~maxResults=?, ~filters=?, ()) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      clientVpnEndpointId: clientVpnEndpointId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeClientVpnConnections = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</p>"
    )
    @as("MaxResults")
    maxResults: option<describeClientVpnConnectionsMaxResults>,
    @ocaml.doc("<p>The token to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>One or more filters. Filter names and values are case-sensitive.</p>
	        <ul>
            <li>
               <p>
                  <code>connection-id</code> - The ID of the connection.</p>
            </li>
            <li>
               <p>
                  <code>username</code> - For Active Directory client authentication, the user name of the
                    client who established the client connection.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The ID of the Client VPN endpoint.</p>") @as("ClientVpnEndpointId")
    clientVpnEndpointId: clientVpnEndpointId,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Information about the active and terminated client connections.</p>")
    @as("Connections")
    connections: option<clientVpnConnectionSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeClientVpnConnectionsCommand"
  let make = (~clientVpnEndpointId, ~dryRun=?, ~maxResults=?, ~nextToken=?, ~filters=?, ()) =>
    new({
      dryRun: dryRun,
      maxResults: maxResults,
      nextToken: nextToken,
      filters: filters,
      clientVpnEndpointId: clientVpnEndpointId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeClientVpnAuthorizationRules = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</p>"
    )
    @as("MaxResults")
    maxResults: option<describeClientVpnAuthorizationRulesMaxResults>,
    @ocaml.doc("<p>One or more filters. Filter names and values are case-sensitive.</p>
	        <ul>
            <li>
               <p>
                  <code>description</code> - The description of the authorization rule.</p>
            </li>
            <li>
               <p>
                  <code>destination-cidr</code> - The CIDR of the network to which the authorization rule
                    applies.</p>
            </li>
            <li>
               <p>
                  <code>group-id</code> - The ID of the Active Directory group to which the authorization rule grants access.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The token to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Client VPN endpoint.</p>") @as("ClientVpnEndpointId")
    clientVpnEndpointId: clientVpnEndpointId,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Information about the authorization rules.</p>") @as("AuthorizationRules")
    authorizationRules: option<authorizationRuleSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeClientVpnAuthorizationRulesCommand"
  let make = (~clientVpnEndpointId, ~maxResults=?, ~filters=?, ~nextToken=?, ~dryRun=?, ()) =>
    new({
      maxResults: maxResults,
      filters: filters,
      nextToken: nextToken,
      dryRun: dryRun,
      clientVpnEndpointId: clientVpnEndpointId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeAddressesAttribute = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>"
    )
    @as("MaxResults")
    maxResults: option<addressMaxResults>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The attribute of the IP address.</p>") @as("Attribute")
    attribute: option<addressAttributeName>,
    @ocaml.doc("<p>[EC2-VPC] The allocation IDs.</p>") @as("AllocationIds")
    allocationIds: option<allocationIds>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Information about the IP addresses.</p>") @as("Addresses")
    addresses: option<addressSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeAddressesAttributeCommand"
  let make = (~dryRun=?, ~maxResults=?, ~nextToken=?, ~attribute=?, ~allocationIds=?, ()) =>
    new({
      dryRun: dryRun,
      maxResults: maxResults,
      nextToken: nextToken,
      attribute: attribute,
      allocationIds: allocationIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteVpcEndpoints = {
  type t
  @ocaml.doc("<p>Contains the parameters for DeleteVpcEndpoints.</p>")
  type request = {
    @ocaml.doc("<p>One or more VPC endpoint IDs.</p>") @as("VpcEndpointIds")
    vpcEndpointIds: vpcEndpointIdList,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  @ocaml.doc("<p>Contains the output of DeleteVpcEndpoints.</p>")
  type response = {
    @ocaml.doc("<p>Information about the VPC endpoints that were not successfully deleted.</p>")
    @as("Unsuccessful")
    unsuccessful: option<unsuccessfulItemSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteVpcEndpointsCommand"
  let make = (~vpcEndpointIds, ~dryRun=?, ()) =>
    new({vpcEndpointIds: vpcEndpointIds, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteVpcEndpointServiceConfigurations = {
  type t
  type request = {
    @ocaml.doc("<p>The IDs of one or more services.</p>") @as("ServiceIds")
    serviceIds: vpcEndpointServiceIdList,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the service configurations that were not deleted, if
            applicable.</p>")
    @as("Unsuccessful")
    unsuccessful: option<unsuccessfulItemSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteVpcEndpointServiceConfigurationsCommand"
  let make = (~serviceIds, ~dryRun=?, ()) => new({serviceIds: serviceIds, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteVpcEndpointConnectionNotifications = {
  type t
  type request = {
    @ocaml.doc("<p>One or more notification IDs.</p>") @as("ConnectionNotificationIds")
    connectionNotificationIds: connectionNotificationIdsList,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the notifications that could not be deleted
            successfully.</p>")
    @as("Unsuccessful")
    unsuccessful: option<unsuccessfulItemSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteVpcEndpointConnectionNotificationsCommand"
  let make = (~connectionNotificationIds, ~dryRun=?, ()) =>
    new({connectionNotificationIds: connectionNotificationIds, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteTransitGatewayVpcAttachment = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: transitGatewayAttachmentId,
  }
  type response = {
    @ocaml.doc("<p>Information about the deleted VPC attachment.</p>")
    @as("TransitGatewayVpcAttachment")
    transitGatewayVpcAttachment: option<transitGatewayVpcAttachment>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteTransitGatewayVpcAttachmentCommand"
  let make = (~transitGatewayAttachmentId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, transitGatewayAttachmentId: transitGatewayAttachmentId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteTransitGatewayRouteTable = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the transit gateway route table.</p>")
    @as("TransitGatewayRouteTableId")
    transitGatewayRouteTableId: transitGatewayRouteTableId,
  }
  type response = {
    @ocaml.doc("<p>Information about the deleted transit gateway route table.</p>")
    @as("TransitGatewayRouteTable")
    transitGatewayRouteTable: option<transitGatewayRouteTable>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteTransitGatewayRouteTableCommand"
  let make = (~transitGatewayRouteTableId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, transitGatewayRouteTableId: transitGatewayRouteTableId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteTransitGatewayRoute = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The CIDR range for the route. This must match the CIDR for the route exactly.</p>"
    )
    @as("DestinationCidrBlock")
    destinationCidrBlock: string_,
    @ocaml.doc("<p>The ID of the transit gateway route table.</p>")
    @as("TransitGatewayRouteTableId")
    transitGatewayRouteTableId: transitGatewayRouteTableId,
  }
  type response = {
    @ocaml.doc("<p>Information about the route.</p>") @as("Route")
    route: option<transitGatewayRoute>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteTransitGatewayRouteCommand"
  let make = (~destinationCidrBlock, ~transitGatewayRouteTableId, ~dryRun=?, ()) =>
    new({
      dryRun: dryRun,
      destinationCidrBlock: destinationCidrBlock,
      transitGatewayRouteTableId: transitGatewayRouteTableId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteTransitGatewayPeeringAttachment = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the transit gateway peering attachment.</p>")
    @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: transitGatewayAttachmentId,
  }
  type response = {
    @ocaml.doc("<p>The transit gateway peering attachment.</p>")
    @as("TransitGatewayPeeringAttachment")
    transitGatewayPeeringAttachment: option<transitGatewayPeeringAttachment>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteTransitGatewayPeeringAttachmentCommand"
  let make = (~transitGatewayAttachmentId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, transitGatewayAttachmentId: transitGatewayAttachmentId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteTransitGatewayMulticastDomain = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the transit gateway multicast domain.</p>")
    @as("TransitGatewayMulticastDomainId")
    transitGatewayMulticastDomainId: transitGatewayMulticastDomainId,
  }
  type response = {
    @ocaml.doc("<p>Information about the deleted transit gateway multicast domain.</p>")
    @as("TransitGatewayMulticastDomain")
    transitGatewayMulticastDomain: option<transitGatewayMulticastDomain>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteTransitGatewayMulticastDomainCommand"
  let make = (~transitGatewayMulticastDomainId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, transitGatewayMulticastDomainId: transitGatewayMulticastDomainId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteTransitGatewayConnect = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Connect attachment.</p>") @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: transitGatewayAttachmentId,
  }
  type response = {
    @ocaml.doc("<p>Information about the deleted Connect attachment.</p>")
    @as("TransitGatewayConnect")
    transitGatewayConnect: option<transitGatewayConnect>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteTransitGatewayConnectCommand"
  let make = (~transitGatewayAttachmentId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, transitGatewayAttachmentId: transitGatewayAttachmentId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteTransitGateway = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the transit gateway.</p>") @as("TransitGatewayId")
    transitGatewayId: transitGatewayId,
  }
  type response = {
    @ocaml.doc("<p>Information about the deleted transit gateway.</p>") @as("TransitGateway")
    transitGateway: option<transitGateway>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteTransitGatewayCommand"
  let make = (~transitGatewayId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, transitGatewayId: transitGatewayId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteSubnetCidrReservation = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the subnet CIDR reservation.</p>") @as("SubnetCidrReservationId")
    subnetCidrReservationId: subnetCidrReservationId,
  }
  type response = {
    @ocaml.doc("<p>Information about the deleted subnet CIDR reservation.</p>")
    @as("DeletedSubnetCidrReservation")
    deletedSubnetCidrReservation: option<subnetCidrReservation>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteSubnetCidrReservationCommand"
  let make = (~subnetCidrReservationId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, subnetCidrReservationId: subnetCidrReservationId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteQueuedReservedInstances = {
  type t
  type request = {
    @ocaml.doc("<p>The IDs of the Reserved Instances.</p>") @as("ReservedInstancesIds")
    reservedInstancesIds: deleteQueuedReservedInstancesIdList,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
      and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
      Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the queued purchases that could not be deleted.</p>")
    @as("FailedQueuedPurchaseDeletions")
    failedQueuedPurchaseDeletions: option<failedQueuedPurchaseDeletionSet>,
    @ocaml.doc("<p>Information about the queued purchases that were successfully deleted.</p>")
    @as("SuccessfulQueuedPurchaseDeletions")
    successfulQueuedPurchaseDeletions: option<successfulQueuedPurchaseDeletionSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteQueuedReservedInstancesCommand"
  let make = (~reservedInstancesIds, ~dryRun=?, ()) =>
    new({reservedInstancesIds: reservedInstancesIds, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteManagedPrefixList = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the prefix list.</p>") @as("PrefixListId")
    prefixListId: prefixListResourceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the prefix list.</p>") @as("PrefixList")
    prefixList: option<managedPrefixList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteManagedPrefixListCommand"
  let make = (~prefixListId, ~dryRun=?, ()) => new({prefixListId: prefixListId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteLocalGatewayRouteTableVpcAssociation = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the association.</p>") @as("LocalGatewayRouteTableVpcAssociationId")
    localGatewayRouteTableVpcAssociationId: localGatewayRouteTableVpcAssociationId,
  }
  type response = {
    @ocaml.doc("<p>Information about the association.</p>")
    @as("LocalGatewayRouteTableVpcAssociation")
    localGatewayRouteTableVpcAssociation: option<localGatewayRouteTableVpcAssociation>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteLocalGatewayRouteTableVpcAssociationCommand"
  let make = (~localGatewayRouteTableVpcAssociationId, ~dryRun=?, ()) =>
    new({
      dryRun: dryRun,
      localGatewayRouteTableVpcAssociationId: localGatewayRouteTableVpcAssociationId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteLaunchTemplateVersions = {
  type t
  type request = {
    @ocaml.doc("<p>The version numbers of one or more launch template versions to delete.</p>")
    @as("Versions")
    versions: versionStringList,
    @ocaml.doc("<p>The name of the launch template. You must specify either the launch template ID or
            launch template name in the request.</p>")
    @as("LaunchTemplateName")
    launchTemplateName: option<launchTemplateName>,
    @ocaml.doc("<p>The ID of the launch template. You must specify either the launch template ID or
            launch template name in the request.</p>")
    @as("LaunchTemplateId")
    launchTemplateId: option<launchTemplateId>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the launch template versions that could not be deleted.</p>")
    @as("UnsuccessfullyDeletedLaunchTemplateVersions")
    unsuccessfullyDeletedLaunchTemplateVersions: option<
      deleteLaunchTemplateVersionsResponseErrorSet,
    >,
    @ocaml.doc(
      "<p>Information about the launch template versions that were successfully deleted.</p>"
    )
    @as("SuccessfullyDeletedLaunchTemplateVersions")
    successfullyDeletedLaunchTemplateVersions: option<
      deleteLaunchTemplateVersionsResponseSuccessSet,
    >,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteLaunchTemplateVersionsCommand"
  let make = (~versions, ~launchTemplateName=?, ~launchTemplateId=?, ~dryRun=?, ()) =>
    new({
      versions: versions,
      launchTemplateName: launchTemplateName,
      launchTemplateId: launchTemplateId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteLaunchTemplate = {
  type t
  type request = {
    @ocaml.doc("<p>The name of the launch template. You must specify either the launch template ID or
            launch template name in the request.</p>")
    @as("LaunchTemplateName")
    launchTemplateName: option<launchTemplateName>,
    @ocaml.doc("<p>The ID of the launch template. You must specify either the launch template ID or
            launch template name in the request.</p>")
    @as("LaunchTemplateId")
    launchTemplateId: option<launchTemplateId>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the launch template.</p>") @as("LaunchTemplate")
    launchTemplate: option<launchTemplate>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteLaunchTemplateCommand"
  let make = (~launchTemplateName=?, ~launchTemplateId=?, ~dryRun=?, ()) =>
    new({
      launchTemplateName: launchTemplateName,
      launchTemplateId: launchTemplateId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteIpamScope = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the scope to delete.</p>") @as("IpamScopeId") ipamScopeId: ipamScopeId,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the results of the deletion.</p>") @as("IpamScope")
    ipamScope: option<ipamScope>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteIpamScopeCommand"
  let make = (~ipamScopeId, ~dryRun=?, ()) => new({ipamScopeId: ipamScopeId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteIpamPool = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the pool to delete.</p>") @as("IpamPoolId") ipamPoolId: ipamPoolId,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the results of the deletion.</p>") @as("IpamPool")
    ipamPool: option<ipamPool>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteIpamPoolCommand"
  let make = (~ipamPoolId, ~dryRun=?, ()) => new({ipamPoolId: ipamPoolId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteIpam = {
  type t
  type request = {
    @ocaml.doc("<p>Enables you to quickly delete an IPAM, private scopes, pools in private scopes, and
         any allocations in the pools in private scopes. You cannot delete the IPAM with this option if there is a pool in your public scope. If you use this option, IPAM does the following:</p>
         <ul>
            <li>
               <p>Deallocates any CIDRs allocated to VPC resources (such as VPCs) in pools in private scopes.</p>
               <note>
                  <p>No VPC resources are deleted as a result of enabling this option. The CIDR associated with the resource will no longer be allocated from an IPAM pool, but the CIDR itself will remain unchanged.</p>
               </note>
            </li>
            <li>
               <p>Deprovisions all IPv4 CIDRs provisioned to IPAM pools in private scopes.</p>
            </li>
            <li>
               <p>Deletes all IPAM pools in private scopes.</p>
            </li>
            <li>
               <p>Deletes all non-default private scopes in the IPAM.</p>
            </li>
            <li>
               <p>Deletes the default public and private scopes and the IPAM.</p>
            </li>
         </ul>")
    @as("Cascade")
    cascade: option<boolean_>,
    @ocaml.doc("<p>The ID of the IPAM to delete.</p>") @as("IpamId") ipamId: ipamId,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the results of the deletion.</p>") @as("Ipam")
    ipam: option<ipam>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteIpamCommand"
  let make = (~ipamId, ~cascade=?, ~dryRun=?, ()) =>
    new({cascade: cascade, ipamId: ipamId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteFlowLogs = {
  type t
  type request = {
    @ocaml.doc("<p>One or more flow log IDs.</p>
        <p>Constraint: Maximum of 1000 flow log IDs.</p>")
    @as("FlowLogIds")
    flowLogIds: flowLogIdList,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the flow logs that could not be deleted successfully.</p>")
    @as("Unsuccessful")
    unsuccessful: option<unsuccessfulItemSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteFlowLogsCommand"
  let make = (~flowLogIds, ~dryRun=?, ()) => new({flowLogIds: flowLogIds, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteFleets = {
  type t
  type request = {
    @ocaml.doc("<p>Indicates whether to terminate the instances when the EC2 Fleet is deleted. The default is to
         terminate the instances.</p>
         <p>To let the instances continue to run after the EC2 Fleet is deleted, specify
            <code>NoTerminateInstances</code>. Supported only for fleets of type
            <code>maintain</code> and <code>request</code>.</p>
         <p>For <code>instant</code> fleets, you cannot specify <code>NoTerminateInstances</code>. A
         deleted <code>instant</code> fleet with running instances is not supported.</p>")
    @as("TerminateInstances")
    terminateInstances: boolean_,
    @ocaml.doc("<p>The IDs of the EC2 Fleets.</p>") @as("FleetIds") fleetIds: fleetIdSet,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the EC2 Fleets that are not successfully deleted.</p>")
    @as("UnsuccessfulFleetDeletions")
    unsuccessfulFleetDeletions: option<deleteFleetErrorSet>,
    @ocaml.doc("<p>Information about the EC2 Fleets that are successfully deleted.</p>")
    @as("SuccessfulFleetDeletions")
    successfulFleetDeletions: option<deleteFleetSuccessSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteFleetsCommand"
  let make = (~terminateInstances, ~fleetIds, ~dryRun=?, ()) =>
    new({terminateInstances: terminateInstances, fleetIds: fleetIds, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteCarrierGateway = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the carrier gateway.</p>") @as("CarrierGatewayId")
    carrierGatewayId: carrierGatewayId,
  }
  type response = {
    @ocaml.doc("<p>Information about the carrier gateway.</p>") @as("CarrierGateway")
    carrierGateway: option<carrierGateway>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DeleteCarrierGatewayCommand"
  let make = (~carrierGatewayId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, carrierGatewayId: carrierGatewayId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateTransitGatewayRoute = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Indicates whether to drop traffic that matches this route.</p>") @as("Blackhole")
    blackhole: option<boolean_>,
    @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: option<transitGatewayAttachmentId>,
    @ocaml.doc("<p>The ID of the transit gateway route table.</p>")
    @as("TransitGatewayRouteTableId")
    transitGatewayRouteTableId: transitGatewayRouteTableId,
    @ocaml.doc("<p>The CIDR range used for destination matches. Routing decisions are based on the
         most specific match.</p>")
    @as("DestinationCidrBlock")
    destinationCidrBlock: string_,
  }
  type response = {
    @ocaml.doc("<p>Information about the route.</p>") @as("Route")
    route: option<transitGatewayRoute>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateTransitGatewayRouteCommand"
  let make = (
    ~transitGatewayRouteTableId,
    ~destinationCidrBlock,
    ~dryRun=?,
    ~blackhole=?,
    ~transitGatewayAttachmentId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      blackhole: blackhole,
      transitGatewayAttachmentId: transitGatewayAttachmentId,
      transitGatewayRouteTableId: transitGatewayRouteTableId,
      destinationCidrBlock: destinationCidrBlock,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CancelSpotFleetRequests = {
  type t
  @ocaml.doc("<p>Contains the parameters for CancelSpotFleetRequests.</p>")
  type request = {
    @ocaml.doc("<p>Indicates whether to terminate instances for a Spot Fleet request if it is canceled
            successfully.</p>")
    @as("TerminateInstances")
    terminateInstances: boolean_,
    @ocaml.doc("<p>The IDs of the Spot Fleet requests.</p>") @as("SpotFleetRequestIds")
    spotFleetRequestIds: spotFleetRequestIdList,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  @ocaml.doc("<p>Contains the output of CancelSpotFleetRequests.</p>")
  type response = {
    @ocaml.doc(
      "<p>Information about the Spot Fleet requests that are not successfully canceled.</p>"
    )
    @as("UnsuccessfulFleetRequests")
    unsuccessfulFleetRequests: option<cancelSpotFleetRequestsErrorSet>,
    @ocaml.doc("<p>Information about the Spot Fleet requests that are successfully canceled.</p>")
    @as("SuccessfulFleetRequests")
    successfulFleetRequests: option<cancelSpotFleetRequestsSuccessSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CancelSpotFleetRequestsCommand"
  let make = (~terminateInstances, ~spotFleetRequestIds, ~dryRun=?, ()) =>
    new({
      terminateInstances: terminateInstances,
      spotFleetRequestIds: spotFleetRequestIds,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CancelCapacityReservationFleets = {
  type t
  type request = {
    @ocaml.doc("<p>The IDs of the Capacity Reservation Fleets to cancel.</p>")
    @as("CapacityReservationFleetIds")
    capacityReservationFleetIds: capacityReservationFleetIdSet,
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Information about the Capacity Reservation Fleets that could not be cancelled.</p>"
    )
    @as("FailedFleetCancellations")
    failedFleetCancellations: option<failedCapacityReservationFleetCancellationResultSet>,
    @ocaml.doc(
      "<p>Information about the Capacity Reservation Fleets that were successfully cancelled.</p>"
    )
    @as("SuccessfulFleetCancellations")
    successfulFleetCancellations: option<capacityReservationFleetCancellationStateSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CancelCapacityReservationFleetsCommand"
  let make = (~capacityReservationFleetIds, ~dryRun=?, ()) =>
    new({capacityReservationFleetIds: capacityReservationFleetIds, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CancelBundleTask = {
  type t
  @ocaml.doc("<p>Contains the parameters for CancelBundleTask.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the bundle task.</p>") @as("BundleId") bundleId: bundleId,
  }
  @ocaml.doc("<p>Contains the output of CancelBundleTask.</p>")
  type response = {
    @ocaml.doc("<p>Information about the bundle task.</p>") @as("BundleTask")
    bundleTask: option<bundleTask>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CancelBundleTaskCommand"
  let make = (~bundleId, ~dryRun=?, ()) => new({dryRun: dryRun, bundleId: bundleId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module BundleInstance = {
  type t
  @ocaml.doc("<p>Contains the parameters for BundleInstance.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.</p>"
    )
    @as("Storage")
    storage: storage,
    @ocaml.doc("<p>The ID of the instance to bundle.</p>
         <p>Type: String</p>
         <p>Default: None</p>
         <p>Required: Yes</p>")
    @as("InstanceId")
    instanceId: instanceId,
  }
  @ocaml.doc("<p>Contains the output of BundleInstance.</p>")
  type response = {
    @ocaml.doc("<p>Information about the bundle task.</p>") @as("BundleTask")
    bundleTask: option<bundleTask>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "BundleInstanceCommand"
  let make = (~storage, ~instanceId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, storage: storage, instanceId: instanceId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AssociateTrunkInterface = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to Ensure
                Idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The application key. This applies to the GRE protocol.</p>") @as("GreKey")
    greKey: option<integer_>,
    @ocaml.doc("<p>The ID of the VLAN. This applies to the VLAN protocol.</p>") @as("VlanId")
    vlanId: option<integer_>,
    @ocaml.doc("<p>The ID of the trunk network interface.</p>") @as("TrunkInterfaceId")
    trunkInterfaceId: networkInterfaceId,
    @ocaml.doc("<p>The ID of the branch network interface.</p>") @as("BranchInterfaceId")
    branchInterfaceId: networkInterfaceId,
  }
  type response = {
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to Ensure
                Idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc(
      "<p>Information about the association between the trunk network interface and branch network interface.</p>"
    )
    @as("InterfaceAssociation")
    interfaceAssociation: option<trunkInterfaceAssociation>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "AssociateTrunkInterfaceCommand"
  let make = (
    ~trunkInterfaceId,
    ~branchInterfaceId,
    ~dryRun=?,
    ~clientToken=?,
    ~greKey=?,
    ~vlanId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      clientToken: clientToken,
      greKey: greKey,
      vlanId: vlanId,
      trunkInterfaceId: trunkInterfaceId,
      branchInterfaceId: branchInterfaceId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AssociateTransitGatewayMulticastDomain = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The IDs of the subnets to associate with the transit gateway multicast domain.</p>"
    )
    @as("SubnetIds")
    subnetIds: option<transitGatewaySubnetIdList>,
    @ocaml.doc(
      "<p>The ID of the transit gateway attachment to associate with the transit gateway multicast domain.</p>"
    )
    @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: option<transitGatewayAttachmentId>,
    @ocaml.doc("<p>The ID of the transit gateway multicast domain.</p>")
    @as("TransitGatewayMulticastDomainId")
    transitGatewayMulticastDomainId: option<transitGatewayMulticastDomainId>,
  }
  type response = {
    @ocaml.doc("<p>Information about the transit gateway multicast domain associations.</p>")
    @as("Associations")
    associations: option<transitGatewayMulticastDomainAssociations>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "AssociateTransitGatewayMulticastDomainCommand"
  let make = (
    ~dryRun=?,
    ~subnetIds=?,
    ~transitGatewayAttachmentId=?,
    ~transitGatewayMulticastDomainId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      subnetIds: subnetIds,
      transitGatewayAttachmentId: transitGatewayAttachmentId,
      transitGatewayMulticastDomainId: transitGatewayMulticastDomainId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AcceptVpcEndpointConnections = {
  type t
  type request = {
    @ocaml.doc("<p>The IDs of one or more interface VPC endpoints.</p>") @as("VpcEndpointIds")
    vpcEndpointIds: vpcEndpointIdList,
    @ocaml.doc("<p>The ID of the VPC endpoint service.</p>") @as("ServiceId")
    serviceId: vpcEndpointServiceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the interface endpoints that were not accepted, if
            applicable.</p>")
    @as("Unsuccessful")
    unsuccessful: option<unsuccessfulItemSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "AcceptVpcEndpointConnectionsCommand"
  let make = (~vpcEndpointIds, ~serviceId, ~dryRun=?, ()) =>
    new({vpcEndpointIds: vpcEndpointIds, serviceId: serviceId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AcceptTransitGatewayVpcAttachment = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the attachment.</p>") @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: transitGatewayAttachmentId,
  }
  type response = {
    @ocaml.doc("<p>The VPC attachment.</p>") @as("TransitGatewayVpcAttachment")
    transitGatewayVpcAttachment: option<transitGatewayVpcAttachment>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "AcceptTransitGatewayVpcAttachmentCommand"
  let make = (~transitGatewayAttachmentId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, transitGatewayAttachmentId: transitGatewayAttachmentId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AcceptTransitGatewayPeeringAttachment = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the transit gateway attachment.</p>") @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: transitGatewayAttachmentId,
  }
  type response = {
    @ocaml.doc("<p>The transit gateway peering attachment.</p>")
    @as("TransitGatewayPeeringAttachment")
    transitGatewayPeeringAttachment: option<transitGatewayPeeringAttachment>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "AcceptTransitGatewayPeeringAttachmentCommand"
  let make = (~transitGatewayAttachmentId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, transitGatewayAttachmentId: transitGatewayAttachmentId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AcceptTransitGatewayMulticastDomainAssociations = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The IDs of the subnets to associate with the transit gateway multicast domain.</p>"
    )
    @as("SubnetIds")
    subnetIds: option<valueStringList>,
    @ocaml.doc("<p>The ID of the transit gateway attachment.</p>") @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: option<transitGatewayAttachmentId>,
    @ocaml.doc("<p>The ID of the transit gateway multicast domain.</p>")
    @as("TransitGatewayMulticastDomainId")
    transitGatewayMulticastDomainId: option<transitGatewayMulticastDomainId>,
  }
  type response = {
    @as("Associations") associations: option<transitGatewayMulticastDomainAssociations>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "AcceptTransitGatewayMulticastDomainAssociationsCommand"
  let make = (
    ~dryRun=?,
    ~subnetIds=?,
    ~transitGatewayAttachmentId=?,
    ~transitGatewayMulticastDomainId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      subnetIds: subnetIds,
      transitGatewayAttachmentId: transitGatewayAttachmentId,
      transitGatewayMulticastDomainId: transitGatewayMulticastDomainId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module UpdateSecurityGroupRuleDescriptionsIngress = {
  type t
  type request = {
    @ocaml.doc("<p>[VPC only] The description for the ingress security group rules. You must specify either
            a description or IP permissions.</p>")
    @as("SecurityGroupRuleDescriptions")
    securityGroupRuleDescriptions: option<securityGroupRuleDescriptionList>,
    @ocaml.doc("<p>The IP permissions for the security group rule. You must specify either IP permissions
		    or a description.</p>")
    @as("IpPermissions")
    ipPermissions: option<ipPermissionList>,
    @ocaml.doc("<p>[EC2-Classic, default VPC] The name of the security group. You must specify either the
			security group ID or the security group name in the request.</p>")
    @as("GroupName")
    groupName: option<securityGroupName>,
    @ocaml.doc("<p>The ID of the security group. You must specify either the security group ID or the
			security group name in the request. For security groups in a nondefault VPC, you must
			specify the security group ID.</p>")
    @as("GroupId")
    groupId: option<securityGroupId>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "UpdateSecurityGroupRuleDescriptionsIngressCommand"
  let make = (
    ~securityGroupRuleDescriptions=?,
    ~ipPermissions=?,
    ~groupName=?,
    ~groupId=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      securityGroupRuleDescriptions: securityGroupRuleDescriptions,
      ipPermissions: ipPermissions,
      groupName: groupName,
      groupId: groupId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module UpdateSecurityGroupRuleDescriptionsEgress = {
  type t
  type request = {
    @ocaml.doc("<p>The description for the egress security group rules. You must specify either the
            description or the IP permissions.</p>")
    @as("SecurityGroupRuleDescriptions")
    securityGroupRuleDescriptions: option<securityGroupRuleDescriptionList>,
    @ocaml.doc("<p>The IP permissions for the security group rule. You must specify either the IP permissions
		    or the description.</p>")
    @as("IpPermissions")
    ipPermissions: option<ipPermissionList>,
    @ocaml.doc("<p>[Default VPC] The name of the security group. You must specify either the security group
			ID or the security group name in the request.</p>")
    @as("GroupName")
    groupName: option<securityGroupName>,
    @ocaml.doc("<p>The ID of the security group. You must specify either the security group ID or the
			security group name in the request. For security groups in a nondefault VPC, you must
			specify the security group ID.</p>")
    @as("GroupId")
    groupId: option<securityGroupId>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "UpdateSecurityGroupRuleDescriptionsEgressCommand"
  let make = (
    ~securityGroupRuleDescriptions=?,
    ~ipPermissions=?,
    ~groupName=?,
    ~groupId=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      securityGroupRuleDescriptions: securityGroupRuleDescriptions,
      ipPermissions: ipPermissions,
      groupName: groupName,
      groupId: groupId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module StartNetworkInsightsAccessScopeAnalysis = {
  type t
  type request = {
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, 
   see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: string_,
    @ocaml.doc("<p>The tags to apply.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Network Access Scope.</p>") @as("NetworkInsightsAccessScopeId")
    networkInsightsAccessScopeId: networkInsightsAccessScopeId,
  }
  type response = {
    @ocaml.doc("<p>The Network Access Scope analysis.</p>")
    @as("NetworkInsightsAccessScopeAnalysis")
    networkInsightsAccessScopeAnalysis: option<networkInsightsAccessScopeAnalysis>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "StartNetworkInsightsAccessScopeAnalysisCommand"
  let make = (~clientToken, ~networkInsightsAccessScopeId, ~tagSpecifications=?, ~dryRun=?, ()) =>
    new({
      clientToken: clientToken,
      tagSpecifications: tagSpecifications,
      dryRun: dryRun,
      networkInsightsAccessScopeId: networkInsightsAccessScopeId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module SearchTransitGatewayRoutes = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The maximum number of routes to return.</p>") @as("MaxResults")
    maxResults: option<transitGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
         <ul>
            <li>
               <p>
                  <code>attachment.transit-gateway-attachment-id</code>- The id of the transit gateway attachment.</p>
            </li>
            <li>
               <p>
                  <code>attachment.resource-id</code> - The resource id of the transit gateway attachment.</p>
            </li>
            <li>
               <p>
                  <code>attachment.resource-type</code> - The attachment resource type. Valid values
                    are <code>vpc</code> | <code>vpn</code> | <code>direct-connect-gateway</code> |
                        <code>peering</code> | <code>connect</code>.</p>
            </li>
            <li>
               <p>
                  <code>prefix-list-id</code> - The ID of the prefix list.</p>
            </li>
            <li>
               <p>
                  <code>route-search.exact-match</code> - The exact match of the specified filter.</p>
            </li>
            <li>
               <p>
                  <code>route-search.longest-prefix-match</code> - The longest prefix that matches the route.</p>
            </li>
            <li>
               <p>
                  <code>route-search.subnet-of-match</code> - The routes with a subnet that match the specified CIDR filter.</p>
            </li>
            <li>
               <p>
                  <code>route-search.supernet-of-match</code> - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The state of the route (<code>active</code> | <code>blackhole</code>).</p>
            </li>
            <li>
               <p>
                  <code>type</code> - The type of route (<code>propagated</code> |
                  <code>static</code>).</p>
            </li>
         </ul>")
    @as("Filters")
    filters: filterList,
    @ocaml.doc("<p>The ID of the transit gateway route table.</p>")
    @as("TransitGatewayRouteTableId")
    transitGatewayRouteTableId: transitGatewayRouteTableId,
  }
  type response = {
    @ocaml.doc("<p>Indicates whether there are additional routes available.</p>")
    @as("AdditionalRoutesAvailable")
    additionalRoutesAvailable: option<boolean_>,
    @ocaml.doc("<p>Information about the routes.</p>") @as("Routes")
    routes: option<transitGatewayRouteList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "SearchTransitGatewayRoutesCommand"
  let make = (~filters, ~transitGatewayRouteTableId, ~dryRun=?, ~maxResults=?, ()) =>
    new({
      dryRun: dryRun,
      maxResults: maxResults,
      filters: filters,
      transitGatewayRouteTableId: transitGatewayRouteTableId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RevokeSecurityGroupIngress = {
  type t
  type request = {
    @ocaml.doc("<p>The IDs of the security group rules.</p>") @as("SecurityGroupRuleIds")
    securityGroupRuleIds: option<securityGroupRuleIdList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, 
        use <code>-1</code> to specify all ICMP codes for the ICMP type.</p>")
    @as("ToPort")
    toPort: option<integer_>,
    @ocaml.doc(
      "<p>[EC2-Classic] The Amazon Web Services account ID of the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.</p>"
    )
    @as("SourceSecurityGroupOwnerId")
    sourceSecurityGroupOwnerId: option<string_>,
    @ocaml.doc(
      "<p>[EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. For EC2-VPC, the source security group must be in the same VPC. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.</p>"
    )
    @as("SourceSecurityGroupName")
    sourceSecurityGroupName: option<string_>,
    @ocaml.doc("<p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>) or number 
        (see <a href=\"http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\">Protocol Numbers</a>). 
        Use <code>-1</code> to specify all.</p>")
    @as("IpProtocol")
    ipProtocol: option<string_>,
    @ocaml.doc(
      "<p>The sets of IP permissions. You can't specify a source security group and a CIDR IP address range in the same set of permissions.</p>"
    )
    @as("IpPermissions")
    ipPermissions: option<ipPermissionList>,
    @ocaml.doc("<p>[EC2-Classic, default VPC] The name of the security group. You must specify either the
           security group ID or the security group name in the request.</p>")
    @as("GroupName")
    groupName: option<securityGroupName>,
    @ocaml.doc("<p>The ID of the security group. You must specify either the security group ID or the
           security group name in the request. For security groups in a nondefault VPC, you must
           specify the security group ID.</p>")
    @as("GroupId")
    groupId: option<securityGroupId>,
    @ocaml.doc("<p>The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, 
        use <code>-1</code> to specify all ICMP types.</p>")
    @as("FromPort")
    fromPort: option<integer_>,
    @ocaml.doc(
      "<p>The CIDR IP address range. You can't specify this parameter when specifying a source security group.</p>"
    )
    @as("CidrIp")
    cidrIp: option<string_>,
  }
  type response = {
    @ocaml.doc("<p>The inbound rules that were unknown to the service. In some cases,
                <code>unknownIpPermissionSet</code> might be in a different format from the request
            parameter. </p>")
    @as("UnknownIpPermissions")
    unknownIpPermissions: option<ipPermissionList>,
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "RevokeSecurityGroupIngressCommand"
  let make = (
    ~securityGroupRuleIds=?,
    ~dryRun=?,
    ~toPort=?,
    ~sourceSecurityGroupOwnerId=?,
    ~sourceSecurityGroupName=?,
    ~ipProtocol=?,
    ~ipPermissions=?,
    ~groupName=?,
    ~groupId=?,
    ~fromPort=?,
    ~cidrIp=?,
    (),
  ) =>
    new({
      securityGroupRuleIds: securityGroupRuleIds,
      dryRun: dryRun,
      toPort: toPort,
      sourceSecurityGroupOwnerId: sourceSecurityGroupOwnerId,
      sourceSecurityGroupName: sourceSecurityGroupName,
      ipProtocol: ipProtocol,
      ipPermissions: ipPermissions,
      groupName: groupName,
      groupId: groupId,
      fromPort: fromPort,
      cidrIp: cidrIp,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RevokeSecurityGroupEgress = {
  type t
  type request = {
    @ocaml.doc("<p>Not supported. Use a set of IP permissions to specify a destination security
            group.</p>")
    @as("SourceSecurityGroupOwnerId")
    sourceSecurityGroupOwnerId: option<string_>,
    @ocaml.doc("<p>Not supported. Use a set of IP permissions to specify a
           destination security group.</p>")
    @as("SourceSecurityGroupName")
    sourceSecurityGroupName: option<string_>,
    @ocaml.doc("<p>Not supported. Use a set of IP permissions to specify the port.</p>")
    @as("ToPort")
    toPort: option<integer_>,
    @ocaml.doc("<p>Not supported. Use a set of IP permissions to specify the protocol name or
            number.</p>")
    @as("IpProtocol")
    ipProtocol: option<string_>,
    @ocaml.doc("<p>Not supported. Use a set of IP permissions to specify the port.</p>")
    @as("FromPort")
    fromPort: option<integer_>,
    @ocaml.doc("<p>Not supported. Use a set of IP permissions to specify the CIDR.</p>")
    @as("CidrIp")
    cidrIp: option<string_>,
    @ocaml.doc("<p>The IDs of the security group rules.</p>") @as("SecurityGroupRuleIds")
    securityGroupRuleIds: option<securityGroupRuleIdList>,
    @ocaml.doc(
      "<p>The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.</p>"
    )
    @as("IpPermissions")
    ipPermissions: option<ipPermissionList>,
    @ocaml.doc("<p>The ID of the security group.</p>") @as("GroupId") groupId: securityGroupId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The outbound rules that were unknown to the service. In some cases,
                <code>unknownIpPermissionSet</code> might be in a different format from the request
            parameter. </p>")
    @as("UnknownIpPermissions")
    unknownIpPermissions: option<ipPermissionList>,
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "RevokeSecurityGroupEgressCommand"
  let make = (
    ~groupId,
    ~sourceSecurityGroupOwnerId=?,
    ~sourceSecurityGroupName=?,
    ~toPort=?,
    ~ipProtocol=?,
    ~fromPort=?,
    ~cidrIp=?,
    ~securityGroupRuleIds=?,
    ~ipPermissions=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      sourceSecurityGroupOwnerId: sourceSecurityGroupOwnerId,
      sourceSecurityGroupName: sourceSecurityGroupName,
      toPort: toPort,
      ipProtocol: ipProtocol,
      fromPort: fromPort,
      cidrIp: cidrIp,
      securityGroupRuleIds: securityGroupRuleIds,
      ipPermissions: ipPermissions,
      groupId: groupId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module PurchaseScheduledInstances = {
  type t
  @ocaml.doc("<p>Contains the parameters for PurchaseScheduledInstances.</p>")
  type request = {
    @ocaml.doc("<p>The purchase requests.</p>") @as("PurchaseRequests")
    purchaseRequests: purchaseRequestSet,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Unique, case-sensitive identifier that ensures the idempotency of the request. 
         For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
  }
  @ocaml.doc("<p>Contains the output of PurchaseScheduledInstances.</p>")
  type response = {
    @ocaml.doc("<p>Information about the Scheduled Instances.</p>") @as("ScheduledInstanceSet")
    scheduledInstanceSet: option<purchasedScheduledInstanceSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "PurchaseScheduledInstancesCommand"
  let make = (~purchaseRequests, ~dryRun=?, ~clientToken=?, ()) =>
    new({purchaseRequests: purchaseRequests, dryRun: dryRun, clientToken: clientToken})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module PurchaseHostReservation = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to apply to the Dedicated Host Reservation during purchase.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The ID of the offering.</p>") @as("OfferingId") offeringId: offeringId,
    @ocaml.doc("<p>The specified limit is checked against the total upfront cost of the reservation
            (calculated as the offering's upfront cost multiplied by the host count). If the total
            upfront cost is greater than the specified price limit, the request fails. This is used
            to ensure that the purchase does not exceed the expected upfront cost of the purchase.
            At this time, the only supported currency is <code>USD</code>. For example, to indicate
            a limit price of USD 100, specify 100.00.</p>")
    @as("LimitPrice")
    limitPrice: option<string_>,
    @ocaml.doc(
      "<p>The IDs of the Dedicated Hosts with which the reservation will be associated.</p>"
    )
    @as("HostIdSet")
    hostIdSet: requestHostIdSet,
    @ocaml.doc("<p>The currency in which the <code>totalUpfrontPrice</code>, <code>LimitPrice</code>,
            and <code>totalHourlyPrice</code> amounts are specified. At this time, the only
            supported currency is <code>USD</code>.</p>")
    @as("CurrencyCode")
    currencyCode: option<currencyCodeValues>,
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
  }
  type response = {
    @ocaml.doc("<p>The total amount charged to your account when you purchase the reservation.</p>")
    @as("TotalUpfrontPrice")
    totalUpfrontPrice: option<string_>,
    @ocaml.doc("<p>The total hourly price of the reservation calculated per hour.</p>")
    @as("TotalHourlyPrice")
    totalHourlyPrice: option<string_>,
    @ocaml.doc("<p>Describes the details of the purchase.</p>") @as("Purchase")
    purchase: option<purchaseSet>,
    @ocaml.doc("<p>The currency in which the <code>totalUpfrontPrice</code> and
                <code>totalHourlyPrice</code> amounts are specified. At this time, the only
            supported currency is <code>USD</code>.</p>")
    @as("CurrencyCode")
    currencyCode: option<currencyCodeValues>,
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "PurchaseHostReservationCommand"
  let make = (
    ~offeringId,
    ~hostIdSet,
    ~tagSpecifications=?,
    ~limitPrice=?,
    ~currencyCode=?,
    ~clientToken=?,
    (),
  ) =>
    new({
      tagSpecifications: tagSpecifications,
      offeringId: offeringId,
      limitPrice: limitPrice,
      hostIdSet: hostIdSet,
      currencyCode: currencyCode,
      clientToken: clientToken,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ProvisionByoipCidr = {
  type t
  type request = {
    @ocaml.doc("<p>Reserved.</p>") @as("MultiRegion") multiRegion: option<boolean_>,
    @ocaml.doc("<p>The tags to apply to the address pool.</p>") @as("PoolTagSpecifications")
    poolTagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>A description for the address range and the address pool.</p>")
    @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>(IPv6 only) Indicate whether the address range will be publicly advertised to the
            internet.</p>
        <p>Default: true</p>")
    @as("PubliclyAdvertisable")
    publiclyAdvertisable: option<boolean_>,
    @ocaml.doc("<p>A signed document that proves that you are authorized to bring the specified IP address 
         range to Amazon using BYOIP.</p>")
    @as("CidrAuthorizationContext")
    cidrAuthorizationContext: option<cidrAuthorizationContext>,
    @ocaml.doc("<p>The public IPv4 or IPv6 address range, in CIDR notation. The most specific IPv4 prefix that you can 
         specify is /24. The most specific IPv6 prefix you can specify is /56. The address range cannot overlap with another address range that you've 
         brought to this or another Region.</p>")
    @as("Cidr")
    cidr: string_,
  }
  type response = {
    @ocaml.doc("<p>Information about the address range.</p>") @as("ByoipCidr")
    byoipCidr: option<byoipCidr>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ProvisionByoipCidrCommand"
  let make = (
    ~cidr,
    ~multiRegion=?,
    ~poolTagSpecifications=?,
    ~dryRun=?,
    ~description=?,
    ~publiclyAdvertisable=?,
    ~cidrAuthorizationContext=?,
    (),
  ) =>
    new({
      multiRegion: multiRegion,
      poolTagSpecifications: poolTagSpecifications,
      dryRun: dryRun,
      description: description,
      publiclyAdvertisable: publiclyAdvertisable,
      cidrAuthorizationContext: cidrAuthorizationContext,
      cidr: cidr,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyTrafficMirrorFilterNetworkServices = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The network service, for example Amazon DNS, that you no longer want to mirror.</p>"
    )
    @as("RemoveNetworkServices")
    removeNetworkServices: option<trafficMirrorNetworkServiceList>,
    @ocaml.doc("<p>The network service, for example Amazon DNS, that you want to mirror.</p>")
    @as("AddNetworkServices")
    addNetworkServices: option<trafficMirrorNetworkServiceList>,
    @ocaml.doc("<p>The ID of the Traffic Mirror filter.</p>") @as("TrafficMirrorFilterId")
    trafficMirrorFilterId: trafficMirrorFilterId,
  }
  type response = {
    @ocaml.doc("<p>The Traffic Mirror filter that the network service is associated with.</p>")
    @as("TrafficMirrorFilter")
    trafficMirrorFilter: option<trafficMirrorFilter>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyTrafficMirrorFilterNetworkServicesCommand"
  let make = (
    ~trafficMirrorFilterId,
    ~dryRun=?,
    ~removeNetworkServices=?,
    ~addNetworkServices=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      removeNetworkServices: removeNetworkServices,
      addNetworkServices: addNetworkServices,
      trafficMirrorFilterId: trafficMirrorFilterId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyInstanceEventWindow = {
  type t
  type request = {
    @ocaml.doc("<p>The cron expression of the event window, for example, <code>* 0-4,20-23 * * 1,5</code>.</p>
         <p>Constraints:</p>
         <ul>
            <li>
               <p>Only hour and day of the week values are supported.</p>
            </li>
            <li>
               <p>For day of the week values, you can specify either integers <code>0</code> through
                  <code>6</code>, or alternative single values <code>SUN</code> through
                  <code>SAT</code>.</p>
            </li>
            <li>
               <p>The minute, month, and year must be specified by <code>*</code>.</p>
            </li>
            <li>
               <p>The hour value must be one or a multiple range, for example, <code>0-4</code> or
                  <code>0-4,20-23</code>.</p>
            </li>
            <li>
               <p>Each hour range must be >= 2 hours, for example, <code>0-2</code> or
                  <code>20-23</code>.</p>
            </li>
            <li>
               <p>The event window must be >= 4 hours. The combined total time ranges in the event
               window must be >= 4 hours.</p>
            </li>
         </ul>
         <p>For more information about cron expressions, see <a href=\"https://en.wikipedia.org/wiki/Cron\">cron</a> on the <i>Wikipedia
            website</i>.</p>")
    @as("CronExpression")
    cronExpression: option<instanceEventWindowCronExpression>,
    @ocaml.doc("<p>The time ranges of the event window.</p>") @as("TimeRanges")
    timeRanges: option<instanceEventWindowTimeRangeRequestSet>,
    @ocaml.doc("<p>The ID of the event window.</p>") @as("InstanceEventWindowId")
    instanceEventWindowId: instanceEventWindowId,
    @ocaml.doc("<p>The name of the event window.</p>") @as("Name") name: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the event window.</p>") @as("InstanceEventWindow")
    instanceEventWindow: option<instanceEventWindow>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyInstanceEventWindowCommand"
  let make = (~instanceEventWindowId, ~cronExpression=?, ~timeRanges=?, ~name=?, ~dryRun=?, ()) =>
    new({
      cronExpression: cronExpression,
      timeRanges: timeRanges,
      instanceEventWindowId: instanceEventWindowId,
      name: name,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ImportSnapshot = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to apply to the import snapshot task during creation.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The name of the role to use when not using the default role, 'vmimport'.</p>")
    @as("RoleName")
    roleName: option<string_>,
    @ocaml.doc("<p>An identifier for the symmetric KMS key to use when creating the
   encrypted snapshot. This parameter is only required if you want to use a non-default KMS key; if this
   parameter is not specified, the default KMS key for EBS is used. If a <code>KmsKeyId</code> is
   specified, the <code>Encrypted</code> flag must also be set. </p>
         <p>The KMS key identifier may be provided in any of the following formats: </p>
         <ul>
            <li>
               <p>Key ID</p>
            </li>
            <li>
               <p>Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>alias</code> namespace, and then the key alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p>
            </li>
            <li>
               <p>ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>key</code> namespace, and then the key ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p>
            </li>
            <li>
               <p>ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>alias</code> namespace, and then the key alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p>
            </li>
         </ul>
         <p>Amazon Web Services parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even
   though you provided an invalid identifier. This action will eventually report failure. </p>
         <p>The specified KMS key must exist in the Region that the snapshot is being copied to.</p>
         <p>Amazon EBS does not support asymmetric KMS keys.</p>")
    @as("KmsKeyId")
    kmsKeyId: option<kmsKeyId>,
    @ocaml.doc("<p>Specifies whether the destination snapshot of the imported image should be encrypted. The default KMS key for EBS is
   used unless you specify a non-default KMS key using <code>KmsKeyId</code>. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\">Amazon EBS Encryption</a> in the
    <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
    @as("Encrypted")
    encrypted: option<boolean_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Information about the disk container.</p>") @as("DiskContainer")
    diskContainer: option<snapshotDiskContainer>,
    @ocaml.doc("<p>The description string for the import snapshot task.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>Token to enable idempotency for VM import requests.</p>") @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The client-specific data.</p>") @as("ClientData") clientData: option<clientData>,
  }
  type response = {
    @ocaml.doc("<p>Any tags assigned to the import snapshot task.</p>") @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>Information about the import snapshot task.</p>") @as("SnapshotTaskDetail")
    snapshotTaskDetail: option<snapshotTaskDetail>,
    @ocaml.doc("<p>The ID of the import snapshot task.</p>") @as("ImportTaskId")
    importTaskId: option<string_>,
    @ocaml.doc("<p>A description of the import snapshot task.</p>") @as("Description")
    description: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ImportSnapshotCommand"
  let make = (
    ~tagSpecifications=?,
    ~roleName=?,
    ~kmsKeyId=?,
    ~encrypted=?,
    ~dryRun=?,
    ~diskContainer=?,
    ~description=?,
    ~clientToken=?,
    ~clientData=?,
    (),
  ) =>
    new({
      tagSpecifications: tagSpecifications,
      roleName: roleName,
      kmsKeyId: kmsKeyId,
      encrypted: encrypted,
      dryRun: dryRun,
      diskContainer: diskContainer,
      description: description,
      clientToken: clientToken,
      clientData: clientData,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ImportKeyPair = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to apply to the imported key pair.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc(
      "<p>The public key. For API calls, the text must be base64-encoded. For command line tools, base64 encoding is performed for you.</p>"
    )
    @as("PublicKeyMaterial")
    publicKeyMaterial: blob,
    @ocaml.doc("<p>A unique name for the key pair.</p>") @as("KeyName") keyName: string_,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The tags applied to the imported key pair.</p>") @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The ID of the resulting key pair.</p>") @as("KeyPairId")
    keyPairId: option<string_>,
    @ocaml.doc("<p>The key pair name that you provided.</p>") @as("KeyName")
    keyName: option<string_>,
    @ocaml.doc("<p>The MD5 public key fingerprint as specified in section 4 of RFC 4716.</p>")
    @as("KeyFingerprint")
    keyFingerprint: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ImportKeyPairCommand"
  let make = (~publicKeyMaterial, ~keyName, ~tagSpecifications=?, ~dryRun=?, ()) =>
    new({
      tagSpecifications: tagSpecifications,
      publicKeyMaterial: publicKeyMaterial,
      keyName: keyName,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ImportImage = {
  type t
  type request = {
    @ocaml.doc("<p>The boot mode of the virtual machine.</p>") @as("BootMode")
    bootMode: option<bootModeValues>,
    @ocaml.doc(
      "<p>The usage operation value. For more information, see <a href=\"https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#prerequisites\">Licensing options</a> in the <i>VM Import/Export User Guide</i>.</p>"
    )
    @as("UsageOperation")
    usageOperation: option<string_>,
    @ocaml.doc("<p>The tags to apply to the import image task during creation.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The ARNs of the license configurations.</p>") @as("LicenseSpecifications")
    licenseSpecifications: option<importImageLicenseSpecificationListRequest>,
    @ocaml.doc("<p>The name of the role to use when not using the default role, 'vmimport'.</p>")
    @as("RoleName")
    roleName: option<string_>,
    @ocaml.doc("<p>The operating system of the virtual machine.</p>
         <p>Valid values: <code>Windows</code> | <code>Linux</code>
         </p>")
    @as("Platform")
    platform: option<string_>,
    @ocaml.doc("<p>The license type to be used for the Amazon Machine Image (AMI) after importing.</p>
         <p>By default, we detect the source-system operating system (OS) and apply the appropriate license. Specify
   <code>AWS</code> to replace the source-system license with an Amazon Web Services license, if appropriate. Specify <code>BYOL</code>
   to retain the source-system license, if appropriate.</p>
         <p>To use <code>BYOL</code>, you must have existing licenses with rights to use these licenses in a third party
   cloud, such as Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#prerequisites-image\">Prerequisites</a> in the
   VM Import/Export User Guide.</p>")
    @as("LicenseType")
    licenseType: option<string_>,
    @ocaml.doc("<p>An identifier for the symmetric KMS key to use when creating the
   encrypted AMI. This parameter is only required if you want to use a non-default KMS key; if this
   parameter is not specified, the default KMS key for EBS is used. If a <code>KmsKeyId</code> is
   specified, the <code>Encrypted</code> flag must also be set. </p>
         <p>The KMS key identifier may be provided in any of the following formats: </p>
         <ul>
            <li>
               <p>Key ID</p>
            </li>
            <li>
               <p>Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>alias</code> namespace, and then the key alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p>
            </li>
            <li>
               <p>ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>key</code> namespace, and then the key ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p>
            </li>
            <li>
               <p>ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>alias</code> namespace, and then the key alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p>
            </li>
         </ul>
         <p>Amazon Web Services parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even
   though you provided an invalid identifier. This action will eventually report failure. </p>
         <p>The specified KMS key must exist in the Region that the AMI is being copied to.</p>
         <p>Amazon EBS does not support asymmetric KMS keys.</p>")
    @as("KmsKeyId")
    kmsKeyId: option<kmsKeyId>,
    @ocaml.doc("<p>The target hypervisor platform.</p>
         <p>Valid values: <code>xen</code>
         </p>")
    @as("Hypervisor")
    hypervisor: option<string_>,
    @ocaml.doc("<p>Specifies whether the destination AMI of the imported image should be encrypted. The default KMS key for EBS is used
   unless you specify a non-default KMS key using <code>KmsKeyId</code>. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\">Amazon EBS Encryption</a> in the
    <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
    @as("Encrypted")
    encrypted: option<boolean_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Information about the disk containers.</p>") @as("DiskContainers")
    diskContainers: option<imageDiskContainerList>,
    @ocaml.doc("<p>A description string for the import image task.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The token to enable idempotency for VM import requests.</p>") @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The client-specific data.</p>") @as("ClientData") clientData: option<clientData>,
    @ocaml.doc("<p>The architecture of the virtual machine.</p>
         <p>Valid values: <code>i386</code> | <code>x86_64</code>
         </p>")
    @as("Architecture")
    architecture: option<string_>,
  }
  type response = {
    @ocaml.doc("<p>The usage operation value.</p>") @as("UsageOperation")
    usageOperation: option<string_>,
    @ocaml.doc("<p>Any tags assigned to the import image task.</p>") @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The ARNs of the license configurations.</p>") @as("LicenseSpecifications")
    licenseSpecifications: option<importImageLicenseSpecificationListResponse>,
    @ocaml.doc("<p>A detailed status message of the import task.</p>") @as("StatusMessage")
    statusMessage: option<string_>,
    @ocaml.doc("<p>A brief status of the task.</p>") @as("Status") status: option<string_>,
    @ocaml.doc("<p>Information about the snapshots.</p>") @as("SnapshotDetails")
    snapshotDetails: option<snapshotDetailList>,
    @ocaml.doc("<p>The progress of the task.</p>") @as("Progress") progress: option<string_>,
    @ocaml.doc("<p>The operating system of the virtual machine.</p>") @as("Platform")
    platform: option<string_>,
    @ocaml.doc("<p>The license type of the virtual machine.</p>") @as("LicenseType")
    licenseType: option<string_>,
    @ocaml.doc(
      "<p>The identifier for the symmetric KMS key that was used to create the encrypted AMI.</p>"
    )
    @as("KmsKeyId")
    kmsKeyId: option<kmsKeyId>,
    @ocaml.doc("<p>The task ID of the import image task.</p>") @as("ImportTaskId")
    importTaskId: option<importImageTaskId>,
    @ocaml.doc("<p>The ID of the Amazon Machine Image (AMI) created by the import task.</p>")
    @as("ImageId")
    imageId: option<string_>,
    @ocaml.doc("<p>The target hypervisor of the import task.</p>") @as("Hypervisor")
    hypervisor: option<string_>,
    @ocaml.doc("<p>Indicates whether the AMI is encrypted.</p>") @as("Encrypted")
    encrypted: option<boolean_>,
    @ocaml.doc("<p>A description of the import task.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The architecture of the virtual machine.</p>") @as("Architecture")
    architecture: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ImportImageCommand"
  let make = (
    ~bootMode=?,
    ~usageOperation=?,
    ~tagSpecifications=?,
    ~licenseSpecifications=?,
    ~roleName=?,
    ~platform=?,
    ~licenseType=?,
    ~kmsKeyId=?,
    ~hypervisor=?,
    ~encrypted=?,
    ~dryRun=?,
    ~diskContainers=?,
    ~description=?,
    ~clientToken=?,
    ~clientData=?,
    ~architecture=?,
    (),
  ) =>
    new({
      bootMode: bootMode,
      usageOperation: usageOperation,
      tagSpecifications: tagSpecifications,
      licenseSpecifications: licenseSpecifications,
      roleName: roleName,
      platform: platform,
      licenseType: licenseType,
      kmsKeyId: kmsKeyId,
      hypervisor: hypervisor,
      encrypted: encrypted,
      dryRun: dryRun,
      diskContainers: diskContainers,
      description: description,
      clientToken: clientToken,
      clientData: clientData,
      architecture: architecture,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetSubnetCidrReservations = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<getSubnetCidrReservationsMaxResults>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the subnet.</p>") @as("SubnetId") subnetId: subnetId,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                    <code>reservationType</code> - The type of reservation (<code>prefix</code> |
                    <code>explicit</code>).</p>
            </li>
            <li>
                <p>
                    <code>subnet-id</code> - The ID of the subnet.</p>
            </li>
            <li>
               <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the IPv6 subnet CIDR reservations.</p>")
    @as("SubnetIpv6CidrReservations")
    subnetIpv6CidrReservations: option<subnetCidrReservationList>,
    @ocaml.doc("<p>Information about the IPv4 subnet CIDR reservations.</p>")
    @as("SubnetIpv4CidrReservations")
    subnetIpv4CidrReservations: option<subnetCidrReservationList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetSubnetCidrReservationsCommand"
  let make = (~subnetId, ~maxResults=?, ~nextToken=?, ~dryRun=?, ~filters=?, ()) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      dryRun: dryRun,
      subnetId: subnetId,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetIpamResourceCidrs = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the Amazon Web Services account that owns the resource.</p>")
    @as("ResourceOwner")
    resourceOwner: option<string_>,
    @as("ResourceTag") resourceTag: option<requestIpamResourceTag>,
    @ocaml.doc("<p>The resource type.</p>") @as("ResourceType")
    resourceType: option<ipamResourceType>,
    @ocaml.doc("<p>The ID of the resource.</p>") @as("ResourceId") resourceId: option<string_>,
    @ocaml.doc("<p>The ID of the IPAM pool that the resource is in.</p>") @as("IpamPoolId")
    ipamPoolId: option<ipamPoolId>,
    @ocaml.doc("<p>The ID of the scope that the resource is in.</p>") @as("IpamScopeId")
    ipamScopeId: ipamScopeId,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return in the request.</p>") @as("MaxResults")
    maxResults: option<ipamMaxResults>,
    @ocaml.doc(
      "<p>One or more filters for the request. For more information about filtering, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html\">Filtering CLI output</a>.</p>"
    )
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The resource CIDRs.</p>") @as("IpamResourceCidrs")
    ipamResourceCidrs: option<ipamResourceCidrSet>,
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "GetIpamResourceCidrsCommand"
  let make = (
    ~ipamScopeId,
    ~resourceOwner=?,
    ~resourceTag=?,
    ~resourceType=?,
    ~resourceId=?,
    ~ipamPoolId=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      resourceOwner: resourceOwner,
      resourceTag: resourceTag,
      resourceType: resourceType,
      resourceId: resourceId,
      ipamPoolId: ipamPoolId,
      ipamScopeId: ipamScopeId,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ExportImage = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to apply to the export image task during creation.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The name of the role that grants VM Import/Export permission to export images to your Amazon
   S3 bucket. If this parameter is not specified, the default role is named 'vmimport'.</p>")
    @as("RoleName")
    roleName: option<string_>,
    @ocaml.doc("<p>Information about the destination Amazon S3 bucket. The bucket must exist and grant WRITE
   and READ_ACP permissions to the Amazon Web Services account vm-import-export@amazon.com.</p>")
    @as("S3ExportLocation")
    s3ExportLocation: exportTaskS3LocationRequest,
    @ocaml.doc("<p>The ID of the image.</p>") @as("ImageId") imageId: imageId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The disk image format.</p>") @as("DiskImageFormat")
    diskImageFormat: diskImageFormat,
    @ocaml.doc(
      "<p>A description of the image being exported. The maximum length is 255 characters.</p>"
    )
    @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>Token to enable idempotency for export image requests.</p>") @as("ClientToken")
    clientToken: option<string_>,
  }
  type response = {
    @ocaml.doc("<p>Any tags assigned to the export image task.</p>") @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The status message for the export image task.</p>") @as("StatusMessage")
    statusMessage: option<string_>,
    @ocaml.doc("<p>The status of the export image task. The possible values are <code>active</code>, <code>completed</code>,
    <code>deleting</code>, and <code>deleted</code>.</p>")
    @as("Status")
    status: option<string_>,
    @ocaml.doc("<p>Information about the destination Amazon S3 bucket.</p>") @as("S3ExportLocation")
    s3ExportLocation: option<exportTaskS3Location>,
    @ocaml.doc("<p>The percent complete of the export image task.</p>") @as("Progress")
    progress: option<string_>,
    @ocaml.doc("<p>The name of the role that grants VM Import/Export permission to export images to your Amazon
   S3 bucket.</p>")
    @as("RoleName")
    roleName: option<string_>,
    @ocaml.doc("<p>The ID of the image.</p>") @as("ImageId") imageId: option<string_>,
    @ocaml.doc("<p>The ID of the export image task.</p>") @as("ExportImageTaskId")
    exportImageTaskId: option<string_>,
    @ocaml.doc("<p>The disk image format for the exported image.</p>") @as("DiskImageFormat")
    diskImageFormat: option<diskImageFormat>,
    @ocaml.doc("<p>A description of the image being exported.</p>") @as("Description")
    description: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ExportImageCommand"
  let make = (
    ~s3ExportLocation,
    ~imageId,
    ~diskImageFormat,
    ~tagSpecifications=?,
    ~roleName=?,
    ~dryRun=?,
    ~description=?,
    ~clientToken=?,
    (),
  ) =>
    new({
      tagSpecifications: tagSpecifications,
      roleName: roleName,
      s3ExportLocation: s3ExportLocation,
      imageId: imageId,
      dryRun: dryRun,
      diskImageFormat: diskImageFormat,
      description: description,
      clientToken: clientToken,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DisassociateInstanceEventWindow = {
  type t
  type request = {
    @ocaml.doc("<p>One or more targets to disassociate from the specified event window.</p>")
    @as("AssociationTarget")
    associationTarget: instanceEventWindowDisassociationRequest,
    @ocaml.doc("<p>The ID of the event window.</p>") @as("InstanceEventWindowId")
    instanceEventWindowId: instanceEventWindowId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the event window.</p>") @as("InstanceEventWindow")
    instanceEventWindow: option<instanceEventWindow>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DisassociateInstanceEventWindowCommand"
  let make = (~associationTarget, ~instanceEventWindowId, ~dryRun=?, ()) =>
    new({
      associationTarget: associationTarget,
      instanceEventWindowId: instanceEventWindowId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeVpnGateways = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeVpnGateways.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more virtual private gateway IDs.</p>
        <p>Default: Describes all your virtual private gateways.</p>")
    @as("VpnGatewayIds")
    vpnGatewayIds: option<vpnGatewayIdStringList>,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                  <code>amazon-side-asn</code> - The Autonomous System Number (ASN) for the
                    Amazon side of the gateway.</p>
            </li>
            <li>
                <p>
                  <code>attachment.state</code> - The current state of the attachment between
                    the gateway and the VPC (<code>attaching</code> | <code>attached</code> |
                        <code>detaching</code> | <code>detached</code>).</p>
            </li>
            <li>
                <p>
                  <code>attachment.vpc-id</code> - The ID of an attached VPC.</p>
            </li>
            <li>
                <p>
                  <code>availability-zone</code> - The Availability Zone for the virtual private
                    gateway (if applicable).</p>
            </li>
            <li>
                <p>
                  <code>state</code> - The state of the virtual private gateway
                        (<code>pending</code> | <code>available</code> | <code>deleting</code> |
                        <code>deleted</code>).</p>
            </li>
            <li> 
               <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> 
            </li>
            <li> 
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> 
            </li>
            <li>
                <p>
                  <code>type</code> - The type of virtual private gateway. Currently the only
                    supported type is <code>ipsec.1</code>.</p>
            </li>
            <li>
                <p>
                  <code>vpn-gateway-id</code> - The ID of the virtual private gateway.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  @ocaml.doc("<p>Contains the output of DescribeVpnGateways.</p>")
  type response = {
    @ocaml.doc("<p>Information about one or more virtual private gateways.</p>") @as("VpnGateways")
    vpnGateways: option<vpnGatewayList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeVpnGatewaysCommand"
  let make = (~dryRun=?, ~vpnGatewayIds=?, ~filters=?, ()) =>
    new({dryRun: dryRun, vpnGatewayIds: vpnGatewayIds, filters: filters})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeVpcEndpoints = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeVpcEndpoints.</p>")
  type request = {
    @ocaml.doc(
      "<p>The token for the next set of items to return. (You received this token from a prior call.)</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p>
        <p>Constraint: If the value is greater than 1,000, we return only 1,000 items.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                    <code>service-name</code> - The name of the service.</p>
            </li>
            <li>
                <p>
                    <code>vpc-id</code> - The ID of the VPC in which the endpoint resides.</p>
            </li>
            <li>
                <p>
                    <code>vpc-endpoint-id</code> - The ID of the endpoint.</p>
            </li>
            <li>
                <p>
                  <code>vpc-endpoint-state</code> - The state of the endpoint
                        (<code>pendingAcceptance</code> | <code>pending</code> |
                        <code>available</code> | <code>deleting</code> | <code>deleted</code> |
                        <code>rejected</code> | <code>failed</code>).</p>
            </li>
            <li>
                <p>
                  <code>vpc-endpoint-type</code> - The type of VPC endpoint (<code>Interface</code> | <code>Gateway</code> | <code>GatewayLoadBalancer</code>).</p>
            </li>
            <li>
        		     <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
        	   </li>
            <li>
        		     <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
        	   </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>One or more endpoint IDs.</p>") @as("VpcEndpointIds")
    vpcEndpointIds: option<vpcEndpointIdList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  @ocaml.doc("<p>Contains the output of DescribeVpcEndpoints.</p>")
  type response = {
    @ocaml.doc(
      "<p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the endpoints.</p>") @as("VpcEndpoints")
    vpcEndpoints: option<vpcEndpointSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeVpcEndpointsCommand"
  let make = (~nextToken=?, ~maxResults=?, ~filters=?, ~vpcEndpointIds=?, ~dryRun=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      vpcEndpointIds: vpcEndpointIds,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeVpcEndpointServices = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeVpcEndpointServices.</p>")
  type request = {
    @ocaml.doc(
      "<p>The token for the next set of items to return. (You received this token from a prior call.)</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p>
        <p>Constraint: If the value is greater than 1,000, we return only 1,000 items.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                  <code>service-name</code> - The name of the service.</p>
            </li>
            <li>
                <p>
                  <code>service-type</code> - The type of service (<code>Interface</code> |
                        <code>Gateway</code>).</p>
            </li>
            <li>
        		     <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
        	   </li>
            <li>
        		     <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
        	   </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>One or more service names.</p>") @as("ServiceNames")
    serviceNames: option<valueStringList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  @ocaml.doc("<p>Contains the output of DescribeVpcEndpointServices.</p>")
  type response = {
    @ocaml.doc(
      "<p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the service.</p>") @as("ServiceDetails")
    serviceDetails: option<serviceDetailSet>,
    @ocaml.doc("<p>A list of supported services.</p>") @as("ServiceNames")
    serviceNames: option<valueStringList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeVpcEndpointServicesCommand"
  let make = (~nextToken=?, ~maxResults=?, ~filters=?, ~serviceNames=?, ~dryRun=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      serviceNames: serviceNames,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeVpcEndpointServiceConfigurations = {
  type t
  type request = {
    @ocaml.doc("<p>The token to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return for the request in a single page. The remaining
            results of the initial request can be seen by sending another request with the returned
                <code>NextToken</code> value. This value can be between 5 and 1,000; if
                <code>MaxResults</code> is given a value larger than 1,000, only 1,000 results are
            returned.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>One or more filters.</p>
		       <ul>
            <li>
				           <p>
                  <code>service-name</code> - The name of the service.</p>
			         </li>
            <li>
				           <p>
                  <code>service-id</code> - The ID of the service.</p>
			         </li>
            <li>
				           <p>
                  <code>service-state</code> - The state of the service (<code>Pending</code> |
                        <code>Available</code> | <code>Deleting</code> | <code>Deleted</code> |
                        <code>Failed</code>). </p>
			         </li>
            <li>
				           <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
			         </li>
            <li>
				           <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
			         </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of one or more services.</p>") @as("ServiceIds")
    serviceIds: option<vpcEndpointServiceIdList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about one or more services.</p>") @as("ServiceConfigurations")
    serviceConfigurations: option<serviceConfigurationSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeVpcEndpointServiceConfigurationsCommand"
  let make = (~nextToken=?, ~maxResults=?, ~filters=?, ~serviceIds=?, ~dryRun=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      serviceIds: serviceIds,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeVpcEndpointConnections = {
  type t
  type request = {
    @ocaml.doc("<p>The token to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return for the request in a single page. The remaining
            results of the initial request can be seen by sending another request with the returned
                <code>NextToken</code> value. This value can be between 5 and 1,000; if
                <code>MaxResults</code> is given a value larger than 1,000, only 1,000 results are
            returned.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>One or more filters.</p>
		       <ul>
            <li>
                <p>
                  <code>service-id</code> - The ID of the service.</p>
            </li>
            <li>
               <p>
                  <code>vpc-endpoint-owner</code> - The ID of the Amazon Web Services account ID 
		        that owns the endpoint.</p>
            </li>
            <li>
			            <p>
                  <code>vpc-endpoint-state</code> - The state of the endpoint
			        (<code>pendingAcceptance</code> | <code>pending</code> |
			        <code>available</code> | <code>deleting</code> | <code>deleted</code> |
			        <code>rejected</code> | <code>failed</code>).</p>
			         </li>
            <li>
				           <p>
                  <code>vpc-endpoint-id</code> - The ID of the endpoint.</p>
			         </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about one or more VPC endpoint connections.</p>")
    @as("VpcEndpointConnections")
    vpcEndpointConnections: option<vpcEndpointConnectionSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeVpcEndpointConnectionsCommand"
  let make = (~nextToken=?, ~maxResults=?, ~filters=?, ~dryRun=?, ()) =>
    new({nextToken: nextToken, maxResults: maxResults, filters: filters, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeVpcClassicLink = {
  type t
  type request = {
    @ocaml.doc("<p>One or more VPCs for which you want to describe the ClassicLink status.</p>")
    @as("VpcIds")
    vpcIds: option<vpcClassicLinkIdList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more filters.</p>
		       <ul>
            <li>
				           <p>
                  <code>is-classic-link-enabled</code> - Whether the VPC is enabled for ClassicLink
					   (<code>true</code> | <code>false</code>).</p>
			         </li>
            <li>
			            <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
			         </li>
            <li>
    			        <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
			         </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc("<p>The ClassicLink status of one or more VPCs.</p>") @as("Vpcs")
    vpcs: option<vpcClassicLinkList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeVpcClassicLinkCommand"
  let make = (~vpcIds=?, ~dryRun=?, ~filters=?, ()) =>
    new({vpcIds: vpcIds, dryRun: dryRun, filters: filters})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeVolumes = {
  type t
  type request = {
    @ocaml.doc("<p>The <code>NextToken</code> value returned from a previous paginated
        <code>DescribeVolumes</code> request where <code>MaxResults</code> was used and the results
      exceeded the value of that parameter. Pagination continues from the end of the previous
      results that returned the <code>NextToken</code> value. This value is <code>null</code> when
      there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of volume results returned by <code>DescribeVolumes</code> in paginated
      output. When this parameter is used, <code>DescribeVolumes</code> only returns
        <code>MaxResults</code> results in a single page along with a <code>NextToken</code>
      response element. The remaining results of the initial request can be seen by sending another
        <code>DescribeVolumes</code> request with the returned <code>NextToken</code> value. This
      value can be between 5 and 500; if <code>MaxResults</code> is given a value larger than 500,
      only 500 results are returned. If this parameter is not used, then
        <code>DescribeVolumes</code> returns all results. You cannot specify this parameter and the
      volume IDs parameter in the same request.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The volume IDs.</p>") @as("VolumeIds") volumeIds: option<volumeIdStringList>,
    @ocaml.doc("<p>The filters.</p>
         <ul>
            <li>
               <p>
                  <code>attachment.attach-time</code> - The time stamp when the attachment
          initiated.</p>
            </li>
            <li>
               <p>
                  <code>attachment.delete-on-termination</code> - Whether the volume is deleted on
          instance termination.</p>
            </li>
            <li>
               <p>
                  <code>attachment.device</code> - The device name specified in the block device mapping
          (for example, <code>/dev/sda1</code>).</p>
            </li>
            <li>
               <p>
                  <code>attachment.instance-id</code> - The ID of the instance the volume is attached
          to.</p>
            </li>
            <li>
               <p>
                  <code>attachment.status</code> - The attachment state (<code>attaching</code> |
            <code>attached</code> | <code>detaching</code>).</p>
            </li>
            <li>
               <p>
                  <code>availability-zone</code> - The Availability Zone in which the volume was
          created.</p>
            </li>
            <li>
               <p>
                  <code>create-time</code> - The time stamp when the volume was created.</p>
            </li>
            <li>
               <p>
                  <code>encrypted</code> - Indicates whether the volume is encrypted (<code>true</code>
          | <code>false</code>)</p>
            </li>
            <li>
    		         <p>
                  <code>multi-attach-enabled</code> - Indicates whether the volume is enabled for Multi-Attach (<code>true</code>
    			| <code>false</code>)</p>
    	       </li>
            <li>
               <p>
                  <code>fast-restored</code> - Indicates whether the volume was created from a 
          snapshot that is enabled for fast snapshot restore (<code>true</code> | 
          <code>false</code>).</p>
            </li>
            <li>
               <p>
                  <code>size</code> - The size of the volume, in GiB.</p>
            </li>
            <li>
               <p>
                  <code>snapshot-id</code> - The snapshot from which the volume was created.</p>
            </li>
            <li>
               <p>
                  <code>status</code> - The state of the volume (<code>creating</code> |
            <code>available</code> | <code>in-use</code> | <code>deleting</code> |
            <code>deleted</code> | <code>error</code>).</p>
            </li>
            <li>
               <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
            </li>
            <li>
               <p>
                  <code>volume-id</code> - The volume ID.</p>
            </li>
            <li>
               <p>
                  <code>volume-type</code> - The Amazon EBS volume type (<code>gp2</code> | <code>gp3</code> | <code>io1</code> | <code>io2</code> | 
          <code>st1</code> | <code>sc1</code>| <code>standard</code>)</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc("<p>The <code>NextToken</code> value to include in a future <code>DescribeVolumes</code>
      request. When the results of a <code>DescribeVolumes</code> request exceed
        <code>MaxResults</code>, this value can be used to retrieve the next page of results. This
      value is <code>null</code> when there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the volumes.</p>") @as("Volumes") volumes: option<volumeList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeVolumesCommand"
  let make = (~nextToken=?, ~maxResults=?, ~dryRun=?, ~volumeIds=?, ~filters=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      dryRun: dryRun,
      volumeIds: volumeIds,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeTrunkInterfaceAssociations = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of results to return with a single call.
            To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<describeTrunkInterfaceAssociationsMaxResults>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                  <code>gre-key</code> - The ID of a trunk interface association.</p>
            </li>
            <li>
                <p>
                  <code>interface-protocol</code> - The interface protocol. Valid values are <code>VLAN</code> and <code>GRE</code>.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The IDs of the associations.</p>") @as("AssociationIds")
    associationIds: option<trunkInterfaceAssociationIdList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the trunk associations.</p>") @as("InterfaceAssociations")
    interfaceAssociations: option<trunkInterfaceAssociationList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeTrunkInterfaceAssociationsCommand"
  let make = (~maxResults=?, ~nextToken=?, ~filters=?, ~dryRun=?, ~associationIds=?, ()) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      filters: filters,
      dryRun: dryRun,
      associationIds: associationIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeTransitGateways = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<transitGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
         <ul>
            <li>
               <p>
                  <code>options.propagation-default-route-table-id</code> - The ID of the default propagation route table.</p>
            </li>
            <li>
               <p>
                  <code>options.amazon-side-asn</code> - The private ASN for the Amazon side of a BGP session.</p>
            </li>
            <li>
               <p>
                  <code>options.association-default-route-table-id</code> - The ID of the default association route table.</p>
            </li>
            <li>
               <p>
                  <code>options.auto-accept-shared-attachments</code> - Indicates whether there is automatic acceptance of attachment requests (<code>enable</code> | <code>disable</code>).</p>
            </li>
            <li>
               <p>
                  <code>options.default-route-table-association</code> - Indicates whether resource attachments are automatically 
               associated with the default association route table (<code>enable</code> | <code>disable</code>).</p>
            </li>
            <li>
               <p>
                  <code>options.default-route-table-propagation</code> - Indicates whether resource attachments automatically propagate 
               routes to the default propagation route table (<code>enable</code> | <code>disable</code>).</p>
            </li>
            <li>
               <p>
                  <code>options.dns-support</code> - Indicates whether DNS support is enabled (<code>enable</code> | <code>disable</code>).</p>
            </li>
            <li>
               <p>
                  <code>options.vpn-ecmp-support</code> - Indicates whether Equal Cost Multipath Protocol support is enabled  (<code>enable</code> | <code>disable</code>).</p>
            </li>
            <li>
               <p>
                  <code>owner-id</code> - The ID of the Amazon Web Services account that owns the transit gateway.</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The state of the transit gateway (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>modifying</code> | <code>pending</code>).</p>
            </li>
            <li>
               <p>
                  <code>transit-gateway-id</code> - The ID of the transit gateway.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of the transit gateways.</p>") @as("TransitGatewayIds")
    transitGatewayIds: option<transitGatewayIdStringList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the transit gateways.</p>") @as("TransitGateways")
    transitGateways: option<transitGatewayList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeTransitGatewaysCommand"
  let make = (~dryRun=?, ~nextToken=?, ~maxResults=?, ~filters=?, ~transitGatewayIds=?, ()) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      transitGatewayIds: transitGatewayIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeTransitGatewayVpcAttachments = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<transitGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
         <ul>
            <li>
               <p>
                  <code>state</code> - The state of the attachment. Valid values are <code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> |  <code>failing</code> | <code>initiatingRequest</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>.</p>
            </li>
            <li>
               <p>
                  <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p>
            </li>
            <li>
               <p>
                  <code>transit-gateway-id</code> - The ID of the transit gateway.</p>
            </li>
            <li>
               <p>
                  <code>vpc-id</code> - The ID of the VPC.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of the attachments.</p>") @as("TransitGatewayAttachmentIds")
    transitGatewayAttachmentIds: option<transitGatewayAttachmentIdStringList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the VPC attachments.</p>") @as("TransitGatewayVpcAttachments")
    transitGatewayVpcAttachments: option<transitGatewayVpcAttachmentList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeTransitGatewayVpcAttachmentsCommand"
  let make = (
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~transitGatewayAttachmentIds=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      transitGatewayAttachmentIds: transitGatewayAttachmentIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeTransitGatewayRouteTables = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<transitGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
         <ul>
            <li>
               <p>
                  <code>default-association-route-table</code> - Indicates whether this is the default
                association route table for the transit gateway (<code>true</code> | <code>false</code>).</p>
            </li>
            <li>
               <p>
                  <code>default-propagation-route-table</code> - Indicates whether this is the default
               propagation route table for the transit gateway (<code>true</code> | <code>false</code>).</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The state of the route table (<code>available</code> | <code>deleting</code> | <code>deleted</code> | <code>pending</code>).</p>
            </li>
            <li>
               <p>
                  <code>transit-gateway-id</code> - The ID of the transit gateway.</p>
            </li>
            <li>
               <p>
                  <code>transit-gateway-route-table-id</code> - The ID of the transit gateway route table.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of the transit gateway route tables.</p>")
    @as("TransitGatewayRouteTableIds")
    transitGatewayRouteTableIds: option<transitGatewayRouteTableIdStringList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the transit gateway route tables.</p>")
    @as("TransitGatewayRouteTables")
    transitGatewayRouteTables: option<transitGatewayRouteTableList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeTransitGatewayRouteTablesCommand"
  let make = (
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~transitGatewayRouteTableIds=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      transitGatewayRouteTableIds: transitGatewayRouteTableIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeTransitGatewayPeeringAttachments = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<transitGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
        <ul>
            <li>
                <p>
                  <code>transit-gateway-attachment-id</code> - The ID of the transit gateway attachment.</p>
            </li>
            <li>
                <p>
                  <code>local-owner-id</code> - The ID of your Amazon Web Services account.</p>
            </li>
            <li>
                <p>
                  <code>remote-owner-id</code> - The ID of the Amazon Web Services account in the remote Region that owns the transit gateway.</p>
            </li>
            <li>
                <p>
                  <code>state</code> - The state of the peering attachment. Valid values are <code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> |  <code>failing</code> | <code>initiatingRequest</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p>
            </li>
            <li>
               <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.</p>
            </li>
            <li>
                <p>
                  <code>transit-gateway-id</code> - The ID of the transit gateway.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>One or more IDs of the transit gateway peering attachments.</p>")
    @as("TransitGatewayAttachmentIds")
    transitGatewayAttachmentIds: option<transitGatewayAttachmentIdStringList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The transit gateway peering attachments.</p>")
    @as("TransitGatewayPeeringAttachments")
    transitGatewayPeeringAttachments: option<transitGatewayPeeringAttachmentList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeTransitGatewayPeeringAttachmentsCommand"
  let make = (
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~transitGatewayAttachmentIds=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      transitGatewayAttachmentIds: transitGatewayAttachmentIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeTransitGatewayMulticastDomains = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<transitGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
        <ul>
            <li>
                <p>
                  <code>state</code> - The state of the transit gateway multicast domain. Valid values are <code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>.</p>
            </li>
            <li>
                <p>
                  <code>transit-gateway-id</code> - The ID of the transit gateway.</p>
            </li>
            <li>
                <p>
                  <code>transit-gateway-multicast-domain-id</code> - The ID of the transit gateway multicast domain.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The ID of the transit gateway multicast domain.</p>")
    @as("TransitGatewayMulticastDomainIds")
    transitGatewayMulticastDomainIds: option<transitGatewayMulticastDomainIdStringList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the transit gateway multicast domains.</p>")
    @as("TransitGatewayMulticastDomains")
    transitGatewayMulticastDomains: option<transitGatewayMulticastDomainList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeTransitGatewayMulticastDomainsCommand"
  let make = (
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~transitGatewayMulticastDomainIds=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      transitGatewayMulticastDomainIds: transitGatewayMulticastDomainIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeTransitGatewayConnects = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<transitGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
        <ul>
            <li>
               <p>
                  <code>options.protocol</code> - The tunnel protocol (<code>gre</code>).</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The state of the attachment (<code>initiating</code> |
                        <code>initiatingRequest</code> | <code>pendingAcceptance</code> |
                        <code>rollingBack</code> | <code>pending</code> | <code>available</code> |
                        <code>modifying</code> | <code>deleting</code> | <code>deleted</code> |
                        <code>failed</code> | <code>rejected</code> | <code>rejecting</code> |
                        <code>failing</code>).</p>
            </li>
            <li>
                <p>
                  <code>transit-gateway-attachment-id</code> - The ID of the
                    Connect attachment.</p>
            </li>
            <li>
               <p>
                  <code>transit-gateway-id</code> - The ID of the transit gateway.</p>
            </li>
            <li>
               <p>
                  <code>transport-transit-gateway-attachment-id</code> - The ID of the transit gateway attachment from which the Connect attachment was created.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of the attachments.</p>") @as("TransitGatewayAttachmentIds")
    transitGatewayAttachmentIds: option<transitGatewayAttachmentIdStringList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the Connect attachments.</p>") @as("TransitGatewayConnects")
    transitGatewayConnects: option<transitGatewayConnectList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeTransitGatewayConnectsCommand"
  let make = (
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~transitGatewayAttachmentIds=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      transitGatewayAttachmentIds: transitGatewayAttachmentIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeTransitGatewayAttachments = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<transitGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
         <ul>
            <li>
               <p>
                  <code>association.state</code> - The state of the association (<code>associating</code> | <code>associated</code> |
               <code>disassociating</code>).</p>
            </li>
            <li>
               <p>
                  <code>association.transit-gateway-route-table-id</code> - The ID of the route table for the transit gateway.</p>
            </li>
            <li>
               <p>
                  <code>resource-id</code> - The ID of the resource.</p>
            </li>
            <li>
               <p>
                  <code>resource-owner-id</code> - The ID of the Amazon Web Services account that owns the resource.</p>
            </li>
            <li>
               <p>
                  <code>resource-type</code> - The resource type. Valid values are <code>vpc</code>
                    | <code>vpn</code> | <code>direct-connect-gateway</code> | <code>peering</code>
                    | <code>connect</code>.</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The state of the attachment. Valid values are <code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> |  <code>failing</code> | <code>initiatingRequest</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>.</p>
            </li>
            <li>
               <p>
                  <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p>
            </li>
            <li>
               <p>
                  <code>transit-gateway-id</code> - The ID of the transit gateway.</p>
            </li>
            <li>
               <p>
                  <code>transit-gateway-owner-id</code> - The ID of the Amazon Web Services account that owns the transit gateway.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of the attachments.</p>") @as("TransitGatewayAttachmentIds")
    transitGatewayAttachmentIds: option<transitGatewayAttachmentIdStringList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the attachments.</p>") @as("TransitGatewayAttachments")
    transitGatewayAttachments: option<transitGatewayAttachmentList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeTransitGatewayAttachmentsCommand"
  let make = (
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~transitGatewayAttachmentIds=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      transitGatewayAttachmentIds: transitGatewayAttachmentIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeTrafficMirrorTargets = {
  type t
  type request = {
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<trafficMirroringMaxResults>,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
         <ul>
            <li>
               <p>
                  <code>description</code>: The Traffic Mirror target description.</p>
            </li>
            <li>
               <p>
                  <code>network-interface-id</code>: The ID of the Traffic Mirror session network interface.</p>
            </li>
            <li>
               <p>
                  <code>network-load-balancer-arn</code>: The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the session.</p>
            </li>
            <li>
               <p>
                  <code>owner-id</code>: The ID of the account that owns the Traffic Mirror session.</p>
            </li>
            <li>
               <p>
                  <code>traffic-mirror-target-id</code>: The ID of the Traffic Mirror target.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Traffic Mirror targets.</p>") @as("TrafficMirrorTargetIds")
    trafficMirrorTargetIds: option<trafficMirrorTargetIdList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about one or more Traffic Mirror targets.</p>")
    @as("TrafficMirrorTargets")
    trafficMirrorTargets: option<trafficMirrorTargetSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeTrafficMirrorTargetsCommand"
  let make = (~nextToken=?, ~maxResults=?, ~filters=?, ~dryRun=?, ~trafficMirrorTargetIds=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      dryRun: dryRun,
      trafficMirrorTargetIds: trafficMirrorTargetIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeTrafficMirrorSessions = {
  type t
  type request = {
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<trafficMirroringMaxResults>,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
         <ul>
            <li>
               <p>
                  <code>description</code>: The Traffic Mirror session description.</p>
            </li>
            <li>
               <p>
                  <code>network-interface-id</code>: The ID of the Traffic Mirror session network interface.</p>
            </li>
            <li>
               <p>
                  <code>owner-id</code>: The ID of the account that owns the Traffic Mirror session.</p>
            </li>
            <li>
               <p>
                  <code>packet-length</code>: The assigned number of packets to mirror. </p>
            </li>
            <li>
               <p>
                  <code>session-number</code>: The assigned session number. </p>
            </li>
            <li>
               <p>
                  <code>traffic-mirror-filter-id</code>: The ID of the Traffic Mirror filter.</p>
            </li>
            <li>
               <p>
                  <code>traffic-mirror-session-id</code>: The ID of the Traffic Mirror session.</p>
            </li>
            <li>
               <p>
                  <code>traffic-mirror-target-id</code>: The ID of the Traffic Mirror target.</p>
            </li>
            <li>
               <p>
                  <code>virtual-network-id</code>: The virtual network ID of the Traffic Mirror session.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Traffic Mirror session.</p>") @as("TrafficMirrorSessionIds")
    trafficMirrorSessionIds: option<trafficMirrorSessionIdList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc(
      "<p>Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.</p>"
    )
    @as("TrafficMirrorSessions")
    trafficMirrorSessions: option<trafficMirrorSessionSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeTrafficMirrorSessionsCommand"
  let make = (~nextToken=?, ~maxResults=?, ~filters=?, ~dryRun=?, ~trafficMirrorSessionIds=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      dryRun: dryRun,
      trafficMirrorSessionIds: trafficMirrorSessionIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeSnapshots = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The snapshot IDs.</p>
         <p>Default: Describes the snapshots for which you have create volume permissions.</p>")
    @as("SnapshotIds")
    snapshotIds: option<snapshotIdStringList>,
    @ocaml.doc(
      "<p>The IDs of the Amazon Web Services accounts that can create volumes from the snapshot.</p>"
    )
    @as("RestorableByUserIds")
    restorableByUserIds: option<restorableByStringList>,
    @ocaml.doc("<p>Scopes the results to snapshots with the specified owners. You can specify a combination of
      Amazon Web Services account IDs, <code>self</code>, and <code>amazon</code>.</p>")
    @as("OwnerIds")
    ownerIds: option<ownerStringList>,
    @ocaml.doc("<p>The <code>NextToken</code> value returned from a previous paginated
        <code>DescribeSnapshots</code> request where <code>MaxResults</code> was used and the
      results exceeded the value of that parameter. Pagination continues from the end of the
      previous results that returned the <code>NextToken</code> value. This value is
        <code>null</code> when there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of snapshot results returned by <code>DescribeSnapshots</code> in
      paginated output. When this parameter is used, <code>DescribeSnapshots</code> only returns
        <code>MaxResults</code> results in a single page along with a <code>NextToken</code>
      response element. The remaining results of the initial request can be seen by sending another
        <code>DescribeSnapshots</code> request with the returned <code>NextToken</code> value. This
      value can be between 5 and 1,000; if <code>MaxResults</code> is given a value larger than 1,000,
      only 1,000 results are returned. If this parameter is not used, then
        <code>DescribeSnapshots</code> returns all results. You cannot specify this parameter and
      the snapshot IDs parameter in the same request.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>The filters.</p>
         <ul>
            <li>
               <p>
                  <code>description</code> - A description of the snapshot.</p>
            </li>
            <li>
               <p>
                  <code>encrypted</code> - Indicates whether the snapshot is encrypted
            (<code>true</code> | <code>false</code>)</p>
            </li>
            <li>
               <p>
                  <code>owner-alias</code> - The owner alias, from an Amazon-maintained list  
          (<code>amazon</code>). 
          This is not the user-configured Amazon Web Services account alias set using the IAM console.
          We recommend that you use the related parameter instead of this filter.</p>
            </li>
            <li>
               <p>
                  <code>owner-id</code> - The Amazon Web Services account ID of the owner. We recommend that 
          you use the related parameter instead of this filter.</p>
            </li>
            <li>
               <p>
                  <code>progress</code> - The progress of the snapshot, as a percentage (for example,
          80%).</p>
            </li>
            <li>
               <p>
                  <code>snapshot-id</code> - The snapshot ID.</p>
            </li>
            <li>
               <p>
                  <code>start-time</code> - The time stamp when the snapshot was initiated.</p>
            </li>
            <li>
               <p>
                  <code>status</code> - The status of the snapshot (<code>pending</code> |
            <code>completed</code> | <code>error</code>).</p>
            </li>
            <li>
               <p>
                  <code>storage-tier</code> - The storage tier of the snapshot (<code>archive</code> |
          <code>standard</code>).</p>
            </li>
            <li>
               <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
            </li>
            <li>
               <p>
                  <code>volume-id</code> - The ID of the volume the snapshot is for.</p>
            </li>
            <li>
               <p>
                  <code>volume-size</code> - The size of the volume, in GiB.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc("<p>The <code>NextToken</code> value to include in a future <code>DescribeSnapshots</code>
      request. When the results of a <code>DescribeSnapshots</code> request exceed
        <code>MaxResults</code>, this value can be used to retrieve the next page of results. This
      value is <code>null</code> when there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the snapshots.</p>") @as("Snapshots")
    snapshots: option<snapshotList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeSnapshotsCommand"
  let make = (
    ~dryRun=?,
    ~snapshotIds=?,
    ~restorableByUserIds=?,
    ~ownerIds=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      snapshotIds: snapshotIds,
      restorableByUserIds: restorableByUserIds,
      ownerIds: ownerIds,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeSnapshotTierStatus = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<describeSnapshotTierStatusMaxResults>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The filters.</p>
         <ul>
            <li>
               <p>
                  <code>snapshot-id</code> - The snapshot ID.</p>
            </li>
            <li>
               <p>
                  <code>volume-id</code> - The ID of the volume the snapshot is for.</p>
            </li>
            <li>
               <p>
                  <code>last-tiering-operation</code> - The state of the last archive or restore action. (<code>archival-in-progress</code> | <code>archival-completed</code> |
          <code>archival-failed</code> | <code>permanent-restore-in-progress</code> | <code>permanent-restore-completed</code> | <code>permanent-restore-failed</code> | 
		<code>temporary-restore-in-progress</code> | <code>temporary-restore-completed</code> | <code>temporary-restore-failed</code>)</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the snapshot's storage tier.</p>") @as("SnapshotTierStatuses")
    snapshotTierStatuses: option<snapshotTierStatusSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeSnapshotTierStatusCommand"
  let make = (~maxResults=?, ~nextToken=?, ~dryRun=?, ~filters=?, ()) =>
    new({maxResults: maxResults, nextToken: nextToken, dryRun: dryRun, filters: filters})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeSecurityGroupRules = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of results to return in a single call. To retrieve the remaining
            results, make another request with the returned <code>NextToken</code> value. This value
            can be between 5 and 1000. If this parameter is not specified, then all results are
            returned.</p>")
    @as("MaxResults")
    maxResults: option<describeSecurityGroupRulesMaxResults>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The IDs of the security group rules.</p>") @as("SecurityGroupRuleIds")
    securityGroupRuleIds: option<securityGroupRuleIdList>,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                  <code>group-id</code> - The ID of the security group.</p>
            </li>
            <li>
                <p>
                  <code>security-group-rule-id</code> - The ID of the security group rule.</p>
            </li>
            <li>
               <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return. </p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about security group rules.</p>") @as("SecurityGroupRules")
    securityGroupRules: option<securityGroupRuleList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeSecurityGroupRulesCommand"
  let make = (~maxResults=?, ~nextToken=?, ~dryRun=?, ~securityGroupRuleIds=?, ~filters=?, ()) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      dryRun: dryRun,
      securityGroupRuleIds: securityGroupRuleIds,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeScheduledInstances = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeScheduledInstances.</p>")
  type request = {
    @ocaml.doc("<p>The time period for the first schedule to start.</p>") @as("SlotStartTimeRange")
    slotStartTimeRange: option<slotStartTimeRangeRequest>,
    @ocaml.doc("<p>The Scheduled Instance IDs.</p>") @as("ScheduledInstanceIds")
    scheduledInstanceIds: option<scheduledInstanceIdRequestSet>,
    @ocaml.doc("<p>The token for the next set of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. 
         This value can be between 5 and 300. The default value is 100.
         To retrieve the remaining results, make another call with the returned
         <code>NextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>The filters.</p>
         <ul>
            <li>
               <p>
                  <code>availability-zone</code> - The Availability Zone (for example, <code>us-west-2a</code>).</p>
            </li>
            <li>
               <p>
                  <code>instance-type</code> - The instance type (for example, <code>c4.large</code>).</p>
            </li>
            <li>
               <p>
                  <code>network-platform</code> - The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p>
            </li>
            <li>
               <p>
                  <code>platform</code> - The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  @ocaml.doc("<p>Contains the output of DescribeScheduledInstances.</p>")
  type response = {
    @ocaml.doc("<p>Information about the Scheduled Instances.</p>") @as("ScheduledInstanceSet")
    scheduledInstanceSet: option<scheduledInstanceSet>,
    @ocaml.doc(
      "<p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeScheduledInstancesCommand"
  let make = (
    ~slotStartTimeRange=?,
    ~scheduledInstanceIds=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      slotStartTimeRange: slotStartTimeRange,
      scheduledInstanceIds: scheduledInstanceIds,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeScheduledInstanceAvailability = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeScheduledInstanceAvailability.</p>")
  type request = {
    @ocaml.doc("<p>The schedule recurrence.</p>") @as("Recurrence")
    recurrence: scheduledInstanceRecurrenceRequest,
    @ocaml.doc("<p>The token for the next set of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc(
      "<p>The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.</p>"
    )
    @as("MinSlotDurationInHours")
    minSlotDurationInHours: option<integer_>,
    @ocaml.doc("<p>The maximum available duration, in hours. This value must be greater than <code>MinSlotDurationInHours</code>
         and less than 1,720.</p>")
    @as("MaxSlotDurationInHours")
    maxSlotDurationInHours: option<integer_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. 
         This value can be between 5 and 300. The default value is 300.
         To retrieve the remaining results, make another call with the returned
         <code>NextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<describeScheduledInstanceAvailabilityMaxResults>,
    @ocaml.doc("<p>The time period for the first schedule to start.</p>")
    @as("FirstSlotStartTimeRange")
    firstSlotStartTimeRange: slotDateTimeRangeRequest,
    @ocaml.doc("<p>The filters.</p>
         <ul>
            <li>
               <p>
                  <code>availability-zone</code> - The Availability Zone (for example, <code>us-west-2a</code>).</p>
            </li>
            <li>
               <p>
                  <code>instance-type</code> - The instance type (for example, <code>c4.large</code>).</p>
            </li>
            <li>
               <p>
                  <code>network-platform</code> - The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p>
            </li>
            <li>
               <p>
                  <code>platform</code> - The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  @ocaml.doc("<p>Contains the output of DescribeScheduledInstanceAvailability.</p>")
  type response = {
    @ocaml.doc("<p>Information about the available Scheduled Instances.</p>")
    @as("ScheduledInstanceAvailabilitySet")
    scheduledInstanceAvailabilitySet: option<scheduledInstanceAvailabilitySet>,
    @ocaml.doc(
      "<p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeScheduledInstanceAvailabilityCommand"
  let make = (
    ~recurrence,
    ~firstSlotStartTimeRange,
    ~nextToken=?,
    ~minSlotDurationInHours=?,
    ~maxSlotDurationInHours=?,
    ~maxResults=?,
    ~filters=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      recurrence: recurrence,
      nextToken: nextToken,
      minSlotDurationInHours: minSlotDurationInHours,
      maxSlotDurationInHours: maxSlotDurationInHours,
      maxResults: maxResults,
      firstSlotStartTimeRange: firstSlotStartTimeRange,
      filters: filters,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeReservedInstancesOfferings = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeReservedInstancesOfferings.</p>")
  type request = {
    @ocaml.doc("<p>The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API
			version, you only have access to the <code>Medium Utilization</code> Reserved Instance
			offering type. </p>")
    @as("OfferingType")
    offeringType: option<offeringTypeValues>,
    @ocaml.doc("<p>The token to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return for the request in a single page. The remaining
			results of the initial request can be seen by sending another request with the returned
				<code>NextToken</code> value. The maximum is 100.</p>
		       <p>Default: 100</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>The tenancy of the instances covered by the reservation. A Reserved Instance with a tenancy
      of <code>dedicated</code> is applied to instances that run in a VPC on single-tenant hardware
      (i.e., Dedicated Instances).</p>
         <p>
            <b>Important:</b> The <code>host</code> value cannot be used with this parameter. Use the <code>default</code> or <code>dedicated</code> values only.</p>
         <p>Default: <code>default</code>
         </p>")
    @as("InstanceTenancy")
    instanceTenancy: option<tenancy>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
       and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
       Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more Reserved Instances offering IDs.</p>")
    @as("ReservedInstancesOfferingIds")
    reservedInstancesOfferingIds: option<reservedInstancesOfferingIdStringList>,
    @ocaml.doc("<p>The Reserved Instance product platform description. Instances that include <code>(Amazon
        VPC)</code> in the description are for use with Amazon VPC.</p>")
    @as("ProductDescription")
    productDescription: option<riproductDescription>,
    @ocaml.doc(
      "<p>The offering class of the Reserved Instance. Can be <code>standard</code> or <code>convertible</code>.</p>"
    )
    @as("OfferingClass")
    offeringClass: option<offeringClassType>,
    @ocaml.doc("<p>The minimum duration (in seconds) to filter when searching for offerings.</p>
		       <p>Default: 2592000 (1 month)</p>")
    @as("MinDuration")
    minDuration: option<long>,
    @ocaml.doc("<p>The maximum number of instances to filter when searching for offerings.</p>
		       <p>Default: 20</p>")
    @as("MaxInstanceCount")
    maxInstanceCount: option<integer_>,
    @ocaml.doc("<p>The maximum duration (in seconds) to filter when searching for offerings.</p>
		       <p>Default: 94608000 (3 years)</p>")
    @as("MaxDuration")
    maxDuration: option<long>,
    @ocaml.doc("<p>The instance type that the reservation will cover (for example, <code>m1.small</code>). For more information, see 
       <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\">Instance types</a> in the
      <i>Amazon EC2 User Guide</i>.</p>")
    @as("InstanceType")
    instanceType: option<instanceType>,
    @ocaml.doc("<p>Include Reserved Instance Marketplace offerings in the response.</p>")
    @as("IncludeMarketplace")
    includeMarketplace: option<boolean_>,
    @ocaml.doc("<p>One or more filters.</p>
         <ul>
            <li>
               <p>
                  <code>availability-zone</code> - The Availability Zone where the Reserved Instance can be
          used.</p>
            </li>
            <li>
               <p>
                  <code>duration</code> - The duration of the Reserved Instance (for example, one year or
          three years), in seconds (<code>31536000</code> | <code>94608000</code>).</p>
            </li>
            <li>
               <p>
                  <code>fixed-price</code> - The purchase price of the Reserved Instance (for example,
          9800.0).</p>
            </li>
            <li>
               <p>
                  <code>instance-type</code> - The instance type that is covered by the
          reservation.</p>
            </li>
            <li>
               <p>
                  <code>marketplace</code> - Set to <code>true</code> to show only Reserved Instance
          Marketplace offerings. When this filter is not used, which is the default behavior, all
          offerings from both Amazon Web Services and the Reserved Instance Marketplace are listed.</p>
            </li>
            <li>
               <p>
                  <code>product-description</code> - The Reserved Instance product platform description.
          Instances that include <code>(Amazon VPC)</code> in the product platform description will
          only be displayed to EC2-Classic account holders and are for use with Amazon VPC.
            (<code>Linux/UNIX</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE
            Linux</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Red Hat Enterprise
            Linux</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> | <code>Red Hat
            Enterprise Linux with HA (Amazon VPC)</code> | <code>Windows</code> | <code>Windows
            (Amazon VPC)</code> | <code>Windows with SQL Server Standard</code> | <code>Windows with
            SQL Server Standard (Amazon VPC)</code> | <code>Windows with SQL Server Web</code> |
            <code> Windows with SQL Server Web (Amazon VPC)</code> | <code>Windows with SQL Server
            Enterprise</code> | <code>Windows with SQL Server Enterprise (Amazon VPC)</code>) </p>
            </li>
            <li>
               <p>
                  <code>reserved-instances-offering-id</code> - The Reserved Instances offering
          ID.</p>
            </li>
            <li>
               <p>
                  <code>scope</code> - The scope of the Reserved Instance (<code>Availability Zone</code> or
            <code>Region</code>).</p>
            </li>
            <li>
               <p>
                  <code>usage-price</code> - The usage price of the Reserved Instance, per hour (for
          example, 0.84).</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The Availability Zone in which the Reserved Instance can be used.</p>")
    @as("AvailabilityZone")
    availabilityZone: option<string_>,
  }
  @ocaml.doc("<p>Contains the output of DescribeReservedInstancesOfferings.</p>")
  type response = {
    @ocaml.doc("<p>The token to use to retrieve the next page of results. This value is <code>null</code> when
			there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>A list of Reserved Instances offerings.</p>") @as("ReservedInstancesOfferings")
    reservedInstancesOfferings: option<reservedInstancesOfferingList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeReservedInstancesOfferingsCommand"
  let make = (
    ~offeringType=?,
    ~nextToken=?,
    ~maxResults=?,
    ~instanceTenancy=?,
    ~dryRun=?,
    ~reservedInstancesOfferingIds=?,
    ~productDescription=?,
    ~offeringClass=?,
    ~minDuration=?,
    ~maxInstanceCount=?,
    ~maxDuration=?,
    ~instanceType=?,
    ~includeMarketplace=?,
    ~filters=?,
    ~availabilityZone=?,
    (),
  ) =>
    new({
      offeringType: offeringType,
      nextToken: nextToken,
      maxResults: maxResults,
      instanceTenancy: instanceTenancy,
      dryRun: dryRun,
      reservedInstancesOfferingIds: reservedInstancesOfferingIds,
      productDescription: productDescription,
      offeringClass: offeringClass,
      minDuration: minDuration,
      maxInstanceCount: maxInstanceCount,
      maxDuration: maxDuration,
      instanceType: instanceType,
      includeMarketplace: includeMarketplace,
      filters: filters,
      availabilityZone: availabilityZone,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeReservedInstancesListings = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeReservedInstancesListings.</p>")
  type request = {
    @ocaml.doc("<p>One or more Reserved Instance listing IDs.</p>")
    @as("ReservedInstancesListingId")
    reservedInstancesListingId: option<reservedInstancesListingId>,
    @ocaml.doc("<p>One or more Reserved Instance IDs.</p>") @as("ReservedInstancesId")
    reservedInstancesId: option<reservationId>,
    @ocaml.doc("<p>One or more filters.</p>
         <ul>
            <li>
               <p>
                  <code>reserved-instances-id</code> - The ID of the Reserved Instances.</p>
            </li>
            <li>
               <p>
                  <code>reserved-instances-listing-id</code> - The ID of the Reserved Instances listing.</p>
            </li>
            <li>
               <p>
                  <code>status</code> - The status of the Reserved Instance listing (<code>pending</code> | <code>active</code> |
           <code>cancelled</code> | <code>closed</code>).</p>
            </li>
            <li>
               <p>
                  <code>status-message</code> - The reason for the status.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  @ocaml.doc("<p>Contains the output of DescribeReservedInstancesListings.</p>")
  type response = {
    @ocaml.doc("<p>Information about the Reserved Instance listing.</p>")
    @as("ReservedInstancesListings")
    reservedInstancesListings: option<reservedInstancesListingList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeReservedInstancesListingsCommand"
  let make = (~reservedInstancesListingId=?, ~reservedInstancesId=?, ~filters=?, ()) =>
    new({
      reservedInstancesListingId: reservedInstancesListingId,
      reservedInstancesId: reservedInstancesId,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeReservedInstances = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeReservedInstances.</p>")
  type request = {
    @ocaml.doc("<p>The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API
			version, you only have access to the <code>Medium Utilization</code> Reserved Instance
			offering type.</p>")
    @as("OfferingType")
    offeringType: option<offeringTypeValues>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
       and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
       Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more Reserved Instance IDs.</p>
         <p>Default: Describes all your Reserved Instances, or only those otherwise specified.</p>")
    @as("ReservedInstancesIds")
    reservedInstancesIds: option<reservedInstancesIdStringList>,
    @ocaml.doc("<p>Describes whether the Reserved Instance is Standard or Convertible.</p>")
    @as("OfferingClass")
    offeringClass: option<offeringClassType>,
    @ocaml.doc("<p>One or more filters.</p>
         <ul>
            <li>
               <p>
                  <code>availability-zone</code> - The Availability Zone where the Reserved Instance can be used.</p>
            </li>
            <li>
               <p>
                  <code>duration</code> - The duration of the Reserved Instance (one year or three years), in seconds (<code>31536000</code> | <code>94608000</code>).</p>
            </li>
            <li>
               <p>
                  <code>end</code> - The time when the Reserved Instance expires (for example, 2015-08-07T11:54:42.000Z).</p>
            </li>
            <li>
               <p>
                  <code>fixed-price</code> - The purchase price of the Reserved Instance (for example, 9800.0).</p>
            </li>
            <li>
               <p>
                  <code>instance-type</code> - The instance type that is covered by the reservation.</p>
            </li>
            <li>
               <p>
                  <code>scope</code> - The scope of the Reserved Instance (<code>Region</code> or <code>Availability Zone</code>).</p>
            </li>
            <li>
               <p>
                  <code>product-description</code> - The Reserved Instance product platform
          description. Instances that include <code>(Amazon VPC)</code> in the product platform
          description will only be displayed to EC2-Classic account holders and are for use with
          Amazon VPC (<code>Linux/UNIX</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE
            Linux</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Red Hat Enterprise
            Linux</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> | <code>Red Hat
            Enterprise Linux with HA (Amazon VPC)</code> | <code>Windows</code> | <code>Windows
            (Amazon VPC)</code> | <code>Windows with SQL Server Standard</code> | <code>Windows with
            SQL Server Standard (Amazon VPC)</code> | <code>Windows with SQL Server Web</code> |
            <code>Windows with SQL Server Web (Amazon VPC)</code> | <code>Windows with SQL Server
            Enterprise</code> | <code>Windows with SQL Server Enterprise (Amazon
          VPC)</code>).</p>
            </li>
            <li>
               <p>
                  <code>reserved-instances-id</code> - The ID of the Reserved Instance.</p>
            </li>
            <li>
               <p>
                  <code>start</code> - The time at which the Reserved Instance purchase request was placed (for example, 2014-08-07T11:54:42.000Z).</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The state of the Reserved Instance (<code>payment-pending</code> | <code>active</code> | <code>payment-failed</code> | <code>retired</code>).</p>
            </li>
            <li>
               <p>
                  <code>tag:<key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
            </li>
            <li>
               <p>
                  <code>usage-price</code> - The usage price of the Reserved Instance, per hour (for example, 0.84).</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  @ocaml.doc("<p>Contains the output for DescribeReservedInstances.</p>")
  type response = {
    @ocaml.doc("<p>A list of Reserved Instances.</p>") @as("ReservedInstances")
    reservedInstances: option<reservedInstancesList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeReservedInstancesCommand"
  let make = (
    ~offeringType=?,
    ~dryRun=?,
    ~reservedInstancesIds=?,
    ~offeringClass=?,
    ~filters=?,
    (),
  ) =>
    new({
      offeringType: offeringType,
      dryRun: dryRun,
      reservedInstancesIds: reservedInstancesIds,
      offeringClass: offeringClass,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeReplaceRootVolumeTasks = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<describeReplaceRootVolumeTasksMaxResults>,
    @ocaml.doc("<p>Filter to use:</p>
         <ul>
            <li>
               <p>
                  <code>instance-id</code> - The ID of the instance for which the root volume replacement task was created.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The ID of the root volume replacement task to view.</p>")
    @as("ReplaceRootVolumeTaskIds")
    replaceRootVolumeTaskIds: option<replaceRootVolumeTaskIds>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the root volume replacement task.</p>")
    @as("ReplaceRootVolumeTasks")
    replaceRootVolumeTasks: option<replaceRootVolumeTasks>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeReplaceRootVolumeTasksCommand"
  let make = (
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~replaceRootVolumeTaskIds=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      replaceRootVolumeTaskIds: replaceRootVolumeTaskIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribePublicIpv4Pools = {
  type t
  type request = {
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
                <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<poolMaxResults>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The IDs of the address pools.</p>") @as("PoolIds")
    poolIds: option<publicIpv4PoolIdStringList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the address pools.</p>") @as("PublicIpv4Pools")
    publicIpv4Pools: option<publicIpv4PoolSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribePublicIpv4PoolsCommand"
  let make = (~filters=?, ~maxResults=?, ~nextToken=?, ~poolIds=?, ()) =>
    new({filters: filters, maxResults: maxResults, nextToken: nextToken, poolIds: poolIds})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribePrincipalIdFormat = {
  type t
  type request = {
    @ocaml.doc("<p>The token to request the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. To retrieve the remaining
            results, make another call with the returned NextToken value. </p>")
    @as("MaxResults")
    maxResults: option<describePrincipalIdFormatMaxResults>,
    @ocaml.doc("<p>The type of resource: <code>bundle</code> |
            <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
            <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
            <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
            <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
            <code>network-acl</code> | <code>network-acl-association</code> |
            <code>network-interface</code> | <code>network-interface-attachment</code> |
            <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
            <code>route-table-association</code> | <code>security-group</code> |
            <code>snapshot</code> | <code>subnet</code> |
            <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code>
            | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
            <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>
         </p>")
    @as("Resources")
    resources: option<resourceList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the ID format settings for the ARN.</p>") @as("Principals")
    principals: option<principalIdFormatList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribePrincipalIdFormatCommand"
  let make = (~nextToken=?, ~maxResults=?, ~resources=?, ~dryRun=?, ()) =>
    new({nextToken: nextToken, maxResults: maxResults, resources: resources, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribePlacementGroups = {
  type t
  type request = {
    @ocaml.doc("<p>The IDs of the placement groups.</p>") @as("GroupIds")
    groupIds: option<placementGroupIdStringList>,
    @ocaml.doc("<p>The names of the placement groups.</p>
        <p>Default: Describes all your placement groups, or only those otherwise
            specified.</p>")
    @as("GroupNames")
    groupNames: option<placementGroupStringList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The filters.</p>
        <ul>
            <li>
                <p>
                    <code>group-name</code> - The name of the placement group.</p>
            </li>
            <li>
                <p>
                    <code>group-arn</code> - The Amazon Resource Name (ARN) of the placement
                    group.</p>
            </li>
            <li>
                <p>
                    <code>state</code> - The state of the placement group (<code>pending</code> |
                        <code>available</code> | <code>deleting</code> |
                    <code>deleted</code>).</p>
            </li>
            <li>
                <p>
                    <code>strategy</code> - The strategy of the placement group
                        (<code>cluster</code> | <code>spread</code> |
                    <code>partition</code>).</p>
            </li>
            <li>
               <p>
                  <code>tag:<key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc("<p>Information about the placement groups.</p>") @as("PlacementGroups")
    placementGroups: option<placementGroupList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribePlacementGroupsCommand"
  let make = (~groupIds=?, ~groupNames=?, ~dryRun=?, ~filters=?, ()) =>
    new({groupIds: groupIds, groupNames: groupNames, dryRun: dryRun, filters: filters})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeNetworkInsightsPaths = {
  type t
  type request = {
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
   To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<networkInsightsMaxResults>,
    @ocaml.doc("<p>The filters. The following are the possible values:</p>
         <ul>
            <li>
               <p>Destination - The ID of the resource.</p>
            </li>
            <li>
               <p>DestinationPort - The destination port.</p>
            </li>
            <li>
               <p>Name - The path name.</p>
            </li>
            <li>
               <p>Protocol - The protocol.</p>
            </li>
            <li>
               <p>Source - The ID of the resource.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of the paths.</p>") @as("NetworkInsightsPathIds")
    networkInsightsPathIds: option<networkInsightsPathIdList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the paths.</p>") @as("NetworkInsightsPaths")
    networkInsightsPaths: option<networkInsightsPathList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeNetworkInsightsPathsCommand"
  let make = (~nextToken=?, ~dryRun=?, ~maxResults=?, ~filters=?, ~networkInsightsPathIds=?, ()) =>
    new({
      nextToken: nextToken,
      dryRun: dryRun,
      maxResults: maxResults,
      filters: filters,
      networkInsightsPathIds: networkInsightsPathIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeNetworkInsightsAccessScopes = {
  type t
  type request = {
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
   To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<networkInsightsMaxResults>,
    @ocaml.doc("<p>There are no supported filters.</p>") @as("Filters") filters: option<filterList>,
    @ocaml.doc("<p>The IDs of the Network Access Scopes.</p>") @as("NetworkInsightsAccessScopeIds")
    networkInsightsAccessScopeIds: option<networkInsightsAccessScopeIdList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The Network Access Scopes.</p>") @as("NetworkInsightsAccessScopes")
    networkInsightsAccessScopes: option<networkInsightsAccessScopeList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeNetworkInsightsAccessScopesCommand"
  let make = (
    ~nextToken=?,
    ~dryRun=?,
    ~maxResults=?,
    ~filters=?,
    ~networkInsightsAccessScopeIds=?,
    (),
  ) =>
    new({
      nextToken: nextToken,
      dryRun: dryRun,
      maxResults: maxResults,
      filters: filters,
      networkInsightsAccessScopeIds: networkInsightsAccessScopeIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeNetworkInsightsAccessScopeAnalyses = {
  type t
  type request = {
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
   To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<networkInsightsMaxResults>,
    @ocaml.doc("<p>There are no supported filters.</p>") @as("Filters") filters: option<filterList>,
    @ocaml.doc(
      "<p>Filters the results based on the start time. The analysis must have started on or before this time.</p>"
    )
    @as("AnalysisStartTimeEnd")
    analysisStartTimeEnd: option<millisecondDateTime>,
    @ocaml.doc(
      "<p>Filters the results based on the start time. The analysis must have started on or after this time.</p>"
    )
    @as("AnalysisStartTimeBegin")
    analysisStartTimeBegin: option<millisecondDateTime>,
    @ocaml.doc("<p>The ID of the Network Access Scope.</p>") @as("NetworkInsightsAccessScopeId")
    networkInsightsAccessScopeId: option<networkInsightsAccessScopeId>,
    @ocaml.doc("<p>The IDs of the Network Access Scope analyses.</p>")
    @as("NetworkInsightsAccessScopeAnalysisIds")
    networkInsightsAccessScopeAnalysisIds: option<networkInsightsAccessScopeAnalysisIdList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The Network Access Scope analyses.</p>")
    @as("NetworkInsightsAccessScopeAnalyses")
    networkInsightsAccessScopeAnalyses: option<networkInsightsAccessScopeAnalysisList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeNetworkInsightsAccessScopeAnalysesCommand"
  let make = (
    ~nextToken=?,
    ~dryRun=?,
    ~maxResults=?,
    ~filters=?,
    ~analysisStartTimeEnd=?,
    ~analysisStartTimeBegin=?,
    ~networkInsightsAccessScopeId=?,
    ~networkInsightsAccessScopeAnalysisIds=?,
    (),
  ) =>
    new({
      nextToken: nextToken,
      dryRun: dryRun,
      maxResults: maxResults,
      filters: filters,
      analysisStartTimeEnd: analysisStartTimeEnd,
      analysisStartTimeBegin: analysisStartTimeBegin,
      networkInsightsAccessScopeId: networkInsightsAccessScopeId,
      networkInsightsAccessScopeAnalysisIds: networkInsightsAccessScopeAnalysisIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeNatGateways = {
  type t
  type request = {
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>One or more NAT gateway IDs.</p>") @as("NatGatewayIds")
    natGatewayIds: option<natGatewayIdStringList>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<describeNatGatewaysMaxResults>,
    @ocaml.doc("<p>One or more filters.</p>
         <ul>
            <li>
               <p>
                  <code>nat-gateway-id</code> - The ID of the NAT gateway.</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The state of the NAT gateway (<code>pending</code> |
              <code>failed</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p>
            </li>
            <li>
               <p>
                  <code>subnet-id</code> - The ID of the subnet in which the NAT gateway resides.</p>
            </li>
            <li>
		             <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
		          </li>
            <li>
			            <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
		          </li>
            <li>
               <p>
                  <code>vpc-id</code> - The ID of the VPC in which the NAT gateway resides.</p>
            </li>
         </ul>")
    @as("Filter")
    filter: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the NAT gateways.</p>") @as("NatGateways")
    natGateways: option<natGatewayList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeNatGatewaysCommand"
  let make = (~nextToken=?, ~natGatewayIds=?, ~maxResults=?, ~filter=?, ~dryRun=?, ()) =>
    new({
      nextToken: nextToken,
      natGatewayIds: natGatewayIds,
      maxResults: maxResults,
      filter: filter,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeManagedPrefixLists = {
  type t
  type request = {
    @ocaml.doc("<p>One or more prefix list IDs.</p>") @as("PrefixListIds")
    prefixListIds: option<valueStringList>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<prefixListMaxResults>,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
               <p>
                  <code>owner-id</code> - The ID of the prefix list owner.</p>
            </li>
            <li>
               <p>
                  <code>prefix-list-id</code> - The ID of the prefix list.</p>
            </li>
            <li>
               <p>
                  <code>prefix-list-name</code> - The name of the prefix list.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the prefix lists.</p>") @as("PrefixLists")
    prefixLists: option<managedPrefixListSet>,
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeManagedPrefixListsCommand"
  let make = (~prefixListIds=?, ~nextToken=?, ~maxResults=?, ~filters=?, ~dryRun=?, ()) =>
    new({
      prefixListIds: prefixListIds,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeLocalGateways = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<localGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters.</p>
         <ul>
            <li>
               <p>
                  <code>local-gateway-id</code> - The ID of a local gateway.</p>
            </li>
            <li>
               <p>
                  <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.</p>
            </li>
            <li>
               <p>
                  <code>owner-id</code> - The ID of the Amazon Web Services account that owns the local gateway.</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The state of the association.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of the local gateways.</p>") @as("LocalGatewayIds")
    localGatewayIds: option<localGatewayIdSet>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the local gateways.</p>") @as("LocalGateways")
    localGateways: option<localGatewaySet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeLocalGatewaysCommand"
  let make = (~dryRun=?, ~nextToken=?, ~maxResults=?, ~filters=?, ~localGatewayIds=?, ()) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      localGatewayIds: localGatewayIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeLocalGatewayVirtualInterfaces = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<localGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters.</p>
         <ul>
            <li>
               <p>
                  <code>local-address</code> - The local address.</p>
            </li>
            <li>
               <p>
                  <code>local-bgp-asn</code> - The Border Gateway Protocol (BGP) Autonomous System Number (ASN) 
               of the local gateway.</p>
            </li>
            <li>
               <p>
                  <code>local-gateway-id</code> - The ID of the local gateway.</p>
            </li>
            <li>
               <p>
                  <code>local-gateway-virtual-interface-id</code> - The ID of the virtual interface.</p>
            </li>
            <li>
               <p>
                  <code>local-gateway-virtual-interface-group-id</code> - The ID of the virtual interface group.</p>
            </li>
            <li>
               <p>
                  <code>owner-id</code> - The ID of the Amazon Web Services account that owns the local gateway virtual interface.</p>
            </li>
            <li>
               <p>
                  <code>peer-address</code> - The peer address.</p>
            </li>
            <li>
               <p>
                  <code>peer-bgp-asn</code> - The peer BGP ASN.</p>
            </li>
            <li>
               <p>
                  <code>vlan</code> - The ID of the VLAN.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of the virtual interfaces.</p>") @as("LocalGatewayVirtualInterfaceIds")
    localGatewayVirtualInterfaceIds: option<localGatewayVirtualInterfaceIdSet>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the virtual interfaces.</p>")
    @as("LocalGatewayVirtualInterfaces")
    localGatewayVirtualInterfaces: option<localGatewayVirtualInterfaceSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeLocalGatewayVirtualInterfacesCommand"
  let make = (
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~localGatewayVirtualInterfaceIds=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      localGatewayVirtualInterfaceIds: localGatewayVirtualInterfaceIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeLocalGatewayVirtualInterfaceGroups = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<localGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters.</p>
         <ul>
            <li>
               <p>
                  <code>local-gateway-id</code> - The ID of a local gateway.</p>
            </li>
            <li>
               <p>
                  <code>local-gateway-virtual-interface-group-id</code> - The ID of the virtual interface group.</p>
            </li>
            <li>
               <p>
                  <code>local-gateway-virtual-interface-id</code> - The ID of the virtual interface.</p>
            </li>
            <li>
               <p>
                  <code>owner-id</code> - The ID of the Amazon Web Services account that owns the local gateway virtual interface group.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of the virtual interface groups.</p>")
    @as("LocalGatewayVirtualInterfaceGroupIds")
    localGatewayVirtualInterfaceGroupIds: option<localGatewayVirtualInterfaceGroupIdSet>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The virtual interface groups.</p>") @as("LocalGatewayVirtualInterfaceGroups")
    localGatewayVirtualInterfaceGroups: option<localGatewayVirtualInterfaceGroupSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeLocalGatewayVirtualInterfaceGroupsCommand"
  let make = (
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~localGatewayVirtualInterfaceGroupIds=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      localGatewayVirtualInterfaceGroupIds: localGatewayVirtualInterfaceGroupIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeLocalGatewayRouteTables = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<localGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters.</p>
         <ul>
            <li>
               <p>
                  <code>local-gateway-id</code> - The ID of a local gateway.</p>
            </li>
            <li>
               <p>
                  <code>local-gateway-route-table-arn</code> - The Amazon Resource Name (ARN) of the 
               local gateway route table.</p>
            </li>
            <li>
               <p>
                  <code>local-gateway-route-table-id</code> - The ID of a local gateway route table.</p>
            </li>
            <li>
               <p>
                  <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.</p>
            </li>
            <li>
               <p>
                  <code>owner-id</code> - The ID of the Amazon Web Services account that owns the local gateway route table.</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The state of the local gateway route table.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of the local gateway route tables.</p>") @as("LocalGatewayRouteTableIds")
    localGatewayRouteTableIds: option<localGatewayRouteTableIdSet>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the local gateway route tables.</p>")
    @as("LocalGatewayRouteTables")
    localGatewayRouteTables: option<localGatewayRouteTableSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeLocalGatewayRouteTablesCommand"
  let make = (
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~localGatewayRouteTableIds=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      localGatewayRouteTableIds: localGatewayRouteTableIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeLocalGatewayRouteTableVpcAssociations = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<localGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters.</p>
         <ul>
            <li>
               <p>
                  <code>local-gateway-id</code> - The ID of a local gateway.</p>
            </li>
            <li>
               <p>
                  <code>local-gateway-route-table-arn</code> - The Amazon Resource Name (ARN) of the local 
               gateway route table for the association.</p>
            </li>
            <li>
               <p>
                  <code>local-gateway-route-table-id</code> - The ID of the local gateway route table.</p>
            </li>
            <li>
               <p>
                  <code>local-gateway-route-table-vpc-association-id</code> - The ID of the association.</p>
            </li>
            <li>
               <p>
                  <code>owner-id</code> - The ID of the Amazon Web Services account that owns the local gateway route table
               for the association.</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The state of the association.</p>
            </li>
            <li>
               <p>
                  <code>vpc-id</code> - The ID of the VPC.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of the associations.</p>") @as("LocalGatewayRouteTableVpcAssociationIds")
    localGatewayRouteTableVpcAssociationIds: option<localGatewayRouteTableVpcAssociationIdSet>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the associations.</p>")
    @as("LocalGatewayRouteTableVpcAssociations")
    localGatewayRouteTableVpcAssociations: option<localGatewayRouteTableVpcAssociationSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeLocalGatewayRouteTableVpcAssociationsCommand"
  let make = (
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~localGatewayRouteTableVpcAssociationIds=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      localGatewayRouteTableVpcAssociationIds: localGatewayRouteTableVpcAssociationIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<localGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters.</p>
         <ul>
            <li>
               <p>
                  <code>local-gateway-id</code> - The ID of a local gateway.</p>
            </li>
            <li>
               <p>
                  <code>local-gateway-route-table-arn</code> - The Amazon Resource Name (ARN) of the local 
               gateway route table for the virtual interface group.</p>
            </li>
            <li>
               <p>
                  <code>local-gateway-route-table-id</code> - The ID of the local gateway route table.</p>
            </li>
            <li>
               <p>
                  <code>local-gateway-route-table-virtual-interface-group-association-id</code> - The ID of the association.</p>
            </li>
            <li>
               <p>
                  <code>local-gateway-route-table-virtual-interface-group-id</code> - The ID of the virtual interface group.</p>
            </li>
            <li>
               <p>
                  <code>owner-id</code> - The ID of the Amazon Web Services account that owns the local gateway virtual 
               interface group association.</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The state of the association.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of the associations.</p>")
    @as("LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds")
    localGatewayRouteTableVirtualInterfaceGroupAssociationIds: option<
      localGatewayRouteTableVirtualInterfaceGroupAssociationIdSet,
    >,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the associations.</p>")
    @as("LocalGatewayRouteTableVirtualInterfaceGroupAssociations")
    localGatewayRouteTableVirtualInterfaceGroupAssociations: option<
      localGatewayRouteTableVirtualInterfaceGroupAssociationSet,
    >,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t =
    "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand"
  let make = (
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~localGatewayRouteTableVirtualInterfaceGroupAssociationIds=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      localGatewayRouteTableVirtualInterfaceGroupAssociationIds: localGatewayRouteTableVirtualInterfaceGroupAssociationIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeLaunchTemplates = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of results to return in a single call. To retrieve the remaining
            results, make another call with the returned <code>NextToken</code> value. This value
            can be between 1 and 200.</p>")
    @as("MaxResults")
    maxResults: option<describeLaunchTemplatesMaxResults>,
    @ocaml.doc("<p>The token to request the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                  <code>create-time</code> - The time the launch template was created.</p>
            </li>
            <li>
                <p>
                  <code>launch-template-name</code> - The name of the launch template.</p>
            </li>
            <li> 
               <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> 
            </li>
            <li> 
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> 
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>One or more launch template names.</p>") @as("LaunchTemplateNames")
    launchTemplateNames: option<launchTemplateNameStringList>,
    @ocaml.doc("<p>One or more launch template IDs.</p>") @as("LaunchTemplateIds")
    launchTemplateIds: option<launchTemplateIdStringList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The token to use to retrieve the next page of results. This value is <code>null</code>
            when there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the launch templates.</p>") @as("LaunchTemplates")
    launchTemplates: option<launchTemplateSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeLaunchTemplatesCommand"
  let make = (
    ~maxResults=?,
    ~nextToken=?,
    ~filters=?,
    ~launchTemplateNames=?,
    ~launchTemplateIds=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      filters: filters,
      launchTemplateNames: launchTemplateNames,
      launchTemplateIds: launchTemplateIds,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeKeyPairs = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The IDs of the key pairs.</p>") @as("KeyPairIds")
    keyPairIds: option<keyPairIdStringList>,
    @ocaml.doc("<p>The key pair names.</p>
         <p>Default: Describes all of your key pairs.</p>")
    @as("KeyNames")
    keyNames: option<keyNameStringList>,
    @ocaml.doc("<p>The filters.</p>
         <ul>
            <li>
     		        <p>
     			          <code>key-pair-id</code> - The ID of the key pair.</p>
     	      </li>
            <li>
               <p>
                  <code>fingerprint</code> - The fingerprint of the key pair.</p>
            </li>
            <li>
               <p>
                  <code>key-name</code> - The name of the key pair.</p>
            </li>
            <li>
     		        <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
     	      </li>
            <li>
     		        <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
     	      </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc("<p>Information about the key pairs.</p>") @as("KeyPairs")
    keyPairs: option<keyPairList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeKeyPairsCommand"
  let make = (~dryRun=?, ~keyPairIds=?, ~keyNames=?, ~filters=?, ()) =>
    new({dryRun: dryRun, keyPairIds: keyPairIds, keyNames: keyNames, filters: filters})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeIpv6Pools = {
  type t
  type request = {
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
                <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<ipv6PoolMaxResults>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The IDs of the IPv6 address pools.</p>") @as("PoolIds")
    poolIds: option<ipv6PoolIdList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Information about the IPv6 address pools.</p>") @as("Ipv6Pools")
    ipv6Pools: option<ipv6PoolSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeIpv6PoolsCommand"
  let make = (~filters=?, ~dryRun=?, ~maxResults=?, ~nextToken=?, ~poolIds=?, ()) =>
    new({
      filters: filters,
      dryRun: dryRun,
      maxResults: maxResults,
      nextToken: nextToken,
      poolIds: poolIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeIpams = {
  type t
  type request = {
    @ocaml.doc("<p>The IDs of the IPAMs you want information on.</p>") @as("IpamIds")
    ipamIds: option<valueStringList>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return in the request.</p>") @as("MaxResults")
    maxResults: option<ipamMaxResults>,
    @ocaml.doc(
      "<p>One or more filters for the request. For more information about filtering, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html\">Filtering CLI output</a>.</p>"
    )
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the IPAMs.</p>") @as("Ipams") ipams: option<ipamSet>,
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeIpamsCommand"
  let make = (~ipamIds=?, ~nextToken=?, ~maxResults=?, ~filters=?, ~dryRun=?, ()) =>
    new({
      ipamIds: ipamIds,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeIpamScopes = {
  type t
  type request = {
    @ocaml.doc("<p>The IDs of the scopes you want information on.</p>") @as("IpamScopeIds")
    ipamScopeIds: option<valueStringList>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return in the request.</p>") @as("MaxResults")
    maxResults: option<ipamMaxResults>,
    @ocaml.doc(
      "<p>One or more filters for the request. For more information about filtering, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html\">Filtering CLI output</a>.</p>"
    )
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The scopes you want information on.</p>") @as("IpamScopes")
    ipamScopes: option<ipamScopeSet>,
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeIpamScopesCommand"
  let make = (~ipamScopeIds=?, ~nextToken=?, ~maxResults=?, ~filters=?, ~dryRun=?, ()) =>
    new({
      ipamScopeIds: ipamScopeIds,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeIpamPools = {
  type t
  type request = {
    @ocaml.doc("<p>The IDs of the IPAM pools you would like information on.</p>") @as("IpamPoolIds")
    ipamPoolIds: option<valueStringList>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return in the request.</p>") @as("MaxResults")
    maxResults: option<ipamMaxResults>,
    @ocaml.doc(
      "<p>One or more filters for the request. For more information about filtering, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html\">Filtering CLI output</a>.</p>"
    )
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the IPAM pools.</p>") @as("IpamPools")
    ipamPools: option<ipamPoolSet>,
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeIpamPoolsCommand"
  let make = (~ipamPoolIds=?, ~nextToken=?, ~maxResults=?, ~filters=?, ~dryRun=?, ()) =>
    new({
      ipamPoolIds: ipamPoolIds,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeInternetGateways = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<describeInternetGatewaysMaxResults>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>One or more internet gateway IDs.</p>
        <p>Default: Describes all your internet gateways.</p>")
    @as("InternetGatewayIds")
    internetGatewayIds: option<internetGatewayIdList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                  <code>attachment.state</code> - The current state of the attachment between the gateway
                    and the VPC (<code>available</code>). Present only if a VPC is attached.</p>
            </li>
            <li>
                <p>
                  <code>attachment.vpc-id</code> - The ID of an attached VPC.</p>
            </li>
            <li>
                <p>
                  <code>internet-gateway-id</code> - The ID of the Internet gateway.</p>
            </li>
            <li>
                <p>
                  <code>owner-id</code> - The ID of the Amazon Web Services account that owns the internet gateway.</p>
            </li>
            <li>
                <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
                <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about one or more internet gateways.</p>") @as("InternetGateways")
    internetGateways: option<internetGatewayList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeInternetGatewaysCommand"
  let make = (~maxResults=?, ~nextToken=?, ~internetGatewayIds=?, ~dryRun=?, ~filters=?, ()) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      internetGatewayIds: internetGatewayIds,
      dryRun: dryRun,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeImportSnapshotTasks = {
  type t
  type request = {
    @ocaml.doc("<p>A token that indicates the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call
   with the returned <code>NextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>A list of import snapshot task IDs.</p>") @as("ImportTaskIds")
    importTaskIds: option<importSnapshotTaskIdList>,
    @ocaml.doc("<p>The filters.</p>") @as("Filters") filters: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results
   to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>A list of zero or more import snapshot tasks that are currently active or were completed or canceled in the
   previous 7 days.</p>")
    @as("ImportSnapshotTasks")
    importSnapshotTasks: option<importSnapshotTaskList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeImportSnapshotTasksCommand"
  let make = (~nextToken=?, ~maxResults=?, ~importTaskIds=?, ~filters=?, ~dryRun=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      importTaskIds: importTaskIds,
      filters: filters,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeHostReservations = {
  type t
  type request = {
    @ocaml.doc("<p>The token to use to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc(
      "<p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p>"
    )
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>The host reservation IDs.</p>") @as("HostReservationIdSet")
    hostReservationIdSet: option<hostReservationIdSet>,
    @ocaml.doc("<p>The filters.</p>
        <ul>
            <li>
                <p>
                    <code>instance-family</code> - The instance family (for example,
                    <code>m4</code>).</p>
            </li>
            <li>
                <p>
                    <code>payment-option</code> - The payment option (<code>NoUpfront</code> |
                        <code>PartialUpfront</code> | <code>AllUpfront</code>).</p>
            </li>
            <li>
                <p>
                    <code>state</code> - The state of the reservation (<code>payment-pending</code>
                    | <code>payment-failed</code> | <code>active</code> |
                    <code>retired</code>).</p>
            </li>
            <li>
        		     <p>
                  <code>tag:<key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
        	   </li>
            <li>
        		     <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
        	   </li>
         </ul>")
    @as("Filter")
    filter: option<filterList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Details about the reservation's configuration.</p>") @as("HostReservationSet")
    hostReservationSet: option<hostReservationSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeHostReservationsCommand"
  let make = (~nextToken=?, ~maxResults=?, ~hostReservationIdSet=?, ~filter=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      hostReservationIdSet: hostReservationIdSet,
      filter: filter,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeFpgaImages = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of results to return in a single call.</p>") @as("MaxResults")
    maxResults: option<describeFpgaImagesMaxResults>,
    @ocaml.doc("<p>The token to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The filters.</p>
		       <ul>
            <li>
               <p>
                  <code>create-time</code> - The creation time of the AFI.</p>
            </li>
            <li>
               <p>
                  <code>fpga-image-id</code> - The FPGA image identifier (AFI ID).</p>
            </li>
            <li>
               <p>
                  <code>fpga-image-global-id</code> - The global FPGA image identifier (AGFI ID).</p>
            </li>
            <li>
               <p>
                  <code>name</code> - The name of the AFI.</p>
            </li>
            <li>
               <p>
                  <code>owner-id</code> - The Amazon Web Services account ID of the AFI owner.</p>
            </li>
            <li>
               <p>
                  <code>product-code</code> - The product code.</p>
            </li>
            <li>
               <p>
                  <code>shell-version</code> - The version of the Amazon Web Services Shell that was used to create the bitstream.</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The state of the AFI (<code>pending</code> | <code>failed</code> | <code>available</code> | <code>unavailable</code>).</p>
            </li>
            <li>
               <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
            </li>
            <li>
               <p>
                  <code>update-time</code> - The time of the most recent update.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Filters the AFI by owner. Specify an Amazon Web Services account ID, <code>self</code> 
			(owner is the sender of the request), or an Amazon Web Services owner alias (valid values are 
			<code>amazon</code> | <code>aws-marketplace</code>).</p>")
    @as("Owners")
    owners: option<ownerStringList>,
    @ocaml.doc("<p>The AFI IDs.</p>") @as("FpgaImageIds") fpgaImageIds: option<fpgaImageIdList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Information about the FPGA images.</p>") @as("FpgaImages")
    fpgaImages: option<fpgaImageList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeFpgaImagesCommand"
  let make = (~maxResults=?, ~nextToken=?, ~filters=?, ~owners=?, ~fpgaImageIds=?, ~dryRun=?, ()) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      filters: filters,
      owners: owners,
      fpgaImageIds: fpgaImageIds,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeFlowLogs = {
  type t
  type request = {
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>One or more flow log IDs.</p>
        <p>Constraint: Maximum of 1000 flow log IDs.</p>")
    @as("FlowLogIds")
    flowLogIds: option<flowLogIdList>,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                    <code>deliver-log-status</code> - The status of the logs delivery (<code>SUCCESS</code> |
                    <code>FAILED</code>).</p>
            </li>
            <li>
                <p>
                    <code>log-destination-type</code> - The type of destination to which the flow
                    log publishes data. Possible destination types include
                    <code>cloud-watch-logs</code> and <code>s3</code>.</p>
            </li>
            <li>
                <p>
                    <code>flow-log-id</code> - The ID of the flow log.</p>
            </li>
            <li>
                <p>
                    <code>log-group-name</code> - The name of the log group.</p>
            </li>
            <li>
                <p>
                    <code>resource-id</code> - The ID of the VPC, subnet, or network interface.</p>
            </li>
            <li>
                <p>
                    <code>traffic-type</code> - The type of traffic (<code>ACCEPT</code> |
                    <code>REJECT</code> | <code>ALL</code>).</p>
            </li>
            <li>
               <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
            </li>
         </ul>")
    @as("Filter")
    filter: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the flow logs.</p>") @as("FlowLogs")
    flowLogs: option<flowLogSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeFlowLogsCommand"
  let make = (~nextToken=?, ~maxResults=?, ~flowLogIds=?, ~filter=?, ~dryRun=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      flowLogIds: flowLogIds,
      filter: filter,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeExportTasks = {
  type t
  type request = {
    @ocaml.doc("<p>the filters for the export tasks.</p>") @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The export task IDs.</p>") @as("ExportTaskIds")
    exportTaskIds: option<exportTaskIdStringList>,
  }
  type response = {
    @ocaml.doc("<p>Information about the export tasks.</p>") @as("ExportTasks")
    exportTasks: option<exportTaskList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeExportTasksCommand"
  let make = (~filters=?, ~exportTaskIds=?, ()) =>
    new({filters: filters, exportTaskIds: exportTaskIds})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeExportImageTasks = {
  type t
  type request = {
    @ocaml.doc("<p>A token that indicates the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return in a single call.</p>") @as("MaxResults")
    maxResults: option<describeExportImageTasksMaxResults>,
    @ocaml.doc("<p>The IDs of the export image tasks.</p>") @as("ExportImageTaskIds")
    exportImageTaskIds: option<exportImageTaskIdList>,
    @ocaml.doc("<p>Filter tasks using the <code>task-state</code> filter and one of the following values: <code>active</code>,
    <code>completed</code>, <code>deleting</code>, or <code>deleted</code>.</p>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results
   to return.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Information about the export image tasks.</p>") @as("ExportImageTasks")
    exportImageTasks: option<exportImageTaskList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeExportImageTasksCommand"
  let make = (~nextToken=?, ~maxResults=?, ~exportImageTaskIds=?, ~filters=?, ~dryRun=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      exportImageTaskIds: exportImageTaskIds,
      filters: filters,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeElasticGpus = {
  type t
  type request = {
    @ocaml.doc("<p>The token to request the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. To retrieve the remaining
            results, make another call with the returned <code>NextToken</code> value. This value
            can be between 5 and 1000.</p>")
    @as("MaxResults")
    maxResults: option<describeElasticGpusMaxResults>,
    @ocaml.doc("<p>The filters.</p>
        <ul>
            <li>
                <p>
                  <code>availability-zone</code> - The Availability Zone in which the
                    Elastic Graphics accelerator resides.</p>
            </li>
            <li>
                <p>
                  <code>elastic-gpu-health</code> - The status of the Elastic Graphics accelerator
                        (<code>OK</code> | <code>IMPAIRED</code>).</p>
            </li>
            <li>
                <p>
                  <code>elastic-gpu-state</code> - The state of the Elastic Graphics accelerator
                        (<code>ATTACHED</code>).</p>
            </li>
            <li>
                <p>
                  <code>elastic-gpu-type</code> - The type of Elastic Graphics accelerator; for example,
                        <code>eg1.medium</code>.</p>
            </li>
            <li>
                <p>
                  <code>instance-id</code> - The ID of the instance to which the
                    Elastic Graphics accelerator is associated.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The Elastic Graphics accelerator IDs.</p>") @as("ElasticGpuIds")
    elasticGpuIds: option<elasticGpuIdSet>,
  }
  type response = {
    @ocaml.doc("<p>The token to use to retrieve the next page of results. This value is
                <code>null</code> when there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The total number of items to return. If the total number of items available is more
            than the value specified in max-items then a Next-Token will be provided in the output
            that you can use to resume pagination.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>Information about the Elastic Graphics accelerators.</p>") @as("ElasticGpuSet")
    elasticGpuSet: option<elasticGpuSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeElasticGpusCommand"
  let make = (~nextToken=?, ~maxResults=?, ~filters=?, ~dryRun=?, ~elasticGpuIds=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      dryRun: dryRun,
      elasticGpuIds: elasticGpuIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeEgressOnlyInternetGateways = {
  type t
  type request = {
    @ocaml.doc("<p>One or more filters.</p>
    	    <ul>
            <li>
    			        <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    		      </li>
            <li>
    			        <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
    		      </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<describeEgressOnlyInternetGatewaysMaxResults>,
    @ocaml.doc("<p>One or more egress-only internet gateway IDs.</p>")
    @as("EgressOnlyInternetGatewayIds")
    egressOnlyInternetGatewayIds: option<egressOnlyInternetGatewayIdList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the egress-only internet gateways.</p>")
    @as("EgressOnlyInternetGateways")
    egressOnlyInternetGateways: option<egressOnlyInternetGatewayList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeEgressOnlyInternetGatewaysCommand"
  let make = (
    ~filters=?,
    ~nextToken=?,
    ~maxResults=?,
    ~egressOnlyInternetGatewayIds=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      filters: filters,
      nextToken: nextToken,
      maxResults: maxResults,
      egressOnlyInternetGatewayIds: egressOnlyInternetGatewayIds,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeCustomerGateways = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeCustomerGateways.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                  <code>bgp-asn</code> - The customer gateway's Border Gateway Protocol (BGP)
                    Autonomous System Number (ASN).</p>
            </li>
            <li>
                <p>
                  <code>customer-gateway-id</code> - The ID of the customer gateway.</p>
            </li>
            <li>
                <p>
                  <code>ip-address</code> - The IP address of the customer gateway's
                    Internet-routable external interface.</p>
            </li>
            <li>
                <p>
                  <code>state</code> - The state of the customer gateway (<code>pending</code> |
                        <code>available</code> | <code>deleting</code> |
                    <code>deleted</code>).</p>
            </li>
            <li>
                <p>
                  <code>type</code> - The type of customer gateway. Currently, the only
                    supported type is <code>ipsec.1</code>.</p>
            </li>
            <li> 
               <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> 
            </li>
            <li> 
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> 
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>One or more customer gateway IDs.</p>
        <p>Default: Describes all your customer gateways.</p>")
    @as("CustomerGatewayIds")
    customerGatewayIds: option<customerGatewayIdStringList>,
  }
  @ocaml.doc("<p>Contains the output of DescribeCustomerGateways.</p>")
  type response = {
    @ocaml.doc("<p>Information about one or more customer gateways.</p>") @as("CustomerGateways")
    customerGateways: option<customerGatewayList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeCustomerGatewaysCommand"
  let make = (~dryRun=?, ~filters=?, ~customerGatewayIds=?, ()) =>
    new({dryRun: dryRun, filters: filters, customerGatewayIds: customerGatewayIds})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeCoipPools = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<coipPoolMaxResults>,
    @ocaml.doc("<p>One or more filters.</p>
         <ul>
            <li>
               <p>
                  <code>coip-pool.local-gateway-route-table-id</code> - The ID of the local gateway route table.</p>
            </li>
            <li>
               <p>
                  <code>coip-pool.pool-id</code> - The ID of the address pool.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of the address pools.</p>") @as("PoolIds")
    poolIds: option<coipPoolIdSet>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the address pools.</p>") @as("CoipPools")
    coipPools: option<coipPoolSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeCoipPoolsCommand"
  let make = (~dryRun=?, ~nextToken=?, ~maxResults=?, ~filters=?, ~poolIds=?, ()) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      poolIds: poolIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeClassicLinkInstances = {
  type t
  type request = {
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
		       <p>Constraint: If the value is greater than 1000, we return only 1000 items.</p>")
    @as("MaxResults")
    maxResults: option<describeClassicLinkInstancesMaxResults>,
    @ocaml.doc(
      "<p>One or more instance IDs. Must be instances linked to a VPC through ClassicLink.</p>"
    )
    @as("InstanceIds")
    instanceIds: option<instanceIdStringList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more filters.</p>
		       <ul>
            <li>
                      <p>
                  <code>group-id</code> - The ID of a VPC security group that's associated with the instance.</p>
                  </li>
            <li>
				           <p>
                  <code>instance-id</code> - The ID of the instance.</p>
			         </li>
            <li>
			            <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
			         </li>
            <li>
				           <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
			         </li>
            <li>

				           <p>
					             <code>vpc-id</code> - The ID of the VPC to which the instance is
					linked.</p>

				           <p>
                  <code>vpc-id</code> - The ID of the VPC that the instance is linked to.</p>

			         </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about one or more linked EC2-Classic instances.</p>")
    @as("Instances")
    instances: option<classicLinkInstanceList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeClassicLinkInstancesCommand"
  let make = (~nextToken=?, ~maxResults=?, ~instanceIds=?, ~dryRun=?, ~filters=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      instanceIds: instanceIds,
      dryRun: dryRun,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeCarrierGateways = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<carrierGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                  <code>carrier-gateway-id</code> - The ID of the carrier gateway.</p>
            </li>
            <li>
                <p>
                  <code>state</code> - The state of the carrier gateway (<code>pending</code> |
                    <code>failed</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p>
            </li>
            <li>
                <p>
                  <code>owner-id</code> - The Amazon Web Services account ID of the owner of the carrier gateway.</p>
            </li>
            <li>
                <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
                <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
            </li>
            <li>
                <p>
                  <code>vpc-id</code> - The ID of the VPC associated with the carrier gateway.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>One or more carrier gateway IDs.</p>") @as("CarrierGatewayIds")
    carrierGatewayIds: option<carrierGatewayIdSet>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the carrier gateway.</p>") @as("CarrierGateways")
    carrierGateways: option<carrierGatewaySet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeCarrierGatewaysCommand"
  let make = (~dryRun=?, ~nextToken=?, ~maxResults=?, ~filters=?, ~carrierGatewayIds=?, ()) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      carrierGatewayIds: carrierGatewayIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeCapacityReservations = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more filters.</p>
	  	     <ul>
            <li>
               <p>
                  <code>instance-type</code> - The type of instance for which the Capacity Reservation reserves capacity.</p>
            </li>
            <li>
               <p>
                  <code>owner-id</code> - The ID of the Amazon Web Services account that owns the Capacity Reservation.</p>
            </li>
            <li>
               <p>
                  <code>instance-platform</code> - The type of operating system for which the Capacity Reservation reserves capacity.</p>
            </li>
            <li>
               <p>
                  <code>availability-zone</code> - The Availability Zone of the Capacity Reservation.</p>
            </li>
            <li>
               <p>
                  <code>tenancy</code> - Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the 
	  			following tenancy settings:</p>
	  			         <ul>
                  <li>
                     <p>
                        <code>default</code> - The Capacity Reservation is created on hardware that is shared with other Amazon Web Services accounts.</p>
                  </li>
                  <li>
                     <p>
                        <code>dedicated</code> - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single Amazon Web Services account.</p>
                  </li>
               </ul>
	  			      </li>
            <li>
               <p>
                  <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost on which the Capacity Reservation was created.</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p>
	  		          <ul>
                  <li>
                     <p>
                        <code>active</code>- The Capacity Reservation is active and the capacity is available for your use.</p>
                  </li>
                  <li>
                     <p>
                        <code>expired</code> - The Capacity Reservation expired automatically at the date and time specified in your request. 
	  				The reserved capacity is no longer available for your use.</p>
                  </li>
                  <li>
                     <p>
                        <code>cancelled</code> - The Capacity Reservation was cancelled. The reserved capacity is no longer available for your use.</p>
                  </li>
                  <li>
                     <p>
                        <code>pending</code> - The Capacity Reservation request was successful but the capacity provisioning is still pending.</p>
                  </li>
                  <li>
                     <p>
                        <code>failed</code> - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, 
	  				capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.</p>
	  		             </li>
               </ul>
	  		       </li>
            <li>
               <p>
                  <code>start-date</code> - The date and time at which the Capacity Reservation was started.</p>
            </li>
            <li>
               <p>
                  <code>end-date</code> - The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is 
	  			released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time.</p>
            </li>
            <li>
               <p>
                  <code>end-date-type</code> - Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:</p>
	  		          <ul>
                  <li>
                     <p>
                        <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it.</p>
                  </li>
                  <li>
                     <p>
                        <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time.</p>
                  </li>
               </ul>
	  		       </li>
            <li>
               <p>
                  <code>instance-match-criteria</code> - Indicates the type of instance launches that the Capacity Reservation accepts. The options include:</p>
	  			         <ul>
                  <li>
                     <p>
                        <code>open</code> - The Capacity Reservation accepts all instances that have matching
							attributes (instance type, platform, and Availability Zone). Instances
							that have matching attributes launch into the Capacity Reservation
							automatically without specifying any additional parameters.</p>
                  </li>
                  <li>
                     <p>
                        <code>targeted</code> - The Capacity Reservation only accepts instances that have matching
							attributes (instance type, platform, and Availability Zone), and
							explicitly target the Capacity Reservation. This ensures that only
							permitted instances can use the reserved capacity.</p>
                  </li>
               </ul>
	  		       </li>
            <li>
	  			         <p>
                  <code>placement-group-arn</code> - The ARN of the cluster placement group in which the Capacity Reservation was created.</p>
	  		       </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc(
      "<p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p>"
    )
    @as("MaxResults")
    maxResults: option<describeCapacityReservationsMaxResults>,
    @ocaml.doc("<p>The token to use to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The ID of the Capacity Reservation.</p>") @as("CapacityReservationIds")
    capacityReservationIds: option<capacityReservationIdSet>,
  }
  type response = {
    @ocaml.doc("<p>Information about the Capacity Reservations.</p>") @as("CapacityReservations")
    capacityReservations: option<capacityReservationSet>,
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeCapacityReservationsCommand"
  let make = (~dryRun=?, ~filters=?, ~maxResults=?, ~nextToken=?, ~capacityReservationIds=?, ()) =>
    new({
      dryRun: dryRun,
      filters: filters,
      maxResults: maxResults,
      nextToken: nextToken,
      capacityReservationIds: capacityReservationIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeCapacityReservationFleets = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more filters.</p>
		       <ul>
            <li>
				           <p>
                  <code>state</code> - The state of the Fleet (<code>submitted</code> | <code>modifying</code> | <code>active</code> | 
					<code>partially_fulfilled</code> | <code>expiring</code> | <code>expired</code> | <code>cancelling</code> | 
					<code>cancelled</code> | <code>failed</code>).</p>
			         </li>
            <li>
				           <p>
                  <code>instance-match-criteria</code> - The instance matching criteria for the Fleet. Only <code>open</code> is supported.</p>
			         </li>
            <li>
				           <p>
                  <code>tenancy</code> - The tenancy of the Fleet (<code>default</code> | <code>dedicated</code>).</p>
			         </li>
            <li>
				           <p>
                  <code>allocation-strategy</code> - The allocation strategy used by the Fleet. Only <code>prioritized</code> is supported.</p>
			         </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc(
      "<p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p>"
    )
    @as("MaxResults")
    maxResults: option<describeCapacityReservationFleetsMaxResults>,
    @ocaml.doc("<p>The token to use to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The IDs of the Capacity Reservation Fleets to describe.</p>")
    @as("CapacityReservationFleetIds")
    capacityReservationFleetIds: option<capacityReservationFleetIdSet>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the Capacity Reservation Fleets.</p>")
    @as("CapacityReservationFleets")
    capacityReservationFleets: option<capacityReservationFleetSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeCapacityReservationFleetsCommand"
  let make = (
    ~dryRun=?,
    ~filters=?,
    ~maxResults=?,
    ~nextToken=?,
    ~capacityReservationFleetIds=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      filters: filters,
      maxResults: maxResults,
      nextToken: nextToken,
      capacityReservationFleetIds: capacityReservationFleetIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeBundleTasks = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The filters.</p>
         <ul>
            <li>
               <p>
                  <code>bundle-id</code> - The ID of the bundle task.</p>
            </li>
            <li>
               <p>
                  <code>error-code</code> - If the task failed, the error code returned.</p>
            </li>
            <li>
               <p>
                  <code>error-message</code> - If the task failed, the error message returned.</p>
            </li>
            <li>
               <p>
                  <code>instance-id</code> - The ID of the instance.</p>
            </li>
            <li>
               <p>
                  <code>progress</code> - The level of task completion, as a percentage (for example, 20%).</p>
            </li>
            <li>
               <p>
                  <code>s3-bucket</code> - The Amazon S3 bucket to store the AMI.</p>
            </li>
            <li>
               <p>
                  <code>s3-prefix</code> - The beginning of the AMI name.</p>
            </li>
            <li>
               <p>
                  <code>start-time</code> - The time the task started (for example, 2013-09-15T17:15:20.000Z).</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The state of the task (<code>pending</code> | <code>waiting-for-shutdown</code> | <code>bundling</code> |
           <code>storing</code> | <code>cancelling</code> | <code>complete</code> | <code>failed</code>).</p>
            </li>
            <li>
               <p>
                  <code>update-time</code> - The time of the most recent update for the task.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The bundle task IDs.</p>
         <p>Default: Describes all your bundle tasks.</p>")
    @as("BundleIds")
    bundleIds: option<bundleIdStringList>,
  }
  type response = {
    @ocaml.doc("<p>Information about the bundle tasks.</p>") @as("BundleTasks")
    bundleTasks: option<bundleTaskList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeBundleTasksCommand"
  let make = (~dryRun=?, ~filters=?, ~bundleIds=?, ()) =>
    new({dryRun: dryRun, filters: filters, bundleIds: bundleIds})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeAvailabilityZones = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Include all Availability Zones, Local Zones, and Wavelength Zones regardless of your
      opt-in status.</p>
         <p>If you do not use this parameter, the results include only the zones for the Regions where you have chosen the option to opt in.</p>")
    @as("AllAvailabilityZones")
    allAvailabilityZones: option<boolean_>,
    @ocaml.doc("<p>The IDs of the Availability Zones, Local Zones, and Wavelength Zones.</p>")
    @as("ZoneIds")
    zoneIds: option<zoneIdStringList>,
    @ocaml.doc("<p>The names of the Availability Zones, Local Zones, and Wavelength Zones.</p>")
    @as("ZoneNames")
    zoneNames: option<zoneNameStringList>,
    @ocaml.doc("<p>The filters.</p>
         <ul>
            <li>
               <p>
                  <code>group-name</code> - For Availability Zones, use the Region name. For Local
          Zones, use the name of the group associated with the Local Zone (for example,
            <code>us-west-2-lax-1</code>) For Wavelength Zones, use the name of the group associated
          with the Wavelength Zone (for example, <code>us-east-1-wl1-bos-wlz-1</code>).</p>
            </li>
            <li>
               <p>
                  <code>message</code> - The Zone message.</p>
            </li>
            <li>
               <p>
                  <code>opt-in-status</code> - The opt-in status (<code>opted-in</code>, and
            <code>not-opted-in</code> | <code>opt-in-not-required</code>).</p>
            </li>
            <li>
               <p>
                  <code>parent-zoneID</code> - The ID of the zone that handles some of the Local Zone
          and Wavelength Zone control plane operations, such as API calls.</p>
            </li>
            <li>
               <p>
                  <code>parent-zoneName</code> - The ID of the zone that handles some of the Local Zone
          and Wavelength Zone control plane operations, such as API calls.</p>
            </li>
            <li>
               <p>
                  <code>region-name</code> - The name of the Region for the Zone (for example,
            <code>us-east-1</code>).</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The state of the Availability Zone, the Local Zone, or the
          Wavelength Zone (<code>available</code>).</p>
            </li>
            <li>
               <p>
                  <code>zone-id</code> - The ID of the Availability Zone (for example,
            <code>use1-az1</code>), the Local Zone (for example, <code>usw2-lax1-az1</code>), or the
          Wavelength Zone (for example, <code>us-east-1-wl1-bos-wlz-1</code>).</p>
            </li>
            <li>
               <p>
                  <code>zone-type</code> - The type of zone, for example, <code>local-zone</code>.</p>
            </li>
            <li>
               <p>
                  <code>zone-name</code> - The name of the Availability Zone (for example,
            <code>us-east-1a</code>), the Local Zone (for example, <code>us-west-2-lax-1a</code>), or
          the Wavelength Zone (for example, <code>us-east-1-wl1-bos-wlz-1</code>).</p>
            </li>
            <li>
               <p>
                  <code>zone-type</code> - The type of zone, for example, <code>local-zone</code>.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc(
      "<p>Information about the Availability Zones, Local Zones, and Wavelength Zones.</p>"
    )
    @as("AvailabilityZones")
    availabilityZones: option<availabilityZoneList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeAvailabilityZonesCommand"
  let make = (~dryRun=?, ~allAvailabilityZones=?, ~zoneIds=?, ~zoneNames=?, ~filters=?, ()) =>
    new({
      dryRun: dryRun,
      allAvailabilityZones: allAvailabilityZones,
      zoneIds: zoneIds,
      zoneNames: zoneNames,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeAddresses = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>[EC2-VPC] Information about the allocation IDs.</p>") @as("AllocationIds")
    allocationIds: option<allocationIdList>,
    @ocaml.doc("<p>One or more Elastic IP addresses.</p>
         <p>Default: Describes all your Elastic IP addresses.</p>")
    @as("PublicIps")
    publicIps: option<publicIpStringList>,
    @ocaml.doc("<p>One or more filters. Filter names and values are case-sensitive.</p>
         <ul>
            <li>
               <p>
                  <code>allocation-id</code> - [EC2-VPC] The allocation ID for the address.</p>
            </li>
            <li>
               <p>
                  <code>association-id</code> - [EC2-VPC] The association ID for the address.</p>
            </li>
            <li>
               <p>
                  <code>domain</code> - Indicates whether the address is for use in EC2-Classic (<code>standard</code>) 
              or in a VPC (<code>vpc</code>).</p>
            </li>
            <li>
               <p>
                  <code>instance-id</code> - The ID of the instance the address is associated with, if any.</p>
            </li>
            <li>
               <p>
                  <code>network-border-group</code> -  A unique set of Availability Zones, Local Zones,
           or Wavelength Zones from where Amazon Web Services advertises IP addresses. </p>
            </li>
            <li>
               <p>
                  <code>network-interface-id</code> - [EC2-VPC] The ID of the network interface that the address is associated with, if any.</p>
            </li>
            <li>
               <p>
                  <code>network-interface-owner-id</code> - The Amazon Web Services account ID of the owner.</p>
            </li>
            <li>
               <p>
                  <code>private-ip-address</code> - [EC2-VPC] The private IP address associated with the Elastic IP address.</p>
            </li>
            <li>
               <p>
                  <code>public-ip</code> - The Elastic IP address, or the carrier IP address.</p>
            </li>
            <li>
               <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc("<p>Information about the Elastic IP addresses.</p>") @as("Addresses")
    addresses: option<addressList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeAddressesCommand"
  let make = (~dryRun=?, ~allocationIds=?, ~publicIps=?, ~filters=?, ()) =>
    new({dryRun: dryRun, allocationIds: allocationIds, publicIps: publicIps, filters: filters})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeAccountAttributes = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
           and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
           Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The account attribute names.</p>") @as("AttributeNames")
    attributeNames: option<accountAttributeNameStringList>,
  }
  type response = {
    @ocaml.doc("<p>Information about the account attributes.</p>") @as("AccountAttributes")
    accountAttributes: option<accountAttributeList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeAccountAttributesCommand"
  let make = (~dryRun=?, ~attributeNames=?, ()) =>
    new({dryRun: dryRun, attributeNames: attributeNames})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DeleteTransitGatewayConnectPeer = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Connect peer.</p>") @as("TransitGatewayConnectPeerId")
    transitGatewayConnectPeerId: transitGatewayConnectPeerId,
  }
  type response = {
    @ocaml.doc("<p>Information about the deleted Connect peer.</p>")
    @as("TransitGatewayConnectPeer")
    transitGatewayConnectPeer: option<transitGatewayConnectPeer>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DeleteTransitGatewayConnectPeerCommand"
  let make = (~transitGatewayConnectPeerId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, transitGatewayConnectPeerId: transitGatewayConnectPeerId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateVpnGateway = {
  type t
  @ocaml.doc("<p>Contains the parameters for CreateVpnGateway.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>A private Autonomous System Number (ASN) for the Amazon side of a BGP session. If
            you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If you're using a
            32-bit ASN, it must be in the 4200000000 to 4294967294 range.</p>
        <p>Default: 64512</p>")
    @as("AmazonSideAsn")
    amazonSideAsn: option<long>,
    @ocaml.doc("<p>The tags to apply to the virtual private gateway.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The type of VPN connection this virtual private gateway supports.</p>")
    @as("Type")
    type_: gatewayType,
    @ocaml.doc("<p>The Availability Zone for the virtual private gateway.</p>")
    @as("AvailabilityZone")
    availabilityZone: option<string_>,
  }
  @ocaml.doc("<p>Contains the output of CreateVpnGateway.</p>")
  type response = {
    @ocaml.doc("<p>Information about the virtual private gateway.</p>") @as("VpnGateway")
    vpnGateway: option<vpnGateway>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateVpnGatewayCommand"
  let make = (~type_, ~dryRun=?, ~amazonSideAsn=?, ~tagSpecifications=?, ~availabilityZone=?, ()) =>
    new({
      dryRun: dryRun,
      amazonSideAsn: amazonSideAsn,
      tagSpecifications: tagSpecifications,
      type_: type_,
      availabilityZone: availabilityZone,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateVpcPeeringConnection = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to assign to the peering connection.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The Region code for the accepter VPC, if the accepter VPC is located in a Region
            other than the Region in which you make the request.</p>
		       <p>Default: The Region in which you make the request.</p>")
    @as("PeerRegion")
    peerRegion: option<string_>,
    @ocaml.doc("<p>The ID of the requester VPC. You must specify this parameter in the
			request.</p>")
    @as("VpcId")
    vpcId: option<vpcId>,
    @ocaml.doc("<p>The ID of the VPC with which you are creating the VPC peering connection. You must
			specify this parameter in the request.</p>")
    @as("PeerVpcId")
    peerVpcId: option<string_>,
    @ocaml.doc("<p>The Amazon Web Services account ID of the owner of the accepter VPC.</p>
         <p>Default: Your Amazon Web Services account ID</p>")
    @as("PeerOwnerId")
    peerOwnerId: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the VPC peering connection.</p>") @as("VpcPeeringConnection")
    vpcPeeringConnection: option<vpcPeeringConnection>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateVpcPeeringConnectionCommand"
  let make = (
    ~tagSpecifications=?,
    ~peerRegion=?,
    ~vpcId=?,
    ~peerVpcId=?,
    ~peerOwnerId=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      tagSpecifications: tagSpecifications,
      peerRegion: peerRegion,
      vpcId: vpcId,
      peerVpcId: peerVpcId,
      peerOwnerId: peerOwnerId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateVpcEndpointServiceConfiguration = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to associate with the service.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
            For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to ensure
                idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The Amazon Resource Names (ARNs) of one or more Gateway Load Balancers.</p>")
    @as("GatewayLoadBalancerArns")
    gatewayLoadBalancerArns: option<valueStringList>,
    @ocaml.doc("<p>The Amazon Resource Names (ARNs) of one or more Network Load Balancers for your
            service.</p>")
    @as("NetworkLoadBalancerArns")
    networkLoadBalancerArns: option<valueStringList>,
    @ocaml.doc(
      "<p>(Interface endpoint configuration) The private DNS name to assign to the VPC endpoint service.</p>"
    )
    @as("PrivateDnsName")
    privateDnsName: option<string_>,
    @ocaml.doc("<p>Indicates whether requests from service consumers to create an endpoint to your service must
            be accepted. To accept a request, use <a>AcceptVpcEndpointConnections</a>.</p>")
    @as("AcceptanceRequired")
    acceptanceRequired: option<boolean_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Information about the service configuration.</p>") @as("ServiceConfiguration")
    serviceConfiguration: option<serviceConfiguration>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateVpcEndpointServiceConfigurationCommand"
  let make = (
    ~tagSpecifications=?,
    ~clientToken=?,
    ~gatewayLoadBalancerArns=?,
    ~networkLoadBalancerArns=?,
    ~privateDnsName=?,
    ~acceptanceRequired=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      tagSpecifications: tagSpecifications,
      clientToken: clientToken,
      gatewayLoadBalancerArns: gatewayLoadBalancerArns,
      networkLoadBalancerArns: networkLoadBalancerArns,
      privateDnsName: privateDnsName,
      acceptanceRequired: acceptanceRequired,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateVpcEndpoint = {
  type t
  @ocaml.doc("<p>Contains the parameters for CreateVpcEndpoint.</p>")
  type request = {
    @ocaml.doc("<p>The tags to associate with the endpoint.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>(Interface endpoint) Indicates whether to associate a private hosted zone with the
            specified VPC. The private hosted zone contains a record set for the default public DNS
            name for the service for the Region (for example,
                <code>kinesis.us-east-1.amazonaws.com</code>), which resolves to the private IP
            addresses of the endpoint network interfaces in the VPC. This enables you to make
            requests to the default public DNS name for the service instead of the public DNS names
            that are automatically generated by the VPC endpoint service.</p>
        <p>To use a private hosted zone, you must set the following VPC attributes to
            <code>true</code>: <code>enableDnsHostnames</code> and
            <code>enableDnsSupport</code>. Use <a>ModifyVpcAttribute</a> to set the VPC
            attributes.</p>
        <p>Default: <code>true</code>
         </p>")
    @as("PrivateDnsEnabled")
    privateDnsEnabled: option<boolean_>,
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure
                idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>(Interface endpoint) The ID of one or more security groups to associate with the
            endpoint network interface.</p>")
    @as("SecurityGroupIds")
    securityGroupIds: option<vpcEndpointSecurityGroupIdList>,
    @ocaml.doc("<p>(Interface and Gateway Load Balancer endpoints) The ID of one or more subnets in which to create an endpoint
            network interface. For a Gateway Load Balancer endpoint, you can specify one subnet only.</p>")
    @as("SubnetIds")
    subnetIds: option<vpcEndpointSubnetIdList>,
    @ocaml.doc("<p>(Gateway endpoint) One or more route table IDs.</p>") @as("RouteTableIds")
    routeTableIds: option<vpcEndpointRouteTableIdList>,
    @ocaml.doc("<p>(Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the
            service. The policy must be in valid JSON format. If this parameter is not specified, we
            attach a default policy that allows full access to the service.</p>")
    @as("PolicyDocument")
    policyDocument: option<string_>,
    @ocaml.doc("<p>The service name. To get a list of available services, use the <a>DescribeVpcEndpointServices</a> request, or get the name from the service
            provider.</p>")
    @as("ServiceName")
    serviceName: string_,
    @ocaml.doc("<p>The ID of the VPC in which the endpoint will be used.</p>") @as("VpcId")
    vpcId: vpcId,
    @ocaml.doc("<p>The type of endpoint.</p>
        <p>Default: Gateway</p>")
    @as("VpcEndpointType")
    vpcEndpointType: option<vpcEndpointType>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  @ocaml.doc("<p>Contains the output of CreateVpcEndpoint.</p>")
  type response = {
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Information about the endpoint.</p>") @as("VpcEndpoint")
    vpcEndpoint: option<vpcEndpoint>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateVpcEndpointCommand"
  let make = (
    ~serviceName,
    ~vpcId,
    ~tagSpecifications=?,
    ~privateDnsEnabled=?,
    ~clientToken=?,
    ~securityGroupIds=?,
    ~subnetIds=?,
    ~routeTableIds=?,
    ~policyDocument=?,
    ~vpcEndpointType=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      tagSpecifications: tagSpecifications,
      privateDnsEnabled: privateDnsEnabled,
      clientToken: clientToken,
      securityGroupIds: securityGroupIds,
      subnetIds: subnetIds,
      routeTableIds: routeTableIds,
      policyDocument: policyDocument,
      serviceName: serviceName,
      vpcId: vpcId,
      vpcEndpointType: vpcEndpointType,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateVpc = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to assign to the VPC.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the address to this location.</p>
         <p> You must set <code>AmazonProvidedIpv6CidrBlock</code> to <code>true</code> to use this parameter.</p>")
    @as("Ipv6CidrBlockNetworkBorderGroup")
    ipv6CidrBlockNetworkBorderGroup: option<string_>,
    @ocaml.doc("<p>The tenancy options for instances launched into the VPC. For <code>default</code>, instances
      are launched with shared tenancy by default. You can launch instances with any tenancy into a
      shared tenancy VPC. For <code>dedicated</code>, instances are launched as dedicated tenancy
      instances by default. You can only launch instances with a tenancy of <code>dedicated</code>
      or <code>host</code> into a dedicated tenancy VPC. </p>
         <p>
            <b>Important:</b> The <code>host</code> value cannot be used with this parameter. Use the <code>default</code> or <code>dedicated</code> values only.</p>
         <p>Default: <code>default</code>
         </p>")
    @as("InstanceTenancy")
    instanceTenancy: option<tenancy>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The netmask length of the IPv6 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see <a href=\"/vpc/latest/ipam/what-is-it-ipam.html\">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>"
    )
    @as("Ipv6NetmaskLength")
    ipv6NetmaskLength: option<netmaskLength>,
    @ocaml.doc(
      "<p>The ID of an IPv6 IPAM pool which will be used to allocate this VPC an IPv6 CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across Amazon Web Services Regions and accounts throughout your Amazon Web Services Organization. For more information, see <a href=\"/vpc/latest/ipam/what-is-it-ipam.html\">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>"
    )
    @as("Ipv6IpamPoolId")
    ipv6IpamPoolId: option<ipamPoolId>,
    @ocaml.doc(
      "<p>The netmask length of the IPv4 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see <a href=\"/vpc/latest/ipam/what-is-it-ipam.html\">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>"
    )
    @as("Ipv4NetmaskLength")
    ipv4NetmaskLength: option<netmaskLength>,
    @ocaml.doc("<p>The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. For more information, see <a href=\"/vpc/latest/ipam/what-is-it-ipam.html\">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.
         
      </p>")
    @as("Ipv4IpamPoolId")
    ipv4IpamPoolId: option<ipamPoolId>,
    @ocaml.doc("<p>The IPv6 CIDR block from the IPv6 address pool. You must also specify <code>Ipv6Pool</code> in the request.</p>
        <p>To let Amazon choose the IPv6 CIDR block for you, omit this parameter.</p>")
    @as("Ipv6CidrBlock")
    ipv6CidrBlock: option<string_>,
    @ocaml.doc("<p>The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.</p>")
    @as("Ipv6Pool")
    ipv6Pool: option<ipv6PoolEc2Id>,
    @ocaml.doc("<p>Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC.
            You cannot specify the range of IP addresses, or the size of the CIDR block.</p>")
    @as("AmazonProvidedIpv6CidrBlock")
    amazonProvidedIpv6CidrBlock: option<boolean_>,
    @ocaml.doc("<p>The IPv4 network range for the VPC, in CIDR notation. For example,
		        <code>10.0.0.0/16</code>. We modify the specified CIDR block to its canonical form; for example, if you specify <code>100.68.0.18/18</code>, we modify it to <code>100.68.0.0/18</code>.</p>")
    @as("CidrBlock")
    cidrBlock: option<string_>,
  }
  type response = {@ocaml.doc("<p>Information about the VPC.</p>") @as("Vpc") vpc: option<vpc>}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateVpcCommand"
  let make = (
    ~tagSpecifications=?,
    ~ipv6CidrBlockNetworkBorderGroup=?,
    ~instanceTenancy=?,
    ~dryRun=?,
    ~ipv6NetmaskLength=?,
    ~ipv6IpamPoolId=?,
    ~ipv4NetmaskLength=?,
    ~ipv4IpamPoolId=?,
    ~ipv6CidrBlock=?,
    ~ipv6Pool=?,
    ~amazonProvidedIpv6CidrBlock=?,
    ~cidrBlock=?,
    (),
  ) =>
    new({
      tagSpecifications: tagSpecifications,
      ipv6CidrBlockNetworkBorderGroup: ipv6CidrBlockNetworkBorderGroup,
      instanceTenancy: instanceTenancy,
      dryRun: dryRun,
      ipv6NetmaskLength: ipv6NetmaskLength,
      ipv6IpamPoolId: ipv6IpamPoolId,
      ipv4NetmaskLength: ipv4NetmaskLength,
      ipv4IpamPoolId: ipv4IpamPoolId,
      ipv6CidrBlock: ipv6CidrBlock,
      ipv6Pool: ipv6Pool,
      amazonProvidedIpv6CidrBlock: amazonProvidedIpv6CidrBlock,
      cidrBlock: cidrBlock,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateVolume = {
  type t
  type request = {
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency 
      of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensure 
        Idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The throughput to provision for a volume, with a maximum of 1,000 MiB/s.</p>
         <p>This parameter is valid only for <code>gp3</code> volumes.</p>
  	      <p>Valid Range: Minimum value of 125. Maximum value of 1000.</p>")
    @as("Throughput")
    throughput: option<integer_>,
    @ocaml.doc("<p>Indicates whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach, you can attach the 
    	volume to up to 16 <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances\">Instances built on the Nitro System</a> in the same Availability Zone. This parameter is 
    	supported with <code>io1</code> and <code>io2</code> volumes only. For more information, 
    	see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html\">
    		Amazon EBS Multi-Attach</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
    @as("MultiAttachEnabled")
    multiAttachEnabled: option<boolean_>,
    @ocaml.doc("<p>The tags to apply to the volume during creation.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The volume type. This parameter can be one of the following values:</p>
         <ul>
            <li>
               <p>General Purpose SSD: <code>gp2</code> | <code>gp3</code>
               </p>
            </li>
            <li>
               <p>Provisioned IOPS SSD: <code>io1</code> | <code>io2</code>
               </p>
            </li>
            <li>
               <p>Throughput Optimized HDD: <code>st1</code>
               </p>
            </li>
            <li>
               <p>Cold HDD: <code>sc1</code>
               </p>
            </li>
            <li>
               <p>Magnetic: <code>standard</code>
               </p>
            </li>
         </ul>
         <p>For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html\">Amazon EBS volume types</a> in the
      <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
         <p>Default: <code>gp2</code>
         </p>")
    @as("VolumeType")
    volumeType: option<volumeType>,
    @ocaml.doc(
      "<p>The snapshot from which to create the volume. You must specify either a snapshot ID or a volume size.</p>"
    )
    @as("SnapshotId")
    snapshotId: option<snapshotId>,
    @ocaml.doc("<p>The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size.
      If you specify a snapshot, the default is the snapshot size. You can specify a volume 
      size that is equal to or larger than the snapshot size.</p>
         <p>The following are the supported volumes sizes for each volume type:</p>
         <ul>
            <li>
               <p>
                  <code>gp2</code> and <code>gp3</code>: 1-16,384</p>
            </li>
            <li>
               <p>
                  <code>io1</code> and <code>io2</code>: 4-16,384</p>
            </li>
            <li>
               <p>
                  <code>st1</code> and <code>sc1</code>: 125-16,384</p>
            </li>
            <li>
               <p>
                  <code>standard</code>: 1-1,024</p>
            </li>
         </ul>")
    @as("Size")
    size: option<integer_>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Outpost.</p>") @as("OutpostArn")
    outpostArn: option<string_>,
    @ocaml.doc("<p>The identifier of the Key Management Service (KMS) KMS key to use for Amazon EBS encryption.
      If this parameter is not specified, your KMS key for Amazon EBS is used. If <code>KmsKeyId</code> is
      specified, the encrypted state must be <code>true</code>.</p>
         <p>You can specify the KMS key using any of the following:</p>
         <ul>
            <li>
               <p>Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.</p>
            </li>
            <li>
               <p>Key alias. For example, alias/ExampleAlias.</p>
            </li>
            <li>
               <p>Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.</p>
            </li>
            <li>
               <p>Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.</p>
            </li>
         </ul>
         <p>Amazon Web Services authenticates the KMS key asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, 
      the action can appear to complete, but eventually fails.</p>")
    @as("KmsKeyId")
    kmsKeyId: option<kmsKeyId>,
    @ocaml.doc("<p>The number of I/O operations per second (IOPS). For <code>gp3</code>, <code>io1</code>, and <code>io2</code> volumes, this represents 
      the number of IOPS that are provisioned for the volume. For <code>gp2</code> volumes, this represents the baseline 
      performance of the volume and the rate at which the volume accumulates I/O credits for bursting.</p>
         <p>The following are the supported values for each volume type:</p>
         <ul>
            <li>
               <p>
                  <code>gp3</code>: 3,000-16,000 IOPS</p>
            </li>
            <li>
               <p>
                  <code>io1</code>: 100-64,000 IOPS</p>
            </li>
            <li>
               <p>
                  <code>io2</code>: 100-64,000 IOPS</p>
            </li>
         </ul>
         <p>
            <code>io1</code> and <code>io2</code> volumes support up to 64,000 IOPS only on  
      <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances\">Instances built on the Nitro System</a>. Other instance families support performance 
      up to 32,000 IOPS.</p>
         <p>This parameter is required for <code>io1</code> and <code>io2</code> volumes.
      The default for <code>gp3</code> volumes is 3,000 IOPS.
      This parameter is not supported for <code>gp2</code>, <code>st1</code>, <code>sc1</code>, or <code>standard</code> volumes.</p>")
    @as("Iops")
    iops: option<integer_>,
    @ocaml.doc("<p>Indicates whether the volume should be encrypted. 
      The effect of setting the encryption state to <code>true</code> depends on 
the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. 
      For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default\">Encryption by default</a>
      in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
         <p>Encrypted Amazon EBS volumes must be attached to instances that support Amazon EBS encryption. 
      For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances\">Supported
        instance types</a>.</p>")
    @as("Encrypted")
    encrypted: option<boolean_>,
    @ocaml.doc("<p>The Availability Zone in which to create the volume.</p>")
    @as("AvailabilityZone")
    availabilityZone: string_,
  }
  type response = volume
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateVolumeCommand"
  let make = (
    ~availabilityZone,
    ~clientToken=?,
    ~throughput=?,
    ~multiAttachEnabled=?,
    ~tagSpecifications=?,
    ~dryRun=?,
    ~volumeType=?,
    ~snapshotId=?,
    ~size=?,
    ~outpostArn=?,
    ~kmsKeyId=?,
    ~iops=?,
    ~encrypted=?,
    (),
  ) =>
    new({
      clientToken: clientToken,
      throughput: throughput,
      multiAttachEnabled: multiAttachEnabled,
      tagSpecifications: tagSpecifications,
      dryRun: dryRun,
      volumeType: volumeType,
      snapshotId: snapshotId,
      size: size,
      outpostArn: outpostArn,
      kmsKeyId: kmsKeyId,
      iops: iops,
      encrypted: encrypted,
      availabilityZone: availabilityZone,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateTransitGatewayVpcAttachment = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to apply to the VPC attachment.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The VPC attachment options.</p>") @as("Options")
    options: option<createTransitGatewayVpcAttachmentRequestOptions>,
    @ocaml.doc("<p>The IDs of one or more subnets. You can specify only one subnet per Availability Zone. 
         You must specify at least one subnet, but we recommend that you specify two subnets for better availability.
         The transit gateway uses one IP address from each specified subnet.</p>")
    @as("SubnetIds")
    subnetIds: transitGatewaySubnetIdList,
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: vpcId,
    @ocaml.doc("<p>The ID of the transit gateway.</p>") @as("TransitGatewayId")
    transitGatewayId: transitGatewayId,
  }
  type response = {
    @ocaml.doc("<p>Information about the VPC attachment.</p>") @as("TransitGatewayVpcAttachment")
    transitGatewayVpcAttachment: option<transitGatewayVpcAttachment>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateTransitGatewayVpcAttachmentCommand"
  let make = (
    ~subnetIds,
    ~vpcId,
    ~transitGatewayId,
    ~dryRun=?,
    ~tagSpecifications=?,
    ~options=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      options: options,
      subnetIds: subnetIds,
      vpcId: vpcId,
      transitGatewayId: transitGatewayId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateTransitGatewayRouteTable = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to apply to the transit gateway route table.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The ID of the transit gateway.</p>") @as("TransitGatewayId")
    transitGatewayId: transitGatewayId,
  }
  type response = {
    @ocaml.doc("<p>Information about the transit gateway route table.</p>")
    @as("TransitGatewayRouteTable")
    transitGatewayRouteTable: option<transitGatewayRouteTable>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateTransitGatewayRouteTableCommand"
  let make = (~transitGatewayId, ~dryRun=?, ~tagSpecifications=?, ()) =>
    new({dryRun: dryRun, tagSpecifications: tagSpecifications, transitGatewayId: transitGatewayId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateTransitGatewayPeeringAttachment = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to apply to the transit gateway peering attachment.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The Region where the peer transit gateway is located.</p>") @as("PeerRegion")
    peerRegion: string_,
    @ocaml.doc(
      "<p>The ID of the Amazon Web Services account that owns the peer transit gateway.</p>"
    )
    @as("PeerAccountId")
    peerAccountId: string_,
    @ocaml.doc(
      "<p>The ID of the peer transit gateway with which to create the peering attachment.</p>"
    )
    @as("PeerTransitGatewayId")
    peerTransitGatewayId: transitAssociationGatewayId,
    @ocaml.doc("<p>The ID of the transit gateway.</p>") @as("TransitGatewayId")
    transitGatewayId: transitGatewayId,
  }
  type response = {
    @ocaml.doc("<p>The transit gateway peering attachment.</p>")
    @as("TransitGatewayPeeringAttachment")
    transitGatewayPeeringAttachment: option<transitGatewayPeeringAttachment>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateTransitGatewayPeeringAttachmentCommand"
  let make = (
    ~peerRegion,
    ~peerAccountId,
    ~peerTransitGatewayId,
    ~transitGatewayId,
    ~dryRun=?,
    ~tagSpecifications=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      peerRegion: peerRegion,
      peerAccountId: peerAccountId,
      peerTransitGatewayId: peerTransitGatewayId,
      transitGatewayId: transitGatewayId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateTransitGatewayMulticastDomain = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags for the transit gateway multicast domain.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The options for the transit gateway multicast domain.</p>") @as("Options")
    options: option<createTransitGatewayMulticastDomainRequestOptions>,
    @ocaml.doc("<p>The ID of the transit gateway.</p>") @as("TransitGatewayId")
    transitGatewayId: transitGatewayId,
  }
  type response = {
    @ocaml.doc("<p>Information about the transit gateway multicast domain.</p>")
    @as("TransitGatewayMulticastDomain")
    transitGatewayMulticastDomain: option<transitGatewayMulticastDomain>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateTransitGatewayMulticastDomainCommand"
  let make = (~transitGatewayId, ~dryRun=?, ~tagSpecifications=?, ~options=?, ()) =>
    new({
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      options: options,
      transitGatewayId: transitGatewayId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateTransitGatewayConnectPeer = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to apply to the Connect peer.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The range of inside IP addresses that are used for BGP peering. You must specify a
            size /29 IPv4 CIDR block from the <code>169.254.0.0/16</code> range. The first address
            from the range must be configured on the appliance as the BGP IP address. You can also
            optionally specify a size /125 IPv6 CIDR block from the <code>fd00::/8</code>
            range.</p>")
    @as("InsideCidrBlocks")
    insideCidrBlocks: insideCidrBlocksStringList,
    @ocaml.doc("<p>The BGP options for the Connect peer.</p>") @as("BgpOptions")
    bgpOptions: option<transitGatewayConnectRequestBgpOptions>,
    @ocaml.doc(
      "<p>The peer IP address (GRE outer IP address) on the appliance side of the Connect peer.</p>"
    )
    @as("PeerAddress")
    peerAddress: string_,
    @ocaml.doc("<p>The peer IP address (GRE outer IP address) on the transit gateway side of the Connect peer, which must be
            specified from a transit gateway CIDR block. If not specified, Amazon automatically assigns
            the first available IP address from the transit gateway CIDR block.</p>")
    @as("TransitGatewayAddress")
    transitGatewayAddress: option<string_>,
    @ocaml.doc("<p>The ID of the Connect attachment.</p>") @as("TransitGatewayAttachmentId")
    transitGatewayAttachmentId: transitGatewayAttachmentId,
  }
  type response = {
    @ocaml.doc("<p>Information about the Connect peer.</p>") @as("TransitGatewayConnectPeer")
    transitGatewayConnectPeer: option<transitGatewayConnectPeer>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateTransitGatewayConnectPeerCommand"
  let make = (
    ~insideCidrBlocks,
    ~peerAddress,
    ~transitGatewayAttachmentId,
    ~dryRun=?,
    ~tagSpecifications=?,
    ~bgpOptions=?,
    ~transitGatewayAddress=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      insideCidrBlocks: insideCidrBlocks,
      bgpOptions: bgpOptions,
      peerAddress: peerAddress,
      transitGatewayAddress: transitGatewayAddress,
      transitGatewayAttachmentId: transitGatewayAttachmentId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateTransitGatewayConnect = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to apply to the Connect attachment.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The Connect attachment options.</p>") @as("Options")
    options: createTransitGatewayConnectRequestOptions,
    @ocaml.doc(
      "<p>The ID of the transit gateway attachment. You can specify a VPC attachment or Amazon Web Services Direct Connect attachment.</p>"
    )
    @as("TransportTransitGatewayAttachmentId")
    transportTransitGatewayAttachmentId: transitGatewayAttachmentId,
  }
  type response = {
    @ocaml.doc("<p>Information about the Connect attachment.</p>") @as("TransitGatewayConnect")
    transitGatewayConnect: option<transitGatewayConnect>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateTransitGatewayConnectCommand"
  let make = (
    ~options,
    ~transportTransitGatewayAttachmentId,
    ~dryRun=?,
    ~tagSpecifications=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      options: options,
      transportTransitGatewayAttachmentId: transportTransitGatewayAttachmentId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateTransitGateway = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to apply to the transit gateway.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The transit gateway options.</p>") @as("Options")
    options: option<transitGatewayRequestOptions>,
    @ocaml.doc("<p>A description of the transit gateway.</p>") @as("Description")
    description: option<string_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the transit gateway.</p>") @as("TransitGateway")
    transitGateway: option<transitGateway>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateTransitGatewayCommand"
  let make = (~dryRun=?, ~tagSpecifications=?, ~options=?, ~description=?, ()) =>
    new({
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      options: options,
      description: description,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateTrafficMirrorTarget = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to assign to the Traffic Mirror target.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The description of the Traffic Mirror target.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.</p>"
    )
    @as("NetworkLoadBalancerArn")
    networkLoadBalancerArn: option<string_>,
    @ocaml.doc("<p>The network interface ID that is associated with the target.</p>")
    @as("NetworkInterfaceId")
    networkInterfaceId: option<networkInterfaceId>,
  }
  type response = {
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Information about the Traffic Mirror target.</p>") @as("TrafficMirrorTarget")
    trafficMirrorTarget: option<trafficMirrorTarget>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateTrafficMirrorTargetCommand"
  let make = (
    ~clientToken=?,
    ~dryRun=?,
    ~tagSpecifications=?,
    ~description=?,
    ~networkLoadBalancerArn=?,
    ~networkInterfaceId=?,
    (),
  ) =>
    new({
      clientToken: clientToken,
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      description: description,
      networkLoadBalancerArn: networkLoadBalancerArn,
      networkInterfaceId: networkInterfaceId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateTrafficMirrorSession = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to assign to a Traffic Mirror session.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The description of the Traffic Mirror session.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN
         protocol, see <a href=\"https://tools.ietf.org/html/rfc7348\">RFC 7348</a>. If you do
         not specify a <code>VirtualNetworkId</code>, an account-wide unique id is chosen at
         random.</p>")
    @as("VirtualNetworkId")
    virtualNetworkId: option<integer_>,
    @ocaml.doc("<p>The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.</p>
         <p>Valid values are 1-32766.</p>")
    @as("SessionNumber")
    sessionNumber: integer_,
    @ocaml.doc("<p>The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do
         not specify this parameter when you want to mirror the entire packet. To mirror a subset of
         the packet, set this to the length (in bytes) that you want to mirror. For example, if you
         set this value to 100, then the first 100 bytes that meet the filter criteria are copied to
         the target.</p>
         <p>If you do not want to mirror the entire packet, use the <code>PacketLength</code> parameter to specify the number of bytes in each packet to mirror.</p>")
    @as("PacketLength")
    packetLength: option<integer_>,
    @ocaml.doc("<p>The ID of the Traffic Mirror filter.</p>") @as("TrafficMirrorFilterId")
    trafficMirrorFilterId: trafficMirrorFilterId,
    @ocaml.doc("<p>The ID of the Traffic Mirror target.</p>") @as("TrafficMirrorTargetId")
    trafficMirrorTargetId: trafficMirrorTargetId,
    @ocaml.doc("<p>The ID of the source network interface.</p>") @as("NetworkInterfaceId")
    networkInterfaceId: networkInterfaceId,
  }
  type response = {
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Information about the Traffic Mirror session.</p>") @as("TrafficMirrorSession")
    trafficMirrorSession: option<trafficMirrorSession>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateTrafficMirrorSessionCommand"
  let make = (
    ~sessionNumber,
    ~trafficMirrorFilterId,
    ~trafficMirrorTargetId,
    ~networkInterfaceId,
    ~clientToken=?,
    ~dryRun=?,
    ~tagSpecifications=?,
    ~description=?,
    ~virtualNetworkId=?,
    ~packetLength=?,
    (),
  ) =>
    new({
      clientToken: clientToken,
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      description: description,
      virtualNetworkId: virtualNetworkId,
      sessionNumber: sessionNumber,
      packetLength: packetLength,
      trafficMirrorFilterId: trafficMirrorFilterId,
      trafficMirrorTargetId: trafficMirrorTargetId,
      networkInterfaceId: networkInterfaceId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateTrafficMirrorFilter = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to assign to a Traffic Mirror filter.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The description of the Traffic Mirror filter.</p>") @as("Description")
    description: option<string_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Information about the Traffic Mirror filter.</p>") @as("TrafficMirrorFilter")
    trafficMirrorFilter: option<trafficMirrorFilter>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateTrafficMirrorFilterCommand"
  let make = (~clientToken=?, ~dryRun=?, ~tagSpecifications=?, ~description=?, ()) =>
    new({
      clientToken: clientToken,
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      description: description,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateSubnetCidrReservation = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The
            description
            to assign to the subnet CIDR reservation.</p>")
    @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The type of reservation.</p>
        <p>The following are valid values:</p>
        <ul>
            <li>
                <p>
                  <code>prefix</code>: The Amazon EC2
                    Prefix
                    Delegation feature assigns the IP addresses to network interfaces that are
                    associated with an instance. For information about Prefix
                    Delegation,
                    see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-delegation.html\">Prefix Delegation
                        for Amazon EC2 network interfaces</a> in the
                        <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
            </li>
            <li>
                <p>
                  <code>explicit</code>: You manually assign the IP addresses to resources that
                    reside in your subnet. </p>
            </li>
         </ul>")
    @as("ReservationType")
    reservationType: subnetCidrReservationType,
    @ocaml.doc("<p>The IPv4 or IPV6 CIDR range to reserve.</p>") @as("Cidr") cidr: string_,
    @ocaml.doc("<p>The ID of the subnet.</p>") @as("SubnetId") subnetId: subnetId,
    @ocaml.doc("<p>The tags to assign to the subnet CIDR reservation.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
  }
  type response = {
    @ocaml.doc("<p>Information about the created subnet CIDR reservation.</p>")
    @as("SubnetCidrReservation")
    subnetCidrReservation: option<subnetCidrReservation>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateSubnetCidrReservationCommand"
  let make = (
    ~reservationType,
    ~cidr,
    ~subnetId,
    ~dryRun=?,
    ~description=?,
    ~tagSpecifications=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      description: description,
      reservationType: reservationType,
      cidr: cidr,
      subnetId: subnetId,
      tagSpecifications: tagSpecifications,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateSubnet = {
  type t
  type request = {
    @ocaml.doc("<p>Indicates whether to create an IPv6 only subnet.</p>") @as("Ipv6Native")
    ipv6Native: option<boolean_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: vpcId,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Outpost. If you specify an Outpost ARN, you must also
        specify the Availability Zone of the Outpost subnet.</p>")
    @as("OutpostArn")
    outpostArn: option<string_>,
    @ocaml.doc("<p>The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a
            /64 prefix length.</p>
        <p>This parameter is required for an IPv6 only subnet.</p>")
    @as("Ipv6CidrBlock")
    ipv6CidrBlock: option<string_>,
    @ocaml.doc("<p>The IPv4 network range for the subnet, in CIDR notation. For example, <code>10.0.0.0/24</code>. 
           We modify the specified CIDR block to its canonical form; for example, if you specify 
           <code>100.68.0.18/18</code>, we modify it to <code>100.68.0.0/18</code>.</p>
         <p>This parameter is not supported for an IPv6 only subnet.</p>")
    @as("CidrBlock")
    cidrBlock: option<string_>,
    @ocaml.doc("<p>The AZ ID or the Local Zone ID of the subnet.</p>") @as("AvailabilityZoneId")
    availabilityZoneId: option<string_>,
    @ocaml.doc("<p>The Availability Zone or Local Zone for the subnet.</p>
         <p>Default: Amazon Web Services selects one for you. If you create more than one subnet in your VPC, we 
          do not necessarily select a different zone for each subnet.</p>
         <p>To create a subnet in a Local Zone, set this value to the Local Zone ID, for example
          <code>us-west-2-lax-1a</code>. For information about the Regions that support Local Zones, 
           see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions\">Available Regions</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
         <p>To create a subnet in an Outpost, set this value to the Availability Zone for the
           Outpost and specify the Outpost ARN.</p>")
    @as("AvailabilityZone")
    availabilityZone: option<string_>,
    @ocaml.doc("<p>The tags to assign to the subnet.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
  }
  type response = {
    @ocaml.doc("<p>Information about the subnet.</p>") @as("Subnet") subnet: option<subnet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateSubnetCommand"
  let make = (
    ~vpcId,
    ~ipv6Native=?,
    ~dryRun=?,
    ~outpostArn=?,
    ~ipv6CidrBlock=?,
    ~cidrBlock=?,
    ~availabilityZoneId=?,
    ~availabilityZone=?,
    ~tagSpecifications=?,
    (),
  ) =>
    new({
      ipv6Native: ipv6Native,
      dryRun: dryRun,
      vpcId: vpcId,
      outpostArn: outpostArn,
      ipv6CidrBlock: ipv6CidrBlock,
      cidrBlock: cidrBlock,
      availabilityZoneId: availabilityZoneId,
      availabilityZone: availabilityZone,
      tagSpecifications: tagSpecifications,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateSnapshots = {
  type t
  type request = {
    @ocaml.doc("<p>Copies the tags from the specified volume to corresponding snapshot.</p>")
    @as("CopyTagsFromSource")
    copyTagsFromSource: option<copyTagsFromSource>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Tags to apply to every snapshot specified by the instance.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Outpost on which to create the local  
  		snapshots.</p>
  	      <ul>
            <li>
  			          <p>To create snapshots from an instance in a Region, omit this parameter. The 
  				snapshots are created in the same Region as the instance.</p>
  		        </li>
            <li>
  			          <p>To create snapshots from an instance on an Outpost and store the snapshots 
  				in the Region, omit this parameter. The snapshots are created in the Region 
  				for the Outpost.</p>
  		        </li>
            <li>
  			          <p>To create snapshots from an instance on an Outpost and store the snapshots 
  				on an Outpost, specify the ARN of the destination Outpost. The snapshots must 
  				be created on the same Outpost as the instance.</p>
  		        </li>
         </ul>
  	      <p>For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#create-multivol-snapshot\">
  		Create multi-volume local snapshots from instances on an Outpost</a> in the 
  		<i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
    @as("OutpostArn")
    outpostArn: option<string_>,
    @ocaml.doc("<p>The instance to specify which volumes should be included in the snapshots.</p>")
    @as("InstanceSpecification")
    instanceSpecification: instanceSpecification,
    @ocaml.doc("<p> A description propagated to every snapshot specified by the instance.</p>")
    @as("Description")
    description: option<string_>,
  }
  type response = {
    @ocaml.doc("<p>List of snapshots.</p>") @as("Snapshots") snapshots: option<snapshotSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateSnapshotsCommand"
  let make = (
    ~instanceSpecification,
    ~copyTagsFromSource=?,
    ~dryRun=?,
    ~tagSpecifications=?,
    ~outpostArn=?,
    ~description=?,
    (),
  ) =>
    new({
      copyTagsFromSource: copyTagsFromSource,
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      outpostArn: outpostArn,
      instanceSpecification: instanceSpecification,
      description: description,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateSnapshot = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to apply to the snapshot during creation.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The ID of the Amazon EBS volume.</p>") @as("VolumeId") volumeId: volumeId,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Outpost on which to create a local  
  	snapshot.</p>
  	      <ul>
            <li>
  			          <p>To create a snapshot of a volume in a Region, omit this parameter. The snapshot 
  				is created in the same Region as the volume.</p>
  		        </li>
            <li>
  			          <p>To create a snapshot of a volume on an Outpost and store the snapshot in the 
  				Region, omit this parameter. The snapshot is created in the Region for the 
  				Outpost.</p>
  		        </li>
            <li>
  			          <p>To create a snapshot of a volume on an Outpost and store the snapshot on an 
  			Outpost, specify the ARN of the destination Outpost. The snapshot must be created on 
  			the same Outpost as the volume.</p>
  		        </li>
         </ul>
  	      <p>For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#create-snapshot\">Create local snapshots from volumes on an Outpost</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
    @as("OutpostArn")
    outpostArn: option<string_>,
    @ocaml.doc("<p>A description for the snapshot.</p>") @as("Description")
    description: option<string_>,
  }
  type response = snapshot
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateSnapshotCommand"
  let make = (~volumeId, ~dryRun=?, ~tagSpecifications=?, ~outpostArn=?, ~description=?, ()) =>
    new({
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      volumeId: volumeId,
      outpostArn: outpostArn,
      description: description,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateSecurityGroup = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to assign to the security group.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>[EC2-VPC] The ID of the VPC. Required for EC2-VPC.</p>") @as("VpcId")
    vpcId: option<vpcId>,
    @ocaml.doc("<p>The name of the security group.</p>
         <p>Constraints: Up to 255 characters in length. Cannot start with
            <code>sg-</code>.</p>
         <p>Constraints for EC2-Classic: ASCII characters</p>
         <p>Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*</p>")
    @as("GroupName")
    groupName: string_,
    @ocaml.doc("<p>A description for the security group. This is informational only.</p>
		       <p>Constraints: Up to 255 characters in length</p>
		       <p>Constraints for EC2-Classic: ASCII characters</p>
		       <p>Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*</p>")
    @as("Description")
    description: string_,
  }
  type response = {
    @ocaml.doc("<p>The tags assigned to the security group.</p>") @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The ID of the security group.</p>") @as("GroupId") groupId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateSecurityGroupCommand"
  let make = (~groupName, ~description, ~dryRun=?, ~tagSpecifications=?, ~vpcId=?, ()) =>
    new({
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      vpcId: vpcId,
      groupName: groupName,
      description: description,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateRouteTable = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to assign to the route table.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: vpcId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the route table.</p>") @as("RouteTable")
    routeTable: option<routeTable>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateRouteTableCommand"
  let make = (~vpcId, ~tagSpecifications=?, ~dryRun=?, ()) =>
    new({tagSpecifications: tagSpecifications, vpcId: vpcId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateRestoreImageTask = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to apply to the AMI and snapshots on restoration. You can tag the AMI, the
      snapshots, or both.</p>
         <ul>
            <li>
               <p>To tag the AMI, the value for <code>ResourceType</code> must be <code>image</code>.</p>
            </li>
            <li>
               <p>To
          tag the snapshots, the value for <code>ResourceType</code> must be <code>snapshot</code>. The
          same tag is applied to all of the snapshots that are created.</p>
            </li>
         </ul>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The name for the restored AMI. The name must be unique for AMIs in the Region for this
      account. If you do not provide a name, the new AMI gets the same name as the original
      AMI.</p>")
    @as("Name")
    name: option<string_>,
    @ocaml.doc("<p>The name of the stored AMI object in the bucket.</p>") @as("ObjectKey")
    objectKey: string_,
    @ocaml.doc("<p>The name of the Amazon S3 bucket that contains the stored AMI object.</p>")
    @as("Bucket")
    bucket: string_,
  }
  type response = {@ocaml.doc("<p>The AMI ID.</p>") @as("ImageId") imageId: option<string_>}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateRestoreImageTaskCommand"
  let make = (~objectKey, ~bucket, ~dryRun=?, ~tagSpecifications=?, ~name=?, ()) =>
    new({
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      name: name,
      objectKey: objectKey,
      bucket: bucket,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateReservedInstancesListing = {
  type t
  @ocaml.doc("<p>Contains the parameters for CreateReservedInstancesListing.</p>")
  type request = {
    @ocaml.doc("<p>The ID of the active Standard Reserved Instance.</p>") @as("ReservedInstancesId")
    reservedInstancesId: reservationId,
    @ocaml.doc(
      "<p>A list specifying the price of the Standard Reserved Instance for each month remaining in the Reserved Instance term.</p>"
    )
    @as("PriceSchedules")
    priceSchedules: priceScheduleSpecificationList,
    @ocaml.doc(
      "<p>The number of instances that are a part of a Reserved Instance account to be listed in the Reserved Instance Marketplace. This number should be less than or equal to the instance count associated with the Reserved Instance ID specified in this call.</p>"
    )
    @as("InstanceCount")
    instanceCount: integer_,
    @ocaml.doc("<p>Unique, case-sensitive identifier you provide to ensure idempotency of your
				listings. This helps avoid duplicate listings. For more information, see 
				<a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: string_,
  }
  @ocaml.doc("<p>Contains the output of CreateReservedInstancesListing.</p>")
  type response = {
    @ocaml.doc("<p>Information about the Standard Reserved Instance listing.</p>")
    @as("ReservedInstancesListings")
    reservedInstancesListings: option<reservedInstancesListingList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateReservedInstancesListingCommand"
  let make = (~reservedInstancesId, ~priceSchedules, ~instanceCount, ~clientToken, ()) =>
    new({
      reservedInstancesId: reservedInstancesId,
      priceSchedules: priceSchedules,
      instanceCount: instanceCount,
      clientToken: clientToken,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateReplaceRootVolumeTask = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to apply to the root volume replacement task.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. 
      If you do not specify a client token, a randomly generated token is used for the request 
      to ensure idempotency. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The ID of the snapshot from which to restore the replacement root volume. If you want to 
      restore the volume to the initial launch state, omit this parameter.</p>")
    @as("SnapshotId")
    snapshotId: option<snapshotId>,
    @ocaml.doc("<p>The ID of the instance for which to replace the root volume.</p>")
    @as("InstanceId")
    instanceId: instanceId,
  }
  type response = {
    @ocaml.doc("<p>Information about the root volume replacement task.</p>")
    @as("ReplaceRootVolumeTask")
    replaceRootVolumeTask: option<replaceRootVolumeTask>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateReplaceRootVolumeTaskCommand"
  let make = (~instanceId, ~tagSpecifications=?, ~dryRun=?, ~clientToken=?, ~snapshotId=?, ()) =>
    new({
      tagSpecifications: tagSpecifications,
      dryRun: dryRun,
      clientToken: clientToken,
      snapshotId: snapshotId,
      instanceId: instanceId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreatePublicIpv4Pool = {
  type t
  type request = {
    @ocaml.doc("<p>The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The ID of the public IPv4 pool.</p>") @as("PoolId")
    poolId: option<ipv4PoolEc2Id>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreatePublicIpv4PoolCommand"
  let make = (~tagSpecifications=?, ~dryRun=?, ()) =>
    new({tagSpecifications: tagSpecifications, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreatePlacementGroup = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to apply to the new placement group.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The number of partitions. Valid only when <b>Strategy</b> is
            set to <code>partition</code>.</p>")
    @as("PartitionCount")
    partitionCount: option<integer_>,
    @ocaml.doc("<p>The placement strategy.</p>") @as("Strategy")
    strategy: option<placementStrategy>,
    @ocaml.doc("<p>A name for the placement group. Must be unique within the scope of your account for
            the Region.</p>
        <p>Constraints: Up to 255 ASCII characters</p>")
    @as("GroupName")
    groupName: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {@as("PlacementGroup") placementGroup: option<placementGroup>}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreatePlacementGroupCommand"
  let make = (~tagSpecifications=?, ~partitionCount=?, ~strategy=?, ~groupName=?, ~dryRun=?, ()) =>
    new({
      tagSpecifications: tagSpecifications,
      partitionCount: partitionCount,
      strategy: strategy,
      groupName: groupName,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateNetworkInterface = {
  type t
  @ocaml.doc("<p>Contains the parameters for CreateNetworkInterface.</p>")
  type request = {
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The tags to apply to the new network interface.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The ID of the subnet to associate with the network interface.</p>")
    @as("SubnetId")
    subnetId: subnetId,
    @ocaml.doc("<p>The type of network interface. The default is <code>interface</code>.</p>
	        <p>The only supported values are <code>efa</code> and <code>trunk</code>.</p>")
    @as("InterfaceType")
    interfaceType: option<networkInterfaceCreationType>,
    @ocaml.doc(
      "<p>The number of IPv6 prefixes that Amazon Web Services automatically assigns to the network interface. You cannot use this option if you use the <code>Ipv6Prefixes</code> option.</p>"
    )
    @as("Ipv6PrefixCount")
    ipv6PrefixCount: option<integer_>,
    @ocaml.doc(
      "<p>One or more IPv6 prefixes assigned to the network interface. You cannot use this option if you use the <code>Ipv6PrefixCount</code> option.</p>"
    )
    @as("Ipv6Prefixes")
    ipv6Prefixes: option<ipv6PrefixList>,
    @ocaml.doc(
      "<p>The number of IPv4 prefixes that Amazon Web Services automatically assigns to the network interface. You cannot use this option if you use the <code>Ipv4 Prefixes</code> option.</p>"
    )
    @as("Ipv4PrefixCount")
    ipv4PrefixCount: option<integer_>,
    @ocaml.doc(
      "<p>One or more IPv4 prefixes assigned to the network interface. You cannot use this option if you use the <code>Ipv4PrefixCount</code> option.</p>"
    )
    @as("Ipv4Prefixes")
    ipv4Prefixes: option<ipv4PrefixList>,
    @ocaml.doc("<p>The number of secondary private IPv4 addresses to assign to a network interface. When
            you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses
            within the subnet's IPv4 CIDR range. You can't specify this option and specify more than
            one private IP address using <code>privateIpAddresses</code>.</p>
        <p>The number of IP addresses you can assign to a network interface varies by instance
            type. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI\">IP Addresses Per ENI Per
                Instance Type</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>")
    @as("SecondaryPrivateIpAddressCount")
    secondaryPrivateIpAddressCount: option<integer_>,
    @ocaml.doc("<p>One or more private IPv4 addresses.</p>") @as("PrivateIpAddresses")
    privateIpAddresses: option<privateIpAddressSpecificationList>,
    @ocaml.doc("<p>The primary private IPv4 address of the network interface. If you don't specify an
            IPv4 address, Amazon EC2 selects one for you from the subnet's IPv4 CIDR range. If you
            specify an IP address, you cannot indicate any IP addresses specified in
            <code>privateIpAddresses</code> as primary (only one IP address can be designated as
            primary).</p>")
    @as("PrivateIpAddress")
    privateIpAddress: option<string_>,
    @ocaml.doc("<p>One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet.
            You can't use this option if you're specifying a number of IPv6 addresses.</p>")
    @as("Ipv6Addresses")
    ipv6Addresses: option<instanceIpv6AddressList>,
    @ocaml.doc("<p>The number of IPv6 addresses to assign to a network interface. Amazon EC2
            automatically selects the IPv6 addresses from the subnet range. You can't use this
            option if specifying specific IPv6 addresses. If your subnet has the <code>AssignIpv6AddressOnCreation</code> attribute set
            to <code>true</code>, you can specify <code>0</code> to override this setting.</p>")
    @as("Ipv6AddressCount")
    ipv6AddressCount: option<integer_>,
    @ocaml.doc("<p>The IDs of one or more security groups.</p>") @as("Groups")
    groups: option<securityGroupIdStringList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
            and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
            Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>A description for the network interface.</p>") @as("Description")
    description: option<string_>,
  }
  @ocaml.doc("<p>Contains the output of CreateNetworkInterface.</p>")
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Information about the network interface.</p>") @as("NetworkInterface")
    networkInterface: option<networkInterface>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateNetworkInterfaceCommand"
  let make = (
    ~subnetId,
    ~clientToken=?,
    ~tagSpecifications=?,
    ~interfaceType=?,
    ~ipv6PrefixCount=?,
    ~ipv6Prefixes=?,
    ~ipv4PrefixCount=?,
    ~ipv4Prefixes=?,
    ~secondaryPrivateIpAddressCount=?,
    ~privateIpAddresses=?,
    ~privateIpAddress=?,
    ~ipv6Addresses=?,
    ~ipv6AddressCount=?,
    ~groups=?,
    ~dryRun=?,
    ~description=?,
    (),
  ) =>
    new({
      clientToken: clientToken,
      tagSpecifications: tagSpecifications,
      subnetId: subnetId,
      interfaceType: interfaceType,
      ipv6PrefixCount: ipv6PrefixCount,
      ipv6Prefixes: ipv6Prefixes,
      ipv4PrefixCount: ipv4PrefixCount,
      ipv4Prefixes: ipv4Prefixes,
      secondaryPrivateIpAddressCount: secondaryPrivateIpAddressCount,
      privateIpAddresses: privateIpAddresses,
      privateIpAddress: privateIpAddress,
      ipv6Addresses: ipv6Addresses,
      ipv6AddressCount: ipv6AddressCount,
      groups: groups,
      dryRun: dryRun,
      description: description,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateNetworkInsightsPath = {
  type t
  type request = {
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, 
   see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: string_,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to add to the path.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The destination port.</p>") @as("DestinationPort") destinationPort: option<port>,
    @ocaml.doc("<p>The protocol.</p>") @as("Protocol") protocol: protocol,
    @ocaml.doc("<p>The Amazon Web Services resource that is the destination of the path.</p>")
    @as("Destination")
    destination: networkInsightsResourceId,
    @ocaml.doc("<p>The Amazon Web Services resource that is the source of the path.</p>")
    @as("Source")
    source: networkInsightsResourceId,
    @ocaml.doc(
      "<p>The IP address of the Amazon Web Services resource that is the destination of the path.</p>"
    )
    @as("DestinationIp")
    destinationIp: option<ipAddress>,
    @ocaml.doc(
      "<p>The IP address of the Amazon Web Services resource that is the source of the path.</p>"
    )
    @as("SourceIp")
    sourceIp: option<ipAddress>,
  }
  type response = {
    @ocaml.doc("<p>Information about the path.</p>") @as("NetworkInsightsPath")
    networkInsightsPath: option<networkInsightsPath>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateNetworkInsightsPathCommand"
  let make = (
    ~clientToken,
    ~protocol,
    ~destination,
    ~source,
    ~dryRun=?,
    ~tagSpecifications=?,
    ~destinationPort=?,
    ~destinationIp=?,
    ~sourceIp=?,
    (),
  ) =>
    new({
      clientToken: clientToken,
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      destinationPort: destinationPort,
      protocol: protocol,
      destination: destination,
      source: source,
      destinationIp: destinationIp,
      sourceIp: sourceIp,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateNetworkAcl = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to assign to the network ACL.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: vpcId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the network ACL.</p>") @as("NetworkAcl")
    networkAcl: option<networkAcl>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateNetworkAclCommand"
  let make = (~vpcId, ~tagSpecifications=?, ~dryRun=?, ()) =>
    new({tagSpecifications: tagSpecifications, vpcId: vpcId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateNatGateway = {
  type t
  type request = {
    @ocaml.doc("<p>Indicates whether the NAT gateway supports public or private connectivity. 
          The default is public connectivity.</p>")
    @as("ConnectivityType")
    connectivityType: option<connectivityType>,
    @ocaml.doc("<p>The tags to assign to the NAT gateway.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The subnet in which to create the NAT gateway.</p>") @as("SubnetId")
    subnetId: subnetId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
			request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure
				idempotency</a>.</p>
         <p>Constraint: Maximum 64 ASCII characters.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>[Public NAT gateways only] The allocation ID of an Elastic IP address to associate 
          with the NAT gateway. You cannot specify an Elastic IP address with a private NAT gateway.
          If the Elastic IP address is associated with another resource, you must first disassociate it.</p>")
    @as("AllocationId")
    allocationId: option<allocationId>,
  }
  type response = {
    @ocaml.doc("<p>Information about the NAT gateway.</p>") @as("NatGateway")
    natGateway: option<natGateway>,
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateNatGatewayCommand"
  let make = (
    ~subnetId,
    ~connectivityType=?,
    ~tagSpecifications=?,
    ~dryRun=?,
    ~clientToken=?,
    ~allocationId=?,
    (),
  ) =>
    new({
      connectivityType: connectivityType,
      tagSpecifications: tagSpecifications,
      subnetId: subnetId,
      dryRun: dryRun,
      clientToken: clientToken,
      allocationId: allocationId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateManagedPrefixList = {
  type t
  type request = {
    @ocaml.doc("<p>Unique, case-sensitive identifier you provide to ensure the idempotency of the
            request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring
                Idempotency</a>.</p>
        <p>Constraints: Up to 255 UTF-8 characters in length.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The IP address type.</p>
        <p>Valid Values: <code>IPv4</code> | <code>IPv6</code>
         </p>")
    @as("AddressFamily")
    addressFamily: string_,
    @ocaml.doc("<p>The tags to apply to the prefix list during creation.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The maximum number of entries for the prefix list.</p>") @as("MaxEntries")
    maxEntries: integer_,
    @ocaml.doc("<p>One or more entries for the prefix list.</p>") @as("Entries")
    entries: option<addPrefixListEntries>,
    @ocaml.doc("<p>A name for the prefix list.</p>
        <p>Constraints: Up to 255 characters in length. The name cannot start with <code>com.amazonaws</code>.</p>")
    @as("PrefixListName")
    prefixListName: string_,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the prefix list.</p>") @as("PrefixList")
    prefixList: option<managedPrefixList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateManagedPrefixListCommand"
  let make = (
    ~addressFamily,
    ~maxEntries,
    ~prefixListName,
    ~clientToken=?,
    ~tagSpecifications=?,
    ~entries=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      clientToken: clientToken,
      addressFamily: addressFamily,
      tagSpecifications: tagSpecifications,
      maxEntries: maxEntries,
      entries: entries,
      prefixListName: prefixListName,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateLocalGatewayRouteTableVpcAssociation = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to assign to the local gateway route table VPC association.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: vpcId,
    @ocaml.doc("<p>The ID of the local gateway route table.</p>") @as("LocalGatewayRouteTableId")
    localGatewayRouteTableId: localGatewayRoutetableId,
  }
  type response = {
    @ocaml.doc("<p>Information about the association.</p>")
    @as("LocalGatewayRouteTableVpcAssociation")
    localGatewayRouteTableVpcAssociation: option<localGatewayRouteTableVpcAssociation>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateLocalGatewayRouteTableVpcAssociationCommand"
  let make = (~vpcId, ~localGatewayRouteTableId, ~dryRun=?, ~tagSpecifications=?, ()) =>
    new({
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      vpcId: vpcId,
      localGatewayRouteTableId: localGatewayRouteTableId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateKeyPair = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to apply to the new key pair.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The type of key pair. Note that ED25519 keys are not supported for Windows instances, EC2 Instance Connect, and EC2 Serial Console.</p>
        <p>Default: <code>rsa</code>
         </p>")
    @as("KeyType")
    keyType: option<keyType>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>A unique name for the key pair.</p>
	        <p>Constraints: Up to 255 ASCII characters</p>")
    @as("KeyName")
    keyName: string_,
  }
  @ocaml.doc("<p>Describes a key pair.</p>")
  type response = {
    @ocaml.doc("<p>Any tags applied to the key pair.</p>") @as("Tags") tags: option<tagList_>,
    @ocaml.doc("<p>The ID of the key pair.</p>") @as("KeyPairId") keyPairId: option<string_>,
    @ocaml.doc("<p>The name of the key pair.</p>") @as("KeyName") keyName: option<string_>,
    @ocaml.doc("<p>An unencrypted PEM encoded RSA or ED25519 private key.</p>") @as("KeyMaterial")
    keyMaterial: option<sensitiveUserData>,
    @ocaml.doc("<p>The SHA-1 digest of the DER encoded private key.</p>") @as("KeyFingerprint")
    keyFingerprint: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateKeyPairCommand"
  let make = (~keyName, ~tagSpecifications=?, ~keyType=?, ~dryRun=?, ()) =>
    new({tagSpecifications: tagSpecifications, keyType: keyType, dryRun: dryRun, keyName: keyName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateIpamScope = {
  type t
  type request = {
    @ocaml.doc(
      "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>A description for the scope you're creating.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The ID of the IPAM for which you're creating this scope.</p>") @as("IpamId")
    ipamId: ipamId,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the created scope.</p>") @as("IpamScope")
    ipamScope: option<ipamScope>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateIpamScopeCommand"
  let make = (~ipamId, ~clientToken=?, ~tagSpecifications=?, ~description=?, ~dryRun=?, ()) =>
    new({
      clientToken: clientToken,
      tagSpecifications: tagSpecifications,
      description: description,
      ipamId: ipamId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateIpamPool = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Limits which service in Amazon Web Services that the pool can be used in. \"ec2\", for example, allows users to use space for Elastic IP addresses and VPCs.</p>"
    )
    @as("AwsService")
    awsService: option<ipamPoolAwsService>,
    @ocaml.doc(
      "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc(
      "<p>Tags that are required for resources that use CIDRs from this IPAM pool. Resources that do not have these tags will not be allowed to allocate space from the pool. If the resources have their tags changed after they have allocated space or if the allocation tagging requirements are changed on the pool, the resource may be marked as noncompliant.</p>"
    )
    @as("AllocationResourceTags")
    allocationResourceTags: option<requestIpamResourceTagList>,
    @ocaml.doc("<p>The default netmask length for allocations added to this pool. If, for example, the CIDR assigned to this pool is 10.0.0.0/8 and you enter 16 here, 
         new allocations will default to 10.0.0.0/16.</p>")
    @as("AllocationDefaultNetmaskLength")
    allocationDefaultNetmaskLength: option<ipamNetmaskLength>,
    @ocaml.doc("<p>The maximum netmask length possible for CIDR allocations in this IPAM pool to be compliant. The maximum netmask length must be 
         greater than the minimum netmask length. Possible netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128.</p>")
    @as("AllocationMaxNetmaskLength")
    allocationMaxNetmaskLength: option<ipamNetmaskLength>,
    @ocaml.doc("<p>The minimum netmask length required for CIDR allocations in this IPAM pool to be compliant. The minimum netmask length must be 
         less than the maximum netmask length. Possible netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128.</p>")
    @as("AllocationMinNetmaskLength")
    allocationMinNetmaskLength: option<ipamNetmaskLength>,
    @ocaml.doc(
      "<p>Determines if the pool is publicly advertisable. This option is not available for pools with AddressFamily set to <code>ipv4</code>.</p>"
    )
    @as("PubliclyAdvertisable")
    publiclyAdvertisable: option<boolean_>,
    @ocaml.doc("<p>If selected, IPAM will continuously look for resources within the CIDR range of this pool 
         and automatically import them as allocations into your IPAM. The CIDRs that will be allocated for
         these resources must not already be allocated to other resources in order for the import to succeed. IPAM will import 
         a CIDR regardless of its compliance with the pool's allocation rules, so a resource might be imported and subsequently 
         marked as noncompliant. If IPAM discovers multiple CIDRs that overlap, IPAM will import the largest CIDR only. If IPAM 
         discovers multiple CIDRs with matching CIDRs, IPAM will randomly import one of them only.
      </p>
         <p>A locale must be set on the pool for this feature to work.</p>")
    @as("AutoImport")
    autoImport: option<boolean_>,
    @ocaml.doc(
      "<p>The IP protocol assigned to this IPAM pool. You must choose either IPv4 or IPv6 protocol for a pool.</p>"
    )
    @as("AddressFamily")
    addressFamily: addressFamily,
    @ocaml.doc("<p>A description for the IPAM pool.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc(
      "<p>The ID of the source IPAM pool. Use this option to create a pool within an existing pool. Note that the CIDR you provision for the pool within the source pool must be available in the source pool's CIDR range.</p>"
    )
    @as("SourceIpamPoolId")
    sourceIpamPoolId: option<ipamPoolId>,
    @ocaml.doc("<p>In IPAM, the locale is the Amazon Web Services Region where you want to make an IPAM pool available for allocations. Only resources in the same Region as the locale of the pool can get IP address allocations from the pool. You can only allocate a CIDR for a VPC, for example, from an IPAM pool that shares a locale with the VPC’s Region. Note that once you choose a Locale for a pool, you cannot modify it. If you do not choose a locale, resources in Regions others than the IPAM's home region cannot use CIDRs from this pool.</p>
         <p>Possible values: Any Amazon Web Services Region, such as us-east-1.</p>")
    @as("Locale")
    locale: option<string_>,
    @ocaml.doc("<p>The ID of the scope in which you would like to create the IPAM pool.</p>")
    @as("IpamScopeId")
    ipamScopeId: ipamScopeId,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the IPAM pool created.</p>") @as("IpamPool")
    ipamPool: option<ipamPool>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateIpamPoolCommand"
  let make = (
    ~addressFamily,
    ~ipamScopeId,
    ~awsService=?,
    ~clientToken=?,
    ~tagSpecifications=?,
    ~allocationResourceTags=?,
    ~allocationDefaultNetmaskLength=?,
    ~allocationMaxNetmaskLength=?,
    ~allocationMinNetmaskLength=?,
    ~publiclyAdvertisable=?,
    ~autoImport=?,
    ~description=?,
    ~sourceIpamPoolId=?,
    ~locale=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      awsService: awsService,
      clientToken: clientToken,
      tagSpecifications: tagSpecifications,
      allocationResourceTags: allocationResourceTags,
      allocationDefaultNetmaskLength: allocationDefaultNetmaskLength,
      allocationMaxNetmaskLength: allocationMaxNetmaskLength,
      allocationMinNetmaskLength: allocationMinNetmaskLength,
      publiclyAdvertisable: publiclyAdvertisable,
      autoImport: autoImport,
      addressFamily: addressFamily,
      description: description,
      sourceIpamPoolId: sourceIpamPoolId,
      locale: locale,
      ipamScopeId: ipamScopeId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateIpam = {
  type t
  type request = {
    @ocaml.doc(
      "<p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The operating Regions for the IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only
         discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.</p>
         <p>For more information about operating Regions, see <a href=\"/vpc/latest/ipam/create-ipam.html\">Create an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.
      </p>")
    @as("OperatingRegions")
    operatingRegions: option<addIpamOperatingRegionSet>,
    @ocaml.doc("<p>A description for the IPAM.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>A check for whether you have the required permissions for the action without actually making the request 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the IPAM created.</p>") @as("Ipam") ipam: option<ipam>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateIpamCommand"
  let make = (
    ~clientToken=?,
    ~tagSpecifications=?,
    ~operatingRegions=?,
    ~description=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      clientToken: clientToken,
      tagSpecifications: tagSpecifications,
      operatingRegions: operatingRegions,
      description: description,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateInternetGateway = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to assign to the internet gateway.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
  }
  type response = {
    @ocaml.doc("<p>Information about the internet gateway.</p>") @as("InternetGateway")
    internetGateway: option<internetGateway>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateInternetGatewayCommand"
  let make = (~dryRun=?, ~tagSpecifications=?, ()) =>
    new({dryRun: dryRun, tagSpecifications: tagSpecifications})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateInstanceExportTask = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to apply to the export instance task during creation.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The target virtualization environment.</p>") @as("TargetEnvironment")
    targetEnvironment: exportEnvironment,
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: instanceId,
    @ocaml.doc("<p>The format and location for an export instance task.</p>") @as("ExportToS3Task")
    exportToS3Task: exportToS3TaskSpecification,
    @ocaml.doc(
      "<p>A description for the conversion task or the resource being exported. The maximum length is 255 characters.</p>"
    )
    @as("Description")
    description: option<string_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the export instance task.</p>") @as("ExportTask")
    exportTask: option<exportTask>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateInstanceExportTaskCommand"
  let make = (
    ~targetEnvironment,
    ~instanceId,
    ~exportToS3Task,
    ~tagSpecifications=?,
    ~description=?,
    (),
  ) =>
    new({
      tagSpecifications: tagSpecifications,
      targetEnvironment: targetEnvironment,
      instanceId: instanceId,
      exportToS3Task: exportToS3Task,
      description: description,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateInstanceEventWindow = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to apply to the event window.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The cron expression for the event window, for example, <code>* 0-4,20-23 * * 1,5</code>. If
         you specify a cron expression, you can't specify a time range.</p>
         <p>Constraints:</p>
         <ul>
            <li>
               <p>Only hour and day of the week values are supported.</p>
            </li>
            <li>
               <p>For day of the week values, you can specify either integers <code>0</code> through
                  <code>6</code>, or alternative single values <code>SUN</code> through
                  <code>SAT</code>.</p>
            </li>
            <li>
               <p>The minute, month, and year must be specified by <code>*</code>.</p>
            </li>
            <li>
               <p>The hour value must be one or a multiple range, for example, <code>0-4</code> or
            <code>0-4,20-23</code>.</p>
            </li>
            <li>
               <p>Each hour range must be >= 2 hours, for example, <code>0-2</code> or
            <code>20-23</code>.</p>
            </li>
            <li>
               <p>The event window must be >= 4 hours. The combined total time ranges in the event
               window must be >= 4 hours.</p>
            </li>
         </ul>
         <p>For more information about cron expressions, see <a href=\"https://en.wikipedia.org/wiki/Cron\">cron</a> on the <i>Wikipedia
            website</i>.</p>")
    @as("CronExpression")
    cronExpression: option<instanceEventWindowCronExpression>,
    @ocaml.doc("<p>The time range for the event window. If you specify a time range, you can't specify a cron
         expression.</p>")
    @as("TimeRanges")
    timeRanges: option<instanceEventWindowTimeRangeRequestSet>,
    @ocaml.doc("<p>The name of the event window.</p>") @as("Name") name: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the event window.</p>") @as("InstanceEventWindow")
    instanceEventWindow: option<instanceEventWindow>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateInstanceEventWindowCommand"
  let make = (~tagSpecifications=?, ~cronExpression=?, ~timeRanges=?, ~name=?, ~dryRun=?, ()) =>
    new({
      tagSpecifications: tagSpecifications,
      cronExpression: cronExpression,
      timeRanges: timeRanges,
      name: name,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateImage = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to apply to the AMI and snapshots on creation. You can tag the AMI, the
      snapshots, or both.</p>
         <ul>
            <li>
               <p>To tag the AMI, the value for <code>ResourceType</code> must be
          <code>image</code>.</p>
            </li>
            <li>
      	        <p>To tag the snapshots that are created of the root volume and of other Amazon EBS volumes that
          are attached to the instance, the value for <code>ResourceType</code> must be
            <code>snapshot</code>. The same tag is applied to all of the snapshots that are
          created.</p>
            </li>
         </ul>
         <p>If you specify other values for <code>ResourceType</code>, the request fails.</p>
         <p>To tag an AMI or snapshot after it has been created, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html\">CreateTags</a>. </p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>By default, Amazon EC2 attempts to shut down and reboot the instance before creating the image. 
       If the <code>No Reboot</code> option is set, Amazon EC2 doesn't shut down the instance before creating 
       the image. Without a reboot, the AMI will be crash consistent (all the volumes are snapshotted 
       at the same time), but not application consistent (all the operating system buffers are not flushed 
       to disk before the snapshots are created).</p>")
    @as("NoReboot")
    noReboot: option<boolean_>,
    @ocaml.doc("<p>A name for the new image.</p>
         <p>Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)</p>")
    @as("Name")
    name: string_,
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: instanceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>A description for the new image.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The block device mappings. This parameter cannot be used to modify the encryption 
   		status of existing volumes or snapshots. To create an AMI with encrypted snapshots, 
   		use the <a>CopyImage</a> action.</p>")
    @as("BlockDeviceMappings")
    blockDeviceMappings: option<blockDeviceMappingRequestList>,
  }
  type response = {
    @ocaml.doc("<p>The ID of the new AMI.</p>") @as("ImageId") imageId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateImageCommand"
  let make = (
    ~name,
    ~instanceId,
    ~tagSpecifications=?,
    ~noReboot=?,
    ~dryRun=?,
    ~description=?,
    ~blockDeviceMappings=?,
    (),
  ) =>
    new({
      tagSpecifications: tagSpecifications,
      noReboot: noReboot,
      name: name,
      instanceId: instanceId,
      dryRun: dryRun,
      description: description,
      blockDeviceMappings: blockDeviceMappings,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateFpgaImage = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to apply to the FPGA image during creation.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. 
         For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>A name for the AFI.</p>") @as("Name") name: option<string_>,
    @ocaml.doc("<p>A description for the AFI.</p>") @as("Description") description: option<string_>,
    @ocaml.doc("<p>The location in Amazon S3 for the output logs.</p>") @as("LogsStorageLocation")
    logsStorageLocation: option<storageLocation>,
    @ocaml.doc(
      "<p>The location of the encrypted design checkpoint in Amazon S3. The input must be a tarball.</p>"
    )
    @as("InputStorageLocation")
    inputStorageLocation: storageLocation,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The global FPGA image identifier (AGFI ID).</p>") @as("FpgaImageGlobalId")
    fpgaImageGlobalId: option<string_>,
    @ocaml.doc("<p>The FPGA image identifier (AFI ID).</p>") @as("FpgaImageId")
    fpgaImageId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateFpgaImageCommand"
  let make = (
    ~inputStorageLocation,
    ~tagSpecifications=?,
    ~clientToken=?,
    ~name=?,
    ~description=?,
    ~logsStorageLocation=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      tagSpecifications: tagSpecifications,
      clientToken: clientToken,
      name: name,
      description: description,
      logsStorageLocation: logsStorageLocation,
      inputStorageLocation: inputStorageLocation,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateFlowLogs = {
  type t
  type request = {
    @ocaml.doc("<p>The destination options.</p>") @as("DestinationOptions")
    destinationOptions: option<destinationOptionsRequest>,
    @ocaml.doc("<p>The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. You can specify 60 seconds (1 minute) or 600 seconds (10 minutes).</p>
        <p>When a network interface is attached to a <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances\">Nitro-based
                instance</a>, the aggregation interval is always 60 seconds or less, regardless
            of the value that you specify.</p>
        <p>Default: 600</p>")
    @as("MaxAggregationInterval")
    maxAggregationInterval: option<integer_>,
    @ocaml.doc("<p>The tags to apply to the flow logs.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The fields to include in the flow log record, in the order in which they should
            appear. For a list of available fields, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records\">Flow log records</a>. If you
            omit this parameter, the flow log is created using the default format. If you specify this parameter, 
            you must specify at least one field.</p>
        <p>Specify the fields using the <code>${field-id}</code> format, separated by spaces. For
            the CLI, surround this parameter value with single quotes on Linux or
            double quotes on Windows.</p>")
    @as("LogFormat")
    logFormat: option<string_>,
    @ocaml.doc("<p>The destination to which the flow log data is to be published. Flow log data can be published 
            to a CloudWatch Logs log group or an Amazon S3 bucket. The value specified for this parameter depends on the value specified
            for <code>LogDestinationType</code>.</p>
        <p>If <code>LogDestinationType</code> is not specified or <code>cloud-watch-logs</code>,
            specify the Amazon Resource Name (ARN) of the CloudWatch Logs log group. For example, to publish
            to a log group called <code>my-logs</code>, specify
            <code>arn:aws:logs:us-east-1:123456789012:log-group:my-logs</code>. Alternatively,
            use <code>LogGroupName</code> instead.</p> 
        <p>If LogDestinationType is <code>s3</code>, specify the ARN of the Amazon S3 bucket. You can also specify a 
            subfolder in the bucket. To specify a subfolder in the bucket, use the following  ARN format: 
            <code>bucket_ARN/subfolder_name/</code>. For example, to specify a subfolder named <code>my-logs</code> in a 
            bucket named <code>my-bucket</code>, use the following ARN: <code>arn:aws:s3:::my-bucket/my-logs/</code>. You 
            cannot use <code>AWSLogs</code> as a subfolder name. This is a reserved term.</p>")
    @as("LogDestination")
    logDestination: option<string_>,
    @ocaml.doc("<p>The type of destination to which the flow log data is to be published. Flow log data can be 
            published to CloudWatch Logs or Amazon S3. To publish flow log data to CloudWatch Logs, specify <code>cloud-watch-logs</code>. To 
            publish flow log data to Amazon S3, specify <code>s3</code>.</p>
        <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify 
            <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p>
        <p>Default: <code>cloud-watch-logs</code>
         </p>")
    @as("LogDestinationType")
    logDestinationType: option<logDestinationType>,
    @ocaml.doc(
      "<p>The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.</p>"
    )
    @as("TrafficType")
    trafficType: trafficType,
    @ocaml.doc("<p>The type of resource for which to create the flow log. For example, if you specified a VPC ID for 
            the <code>ResourceId</code> property, specify <code>VPC</code> for this property.</p>")
    @as("ResourceType")
    resourceType: flowLogsResourceType,
    @ocaml.doc("<p>The ID of the subnet, network interface, or VPC for which you want to create a flow log.</p>
        <p>Constraints: Maximum of 1000 resources</p>")
    @as("ResourceIds")
    resourceIds: flowLogResourceIds,
    @ocaml.doc("<p>The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs.</p>
        <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify 
            <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p>")
    @as("LogGroupName")
    logGroupName: option<string_>,
    @ocaml.doc("<p>The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group 
            in your account.</p>
        <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify 
            <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p>")
    @as("DeliverLogsPermissionArn")
    deliverLogsPermissionArn: option<string_>,
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to ensure
                idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the flow logs that could not be created successfully.</p>")
    @as("Unsuccessful")
    unsuccessful: option<unsuccessfulItemSet>,
    @ocaml.doc("<p>The IDs of the flow logs.</p>") @as("FlowLogIds")
    flowLogIds: option<valueStringList>,
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateFlowLogsCommand"
  let make = (
    ~trafficType,
    ~resourceType,
    ~resourceIds,
    ~destinationOptions=?,
    ~maxAggregationInterval=?,
    ~tagSpecifications=?,
    ~logFormat=?,
    ~logDestination=?,
    ~logDestinationType=?,
    ~logGroupName=?,
    ~deliverLogsPermissionArn=?,
    ~clientToken=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      destinationOptions: destinationOptions,
      maxAggregationInterval: maxAggregationInterval,
      tagSpecifications: tagSpecifications,
      logFormat: logFormat,
      logDestination: logDestination,
      logDestinationType: logDestinationType,
      trafficType: trafficType,
      resourceType: resourceType,
      resourceIds: resourceIds,
      logGroupName: logGroupName,
      deliverLogsPermissionArn: deliverLogsPermissionArn,
      clientToken: clientToken,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateEgressOnlyInternetGateway = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to assign to the egress-only internet gateway.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The ID of the VPC for which to create the egress-only internet gateway.</p>")
    @as("VpcId")
    vpcId: vpcId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
			request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to ensure
				idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the egress-only internet gateway.</p>")
    @as("EgressOnlyInternetGateway")
    egressOnlyInternetGateway: option<egressOnlyInternetGateway>,
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
			request.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateEgressOnlyInternetGatewayCommand"
  let make = (~vpcId, ~tagSpecifications=?, ~dryRun=?, ~clientToken=?, ()) =>
    new({
      tagSpecifications: tagSpecifications,
      vpcId: vpcId,
      dryRun: dryRun,
      clientToken: clientToken,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateDefaultVpc = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {@ocaml.doc("<p>Information about the VPC.</p>") @as("Vpc") vpc: option<vpc>}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateDefaultVpcCommand"
  let make = (~dryRun=?, ()) => new({dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateDefaultSubnet = {
  type t
  type request = {
    @ocaml.doc("<p>Indicates whether to create an IPv6 only subnet. If you already have a default subnet
            for this Availability Zone, you must delete it before you can create an IPv6 only subnet.</p>")
    @as("Ipv6Native")
    ipv6Native: option<boolean_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The Availability Zone in which to create the default subnet.</p>")
    @as("AvailabilityZone")
    availabilityZone: string_,
  }
  type response = {
    @ocaml.doc("<p>Information about the subnet.</p>") @as("Subnet") subnet: option<subnet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateDefaultSubnetCommand"
  let make = (~availabilityZone, ~ipv6Native=?, ~dryRun=?, ()) =>
    new({ipv6Native: ipv6Native, dryRun: dryRun, availabilityZone: availabilityZone})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateCustomerGateway = {
  type t
  @ocaml.doc("<p>Contains the parameters for CreateCustomerGateway.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>A name for the customer gateway device.</p>
        <p>Length Constraints: Up to 255 characters.</p>")
    @as("DeviceName")
    deviceName: option<string_>,
    @ocaml.doc("<p>The tags to apply to the customer gateway.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The type of VPN connection that this customer gateway supports
            (<code>ipsec.1</code>).</p>")
    @as("Type")
    type_: gatewayType,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) for the customer gateway certificate.</p>")
    @as("CertificateArn")
    certificateArn: option<string_>,
    @ocaml.doc("<p>The Internet-routable IP address for the customer gateway's outside interface. The
            address must be static.</p>")
    @as("PublicIp")
    publicIp: option<string_>,
    @ocaml.doc("<p>For devices that support BGP, the customer gateway's BGP ASN.</p>
        <p>Default: 65000</p>")
    @as("BgpAsn")
    bgpAsn: integer_,
  }
  @ocaml.doc("<p>Contains the output of CreateCustomerGateway.</p>")
  type response = {
    @ocaml.doc("<p>Information about the customer gateway.</p>") @as("CustomerGateway")
    customerGateway: option<customerGateway>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateCustomerGatewayCommand"
  let make = (
    ~type_,
    ~bgpAsn,
    ~dryRun=?,
    ~deviceName=?,
    ~tagSpecifications=?,
    ~certificateArn=?,
    ~publicIp=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      deviceName: deviceName,
      tagSpecifications: tagSpecifications,
      type_: type_,
      certificateArn: certificateArn,
      publicIp: publicIp,
      bgpAsn: bgpAsn,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateClientVpnEndpoint = {
  type t
  type request = {
    @ocaml.doc("<p>Options for enabling a customizable text banner that will be displayed on
			Amazon Web Services provided clients when a VPN session is established.</p>")
    @as("ClientLoginBannerOptions")
    clientLoginBannerOptions: option<clientLoginBannerOptions>,
    @ocaml.doc("<p>The maximum VPN session duration time in hours.</p>
		       <p>Valid values: <code>8 | 10 | 12 | 24</code>
         </p>
		       <p>Default value: <code>24</code>
         </p>")
    @as("SessionTimeoutHours")
    sessionTimeoutHours: option<integer_>,
    @ocaml.doc(
      "<p>The options for managing connection authorization for new client connections.</p>"
    )
    @as("ClientConnectOptions")
    clientConnectOptions: option<clientConnectOptions>,
    @ocaml.doc("<p>Specify whether to enable the self-service portal for the Client VPN endpoint.</p>
        <p>Default Value: <code>enabled</code>
         </p>")
    @as("SelfServicePortal")
    selfServicePortal: option<selfServicePortal>,
    @ocaml.doc(
      "<p>The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.</p>"
    )
    @as("VpcId")
    vpcId: option<vpcId>,
    @ocaml.doc(
      "<p>The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.</p>"
    )
    @as("SecurityGroupIds")
    securityGroupIds: option<clientVpnSecurityGroupIdSet>,
    @ocaml.doc("<p>The tags to apply to the Client VPN endpoint during creation.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Indicates whether split-tunnel is enabled on the Client VPN endpoint.</p>
		       <p>By default, split-tunnel on a VPN endpoint is disabled.</p>
		       <p>For information about split-tunnel VPN endpoints, see <a href=\"https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html\">Split-tunnel Client VPN endpoint</a> in the 
			<i>Client VPN Administrator Guide</i>.</p>")
    @as("SplitTunnel")
    splitTunnel: option<boolean_>,
    @ocaml.doc("<p>A brief description of the Client VPN endpoint.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The port number to assign to the Client VPN endpoint for TCP and UDP traffic.</p>
	        <p>Valid Values: <code>443</code> | <code>1194</code>
         </p>
	        <p>Default Value: <code>443</code>
         </p>")
    @as("VpnPort")
    vpnPort: option<integer_>,
    @ocaml.doc("<p>The transport protocol to be used by the VPN session.</p>
		       <p>Default value: <code>udp</code>
         </p>")
    @as("TransportProtocol")
    transportProtocol: option<transportProtocol>,
    @ocaml.doc("<p>Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can
			have up to two DNS servers. If no DNS server is specified, the DNS address configured on the device is used for the DNS server.</p>")
    @as("DnsServers")
    dnsServers: option<valueStringList>,
    @ocaml.doc("<p>Information about the client connection logging options.</p>
		       <p>If you enable client connection logging, data about client connections is sent to a
			Cloudwatch Logs log stream. The following information is logged:</p>
		       <ul>
            <li>
               <p>Client connection requests</p>
            </li>
            <li>
               <p>Client connection results (successful and unsuccessful)</p>
            </li>
            <li>
               <p>Reasons for unsuccessful client connection requests</p>
            </li>
            <li>
               <p>Client connection termination time</p>
            </li>
         </ul>")
    @as("ConnectionLogOptions")
    connectionLogOptions: connectionLogOptions,
    @ocaml.doc(
      "<p>Information about the authentication method to be used to authenticate clients.</p>"
    )
    @as("AuthenticationOptions")
    authenticationOptions: clientVpnAuthenticationRequestList,
    @ocaml.doc("<p>The ARN of the server certificate. For more information, see 
			the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>")
    @as("ServerCertificateArn")
    serverCertificateArn: string_,
    @ocaml.doc(
      "<p>The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.</p>"
    )
    @as("ClientCidrBlock")
    clientCidrBlock: string_,
  }
  type response = {
    @ocaml.doc("<p>The DNS name to be used by clients when establishing their VPN session.</p>")
    @as("DnsName")
    dnsName: option<string_>,
    @ocaml.doc("<p>The current state of the Client VPN endpoint.</p>") @as("Status")
    status: option<clientVpnEndpointStatus>,
    @ocaml.doc("<p>The ID of the Client VPN endpoint.</p>") @as("ClientVpnEndpointId")
    clientVpnEndpointId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateClientVpnEndpointCommand"
  let make = (
    ~connectionLogOptions,
    ~authenticationOptions,
    ~serverCertificateArn,
    ~clientCidrBlock,
    ~clientLoginBannerOptions=?,
    ~sessionTimeoutHours=?,
    ~clientConnectOptions=?,
    ~selfServicePortal=?,
    ~vpcId=?,
    ~securityGroupIds=?,
    ~tagSpecifications=?,
    ~clientToken=?,
    ~dryRun=?,
    ~splitTunnel=?,
    ~description=?,
    ~vpnPort=?,
    ~transportProtocol=?,
    ~dnsServers=?,
    (),
  ) =>
    new({
      clientLoginBannerOptions: clientLoginBannerOptions,
      sessionTimeoutHours: sessionTimeoutHours,
      clientConnectOptions: clientConnectOptions,
      selfServicePortal: selfServicePortal,
      vpcId: vpcId,
      securityGroupIds: securityGroupIds,
      tagSpecifications: tagSpecifications,
      clientToken: clientToken,
      dryRun: dryRun,
      splitTunnel: splitTunnel,
      description: description,
      vpnPort: vpnPort,
      transportProtocol: transportProtocol,
      dnsServers: dnsServers,
      connectionLogOptions: connectionLogOptions,
      authenticationOptions: authenticationOptions,
      serverCertificateArn: serverCertificateArn,
      clientCidrBlock: clientCidrBlock,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateCarrierGateway = {
  type t
  type request = {
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to ensure
                idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to associate with the carrier gateway.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The ID of the VPC to associate with the carrier gateway.</p>") @as("VpcId")
    vpcId: vpcId,
  }
  type response = {
    @ocaml.doc("<p>Information about the carrier gateway.</p>") @as("CarrierGateway")
    carrierGateway: option<carrierGateway>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateCarrierGatewayCommand"
  let make = (~vpcId, ~clientToken=?, ~dryRun=?, ~tagSpecifications=?, ()) =>
    new({
      clientToken: clientToken,
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      vpcId: vpcId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateCapacityReservationFleet = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to assign to the Capacity Reservation Fleet. The tags are automatically assigned 
			to the Capacity Reservations in the Fleet.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>Indicates the type of instance launches that the Capacity Reservation Fleet accepts. All 
			Capacity Reservations in the Fleet inherit this instance matching criteria.</p>
		       <p>Currently, Capacity Reservation Fleets support <code>open</code> instance matching criteria 
			only. This means that instances that have matching attributes (instance type, platform, and 
			Availability Zone) run in the Capacity Reservations automatically. Instances do not need to 
			explicitly target a Capacity Reservation Fleet to use its reserved capacity.</p>")
    @as("InstanceMatchCriteria")
    instanceMatchCriteria: option<fleetInstanceMatchCriteria>,
    @ocaml.doc("<p>The date and time at which the Capacity Reservation Fleet expires. When the Capacity 
			Reservation Fleet expires, its state changes to <code>expired</code> and all of the Capacity 
			Reservations in the Fleet expire.</p>	
		       <p>The Capacity Reservation Fleet expires within an hour after the specified time. For example, 
			if you specify <code>5/31/2019</code>, <code>13:30:55</code>, the Capacity Reservation Fleet 
			is guaranteed to expire between <code>13:30:55</code> and <code>14:30:55</code> on 
			<code>5/31/2019</code>.
		</p>")
    @as("EndDate")
    endDate: option<millisecondDateTime>,
    @ocaml.doc("<p>The total number of capacity units to be reserved by the Capacity Reservation Fleet. This 
			value, together with the instance type weights that you assign to each instance type used by 
			the Fleet determine the number of instances for which the Fleet reserves capacity. Both values 
			are based on units that make sense for your workload. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity\">
				Total target capacity</a> in the Amazon EC2 User Guide.</p>")
    @as("TotalTargetCapacity")
    totalTargetCapacity: integer_,
    @ocaml.doc("<p>Indicates the tenancy of the Capacity Reservation Fleet. All Capacity Reservations 
			in the Fleet inherit this tenancy. The Capacity Reservation Fleet can have one of 
			the following tenancy settings:</p>
		       <ul>
            <li>
				           <p>
					             <code>default</code> - The Capacity Reservation Fleet is created on hardware 
					that is shared with other Amazon Web Services accounts.</p>
			         </li>
            <li>
				           <p>
					             <code>dedicated</code> - The Capacity Reservations are created on single-tenant 
					hardware that is dedicated to a single Amazon Web Services account.</p>
			         </li>
         </ul>")
    @as("Tenancy")
    tenancy: option<fleetCapacityReservationTenancy>,
    @ocaml.doc("<p>Information about the instance types for which to reserve the capacity.</p>")
    @as("InstanceTypeSpecifications")
    instanceTypeSpecifications: reservationFleetInstanceSpecificationList,
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensure Idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The strategy used by the Capacity Reservation Fleet to determine which of the 
			specified instance types to use. Currently, only the <code>prioritized</code> 
			allocation strategy is supported. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#allocation-strategy\">
				Allocation strategy</a> in the Amazon EC2 User Guide.</p>
		       <p>Valid values: <code>prioritized</code>
         </p>")
    @as("AllocationStrategy")
    allocationStrategy: option<string_>,
  }
  type response = {
    @ocaml.doc("<p>The tags assigned to the Capacity Reservation Fleet.</p>") @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc(
      "<p>Information about the individual Capacity Reservations in the Capacity Reservation Fleet.</p>"
    )
    @as("FleetCapacityReservations")
    fleetCapacityReservations: option<fleetCapacityReservationSet>,
    @ocaml.doc("<p>Indicates the tenancy of Capacity Reservation Fleet.</p>") @as("Tenancy")
    tenancy: option<fleetCapacityReservationTenancy>,
    @ocaml.doc("<p>The date and time at which the Capacity Reservation Fleet expires.</p>")
    @as("EndDate")
    endDate: option<millisecondDateTime>,
    @ocaml.doc("<p>The date and time at which the Capacity Reservation Fleet was created.</p>")
    @as("CreateTime")
    createTime: option<millisecondDateTime>,
    @ocaml.doc("<p>The allocation strategy used by the Capacity Reservation Fleet.</p>")
    @as("AllocationStrategy")
    allocationStrategy: option<string_>,
    @ocaml.doc("<p>The instance matching criteria for the Capacity Reservation Fleet.</p>")
    @as("InstanceMatchCriteria")
    instanceMatchCriteria: option<fleetInstanceMatchCriteria>,
    @ocaml.doc("<p>The requested capacity units that have been successfully reserved.</p>")
    @as("TotalFulfilledCapacity")
    totalFulfilledCapacity: option<double>,
    @ocaml.doc(
      "<p>The total number of capacity units for which the Capacity Reservation Fleet reserves capacity.</p>"
    )
    @as("TotalTargetCapacity")
    totalTargetCapacity: option<integer_>,
    @ocaml.doc("<p>The status of the Capacity Reservation Fleet.</p>") @as("State")
    state: option<capacityReservationFleetState>,
    @ocaml.doc("<p>The ID of the Capacity Reservation Fleet.</p>") @as("CapacityReservationFleetId")
    capacityReservationFleetId: option<capacityReservationFleetId>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateCapacityReservationFleetCommand"
  let make = (
    ~totalTargetCapacity,
    ~instanceTypeSpecifications,
    ~dryRun=?,
    ~tagSpecifications=?,
    ~instanceMatchCriteria=?,
    ~endDate=?,
    ~tenancy=?,
    ~clientToken=?,
    ~allocationStrategy=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      instanceMatchCriteria: instanceMatchCriteria,
      endDate: endDate,
      totalTargetCapacity: totalTargetCapacity,
      tenancy: tenancy,
      instanceTypeSpecifications: instanceTypeSpecifications,
      clientToken: clientToken,
      allocationStrategy: allocationStrategy,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateCapacityReservation = {
  type t
  type request = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the cluster placement group in which 
			to create the Capacity Reservation. For more information, see 
			<a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cr-cpg.html\">
				Capacity Reservations for cluster placement groups</a> in the 
			<i>Amazon EC2 User Guide</i>.</p>")
    @as("PlacementGroupArn")
    placementGroupArn: option<placementGroupArn>,
    @ocaml.doc(
      "<p>The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.</p>"
    )
    @as("OutpostArn")
    outpostArn: option<outpostArn>,
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to apply to the Capacity Reservation during launch.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>Indicates the type of instance launches that the Capacity Reservation accepts. The options
			include:</p>
		       <ul>
            <li>
               <p>
                  <code>open</code> - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, 
				and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying 
				any additional parameters.</p>
            </li>
            <li>
               <p>
                  <code>targeted</code> - The Capacity Reservation only accepts instances that have matching attributes
					(instance type, platform, and Availability Zone), and explicitly target the
					Capacity Reservation. This ensures that only permitted instances can use the reserved capacity. </p>
            </li>
         </ul>
		       <p>Default: <code>open</code>
         </p>")
    @as("InstanceMatchCriteria")
    instanceMatchCriteria: option<instanceMatchCriteria>,
    @ocaml.doc("<p>Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end
			types:</p>
		       <ul>
            <li>
               <p>
                  <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it. Do not
					provide an <code>EndDate</code> if the <code>EndDateType</code> is
						<code>unlimited</code>.</p>
            </li>
            <li>
               <p>
                  <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time. You must
					provide an <code>EndDate</code> value if the <code>EndDateType</code> value is
						<code>limited</code>.</p>
            </li>
         </ul>")
    @as("EndDateType")
    endDateType: option<endDateType>,
    @ocaml.doc("<p>The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity
			is released and you can no longer launch instances into it. The Capacity Reservation's state changes to
				<code>expired</code> when it reaches its end date and time.</p>	
		       <p>You must provide an <code>EndDate</code> value if <code>EndDateType</code> is
				<code>limited</code>. Omit <code>EndDate</code> if <code>EndDateType</code> is
				<code>unlimited</code>.</p>
		
		       <p>If the <code>EndDateType</code> is <code>limited</code>, the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 
			5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.</p>")
    @as("EndDate")
    endDate: option<dateTime>,
    @ocaml.doc("<p>Indicates whether the Capacity Reservation supports instances with temporary, block-level
			storage.</p>")
    @as("EphemeralStorage")
    ephemeralStorage: option<boolean_>,
    @ocaml.doc("<p>Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides
			dedicated throughput to Amazon EBS and an optimized configuration stack to provide
			optimal I/O performance. This optimization isn't available with all instance types.
			Additional usage charges apply when using an EBS- optimized instance.</p>")
    @as("EbsOptimized")
    ebsOptimized: option<boolean_>,
    @ocaml.doc("<p>The number of instances for which to reserve capacity.</p>
	  	     <p>Valid range: 1 - 1000</p>")
    @as("InstanceCount")
    instanceCount: integer_,
    @ocaml.doc("<p>Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:</p>
		       <ul>
            <li>
               <p>
                  <code>default</code> - The Capacity Reservation is created on hardware that is shared with other Amazon Web Services accounts.</p>
            </li>
            <li>
               <p>
                  <code>dedicated</code> - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single Amazon Web Services account.</p>
            </li>
         </ul>")
    @as("Tenancy")
    tenancy: option<capacityReservationTenancy>,
    @ocaml.doc(
      "<p>The ID of the Availability Zone in which to create the Capacity Reservation.</p>"
    )
    @as("AvailabilityZoneId")
    availabilityZoneId: option<string_>,
    @ocaml.doc("<p>The Availability Zone in which to create the Capacity Reservation.</p>")
    @as("AvailabilityZone")
    availabilityZone: option<string_>,
    @ocaml.doc("<p>The type of operating system for which to reserve capacity.</p>")
    @as("InstancePlatform")
    instancePlatform: capacityReservationInstancePlatform,
    @ocaml.doc(
      "<p>The instance type for which to reserve capacity. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p>"
    )
    @as("InstanceType")
    instanceType: string_,
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensure Idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the Capacity Reservation.</p>") @as("CapacityReservation")
    capacityReservation: option<capacityReservation>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateCapacityReservationCommand"
  let make = (
    ~instanceCount,
    ~instancePlatform,
    ~instanceType,
    ~placementGroupArn=?,
    ~outpostArn=?,
    ~dryRun=?,
    ~tagSpecifications=?,
    ~instanceMatchCriteria=?,
    ~endDateType=?,
    ~endDate=?,
    ~ephemeralStorage=?,
    ~ebsOptimized=?,
    ~tenancy=?,
    ~availabilityZoneId=?,
    ~availabilityZone=?,
    ~clientToken=?,
    (),
  ) =>
    new({
      placementGroupArn: placementGroupArn,
      outpostArn: outpostArn,
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      instanceMatchCriteria: instanceMatchCriteria,
      endDateType: endDateType,
      endDate: endDate,
      ephemeralStorage: ephemeralStorage,
      ebsOptimized: ebsOptimized,
      instanceCount: instanceCount,
      tenancy: tenancy,
      availabilityZoneId: availabilityZoneId,
      availabilityZone: availabilityZone,
      instancePlatform: instancePlatform,
      instanceType: instanceType,
      clientToken: clientToken,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CopySnapshot = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to apply to the new snapshot.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The ID of the EBS snapshot to copy.</p>") @as("SourceSnapshotId")
    sourceSnapshotId: string_,
    @ocaml.doc("<p>The ID of the Region that contains the snapshot to be copied.</p>")
    @as("SourceRegion")
    sourceRegion: string_,
    @ocaml.doc("<p>When you copy an encrypted source snapshot using the Amazon EC2 Query API, you must supply a
      pre-signed URL. This parameter is optional for unencrypted snapshots. For more information,
      see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html\">Query
        requests</a>.</p>
         <p>The <code>PresignedUrl</code> should use the snapshot source endpoint, the
        <code>CopySnapshot</code> action, and include the <code>SourceRegion</code>,
        <code>SourceSnapshotId</code>, and <code>DestinationRegion</code> parameters. The
        <code>PresignedUrl</code> must be signed using Amazon Web Services Signature Version 4. Because EBS
      snapshots are stored in Amazon S3, the signing algorithm for this parameter uses the same logic
      that is described in <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\">Authenticating Requests: Using Query
        Parameters (Amazon Web Services Signature Version 4)</a> in the <i>Amazon Simple Storage Service API Reference</i>. An
      invalid or improperly signed <code>PresignedUrl</code> will cause the copy operation to fail
      asynchronously, and the snapshot will move to an <code>error</code> state.</p>")
    @as("PresignedUrl")
    presignedUrl: option<string_>,
    @ocaml.doc("<p>The identifier of the Key Management Service (KMS) KMS key to use for Amazon EBS encryption.
      If this parameter is not specified, your KMS key for Amazon EBS is used. If <code>KmsKeyId</code> is
      specified, the encrypted state must be <code>true</code>.</p>
         <p>You can specify the KMS key using any of the following:</p>
         <ul>
            <li>
               <p>Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.</p>
            </li>
            <li>
               <p>Key alias. For example, alias/ExampleAlias.</p>
            </li>
            <li>
               <p>Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.</p>
            </li>
            <li>
               <p>Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.</p>
            </li>
         </ul>
         <p>Amazon Web Services authenticates the KMS key asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, 
      the action can appear to complete, but eventually fails.</p>")
    @as("KmsKeyId")
    kmsKeyId: option<kmsKeyId>,
    @ocaml.doc("<p>To encrypt a copy of an unencrypted snapshot if encryption by default is not enabled, 
      enable encryption using this parameter. Otherwise, omit this parameter. Encrypted snapshots 
      are encrypted, even if you omit this parameter and encryption by default is not enabled. You 
      cannot set this parameter to false. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\">Amazon EBS encryption</a> in the 
      <i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
    @as("Encrypted")
    encrypted: option<boolean_>,
    @ocaml.doc("<p>The destination Region to use in the <code>PresignedUrl</code> parameter of a snapshot
      copy operation. This parameter is only valid for specifying the destination Region in a
        <code>PresignedUrl</code> parameter, where it is required.</p>
    
         <p>The snapshot copy is sent to the regional endpoint that you sent the HTTP
    	request to (for example, <code>ec2.us-east-1.amazonaws.com</code>). With the CLI, this is
      specified using the <code>--region</code> parameter or the default Region in your Amazon Web Services
      configuration file.</p>")
    @as("DestinationRegion")
    destinationRegion: option<string_>,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Outpost to which to copy the snapshot. Only 
		specify this parameter when copying a snapshot from an Amazon Web Services Region to an Outpost. 
		The snapshot must be in the Region for the destination Outpost. You cannot copy a 
		snapshot from an Outpost to a Region, from one Outpost to another, or within the same 
		Outpost.</p>
  	      <p>For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#copy-snapshots\">
  		Copy snapshots from an Amazon Web Services Region to an Outpost</a> in the 
  		<i>Amazon Elastic Compute Cloud User Guide</i>.</p>")
    @as("DestinationOutpostArn")
    destinationOutpostArn: option<string_>,
    @ocaml.doc("<p>A description for the EBS snapshot.</p>") @as("Description")
    description: option<string_>,
  }
  type response = {
    @ocaml.doc("<p>Any tags applied to the new snapshot.</p>") @as("Tags") tags: option<tagList_>,
    @ocaml.doc("<p>The ID of the new snapshot.</p>") @as("SnapshotId") snapshotId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CopySnapshotCommand"
  let make = (
    ~sourceSnapshotId,
    ~sourceRegion,
    ~dryRun=?,
    ~tagSpecifications=?,
    ~presignedUrl=?,
    ~kmsKeyId=?,
    ~encrypted=?,
    ~destinationRegion=?,
    ~destinationOutpostArn=?,
    ~description=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      sourceSnapshotId: sourceSnapshotId,
      sourceRegion: sourceRegion,
      presignedUrl: presignedUrl,
      kmsKeyId: kmsKeyId,
      encrypted: encrypted,
      destinationRegion: destinationRegion,
      destinationOutpostArn: destinationOutpostArn,
      description: description,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CancelReservedInstancesListing = {
  type t
  @ocaml.doc("<p>Contains the parameters for CancelReservedInstancesListing.</p>")
  type request = {
    @ocaml.doc("<p>The ID of the Reserved Instance listing.</p>") @as("ReservedInstancesListingId")
    reservedInstancesListingId: reservedInstancesListingId,
  }
  @ocaml.doc("<p>Contains the output of CancelReservedInstancesListing.</p>")
  type response = {
    @ocaml.doc("<p>The Reserved Instance listing.</p>") @as("ReservedInstancesListings")
    reservedInstancesListings: option<reservedInstancesListingList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CancelReservedInstancesListingCommand"
  let make = (~reservedInstancesListingId, ()) =>
    new({reservedInstancesListingId: reservedInstancesListingId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AuthorizeSecurityGroupIngress = {
  type t
  type request = {
    @ocaml.doc("<p>[VPC Only] The tags applied to the security group rule.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The end of port range for the TCP and UDP protocols, or an ICMP code number.
			For the ICMP code number, use <code>-1</code> to specify all codes. If you
			specify all ICMP types, you must specify all codes.</p>
         <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>")
    @as("ToPort")
    toPort: option<integer_>,
    @ocaml.doc("<p>[nondefault VPC] The Amazon Web Services account ID for the source security group, if the source security group is 
         in a different account. You can't specify this parameter in combination with the following parameters: 
         the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. 
         Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol 
         and port range, use a set of IP permissions instead.</p>")
    @as("SourceSecurityGroupOwnerId")
    sourceSecurityGroupOwnerId: option<string_>,
    @ocaml.doc("<p>[EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter 
         in combination with the following parameters: the CIDR IP address range, the start of the port range, 
         the IP protocol, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. 
         To create a rule with a specific IP protocol and port range, use a set of IP permissions instead. For 
         EC2-VPC, the source security group must be in the same VPC.</p>")
    @as("SourceSecurityGroupName")
    sourceSecurityGroupName: option<string_>,
    @ocaml.doc("<p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>) or number
      (see <a href=\"http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\">Protocol Numbers</a>). To specify <code>icmpv6</code>, use a set of IP permissions.</p> 
         <p>[VPC only] Use <code>-1</code> to specify all protocols. If you specify <code>-1</code> or a 
         protocol other than <code>tcp</code>, <code>udp</code>, or <code>icmp</code>, traffic on all ports 
         is allowed, regardless of any ports you specify.</p>
         <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>")
    @as("IpProtocol")
    ipProtocol: option<string_>,
    @ocaml.doc("<p>The sets of IP permissions.</p>") @as("IpPermissions")
    ipPermissions: option<ipPermissionList>,
    @ocaml.doc("<p>[EC2-Classic, default VPC] The name of the security group. You must specify either the
			security group ID or the security group name in the request.</p>")
    @as("GroupName")
    groupName: option<securityGroupName>,
    @ocaml.doc("<p>The ID of the security group. You must specify either the security group ID or the
			security group name in the request. For security groups in a nondefault VPC, you must
			specify the security group ID.</p>")
    @as("GroupId")
    groupId: option<securityGroupId>,
    @ocaml.doc("<p>The start of port range for the TCP and UDP protocols, or an ICMP type number.
			For the ICMP type number, use <code>-1</code> to specify all types. If you
			specify all ICMP types, you must specify all codes.</p>
         <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>")
    @as("FromPort")
    fromPort: option<integer_>,
    @ocaml.doc("<p>The IPv4 address range, in CIDR format. You can't specify this parameter when specifying a source
      security group. To specify an IPv6 address range, use a set of IP permissions.</p>
         <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>")
    @as("CidrIp")
    cidrIp: option<string_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Information about the inbound (ingress) security group rules that were added.</p>"
    )
    @as("SecurityGroupRules")
    securityGroupRules: option<securityGroupRuleList>,
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "AuthorizeSecurityGroupIngressCommand"
  let make = (
    ~tagSpecifications=?,
    ~dryRun=?,
    ~toPort=?,
    ~sourceSecurityGroupOwnerId=?,
    ~sourceSecurityGroupName=?,
    ~ipProtocol=?,
    ~ipPermissions=?,
    ~groupName=?,
    ~groupId=?,
    ~fromPort=?,
    ~cidrIp=?,
    (),
  ) =>
    new({
      tagSpecifications: tagSpecifications,
      dryRun: dryRun,
      toPort: toPort,
      sourceSecurityGroupOwnerId: sourceSecurityGroupOwnerId,
      sourceSecurityGroupName: sourceSecurityGroupName,
      ipProtocol: ipProtocol,
      ipPermissions: ipPermissions,
      groupName: groupName,
      groupId: groupId,
      fromPort: fromPort,
      cidrIp: cidrIp,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AuthorizeSecurityGroupEgress = {
  type t
  type request = {
    @ocaml.doc("<p>Not supported. Use a set of IP permissions to specify a
            destination security group.</p>")
    @as("SourceSecurityGroupOwnerId")
    sourceSecurityGroupOwnerId: option<string_>,
    @ocaml.doc("<p>Not supported. Use a set of IP permissions to specify a
            destination security group.</p>")
    @as("SourceSecurityGroupName")
    sourceSecurityGroupName: option<string_>,
    @ocaml.doc("<p>Not supported. Use a set of IP permissions to specify the port.</p>")
    @as("ToPort")
    toPort: option<integer_>,
    @ocaml.doc("<p>Not supported. Use a set of IP permissions to specify the protocol name or
            number.</p>")
    @as("IpProtocol")
    ipProtocol: option<string_>,
    @ocaml.doc("<p>Not supported. Use a set of IP permissions to specify the port.</p>")
    @as("FromPort")
    fromPort: option<integer_>,
    @ocaml.doc("<p>Not supported. Use a set of IP permissions to specify the CIDR.</p>")
    @as("CidrIp")
    cidrIp: option<string_>,
    @ocaml.doc("<p>The tags applied to the security group rule.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The sets of IP permissions. You can't specify a destination security group and a CIDR IP
            address range in the same set of permissions.</p>")
    @as("IpPermissions")
    ipPermissions: option<ipPermissionList>,
    @ocaml.doc("<p>The ID of the security group.</p>") @as("GroupId") groupId: securityGroupId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>Information about the outbound (egress) security group rules that were added.</p>"
    )
    @as("SecurityGroupRules")
    securityGroupRules: option<securityGroupRuleList>,
    @ocaml.doc(
      "<p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>"
    )
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "AuthorizeSecurityGroupEgressCommand"
  let make = (
    ~groupId,
    ~sourceSecurityGroupOwnerId=?,
    ~sourceSecurityGroupName=?,
    ~toPort=?,
    ~ipProtocol=?,
    ~fromPort=?,
    ~cidrIp=?,
    ~tagSpecifications=?,
    ~ipPermissions=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      sourceSecurityGroupOwnerId: sourceSecurityGroupOwnerId,
      sourceSecurityGroupName: sourceSecurityGroupName,
      toPort: toPort,
      ipProtocol: ipProtocol,
      fromPort: fromPort,
      cidrIp: cidrIp,
      tagSpecifications: tagSpecifications,
      ipPermissions: ipPermissions,
      groupId: groupId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AssociateInstanceEventWindow = {
  type t
  type request = {
    @ocaml.doc("<p>One or more targets associated with the specified event window.</p>")
    @as("AssociationTarget")
    associationTarget: instanceEventWindowAssociationRequest,
    @ocaml.doc("<p>The ID of the event window.</p>") @as("InstanceEventWindowId")
    instanceEventWindowId: instanceEventWindowId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the event window.</p>") @as("InstanceEventWindow")
    instanceEventWindow: option<instanceEventWindow>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "AssociateInstanceEventWindowCommand"
  let make = (~associationTarget, ~instanceEventWindowId, ~dryRun=?, ()) =>
    new({
      associationTarget: associationTarget,
      instanceEventWindowId: instanceEventWindowId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AllocateHosts = {
  type t
  type request = {
    @ocaml.doc("<p>Indicates whether to enable or disable host recovery for the Dedicated Host. 
			Host recovery is disabled by default. For more information, see 
			<a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html\">
			Host recovery</a> in the <i>Amazon EC2 User Guide</i>.</p>
		       <p>Default: <code>off</code>
         </p>")
    @as("HostRecovery")
    hostRecovery: option<hostRecovery>,
    @ocaml.doc("<p>The tags to apply to the Dedicated Host during creation.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc(
      "<p>The number of Dedicated Hosts to allocate to your account with these parameters.</p>"
    )
    @as("Quantity")
    quantity: integer_,
    @ocaml.doc("<p>Specifies the instance family to be supported by the Dedicated Hosts. If you specify 
			an instance family, the Dedicated Hosts support multiple instance types within that 
			instance family.</p>
		
		       <p>If you want the Dedicated Hosts to support a specific instance type only, omit this 
			parameter and specify <b>InstanceType</b> 
			instead. You cannot specify <b>InstanceFamily</b> and 
			<b>InstanceType</b> in the same request.</p>")
    @as("InstanceFamily")
    instanceFamily: option<string_>,
    @ocaml.doc("<p>Specifies the instance type to be supported by the Dedicated Hosts. If you
		specify an instance type, the Dedicated Hosts support instances of the 
		specified instance type only.</p>
    	
    	    <p>If you want the Dedicated Hosts to support multiple instance types in a specific 
    		instance family, omit this parameter and specify <b>InstanceFamily</b> 
    		instead. You cannot specify <b>InstanceType</b> and 
    		<b>InstanceFamily</b> in the same request.</p>")
    @as("InstanceType")
    instanceType: option<string_>,
    @ocaml.doc(
      "<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p>"
    )
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>The Availability Zone in which to allocate the Dedicated Host.</p>")
    @as("AvailabilityZone")
    availabilityZone: string_,
    @ocaml.doc("<p>Indicates whether the host accepts any untargeted instance launches that 
    		match its instance type configuration, or if it only accepts Host tenancy 
    		instance launches that specify its unique host ID. For more information, 
    		see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-dedicated-hosts-work.html#dedicated-hosts-understanding\">
        	Understanding auto-placement and affinity</a> in the <i>Amazon EC2 User Guide</i>.</p>

        <p>Default: <code>on</code>
         </p>")
    @as("AutoPlacement")
    autoPlacement: option<autoPlacement>,
  }
  @ocaml.doc("<p>Contains the output of AllocateHosts.</p>")
  type response = {
    @ocaml.doc("<p>The ID of the allocated Dedicated Host. This is used to launch an instance onto a
			specific host.</p>")
    @as("HostIds")
    hostIds: option<responseHostIdList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "AllocateHostsCommand"
  let make = (
    ~quantity,
    ~availabilityZone,
    ~hostRecovery=?,
    ~tagSpecifications=?,
    ~instanceFamily=?,
    ~instanceType=?,
    ~clientToken=?,
    ~autoPlacement=?,
    (),
  ) =>
    new({
      hostRecovery: hostRecovery,
      tagSpecifications: tagSpecifications,
      quantity: quantity,
      instanceFamily: instanceFamily,
      instanceType: instanceType,
      clientToken: clientToken,
      availabilityZone: availabilityZone,
      autoPlacement: autoPlacement,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AllocateAddress = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to assign to the Elastic IP address.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of a customer-owned address pool. Use this parameter to let Amazon EC2 
        select an address from the address pool. Alternatively, specify a specific 
        address from the address pool.</p>")
    @as("CustomerOwnedIpv4Pool")
    customerOwnedIpv4Pool: option<string_>,
    @ocaml.doc("<p> A unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services
      advertises IP addresses. Use this parameter to limit the IP address to this location. IP
      addresses cannot move between network border groups.</p>
         <p>Use <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html\">DescribeAvailabilityZones</a> to view the network border groups.</p>
    
         <p>You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 Classic, 
      you receive an <code>InvalidParameterCombination</code> error.</p>")
    @as("NetworkBorderGroup")
    networkBorderGroup: option<string_>,
    @ocaml.doc("<p>The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool.
       To specify a specific address from the address pool, use the <code>Address</code> parameter instead.</p>")
    @as("PublicIpv4Pool")
    publicIpv4Pool: option<ipv4PoolEc2Id>,
    @ocaml.doc(
      "<p>[EC2-VPC] The Elastic IP address to recover or an IPv4 address from an address pool.</p>"
    )
    @as("Address")
    address: option<publicIpAddress>,
    @ocaml.doc("<p>Indicates whether the Elastic IP address is for use with instances in a VPC or instances in EC2-Classic.</p>
         <p>Default: If the Region supports EC2-Classic, the default is <code>standard</code>. Otherwise, the default
         is <code>vpc</code>.</p>")
    @as("Domain")
    domain: option<domainType>,
  }
  type response = {
    @ocaml.doc("<p>The carrier IP address. This option is only available for network interfaces which  reside
      in a subnet in a Wavelength Zone (for example an EC2 instance). </p>")
    @as("CarrierIp")
    carrierIp: option<string_>,
    @ocaml.doc("<p>The ID of the customer-owned address pool.</p>") @as("CustomerOwnedIpv4Pool")
    customerOwnedIpv4Pool: option<string_>,
    @ocaml.doc("<p>The customer-owned IP address.</p>") @as("CustomerOwnedIp")
    customerOwnedIp: option<string_>,
    @ocaml.doc("<p>Indicates whether the Elastic IP address is for use with instances in a VPC (<code>vpc</code>) or
				instances in EC2-Classic (<code>standard</code>).</p>")
    @as("Domain")
    domain: option<domainType>,
    @ocaml.doc("<p>The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises
      IP addresses.</p>")
    @as("NetworkBorderGroup")
    networkBorderGroup: option<string_>,
    @ocaml.doc("<p>The ID of an address pool.</p>") @as("PublicIpv4Pool")
    publicIpv4Pool: option<string_>,
    @ocaml.doc(
      "<p>[EC2-VPC] The ID that Amazon Web Services assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.</p>"
    )
    @as("AllocationId")
    allocationId: option<string_>,
    @ocaml.doc("<p>The Elastic IP address.</p>") @as("PublicIp") publicIp: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "AllocateAddressCommand"
  let make = (
    ~tagSpecifications=?,
    ~dryRun=?,
    ~customerOwnedIpv4Pool=?,
    ~networkBorderGroup=?,
    ~publicIpv4Pool=?,
    ~address=?,
    ~domain=?,
    (),
  ) =>
    new({
      tagSpecifications: tagSpecifications,
      dryRun: dryRun,
      customerOwnedIpv4Pool: customerOwnedIpv4Pool,
      networkBorderGroup: networkBorderGroup,
      publicIpv4Pool: publicIpv4Pool,
      address: address,
      domain: domain,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module AcceptVpcPeeringConnection = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the VPC peering connection. You must specify this parameter in the
			request.</p>")
    @as("VpcPeeringConnectionId")
    vpcPeeringConnectionId: option<vpcPeeringConnectionId>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the VPC peering connection.</p>") @as("VpcPeeringConnection")
    vpcPeeringConnection: option<vpcPeeringConnection>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "AcceptVpcPeeringConnectionCommand"
  let make = (~vpcPeeringConnectionId=?, ~dryRun=?, ()) =>
    new({vpcPeeringConnectionId: vpcPeeringConnectionId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RunScheduledInstances = {
  type t
  @ocaml.doc("<p>Contains the parameters for RunScheduledInstances.</p>")
  type request = {
    @ocaml.doc("<p>The Scheduled Instance ID.</p>") @as("ScheduledInstanceId")
    scheduledInstanceId: scheduledInstanceId,
    @ocaml.doc("<p>The launch specification. You must match the instance type, Availability Zone, 
         network, and platform of the schedule that you purchased.</p>")
    @as("LaunchSpecification")
    launchSpecification: scheduledInstancesLaunchSpecification,
    @ocaml.doc("<p>The number of instances.</p>
         <p>Default: 1</p>")
    @as("InstanceCount")
    instanceCount: option<integer_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Unique, case-sensitive identifier that ensures the idempotency of the request. 
         For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
  }
  @ocaml.doc("<p>Contains the output of RunScheduledInstances.</p>")
  type response = {
    @ocaml.doc("<p>The IDs of the newly launched instances.</p>") @as("InstanceIdSet")
    instanceIdSet: option<instanceIdSet>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "RunScheduledInstancesCommand"
  let make = (
    ~scheduledInstanceId,
    ~launchSpecification,
    ~instanceCount=?,
    ~dryRun=?,
    ~clientToken=?,
    (),
  ) =>
    new({
      scheduledInstanceId: scheduledInstanceId,
      launchSpecification: launchSpecification,
      instanceCount: instanceCount,
      dryRun: dryRun,
      clientToken: clientToken,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ImportVolume = {
  type t
  type request = {
    @ocaml.doc("<p>The volume size.</p>") @as("Volume") volume: volumeDetail,
    @ocaml.doc("<p>The disk image.</p>") @as("Image") image: diskImageDetail,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>A description of the volume.</p>") @as("Description")
    description: option<string_>,
    @ocaml.doc("<p>The Availability Zone for the resulting EBS volume.</p>") @as("AvailabilityZone")
    availabilityZone: string_,
  }
  type response = {
    @ocaml.doc("<p>Information about the conversion task.</p>") @as("ConversionTask")
    conversionTask: option<conversionTask>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ImportVolumeCommand"
  let make = (~volume, ~image, ~availabilityZone, ~dryRun=?, ~description=?, ()) =>
    new({
      volume: volume,
      image: image,
      dryRun: dryRun,
      description: description,
      availabilityZone: availabilityZone,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ImportInstance = {
  type t
  type request = {
    @ocaml.doc("<p>The instance operating system.</p>") @as("Platform") platform: platformValues,
    @ocaml.doc("<p>The launch specification.</p>") @as("LaunchSpecification")
    launchSpecification: option<importInstanceLaunchSpecification>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The disk image.</p>") @as("DiskImages") diskImages: option<diskImageList>,
    @ocaml.doc("<p>A description for the instance being imported.</p>") @as("Description")
    description: option<string_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the conversion task.</p>") @as("ConversionTask")
    conversionTask: option<conversionTask>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ImportInstanceCommand"
  let make = (~platform, ~launchSpecification=?, ~dryRun=?, ~diskImages=?, ~description=?, ()) =>
    new({
      platform: platform,
      launchSpecification: launchSpecification,
      dryRun: dryRun,
      diskImages: diskImages,
      description: description,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetLaunchTemplateData = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the instance.</p>") @as("InstanceId") instanceId: instanceId,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The instance data.</p>") @as("LaunchTemplateData")
    launchTemplateData: option<responseLaunchTemplateData>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "GetLaunchTemplateDataCommand"
  let make = (~instanceId, ~dryRun=?, ()) => new({instanceId: instanceId, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module EnableFastSnapshotRestores = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The IDs of one or more snapshots. For example, <code>snap-1234567890abcdef0</code>. You can specify
      a snapshot that was shared with you from another Amazon Web Services account.</p>")
    @as("SourceSnapshotIds")
    sourceSnapshotIds: snapshotIdStringList,
    @ocaml.doc("<p>One or more Availability Zones. For example, <code>us-east-2a</code>.</p>")
    @as("AvailabilityZones")
    availabilityZones: availabilityZoneStringList,
  }
  type response = {
    @ocaml.doc(
      "<p>Information about the snapshots for which fast snapshot restores could not be enabled.</p>"
    )
    @as("Unsuccessful")
    unsuccessful: option<enableFastSnapshotRestoreErrorSet>,
    @ocaml.doc(
      "<p>Information about the snapshots for which fast snapshot restores were successfully enabled.</p>"
    )
    @as("Successful")
    successful: option<enableFastSnapshotRestoreSuccessSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "EnableFastSnapshotRestoresCommand"
  let make = (~sourceSnapshotIds, ~availabilityZones, ~dryRun=?, ()) =>
    new({
      dryRun: dryRun,
      sourceSnapshotIds: sourceSnapshotIds,
      availabilityZones: availabilityZones,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DisableFastSnapshotRestores = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The IDs of one or more snapshots. For example, <code>snap-1234567890abcdef0</code>.</p>"
    )
    @as("SourceSnapshotIds")
    sourceSnapshotIds: snapshotIdStringList,
    @ocaml.doc("<p>One or more Availability Zones. For example, <code>us-east-2a</code>.</p>")
    @as("AvailabilityZones")
    availabilityZones: availabilityZoneStringList,
  }
  type response = {
    @ocaml.doc(
      "<p>Information about the snapshots for which fast snapshot restores could not be disabled.</p>"
    )
    @as("Unsuccessful")
    unsuccessful: option<disableFastSnapshotRestoreErrorSet>,
    @ocaml.doc(
      "<p>Information about the snapshots for which fast snapshot restores were successfully disabled.</p>"
    )
    @as("Successful")
    successful: option<disableFastSnapshotRestoreSuccessSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DisableFastSnapshotRestoresCommand"
  let make = (~sourceSnapshotIds, ~availabilityZones, ~dryRun=?, ()) =>
    new({
      dryRun: dryRun,
      sourceSnapshotIds: sourceSnapshotIds,
      availabilityZones: availabilityZones,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeVpcs = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<describeVpcsMaxResults>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more VPC IDs.</p>
		       <p>Default: Describes all your VPCs.</p>")
    @as("VpcIds")
    vpcIds: option<vpcIdStringList>,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                  <code>cidr</code> - The primary IPv4 CIDR block of the VPC. The CIDR block you
                    specify must exactly match the VPC's CIDR block for information to be returned
                    for the VPC. Must contain the slash followed by one or two digits (for example,
                    <code>/28</code>).</p>
            </li>
            <li>
                <p>
                  <code>cidr-block-association.cidr-block</code> - An IPv4 CIDR block associated with the
                    VPC.</p>
            </li>
            <li>
                <p>
                  <code>cidr-block-association.association-id</code> - The association ID for
                    an IPv4 CIDR block associated with the VPC.</p>
            </li>
            <li>
                <p>
                  <code>cidr-block-association.state</code> - The state of an IPv4 CIDR block
                    associated with the VPC.</p>
            </li>
            <li>
                <p>
                  <code>dhcp-options-id</code> - The ID of a set of DHCP options.</p>
            </li>
            <li>
                <p>
                  <code>ipv6-cidr-block-association.ipv6-cidr-block</code> - An IPv6 CIDR
                    block associated with the VPC.</p>
            </li>
            <li>
                <p>
                  <code>ipv6-cidr-block-association.ipv6-pool</code> - The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.</p>
            </li>
            <li>
                <p>
                  <code>ipv6-cidr-block-association.association-id</code> - The association
                    ID for an IPv6 CIDR block associated with the VPC.</p>
            </li>
            <li>
                <p>
                  <code>ipv6-cidr-block-association.state</code> - The state of an IPv6 CIDR
                    block associated with the VPC.</p>
            </li>
            <li>
                <p>
                  <code>is-default</code> - Indicates whether the VPC is the default VPC.</p>
            </li>
            <li>
                <p>
                  <code>owner-id</code> - The ID of the Amazon Web Services account that owns the VPC.</p>
            </li>
            <li>
                <p>
                  <code>state</code> - The state of the VPC (<code>pending</code> | <code>available</code>).</p>
            </li>
            <li>
                <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
                <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
            </li>
            <li>
                <p>
                  <code>vpc-id</code> - The ID of the VPC.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about one or more VPCs.</p>") @as("Vpcs") vpcs: option<vpcList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeVpcsCommand"
  let make = (~maxResults=?, ~nextToken=?, ~dryRun=?, ~vpcIds=?, ~filters=?, ()) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      dryRun: dryRun,
      vpcIds: vpcIds,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeVpcPeeringConnections = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<describeVpcPeeringConnectionsMaxResults>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>One or more VPC peering connection IDs.</p>
         <p>Default: Describes all your VPC peering connections.</p>")
    @as("VpcPeeringConnectionIds")
    vpcPeeringConnectionIds: option<vpcPeeringConnectionIdList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more filters.</p>
         <ul>
            <li>
               <p>
                    <code>accepter-vpc-info.cidr-block</code> - The IPv4 CIDR block of the accepter
                    VPC.</p>
            </li>
            <li>
               <p>
                    <code>accepter-vpc-info.owner-id</code> - The ID of the Amazon Web Services account that owns the
                    accepter VPC.</p>
            </li>
            <li>
               <p>
                    <code>accepter-vpc-info.vpc-id</code> - The ID of the accepter VPC.</p>
            </li>
            <li>
               <p>
                  <code>expiration-time</code> - The expiration date and time for the VPC peering
          connection.</p>
            </li>
            <li>
               <p>
                    <code>requester-vpc-info.cidr-block</code> - The IPv4 CIDR block of the
                    requester's VPC.</p>
            </li>
            <li>
               <p>
                  <code>requester-vpc-info.owner-id</code> - The ID of the Amazon Web Services account that owns the
                  requester VPC.</p>
            </li>
            <li>
               <p>
                  <code>requester-vpc-info.vpc-id</code> - The ID of the requester VPC.</p>
            </li>
            <li>
               <p>
                    <code>status-code</code> - The status of the VPC peering connection
                        (<code>pending-acceptance</code> | <code>failed</code> |
                        <code>expired</code> | <code>provisioning</code> | <code>active</code> |
                        <code>deleting</code> | <code>deleted</code> |
                    <code>rejected</code>).</p>
            </li>
            <li>
               <p>
                  <code>status-message</code> - A message that provides more information about the status
          of the VPC peering connection, if applicable.</p>
            </li>
            <li>
               <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
            </li>
            <li>
               <p>
                  <code>vpc-peering-connection-id</code> - The ID of the VPC peering connection.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the VPC peering connections.</p>") @as("VpcPeeringConnections")
    vpcPeeringConnections: option<vpcPeeringConnectionList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeVpcPeeringConnectionsCommand"
  let make = (~maxResults=?, ~nextToken=?, ~vpcPeeringConnectionIds=?, ~dryRun=?, ~filters=?, ()) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      vpcPeeringConnectionIds: vpcPeeringConnectionIds,
      dryRun: dryRun,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeVolumeStatus = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The IDs of the volumes.</p>
         <p>Default: Describes all your volumes.</p>")
    @as("VolumeIds")
    volumeIds: option<volumeIdStringList>,
    @ocaml.doc("<p>The <code>NextToken</code> value to include in a future <code>DescribeVolumeStatus</code>
      request. When the results of the request exceed <code>MaxResults</code>, this value can be
      used to retrieve the next page of results. This value is <code>null</code> when there are no
      more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of volume results returned by <code>DescribeVolumeStatus</code> in
      paginated output. When this parameter is used, the request only returns
        <code>MaxResults</code> results in a single page along with a <code>NextToken</code>
      response element. The remaining results of the initial request can be seen by sending another
      request with the returned <code>NextToken</code> value. This value can be between 5 and 1,000;
      if <code>MaxResults</code> is given a value larger than 1,000, only 1,000 results are returned.
      If this parameter is not used, then <code>DescribeVolumeStatus</code> returns all results. You
      cannot specify this parameter and the volume IDs parameter in the same request.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>The filters.</p>
         <ul>
            <li>
               <p>
                  <code>action.code</code> - The action code for the event (for example,
            <code>enable-volume-io</code>).</p>
            </li>
            <li>
               <p>
                  <code>action.description</code> - A description of the action.</p>
            </li>
            <li>
               <p>
                  <code>action.event-id</code> - The event ID associated with the action.</p>
            </li>
            <li>
               <p>
                  <code>availability-zone</code> - The Availability Zone of the instance.</p>
            </li>
            <li>
               <p>
                  <code>event.description</code> - A description of the event.</p>
            </li>
            <li>
               <p>
                  <code>event.event-id</code> - The event ID.</p>
            </li>
            <li>
               <p>
                  <code>event.event-type</code> - The event type (for <code>io-enabled</code>:
            <code>passed</code> | <code>failed</code>; for <code>io-performance</code>:
            <code>io-performance:degraded</code> | <code>io-performance:severely-degraded</code> |
            <code>io-performance:stalled</code>).</p>
            </li>
            <li>
               <p>
                  <code>event.not-after</code> - The latest end time for the event.</p>
            </li>
            <li>
               <p>
                  <code>event.not-before</code> - The earliest start time for the event.</p>
            </li>
            <li>
               <p>
                  <code>volume-status.details-name</code> - The cause for
            <code>volume-status.status</code> (<code>io-enabled</code> |
          <code>io-performance</code>).</p>
            </li>
            <li>
               <p>
                  <code>volume-status.details-status</code> - The status of
            <code>volume-status.details-name</code> (for <code>io-enabled</code>:
            <code>passed</code> | <code>failed</code>; for <code>io-performance</code>:
            <code>normal</code> | <code>degraded</code> | <code>severely-degraded</code> |
            <code>stalled</code>).</p>
            </li>
            <li>
               <p>
                  <code>volume-status.status</code> - The status of the volume (<code>ok</code> |
            <code>impaired</code> | <code>warning</code> | <code>insufficient-data</code>).</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc("<p>Information about the status of the volumes.</p>") @as("VolumeStatuses")
    volumeStatuses: option<volumeStatusList>,
    @ocaml.doc("<p>The token to use to retrieve the next page of results. This value is <code>null</code>
      when there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeVolumeStatusCommand"
  let make = (~dryRun=?, ~volumeIds=?, ~nextToken=?, ~maxResults=?, ~filters=?, ()) =>
    new({
      dryRun: dryRun,
      volumeIds: volumeIds,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeTransitGatewayConnectPeers = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<transitGatewayMaxResults>,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
        <ul>
            <li>
               <p>
                  <code>state</code> - The state of the Connect peer (<code>pending</code> |
                        <code>available</code> | <code>deleting</code> |
                    <code>deleted</code>).</p>
            </li>
            <li>
               <p>
                  <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p>
            </li>
            <li>
               <p>
                  <code>transit-gateway-connect-peer-id</code> - The ID of the Connect peer.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of the Connect peers.</p>") @as("TransitGatewayConnectPeerIds")
    transitGatewayConnectPeerIds: option<transitGatewayConnectPeerIdStringList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the Connect peers.</p>") @as("TransitGatewayConnectPeers")
    transitGatewayConnectPeers: option<transitGatewayConnectPeerList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeTransitGatewayConnectPeersCommand"
  let make = (
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~filters=?,
    ~transitGatewayConnectPeerIds=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      transitGatewayConnectPeerIds: transitGatewayConnectPeerIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeTrafficMirrorFilters = {
  type t
  type request = {
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<trafficMirroringMaxResults>,
    @ocaml.doc("<p>One or more filters. The possible values are:</p>
         <ul>
            <li>
               <p>
                  <code>description</code>: The Traffic Mirror filter description.</p>
            </li>
            <li>
               <p>
                  <code>traffic-mirror-filter-id</code>: The ID of the Traffic Mirror filter.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Traffic Mirror filter.</p>") @as("TrafficMirrorFilterIds")
    trafficMirrorFilterIds: option<trafficMirrorFilterIdList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about one or more Traffic Mirror filters.</p>")
    @as("TrafficMirrorFilters")
    trafficMirrorFilters: option<trafficMirrorFilterSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeTrafficMirrorFiltersCommand"
  let make = (~nextToken=?, ~maxResults=?, ~filters=?, ~dryRun=?, ~trafficMirrorFilterIds=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      dryRun: dryRun,
      trafficMirrorFilterIds: trafficMirrorFilterIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeSubnets = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<describeSubnetsMaxResults>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more subnet IDs.</p>
		       <p>Default: Describes all your subnets.</p>")
    @as("SubnetIds")
    subnetIds: option<subnetIdStringList>,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                  <code>availability-zone</code> - The Availability Zone for the subnet. You can also use
                    <code>availabilityZone</code> as the filter name.</p>
            </li>
            <li>
                <p>
                  <code>availability-zone-id</code> - The ID of the Availability Zone for the subnet.
                    You can also use <code>availabilityZoneId</code> as the filter name.</p>
            </li>
            <li>
                <p>
                  <code>available-ip-address-count</code> - The number of IPv4 addresses in the
                    subnet that are available.</p>
            </li>
            <li>
                <p>
                  <code>cidr-block</code> - The IPv4 CIDR block of the subnet. The CIDR block you
                    specify must exactly match the subnet's CIDR block for information to be
                    returned for the subnet. You can also use <code>cidr</code> or
                    <code>cidrBlock</code> as the filter names.</p>
            </li>
            <li>
                <p>
                  <code>default-for-az</code> - Indicates whether this is the default subnet for the
                    Availability Zone (<code>true</code> | <code>false</code>). You can also use 
                    <code>defaultForAz</code> as the filter name.</p>
            </li>
            <li>
                <p>
                  <code>ipv6-cidr-block-association.ipv6-cidr-block</code> - An IPv6 CIDR
                    block associated with the subnet.</p>
            </li>
            <li>
                <p>
                  <code>ipv6-cidr-block-association.association-id</code> - An association ID
                    for an IPv6 CIDR block associated with the subnet.</p>
            </li>
            <li>
                <p>
                  <code>ipv6-cidr-block-association.state</code> - The state of an IPv6 CIDR
                    block associated with the subnet.</p>
            </li>
            <li>
                <p>
                  <code>ipv6-native</code> - Indicates whether this is an IPv6 only subnet (<code>true</code> | <code>false</code>).</p>
            </li>
            <li>
                <p>
                  <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.</p>
            </li>
            <li>
                <p>
                  <code>owner-id</code> - The ID of the Amazon Web Services account that owns the subnet.</p>
            </li>
            <li>
                <p>
                  <code>state</code> - The state of the subnet (<code>pending</code> | <code>available</code>).</p>
            </li>
            <li>
                <p>
                  <code>subnet-arn</code> - The Amazon Resource Name (ARN) of the subnet.</p>
            </li>
            <li>
                <p>
                  <code>subnet-id</code> - The ID of the subnet.</p>
            </li>
            <li>
                <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
                <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
            </li>
            <li>
                <p>
                  <code>vpc-id</code> - The ID of the VPC for the subnet.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about one or more subnets.</p>") @as("Subnets")
    subnets: option<subnetList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeSubnetsCommand"
  let make = (~maxResults=?, ~nextToken=?, ~dryRun=?, ~subnetIds=?, ~filters=?, ()) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      dryRun: dryRun,
      subnetIds: subnetIds,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeRouteTables = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<describeRouteTablesMaxResults>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>One or more route table IDs.</p>
		       <p>Default: Describes all your route tables.</p>")
    @as("RouteTableIds")
    routeTableIds: option<routeTableIdStringList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more filters.</p>
		       <ul>
            <li>
		             <p>
                  <code>association.route-table-association-id</code> - The ID of an association
                    ID for the route table.</p>
		          </li>
            <li>
		             <p>
                  <code>association.route-table-id</code> - The ID of the route table involved in
                    the association.</p>
		          </li>
            <li>
		             <p>
                  <code>association.subnet-id</code> - The ID of the subnet involved in the
                    association.</p>
		          </li>
            <li>
		             <p>
                  <code>association.main</code> - Indicates whether the route table is the main
                    route table for the VPC (<code>true</code> | <code>false</code>). Route tables
                    that do not have an association ID are not returned in the response.</p>
		          </li>
            <li>
		             <p>
                  <code>owner-id</code> - The ID of the Amazon Web Services account that owns the route table.</p>
		          </li>
            <li>
		             <p>
                  <code>route-table-id</code> - The ID of the route table.</p>
		          </li>
            <li>
				           <p>
                  <code>route.destination-cidr-block</code> - The IPv4 CIDR range specified in a
                    route in the table.</p>
			         </li>
            <li>
                  <p>
                  <code>route.destination-ipv6-cidr-block</code> - The IPv6 CIDR range specified in a route in the route table.</p>
               </li>
            <li>
				           <p>
                  <code>route.destination-prefix-list-id</code> - The ID (prefix) of the Amazon Web Service
                    specified in a route in the table.</p>
			         </li>
            <li>
                  <p>
                  <code>route.egress-only-internet-gateway-id</code> - The ID of an
                    egress-only Internet gateway specified in a route in the route table.</p>
               </li>
            <li>
		             <p>
                  <code>route.gateway-id</code> - The ID of a gateway specified in a route in the table.</p>
		          </li>
            <li>
                  <p>
                  <code>route.instance-id</code> - The ID of an instance specified in a route in the table.</p>
               </li>
            <li>
                  <p>
                  <code>route.nat-gateway-id</code> - The ID of a NAT gateway.</p> 
               </li>
            <li>
		             <p>
                  <code>route.transit-gateway-id</code> - The ID of a transit gateway.</p> 
		          </li>
            <li>
		             <p>
                  <code>route.origin</code> - Describes how the route was created. 
                        <code>CreateRouteTable</code> indicates that the route was automatically
                    created when the route table was created; <code>CreateRoute</code> indicates
                    that the route was manually added to the route table;
                        <code>EnableVgwRoutePropagation</code> indicates that the route was
                    propagated by route propagation.</p>
		          </li>
            <li>
                  <p>
                  <code>route.state</code> - The state of a route in the route table
                        (<code>active</code> | <code>blackhole</code>). The blackhole state
                    indicates that the route's target isn't available (for example, the specified
                    gateway isn't attached to the VPC, the specified NAT instance has been
                    terminated, and so on).</p>
               </li>
            <li>
		            <p>
                  <code>route.vpc-peering-connection-id</code> - The ID of a VPC peering
		                connection specified in a route in the table.</p>
		          </li>
            <li>
		            <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
		          </li>
            <li>
		            <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
		          </li>
            <li>
		            <p>
                  <code>vpc-id</code> - The ID of the VPC for the route table.</p>
		          </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  @ocaml.doc("<p>Contains the output of DescribeRouteTables.</p>")
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about one or more route tables.</p>") @as("RouteTables")
    routeTables: option<routeTableList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeRouteTablesCommand"
  let make = (~maxResults=?, ~nextToken=?, ~routeTableIds=?, ~dryRun=?, ~filters=?, ()) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      routeTableIds: routeTableIds,
      dryRun: dryRun,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeReservedInstancesModifications = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeReservedInstancesModifications.</p>")
  type request = {
    @ocaml.doc("<p>The token to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>IDs for the submitted modification request.</p>")
    @as("ReservedInstancesModificationIds")
    reservedInstancesModificationIds: option<reservedInstancesModificationIdStringList>,
    @ocaml.doc("<p>One or more filters.</p>
         <ul>
            <li>
               <p>
                  <code>client-token</code> - The idempotency token for the modification request.</p>
            </li>
            <li>
               <p>
                  <code>create-date</code> - The time when the modification request was created.</p>
            </li>
            <li>
               <p>
                  <code>effective-date</code> - The time when the modification becomes effective.</p>
            </li>
            <li>
               <p>
                  <code>modification-result.reserved-instances-id</code> - The ID for the Reserved Instances created as part of the modification request. This ID is only available when the status of the modification is <code>fulfilled</code>.</p>
            </li>
            <li>
               <p>
                  <code>modification-result.target-configuration.availability-zone</code> - The Availability Zone for the new Reserved Instances.</p>
            </li>
            <li>
               <p>
                  <code>modification-result.target-configuration.instance-count </code> - The number of new Reserved Instances.</p>
            </li>
            <li>
               <p>
                  <code>modification-result.target-configuration.instance-type</code> - The instance type of the new Reserved Instances.</p>
            </li>
            <li>
               <p>
                  <code>modification-result.target-configuration.platform</code> - The network platform of the new Reserved Instances (<code>EC2-Classic</code> | <code>EC2-VPC</code>).</p>
            </li>
            <li>
               <p>
                  <code>reserved-instances-id</code> - The ID of the Reserved Instances modified.</p>
            </li>
            <li>
               <p>
                  <code>reserved-instances-modification-id</code> - The ID of the modification request.</p>
            </li>
            <li>
               <p>
                  <code>status</code> - The status of the Reserved Instances modification request
           (<code>processing</code> | <code>fulfilled</code> | <code>failed</code>).</p>
            </li>
            <li>
               <p>
                  <code>status-message</code> - The reason for the status.</p>
            </li>
            <li>
               <p>
                  <code>update-date</code> - The time when the modification request was last updated.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  @ocaml.doc("<p>Contains the output of DescribeReservedInstancesModifications.</p>")
  type response = {
    @ocaml.doc("<p>The Reserved Instance modification information.</p>")
    @as("ReservedInstancesModifications")
    reservedInstancesModifications: option<reservedInstancesModificationList>,
    @ocaml.doc("<p>The token to use to retrieve the next page of results. This value is <code>null</code> when
			there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeReservedInstancesModificationsCommand"
  let make = (~nextToken=?, ~reservedInstancesModificationIds=?, ~filters=?, ()) =>
    new({
      nextToken: nextToken,
      reservedInstancesModificationIds: reservedInstancesModificationIds,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeNetworkInterfaces = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeNetworkInterfaces.</p>")
  type request = {
    @ocaml.doc("<p>The maximum number of items to return for this request. The request returns a token that you
            can specify in a subsequent call to get the next set of results. You cannot specify this
            parameter and the network interface IDs parameter in the same request.</p>")
    @as("MaxResults")
    maxResults: option<describeNetworkInterfacesMaxResults>,
    @ocaml.doc("<p>The token to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>One or more network interface IDs.</p>
		       <p>Default: Describes all your network interfaces.</p>")
    @as("NetworkInterfaceIds")
    networkInterfaceIds: option<networkInterfaceIdList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
       and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
       Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more filters.</p>
		       <ul>
            <li>
		             <p>
                  <code>addresses.private-ip-address</code> - The private IPv4 addresses
                    associated with the network interface.</p>
		          </li>
            <li>
		             <p>
                  <code>addresses.primary</code> - Whether the private IPv4 address is the primary
                    IP address associated with the network interface. </p>
		          </li>
            <li>
		             <p>
                  <code>addresses.association.public-ip</code> - The association ID returned when
                    the network interface was associated with the Elastic IP address
                    (IPv4).</p>
		          </li>
            <li>
		             <p>
                  <code>addresses.association.owner-id</code> - The owner ID of the addresses associated with the network interface.</p>
		          </li>
            <li>
		             <p>
                  <code>association.association-id</code> - The association ID returned when the
                    network interface was associated with an IPv4 address.</p>
		          </li>
            <li>
		             <p>
                  <code>association.allocation-id</code> - The allocation ID returned when you
                    allocated the Elastic IP address (IPv4) for your network interface.</p>
		          </li>
            <li>
		             <p>
                  <code>association.ip-owner-id</code> - The owner of the Elastic IP address
                    (IPv4) associated with the network interface.</p>
		          </li>
            <li>
		             <p>
                  <code>association.public-ip</code> - The address of the Elastic IP address
                    (IPv4) bound to the network interface.</p>
		          </li>
            <li>
		 		          <p>
                  <code>association.public-dns-name</code> - The public DNS name for the network
                    interface (IPv4).</p>
		 	        </li>
            <li>
		             <p>
                  <code>attachment.attachment-id</code> - The ID of the interface attachment.</p>
		          </li>
            <li>
		             <p>
                  <code>attachment.attach-time</code> - The time that the network interface was attached to an instance.</p>
		          </li>
            <li>
		             <p>
                  <code>attachment.delete-on-termination</code> - Indicates whether the attachment is deleted when an instance is terminated.</p>
		          </li>
            <li>
		             <p>
                  <code>attachment.device-index</code> - The device index to which the network interface is attached.</p>
		          </li>
            <li>
		             <p>
                  <code>attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p>
		          </li>
            <li>
		             <p>
                  <code>attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p>
		          </li>
            <li>
		             <p>
                  <code>attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p>
		          </li>
            <li>
		             <p>
                  <code>availability-zone</code> - The Availability Zone of the network interface.</p>
		          </li>
            <li>
		             <p>
                  <code>description</code> - The description of the network interface.</p>
		          </li>
            <li>
		             <p>
                  <code>group-id</code> - The ID of a security group associated with the network interface.</p>
		          </li>
            <li>
		             <p>
                  <code>group-name</code> - The name of a security group associated with the network interface.</p>
		          </li>
            <li>
                  <p>
                  <code>ipv6-addresses.ipv6-address</code> - An IPv6 address associated with
                    the network interface.</p>
               </li>
            <li>
		             <p>
                  <code>interface-type</code> - The type of network interface (<code>api_gateway_managed</code> | 
		               <code>aws_codestar_connections_managed</code> | <code>branch</code> | <code>efa</code> |  
		               <code>gateway_load_balancer</code> | <code>gateway_load_balancer_endpoint</code> | <code>global_accelerator_managed</code> |  
		               <code>interface</code> | <code>iot_rules_managed</code> | <code>lambda</code> | <code>load_balancer</code> | 
		               <code>nat_gateway</code> | <code>network_load_balancer</code> | <code>quicksight</code> |  
		               <code>transit_gateway</code> | <code>trunk</code> | <code>vpc_endpoint</code>).</p>
		          </li>
            <li>
		             <p>
                  <code>mac-address</code> - The MAC address of the network interface.</p>
		          </li>
            <li>
		             <p>
                  <code>network-interface-id</code> - The ID of the network interface.</p>
		          </li>
            <li>
		             <p>
                  <code>owner-id</code> - The Amazon Web Services account ID of the network interface owner.</p>
		          </li>
            <li>
		             <p>
                  <code>private-ip-address</code> - The private IPv4 address or addresses of the
                    network interface.</p>
		          </li>
            <li>
		             <p>
                  <code>private-dns-name</code> - The private DNS name of the network interface (IPv4).</p>
		          </li>
            <li>
		             <p>
                  <code>requester-id</code> - The alias or Amazon Web Services account ID of the principal or service that created the network interface.</p>
		          </li>
            <li>
		             <p>
                  <code>requester-managed</code> - Indicates whether the network interface is being managed by an Amazon Web Service 
		               (for example, Amazon Web Services Management Console, Auto Scaling, and so on).</p>
		          </li>
            <li>
		             <p>
                  <code>source-dest-check</code> - Indicates whether the network interface performs source/destination checking. 
		            A value of <code>true</code> means checking is enabled, and <code>false</code> means checking is disabled. 
		            The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC. </p>
		          </li>
            <li>
		             <p>
                  <code>status</code> - The status of the network interface. If the network interface is not attached to an instance, the status is <code>available</code>; 
		            if a network interface is attached to an instance the status is <code>in-use</code>.</p>
		          </li>
            <li>
		             <p>
                  <code>subnet-id</code> - The ID of the subnet for the network interface.</p>
		          </li>
            <li>
		             <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
		          </li>
            <li>
		             <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
		          </li>
            <li>
		             <p>
                  <code>vpc-id</code> - The ID of the VPC for the network interface.</p>
		          </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  @ocaml.doc("<p>Contains the output of DescribeNetworkInterfaces.</p>")
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about one or more network interfaces.</p>") @as("NetworkInterfaces")
    networkInterfaces: option<networkInterfaceList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeNetworkInterfacesCommand"
  let make = (~maxResults=?, ~nextToken=?, ~networkInterfaceIds=?, ~dryRun=?, ~filters=?, ()) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      networkInterfaceIds: networkInterfaceIds,
      dryRun: dryRun,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeNetworkAcls = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<describeNetworkAclsMaxResults>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>One or more network ACL IDs.</p>
		       <p>Default: Describes all your network ACLs.</p>")
    @as("NetworkAclIds")
    networkAclIds: option<networkAclIdStringList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more filters.</p>
		       <ul>
            <li>
		             <p>
                  <code>association.association-id</code> - The ID of an association ID for the ACL.</p>
		          </li>
            <li>
		             <p>
                  <code>association.network-acl-id</code> - The ID of the network ACL involved in the association.</p>
		          </li>
            <li>
		             <p>
                  <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p>
		          </li>
            <li>
		             <p>
                  <code>default</code> - Indicates whether the ACL is the default network ACL for the VPC.</p>
		          </li>
            <li>
		             <p>
                  <code>entry.cidr</code> - The IPv4 CIDR range specified in the entry.</p>
		          </li>
            <li>
		             <p>
                  <code>entry.icmp.code</code> - The ICMP code specified in the entry, if any.</p>
		          </li>
            <li>
		             <p>
                  <code>entry.icmp.type</code> - The ICMP type specified in the entry, if any.</p>
		          </li>
            <li>
                  <p>
                  <code>entry.ipv6-cidr</code> - The IPv6 CIDR range specified in the entry.</p>
               </li>
            <li>
		             <p>
                  <code>entry.port-range.from</code> - The start of the port range specified in the entry. </p>
		          </li>
            <li>
		             <p>
                  <code>entry.port-range.to</code> - The end of the port range specified in the entry. </p>
		          </li>
            <li>
		             <p>
                  <code>entry.protocol</code> - The protocol specified in the entry (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p>
		          </li>
            <li>
		             <p>
                  <code>entry.rule-action</code> - Allows or denies the matching traffic (<code>allow</code> | <code>deny</code>).</p>
		          </li>
            <li>
		             <p>
                  <code>entry.rule-number</code> - The number of an entry (in other words, rule) in
                    the set of ACL entries.</p>
		          </li>
            <li>
		             <p>
                  <code>network-acl-id</code> - The ID of the network ACL.</p>
		          </li>
            <li>
		             <p>
                  <code>owner-id</code> - The ID of the Amazon Web Services account that owns the network ACL.</p>
		          </li>
            <li>
		             <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
		          </li>
            <li>
		             <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
		          </li>
            <li>
		             <p>
                  <code>vpc-id</code> - The ID of the VPC for the network ACL.</p>
		          </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about one or more network ACLs.</p>") @as("NetworkAcls")
    networkAcls: option<networkAclList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeNetworkAclsCommand"
  let make = (~maxResults=?, ~nextToken=?, ~networkAclIds=?, ~dryRun=?, ~filters=?, ()) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      networkAclIds: networkAclIds,
      dryRun: dryRun,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeInstanceStatus = {
  type t
  type request = {
    @ocaml.doc("<p>When <code>true</code>, includes the health status for all instances. When
                <code>false</code>, includes the health status for running instances only.</p>
        <p>Default: <code>false</code>
        </p>")
    @as("IncludeAllInstances")
    includeAllInstances: option<boolean_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. To retrieve the remaining
            results, make another call with the returned <code>NextToken</code> value. This value
            can be between 5 and 1000. You cannot specify this parameter and the instance IDs
            parameter in the same call.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>The instance IDs.</p>
        <p>Default: Describes all your instances.</p>
        <p>Constraints: Maximum 100 explicitly specified instance IDs.</p>")
    @as("InstanceIds")
    instanceIds: option<instanceIdStringList>,
    @ocaml.doc("<p>The filters.</p>
        <ul>
            <li>
                <p>
                  <code>availability-zone</code> - The Availability Zone of the instance.</p>
            </li>
            <li>
                <p>
                  <code>event.code</code> - The code for the scheduled event
                        (<code>instance-reboot</code> | <code>system-reboot</code> |
                        <code>system-maintenance</code> | <code>instance-retirement</code> |
                        <code>instance-stop</code>).</p>
            </li>
            <li>
                <p>
                  <code>event.description</code> - A description of the event.</p>
            </li>
            <li>
                <p>
                  <code>event.instance-event-id</code> - The ID of the event whose date and time
                    you are modifying.</p>
            </li>
            <li>
                <p>
                  <code>event.not-after</code> - The latest end time for the scheduled event
                    (for example, <code>2014-09-15T17:15:20.000Z</code>).</p>
            </li>
            <li>
                <p>
                  <code>event.not-before</code> - The earliest start time for the scheduled
                    event (for example, <code>2014-09-15T17:15:20.000Z</code>).</p>
            </li>
            <li>
                <p>
                  <code>event.not-before-deadline</code> - The deadline for starting the event
                    (for example, <code>2014-09-15T17:15:20.000Z</code>).</p>
            </li>
            <li>
                <p>
                  <code>instance-state-code</code> - The code for the instance state, as a
                    16-bit unsigned integer. The high byte is used for internal purposes and should
                    be ignored. The low byte is set based on the state represented. The valid values
                    are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64
                    (stopping), and 80 (stopped).</p>
            </li>
            <li>
                <p>
                  <code>instance-state-name</code> - The state of the instance
                        (<code>pending</code> | <code>running</code> | <code>shutting-down</code> |
                        <code>terminated</code> | <code>stopping</code> |
                    <code>stopped</code>).</p>
            </li>
            <li>
                <p>
                  <code>instance-status.reachability</code> - Filters on instance status where
                    the name is <code>reachability</code> (<code>passed</code> | <code>failed</code>
                    | <code>initializing</code> | <code>insufficient-data</code>).</p>
            </li>
            <li>
                <p>
                  <code>instance-status.status</code> - The status of the instance
                        (<code>ok</code> | <code>impaired</code> | <code>initializing</code> |
                        <code>insufficient-data</code> | <code>not-applicable</code>).</p>
            </li>
            <li>
                <p>
                  <code>system-status.reachability</code> - Filters on system status where the
                    name is <code>reachability</code> (<code>passed</code> | <code>failed</code> |
                        <code>initializing</code> | <code>insufficient-data</code>).</p>
            </li>
            <li>
                <p>
                  <code>system-status.status</code> - The system status of the instance
                        (<code>ok</code> | <code>impaired</code> | <code>initializing</code> |
                        <code>insufficient-data</code> | <code>not-applicable</code>).</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc("<p>The token to use to retrieve the next page of results. This value is <code>null</code>
            when there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the status of the instances.</p>") @as("InstanceStatuses")
    instanceStatuses: option<instanceStatusList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeInstanceStatusCommand"
  let make = (
    ~includeAllInstances=?,
    ~dryRun=?,
    ~nextToken=?,
    ~maxResults=?,
    ~instanceIds=?,
    ~filters=?,
    (),
  ) =>
    new({
      includeAllInstances: includeAllInstances,
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      instanceIds: instanceIds,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeInstanceEventWindows = {
  type t
  @ocaml.doc("<para>Describe instance event windows by InstanceEventWindow.</para>")
  type request = {
    @ocaml.doc("<p>The token to request the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. To retrieve the remaining
         results, make another call with the returned <code>NextToken</code> value. This value can
         be between 20 and 500. You cannot specify this parameter and the event window IDs parameter
         in the same call.</p>")
    @as("MaxResults")
    maxResults: option<resultRange>,
    @ocaml.doc("<p>One or more filters.</p>
         <ul>
            <li>
               <p>
                  <code>dedicated-host-id</code> - The event windows associated with the specified
            Dedicated Host ID.</p>
            </li>
            <li>
               <p>
                  <code>event-window-name</code> - The event windows associated with the specified
            names. </p>
            </li>
            <li>
               <p>
                  <code>instance-id</code> - The event windows associated with the specified instance
               ID.</p>
            </li>
            <li>
               <p>
                  <code>instance-tag</code> - The event windows associated with the specified tag and
               value.</p>
            </li>
            <li>
               <p>
                  <code>instance-tag-key</code> - The event windows associated with the specified tag
               key, regardless of the value.</p>
            </li>
            <li>
               <p>
                  <code>instance-tag-value</code> - The event windows associated with the specified tag
               value, regardless of the key.</p>
            </li>
            <li>
               <p>
                  <code>tag:<key></code> - The key/value combination of a tag assigned to the
               event window. Use the tag key in the filter name and the tag value as the filter
               value. For example, to find all resources that have a tag with the key
                  <code>Owner</code> and the value <code>CMX</code>, specify <code>tag:Owner</code>
               for the filter name and <code>CMX</code> for the filter value. </p>
            </li>
            <li>
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the event window. Use this filter
               to find all event windows that have a tag with a specific key, regardless of the tag
               value. </p>
            </li>
            <li>
               <p>
                  <code>tag-value</code> - The value of a tag assigned to the event window. Use this
               filter to find all event windows that have a tag with a specific value, regardless of
               the tag key. </p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of the event windows.</p>") @as("InstanceEventWindowIds")
    instanceEventWindowIds: option<instanceEventWindowIdSet>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return. </p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the event windows.</p>") @as("InstanceEventWindows")
    instanceEventWindows: option<instanceEventWindowSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeInstanceEventWindowsCommand"
  let make = (~nextToken=?, ~maxResults=?, ~filters=?, ~instanceEventWindowIds=?, ~dryRun=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      instanceEventWindowIds: instanceEventWindowIds,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeImportImageTasks = {
  type t
  type request = {
    @ocaml.doc("<p>A token that indicates the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call.</p>") @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>The IDs of the import image tasks.</p>") @as("ImportTaskIds")
    importTaskIds: option<importTaskIdList>,
    @ocaml.doc("<p>Filter tasks using the <code>task-state</code> filter and one of the following values: <code>active</code>,
    <code>completed</code>, <code>deleting</code>, or <code>deleted</code>.</p>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results
   to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>A list of zero or more import image tasks that are currently active or were completed or canceled in the
   previous 7 days.</p>")
    @as("ImportImageTasks")
    importImageTasks: option<importImageTaskList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeImportImageTasksCommand"
  let make = (~nextToken=?, ~maxResults=?, ~importTaskIds=?, ~filters=?, ~dryRun=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      importTaskIds: importTaskIds,
      filters: filters,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeImages = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
			and provides an error response. If you have the required permissions, the error response is 
			<code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>If <code>true</code>, all deprecated AMIs are included in the response. If
        <code>false</code>, no deprecated AMIs are included in the response. If no value is
      specified, the default value is <code>false</code>.</p>
         <note>
            <p>If you are the AMI owner, all deprecated AMIs appear in the response regardless of the value (<code>true</code> or <code>false</code>) that you set for this parameter.</p>
         </note>")
    @as("IncludeDeprecated")
    includeDeprecated: option<boolean_>,
    @ocaml.doc("<p>Scopes the results to images with the specified owners. You can specify a combination of  
      Amazon Web Services account IDs, <code>self</code>, <code>amazon</code>, and <code>aws-marketplace</code>. 
      If you omit this parameter, the results include all images for which you have launch permissions, 
      regardless of ownership.</p>")
    @as("Owners")
    owners: option<ownerStringList>,
    @ocaml.doc("<p>The image IDs.</p>
         <p>Default: Describes all images available to you.</p>")
    @as("ImageIds")
    imageIds: option<imageIdStringList>,
    @ocaml.doc("<p>The filters.</p>
         <ul>
            <li>
               <p>
                  <code>architecture</code> - The image architecture (<code>i386</code> |
            <code>x86_64</code> | <code>arm64</code>).</p>
            </li>
            <li>
               <p>
                  <code>block-device-mapping.delete-on-termination</code> - A Boolean value that indicates
        	whether the Amazon EBS volume is deleted on instance termination.</p>
            </li>
            <li>
               <p>
                  <code>block-device-mapping.device-name</code> - The device name specified in the block device mapping (for
          example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
            </li>
            <li>
               <p>
        	         <code>block-device-mapping.snapshot-id</code> - The ID of the snapshot used for the Amazon EBS
          volume.</p>
            </li>
            <li>
               <p>
        	         <code>block-device-mapping.volume-size</code> - The volume size of the Amazon EBS volume, in GiB.</p>
            </li>
            <li>
               <p>
                  <code>block-device-mapping.volume-type</code> - The volume type of the Amazon EBS volume
            (<code>io1</code> | <code>io2</code> | <code>gp2</code> | <code>gp3</code> | <code>sc1
          </code>| <code>st1</code> | <code>standard</code>).</p>
            </li>
            <li>
    		         <p>
    			           <code>block-device-mapping.encrypted</code> - A Boolean that indicates whether the Amazon EBS volume is encrypted.</p>
    	       </li>
            <li>
               <p>
                  <code>description</code> - The description of the image (provided during image
          creation).</p>
            </li>
            <li>
               <p>
                  <code>ena-support</code> - A Boolean that indicates whether enhanced networking
          with ENA is enabled.</p>
            </li>
            <li>
               <p>
                  <code>hypervisor</code> - The hypervisor type (<code>ovm</code> |
          <code>xen</code>).</p>
            </li>
            <li>
               <p>
                  <code>image-id</code> - The ID of the image.</p>
            </li>
            <li>
               <p>
                  <code>image-type</code> - The image type (<code>machine</code> | <code>kernel</code> |
            <code>ramdisk</code>).</p>
            </li>
            <li>
               <p>
                  <code>is-public</code> - A Boolean that indicates whether the image is public.</p>
            </li>
            <li>
               <p>
                  <code>kernel-id</code> - The kernel ID.</p>
            </li>
            <li>
               <p>
                  <code>manifest-location</code> - The location of the image manifest.</p>
            </li>
            <li>
               <p>
                  <code>name</code> - The name of the AMI (provided during image creation).</p>
            </li>
            <li>
               <p>
                  <code>owner-alias</code> - The owner alias (<code>amazon</code> | <code>aws-marketplace</code>). 
          The valid aliases are defined in an Amazon-maintained list. This is not the Amazon Web Services account alias that can be 
        	set using the IAM console. We recommend that you use the <b>Owner</b> 
        	request parameter instead of this filter.</p>
            </li>
            <li>
               <p>
                  <code>owner-id</code> - The Amazon Web Services account ID of the owner. We recommend that you use the 
      		<b>Owner</b> request parameter instead of this filter.</p>
            </li>
            <li>
               <p>
                  <code>platform</code> - The platform. To only list Windows-based AMIs, use
            <code>windows</code>.</p>
            </li>
            <li>
               <p>
                  <code>product-code</code> - The product code.</p>
            </li>
            <li>
               <p>
                  <code>product-code.type</code> - The type of the product code (<code>marketplace</code>).</p>
            </li>
            <li>
               <p>
                  <code>ramdisk-id</code> - The RAM disk ID.</p>
            </li>
            <li>
               <p>
                  <code>root-device-name</code> - The device name of the root device volume (for example, <code>/dev/sda1</code>).</p>
            </li>
            <li>
               <p>
                  <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> |
            <code>instance-store</code>).</p>
            </li>
            <li>
               <p>
                  <code>state</code> - The state of the image (<code>available</code> | <code>pending</code>
          | <code>failed</code>).</p>
            </li>
            <li>
               <p>
                  <code>state-reason-code</code> - The reason code for the state change.</p>
            </li>
            <li>
               <p>
                  <code>state-reason-message</code> - The message for the state change.</p>
            </li>
            <li>
                <p>
                  <code>sriov-net-support</code> - A value of <code>simple</code> indicates
                    that enhanced networking with the Intel 82599 VF interface is enabled.</p>
            </li>
            <li>
               <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
            </li>
            <li>
               <p>
                  <code>virtualization-type</code> - The virtualization type (<code>paravirtual</code> |
            <code>hvm</code>).</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>Scopes the images by users with explicit launch permissions. 
       Specify an Amazon Web Services account ID, <code>self</code> (the sender of the request),
				or <code>all</code> (public AMIs).</p>
         <ul>
            <li>
               <p>If you specify an Amazon Web Services account ID that is not your own, only AMIs
          shared with that specific Amazon Web Services account ID are returned. However, AMIs that
          are shared with the account’s organization or organizational unit (OU) are not
          returned.</p>
            </li>
            <li>
               <p>If you specify <code>self</code> or your own Amazon Web Services account ID, AMIs
          shared with your account are returned. In addition, AMIs that are shared with the
          organization or OU of which you are member are also returned. </p>
            </li>
            <li>
               <p>If you specify <code>all</code>, all public AMIs are returned.</p>
            </li>
         </ul>")
    @as("ExecutableUsers")
    executableUsers: option<executableByStringList>,
  }
  type response = {
    @ocaml.doc("<p>Information about the images.</p>") @as("Images") images: option<imageList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeImagesCommand"
  let make = (
    ~dryRun=?,
    ~includeDeprecated=?,
    ~owners=?,
    ~imageIds=?,
    ~filters=?,
    ~executableUsers=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      includeDeprecated: includeDeprecated,
      owners: owners,
      imageIds: imageIds,
      filters: filters,
      executableUsers: executableUsers,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeHosts = {
  type t
  type request = {
    @ocaml.doc("<p>The token to use to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p> 
         <p>You cannot specify this parameter and the host IDs parameter in the same request.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>The IDs of the Dedicated Hosts. The IDs are used for targeted instance
            launches.</p>")
    @as("HostIds")
    hostIds: option<requestHostIdList>,
    @ocaml.doc("<p>The filters.</p>
        <ul>
            <li>
                <p>
                  <code>auto-placement</code> - Whether auto-placement is enabled or disabled
                        (<code>on</code> | <code>off</code>).</p>
            </li>
            <li>
                <p>
                  <code>availability-zone</code> - The Availability Zone of the
                    host.</p>
            </li>
            <li>
                <p>
                  <code>client-token</code> - The idempotency token that you provided when you
                    allocated the host.</p>
            </li>
            <li>
                <p>
                  <code>host-reservation-id</code> - The ID of the reservation assigned to
                    this host.</p>
            </li>
            <li>
                <p>
                  <code>instance-type</code> - The instance type size that the Dedicated Host
                    is configured to support.</p>
            </li>
            <li>
                <p>
                  <code>state</code> - The allocation state of the Dedicated Host
                        (<code>available</code> | <code>under-assessment</code> |
                        <code>permanent-failure</code> | <code>released</code> |
                        <code>released-permanent-failure</code>).</p>
            </li>
            <li>
        		     <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
        	   </li>
         </ul>")
    @as("Filter")
    filter: option<filterList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the Dedicated Hosts.</p>") @as("Hosts")
    hosts: option<hostList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeHostsCommand"
  let make = (~nextToken=?, ~maxResults=?, ~hostIds=?, ~filter=?, ()) =>
    new({nextToken: nextToken, maxResults: maxResults, hostIds: hostIds, filter: filter})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeClientVpnEndpoints = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more filters. Filter names and values are case-sensitive.</p>
	        <ul>
            <li>
               <p>
                  <code>endpoint-id</code> - The ID of the Client VPN endpoint.</p>
            </li>
            <li>
               <p>
                  <code>transport-protocol</code> - The transport protocol (<code>tcp</code> |
                    <code>udp</code>).</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The token to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</p>"
    )
    @as("MaxResults")
    maxResults: option<describeClientVpnEndpointMaxResults>,
    @ocaml.doc("<p>The ID of the Client VPN endpoint.</p>") @as("ClientVpnEndpointIds")
    clientVpnEndpointIds: option<clientVpnEndpointIdList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Information about the Client VPN endpoints.</p>") @as("ClientVpnEndpoints")
    clientVpnEndpoints: option<endpointSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeClientVpnEndpointsCommand"
  let make = (~dryRun=?, ~filters=?, ~nextToken=?, ~maxResults=?, ~clientVpnEndpointIds=?, ()) =>
    new({
      dryRun: dryRun,
      filters: filters,
      nextToken: nextToken,
      maxResults: maxResults,
      clientVpnEndpointIds: clientVpnEndpointIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateLaunchTemplate = {
  type t
  type request = {
    @ocaml.doc("<p>The tags to apply to the launch template during creation.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The information for the launch template.</p>") @as("LaunchTemplateData")
    launchTemplateData: requestLaunchTemplateData,
    @ocaml.doc("<p>A description for the first version of the launch template.</p>")
    @as("VersionDescription")
    versionDescription: option<versionDescription>,
    @ocaml.doc("<p>A name for the launch template.</p>") @as("LaunchTemplateName")
    launchTemplateName: launchTemplateName,
    @ocaml.doc("<p>Unique, case-sensitive identifier you provide to ensure the idempotency of the
            request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring
                Idempotency</a>.</p>
        <p>Constraint: Maximum 128 ASCII characters.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>If the launch template contains parameters or parameter combinations that are not
            valid, an error code and an error message are returned for each issue that's
            found.</p>")
    @as("Warning")
    warning: option<validationWarning>,
    @ocaml.doc("<p>Information about the launch template.</p>") @as("LaunchTemplate")
    launchTemplate: option<launchTemplate>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateLaunchTemplateCommand"
  let make = (
    ~launchTemplateData,
    ~launchTemplateName,
    ~tagSpecifications=?,
    ~versionDescription=?,
    ~clientToken=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      tagSpecifications: tagSpecifications,
      launchTemplateData: launchTemplateData,
      versionDescription: versionDescription,
      launchTemplateName: launchTemplateName,
      clientToken: clientToken,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateDhcpOptions = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to assign to the DHCP option.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>A DHCP configuration option.</p>") @as("DhcpConfigurations")
    dhcpConfigurations: newDhcpConfigurationList,
  }
  type response = {
    @ocaml.doc("<p>A set of DHCP options.</p>") @as("DhcpOptions") dhcpOptions: option<dhcpOptions>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateDhcpOptionsCommand"
  let make = (~dhcpConfigurations, ~dryRun=?, ~tagSpecifications=?, ()) =>
    new({
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      dhcpConfigurations: dhcpConfigurations,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module StartNetworkInsightsAnalysis = {
  type t
  type request = {
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, 
   see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: string_,
    @ocaml.doc("<p>The tags to apply.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc(
      "<p>The Amazon Resource Names (ARN) of the resources that the path must traverse.</p>"
    )
    @as("FilterInArns")
    filterInArns: option<arnList>,
    @ocaml.doc("<p>The ID of the path.</p>") @as("NetworkInsightsPathId")
    networkInsightsPathId: networkInsightsPathId,
  }
  type response = {
    @ocaml.doc("<p>Information about the network insights analysis.</p>")
    @as("NetworkInsightsAnalysis")
    networkInsightsAnalysis: option<networkInsightsAnalysis>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "StartNetworkInsightsAnalysisCommand"
  let make = (
    ~clientToken,
    ~networkInsightsPathId,
    ~tagSpecifications=?,
    ~dryRun=?,
    ~filterInArns=?,
    (),
  ) =>
    new({
      clientToken: clientToken,
      tagSpecifications: tagSpecifications,
      dryRun: dryRun,
      filterInArns: filterInArns,
      networkInsightsPathId: networkInsightsPathId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyVpnTunnelOptions = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tunnel options to modify.</p>") @as("TunnelOptions")
    tunnelOptions: modifyVpnTunnelOptionsSpecification,
    @ocaml.doc("<p>The external IP address of the VPN tunnel.</p>") @as("VpnTunnelOutsideIpAddress")
    vpnTunnelOutsideIpAddress: string_,
    @ocaml.doc("<p>The ID of the Amazon Web Services Site-to-Site VPN connection.</p>")
    @as("VpnConnectionId")
    vpnConnectionId: vpnConnectionId,
  }
  type response = {@as("VpnConnection") vpnConnection: option<vpnConnection>}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyVpnTunnelOptionsCommand"
  let make = (~tunnelOptions, ~vpnTunnelOutsideIpAddress, ~vpnConnectionId, ~dryRun=?, ()) =>
    new({
      dryRun: dryRun,
      tunnelOptions: tunnelOptions,
      vpnTunnelOutsideIpAddress: vpnTunnelOutsideIpAddress,
      vpnConnectionId: vpnConnectionId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyVpnTunnelCertificate = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The external IP address of the VPN tunnel.</p>") @as("VpnTunnelOutsideIpAddress")
    vpnTunnelOutsideIpAddress: string_,
    @ocaml.doc("<p>The ID of the Amazon Web Services Site-to-Site VPN connection.</p>")
    @as("VpnConnectionId")
    vpnConnectionId: vpnConnectionId,
  }
  type response = {@as("VpnConnection") vpnConnection: option<vpnConnection>}
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyVpnTunnelCertificateCommand"
  let make = (~vpnTunnelOutsideIpAddress, ~vpnConnectionId, ~dryRun=?, ()) =>
    new({
      dryRun: dryRun,
      vpnTunnelOutsideIpAddress: vpnTunnelOutsideIpAddress,
      vpnConnectionId: vpnConnectionId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyVpnConnectionOptions = {
  type t
  type request = {
    @ocaml.doc(
      "<p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>"
    )
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The IPv6 CIDR on the Amazon Web Services side of the VPN connection.</p>
        <p>Default: <code>::/0</code>
         </p>")
    @as("RemoteIpv6NetworkCidr")
    remoteIpv6NetworkCidr: option<string_>,
    @ocaml.doc("<p>The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.</p>
        <p>Default: <code>::/0</code>
         </p>")
    @as("LocalIpv6NetworkCidr")
    localIpv6NetworkCidr: option<string_>,
    @ocaml.doc("<p>The IPv4 CIDR on the Amazon Web Services side of the VPN connection.</p>
        <p>Default: <code>0.0.0.0/0</code>
         </p>")
    @as("RemoteIpv4NetworkCidr")
    remoteIpv4NetworkCidr: option<string_>,
    @ocaml.doc("<p>The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.</p>
        <p>Default: <code>0.0.0.0/0</code>
         </p>")
    @as("LocalIpv4NetworkCidr")
    localIpv4NetworkCidr: option<string_>,
    @ocaml.doc("<p>The ID of the Site-to-Site VPN connection. </p>") @as("VpnConnectionId")
    vpnConnectionId: vpnConnectionId,
  }
  type response = {@as("VpnConnection") vpnConnection: option<vpnConnection>}
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "ModifyVpnConnectionOptionsCommand"
  let make = (
    ~vpnConnectionId,
    ~dryRun=?,
    ~remoteIpv6NetworkCidr=?,
    ~localIpv6NetworkCidr=?,
    ~remoteIpv4NetworkCidr=?,
    ~localIpv4NetworkCidr=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      remoteIpv6NetworkCidr: remoteIpv6NetworkCidr,
      localIpv6NetworkCidr: localIpv6NetworkCidr,
      remoteIpv4NetworkCidr: remoteIpv4NetworkCidr,
      localIpv4NetworkCidr: localIpv4NetworkCidr,
      vpnConnectionId: vpnConnectionId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyVpnConnection = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the virtual private gateway at the Amazon Web Services side of the VPN
            connection.</p>")
    @as("VpnGatewayId")
    vpnGatewayId: option<vpnGatewayId>,
    @ocaml.doc("<p>The ID of the customer gateway at your end of the VPN connection.</p>")
    @as("CustomerGatewayId")
    customerGatewayId: option<customerGatewayId>,
    @ocaml.doc("<p>The ID of the transit gateway.</p>") @as("TransitGatewayId")
    transitGatewayId: option<transitGatewayId>,
    @ocaml.doc("<p>The ID of the VPN connection.</p>") @as("VpnConnectionId")
    vpnConnectionId: vpnConnectionId,
  }
  type response = {@as("VpnConnection") vpnConnection: option<vpnConnection>}
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyVpnConnectionCommand"
  let make = (
    ~vpnConnectionId,
    ~dryRun=?,
    ~vpnGatewayId=?,
    ~customerGatewayId=?,
    ~transitGatewayId=?,
    (),
  ) =>
    new({
      dryRun: dryRun,
      vpnGatewayId: vpnGatewayId,
      customerGatewayId: customerGatewayId,
      transitGatewayId: transitGatewayId,
      vpnConnectionId: vpnConnectionId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifySpotFleetRequest = {
  type t
  @ocaml.doc("<p>Contains the parameters for ModifySpotFleetRequest.</p>")
  type request = {
    @ocaml.doc("<p>Reserved.</p>") @as("Context") context: option<string_>,
    @ocaml.doc("<p>The number of On-Demand Instances in the fleet.</p>")
    @as("OnDemandTargetCapacity")
    onDemandTargetCapacity: option<integer_>,
    @ocaml.doc("<p>The size of the fleet.</p>") @as("TargetCapacity")
    targetCapacity: option<integer_>,
    @ocaml.doc("<p>The ID of the Spot Fleet request.</p>") @as("SpotFleetRequestId")
    spotFleetRequestId: spotFleetRequestId,
    @ocaml.doc("<p>The launch template and overrides. You can only use this parameter if you specified a
            launch template (<code>LaunchTemplateConfigs</code>) in your Spot Fleet request. If you
            specified <code>LaunchSpecifications</code> in your Spot Fleet request, then omit this
            parameter.</p>")
    @as("LaunchTemplateConfigs")
    launchTemplateConfigs: option<launchTemplateConfigList>,
    @ocaml.doc("<p>Indicates whether running Spot Instances should be terminated if the target capacity
            of the Spot Fleet request is decreased below the current size of the Spot Fleet.</p>")
    @as("ExcessCapacityTerminationPolicy")
    excessCapacityTerminationPolicy: option<excessCapacityTerminationPolicy>,
  }
  @ocaml.doc("<p>Contains the output of ModifySpotFleetRequest.</p>")
  type response = {
    @ocaml.doc("<p>If the request succeeds, the response returns <code>true</code>. If the request fails,
            no response is returned, and instead an error message is returned.</p>")
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifySpotFleetRequestCommand"
  let make = (
    ~spotFleetRequestId,
    ~context=?,
    ~onDemandTargetCapacity=?,
    ~targetCapacity=?,
    ~launchTemplateConfigs=?,
    ~excessCapacityTerminationPolicy=?,
    (),
  ) =>
    new({
      context: context,
      onDemandTargetCapacity: onDemandTargetCapacity,
      targetCapacity: targetCapacity,
      spotFleetRequestId: spotFleetRequestId,
      launchTemplateConfigs: launchTemplateConfigs,
      excessCapacityTerminationPolicy: excessCapacityTerminationPolicy,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ModifyFleet = {
  type t
  type request = {
    @ocaml.doc("<p>Reserved.</p>") @as("Context") context: option<string_>,
    @ocaml.doc("<p>The size of the EC2 Fleet.</p>") @as("TargetCapacitySpecification")
    targetCapacitySpecification: option<targetCapacitySpecificationRequest>,
    @ocaml.doc("<p>The ID of the EC2 Fleet.</p>") @as("FleetId") fleetId: fleetId,
    @ocaml.doc("<p>The launch template and overrides.</p>") @as("LaunchTemplateConfigs")
    launchTemplateConfigs: option<fleetLaunchTemplateConfigListRequest>,
    @ocaml.doc("<p>Indicates whether running instances should be terminated if the total target capacity of
         the EC2 Fleet is decreased below the current size of the EC2 Fleet.</p>")
    @as("ExcessCapacityTerminationPolicy")
    excessCapacityTerminationPolicy: option<fleetExcessCapacityTerminationPolicy>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>If the request succeeds, the response returns <code>true</code>. If the request fails,
         no response is returned, and instead an error message is returned.</p>")
    @as("Return")
    return: option<boolean_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "ModifyFleetCommand"
  let make = (
    ~fleetId,
    ~context=?,
    ~targetCapacitySpecification=?,
    ~launchTemplateConfigs=?,
    ~excessCapacityTerminationPolicy=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      context: context,
      targetCapacitySpecification: targetCapacitySpecification,
      fleetId: fleetId,
      launchTemplateConfigs: launchTemplateConfigs,
      excessCapacityTerminationPolicy: excessCapacityTerminationPolicy,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeStaleSecurityGroups = {
  type t
  type request = {
    @ocaml.doc("<p>The ID of the VPC.</p>") @as("VpcId") vpcId: vpcId,
    @ocaml.doc(
      "<p>The token for the next set of items to return. (You received this token from a prior call.)</p>"
    )
    @as("NextToken")
    nextToken: option<describeStaleSecurityGroupsNextToken>,
    @ocaml.doc(
      "<p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p>"
    )
    @as("MaxResults")
    maxResults: option<describeStaleSecurityGroupsMaxResults>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the stale security groups.</p>") @as("StaleSecurityGroupSet")
    staleSecurityGroupSet: option<staleSecurityGroupSet>,
    @ocaml.doc(
      "<p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeStaleSecurityGroupsCommand"
  let make = (~vpcId, ~nextToken=?, ~maxResults=?, ~dryRun=?, ()) =>
    new({vpcId: vpcId, nextToken: nextToken, maxResults: maxResults, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeSecurityGroups = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of results to return in a single call. To retrieve the remaining
            results, make another request with the returned <code>NextToken</code> value. This value
            can be between 5 and 1000. If this parameter is not specified, then all results are
            returned.</p>")
    @as("MaxResults")
    maxResults: option<describeSecurityGroupsMaxResults>,
    @ocaml.doc("<p>The token to request the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>[EC2-Classic and default VPC only] The names of the security groups. You can specify either
			the security group name or the security group ID. For security groups in a nondefault VPC, use
			the <code>group-name</code> filter to describe security groups by name.</p>
         <p>Default: Describes all of your security groups.</p>")
    @as("GroupNames")
    groupNames: option<groupNameStringList>,
    @ocaml.doc("<p>The IDs of the security groups. Required for security groups in a nondefault VPC.</p>
         <p>Default: Describes all of your security groups.</p>")
    @as("GroupIds")
    groupIds: option<groupIdStringList>,
    @ocaml.doc("<p>The filters. If using multiple filters for rules, the results include security groups for which any combination of rules - not necessarily a single rule - match all filters.</p>
         <ul>
            <li>
               <p>
                  <code>description</code> - The description of the security group.</p>
            </li>
            <li>
                <p>
                  <code>egress.ip-permission.cidr</code> - An IPv4 CIDR block for an outbound
                    security group rule.</p>
            </li>
            <li>
                <p>
                  <code>egress.ip-permission.from-port</code> - For an outbound rule, the
                    start of port range for the TCP and UDP protocols, or an ICMP type
                    number.</p>
            </li>
            <li>
                <p>
                  <code>egress.ip-permission.group-id</code> - The ID of a security group
                    that has been referenced in an outbound security group rule.</p>
            </li>
            <li>
                <p>
                  <code>egress.ip-permission.group-name</code> - The name of a security group
                    that is referenced in an outbound security group rule.</p>
            </li>
            <li>
                <p>
                  <code>egress.ip-permission.ipv6-cidr</code> - An IPv6 CIDR block for an
                    outbound security group rule.</p>
            </li>
            <li>
     		        <p>
                  <code>egress.ip-permission.prefix-list-id</code> - The ID of a prefix list to which a security group rule allows outbound access.</p>
     	      </li>
            <li>
                <p>
                  <code>egress.ip-permission.protocol</code> - The IP protocol for an
                    outbound security group rule (<code>tcp</code> | <code>udp</code> |
                        <code>icmp</code>, a protocol number, or -1 for all protocols).</p>
            </li>
            <li>
                <p>
                  <code>egress.ip-permission.to-port</code> - For an outbound rule, the end
                    of port range for the TCP and UDP protocols, or an ICMP code.</p>
            </li>
            <li>
                <p>
                  <code>egress.ip-permission.user-id</code> - The ID of an Amazon Web Services account that
                    has been referenced in an outbound security group rule.</p>
            </li>
            <li>
               <p>
                  <code>group-id</code> - The ID of the security group. </p>
            </li>
            <li>
               <p>
                  <code>group-name</code> - The name of the security group.</p>
            </li>
            <li>
               <p>
                  <code>ip-permission.cidr</code> - An IPv4 CIDR block for an inbound security
                    group rule.</p>
            </li>
            <li>
               <p>
                  <code>ip-permission.from-port</code> - For an inbound rule, the start of port
                    range for the TCP and UDP protocols, or an ICMP type number.</p>
            </li>
            <li>
               <p>
                  <code>ip-permission.group-id</code> - The ID of a security group that has been
                    referenced in an inbound security group rule.</p>
            </li>
            <li>
			            <p>
                  <code>ip-permission.group-name</code> - The name of a security group that is
                    referenced in an inbound security group rule.</p>
	           </li>
            <li>
               <p>
                  <code>ip-permission.ipv6-cidr</code> - An IPv6 CIDR block for an inbound security
                    group rule.</p>
            </li>
            <li>
                <p>
                  <code>ip-permission.prefix-list-id</code> - The ID of a prefix list from which a security group rule allows inbound access.</p>
            </li>
            <li>
               <p>
                  <code>ip-permission.protocol</code> - The IP protocol for an inbound security
                group rule (<code>tcp</code> | <code>udp</code> | <code>icmp</code>, a
                protocol number, or -1 for all protocols).</p>
            </li>
            <li>
               <p>
                  <code>ip-permission.to-port</code> - For an inbound rule, the end of port range
                    for the TCP and UDP protocols, or an ICMP code.</p>
            </li>
            <li>
               <p>
                  <code>ip-permission.user-id</code> - The ID of an Amazon Web Services account that has been
                    referenced in an inbound security group rule.</p>
            </li>
            <li>
               <p>
                  <code>owner-id</code> - The Amazon Web Services account ID of the owner of the security group.</p>
            </li>
            <li>
               <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
            </li>
            <li>
               <p>
                  <code>vpc-id</code> - The ID of the VPC specified when the security group was created.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the security groups.</p>") @as("SecurityGroups")
    securityGroups: option<securityGroupList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeSecurityGroupsCommand"
  let make = (~maxResults=?, ~nextToken=?, ~dryRun=?, ~groupNames=?, ~groupIds=?, ~filters=?, ()) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      dryRun: dryRun,
      groupNames: groupNames,
      groupIds: groupIds,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeInstanceTypes = {
  type t
  type request = {
    @ocaml.doc("<p>The token to retrieve the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return for the request in a single page. The remaining results
         can be seen by sending another request with the next token value.</p>")
    @as("MaxResults")
    maxResults: option<ditmaxResults>,
    @ocaml.doc("<p>One or more filters. Filter names and values are case-sensitive.</p>
         <ul>
            <li>
               <p>
                  <code>auto-recovery-supported</code> - Indicates whether auto recovery is supported  (<code>true</code> | <code>false</code>).</p>
            </li>
            <li>
               <p>
                  <code>bare-metal</code> - Indicates whether it is a bare metal instance type  (<code>true</code> | <code>false</code>).</p>
            </li>
            <li>
               <p>
                  <code>burstable-performance-supported</code> - Indicates whether it is a burstable
     performance instance type  (<code>true</code> | <code>false</code>).</p>
            </li>
            <li>
               <p>
                  <code>current-generation</code> - Indicates whether this instance type is the latest
     generation instance type of an instance family  (<code>true</code> | <code>false</code>).</p>
            </li>
            <li>
               <p>
                  <code>ebs-info.ebs-optimized-info.baseline-bandwidth-in-mbps</code> - The baseline
                    bandwidth performance for an EBS-optimized instance type, in Mbps.</p>
            </li>
            <li>
               <p>
                  <code>ebs-info.ebs-optimized-info.baseline-iops</code> - The baseline input/output storage
     operations per second for an EBS-optimized instance type.</p>
            </li>
            <li>
               <p>
                  <code>ebs-info.ebs-optimized-info.baseline-throughput-in-mbps</code> - The baseline
     throughput performance for an EBS-optimized instance type, in MB/s.</p>
            </li>
            <li>
               <p>
                  <code>ebs-info.ebs-optimized-info.maximum-bandwidth-in-mbps</code> - The maximum bandwidth
                    performance for an EBS-optimized instance type, in Mbps.</p>
            </li>
            <li>
               <p>
                  <code>ebs-info.ebs-optimized-info.maximum-iops</code> - The maximum input/output storage
                    operations per second for an EBS-optimized instance type.</p>
            </li>
            <li>
               <p>
                  <code>ebs-info.ebs-optimized-info.maximum-throughput-in-mbps</code> - The maximum
     throughput performance for an EBS-optimized instance type, in MB/s.</p>
            </li>
            <li>
               <p>
                  <code>ebs-info.ebs-optimized-support</code> - Indicates whether the instance type is
     EBS-optimized (<code>supported</code> | <code>unsupported</code> |
     <code>default</code>).</p>
            </li>
            <li>
               <p>
                  <code>ebs-info.encryption-support</code> - Indicates whether EBS encryption is supported
      (<code>supported</code> | <code>unsupported</code>).</p>
            </li>
            <li>
               <p>
                  <code>ebs-info.nvme-support</code> - Indicates whether non-volatile memory express (NVMe)
     is supported for EBS volumes (<code>required</code> | <code>supported</code> | <code>unsupported</code>).</p>
            </li>
            <li>
               <p>
                  <code>free-tier-eligible</code> - Indicates whether the instance type is eligible to use
     in the free tier  (<code>true</code> | <code>false</code>).</p>
            </li>
            <li>
               <p>
                  <code>hibernation-supported</code> - Indicates whether On-Demand hibernation is supported  (<code>true</code> | <code>false</code>).</p>
            </li>
            <li>
               <p>
                  <code>hypervisor</code> - The hypervisor (<code>nitro</code> | <code>xen</code>).</p>
            </li>
            <li>
               <p>
                  <code>instance-storage-info.disk.count</code> - The number of local disks.</p>
            </li>
            <li>
               <p>
                  <code>instance-storage-info.disk.size-in-gb</code> - The storage size of each instance storage disk, in
     GB.</p>
            </li>
            <li>
               <p>
                  <code>instance-storage-info.disk.type</code> - The storage technology for the local
     instance storage disks (<code>hdd</code> | <code>ssd</code>).</p>
            </li>
            <li>
               <p>
                  <code>instance-storage-info.encryption-support</code> - Indicates whether data is encrypted at rest 
     (<code>required</code> | <code>supported</code> | <code>unsupported</code>).</p>
            </li>
            <li>
               <p>
                  <code>instance-storage-info.nvme-support</code> - Indicates whether non-volatile memory
     express (NVMe) is supported for instance store (<code>required</code> | <code>supported</code> |
     <code>unsupported</code>).</p>
            </li>
            <li>
               <p>
                  <code>instance-storage-info.total-size-in-gb</code> - The total amount of storage available from all local
     instance storage, in GB.</p>
            </li>
            <li>
               <p>
                  <code>instance-storage-supported</code> - Indicates whether the instance type has local
     instance storage  (<code>true</code> | <code>false</code>).</p>
            </li>
            <li>
               <p>
                  <code>instance-type</code> - The instance type (for example <code>c5.2xlarge</code> or
     c5*).</p>
            </li>
            <li>
               <p>
                  <code>memory-info.size-in-mib</code> - The memory size.</p>
            </li>
            <li>
               <p>
                  <code>network-info.efa-info.maximum-efa-interfaces</code> - The maximum number of Elastic 
     Fabric Adapters (EFAs) per instance.</p>
            </li>
            <li>
               <p>
                  <code>network-info.efa-supported</code> - Indicates whether the instance type supports
     Elastic Fabric Adapter (EFA)  (<code>true</code> | <code>false</code>).</p>
            </li>
            <li>
               <p>
                  <code>network-info.ena-support</code> - Indicates whether Elastic Network Adapter (ENA) is
     supported or required (<code>required</code> | <code>supported</code> |
      <code>unsupported</code>).</p>
            </li>
            <li>
               <p>
                  <code>network-info.encryption-in-transit-supported</code> - Indicates whether the instance type 
     automatically encrypts in-transit traffic between instances  (<code>true</code> | <code>false</code>).</p>
            </li>
            <li>
               <p>
                  <code>network-info.ipv4-addresses-per-interface</code> - The maximum number of private IPv4 addresses per
     network interface.</p>
            </li>
            <li>
               <p>
                  <code>network-info.ipv6-addresses-per-interface</code> - The maximum number of private IPv6 addresses per
     network interface.</p>
            </li>
            <li>
               <p>
                  <code>network-info.ipv6-supported</code> - Indicates whether the instance type supports IPv6  (<code>true</code> | <code>false</code>).</p>
            </li>
            <li>
               <p>
                  <code>network-info.maximum-network-cards</code> - The maximum number of network cards per
     instance.</p>
            </li>
            <li>
               <p>
                  <code>network-info.maximum-network-interfaces</code> - The maximum number of network interfaces per instance.</p>
            </li>
            <li>
               <p>
                  <code>network-info.network-performance</code> - The network performance (for example, \"25
     Gigabit\").</p>
            </li>
            <li>
               <p>
                  <code>processor-info.supported-architecture</code> - The CPU architecture
      (<code>arm64</code> | <code>i386</code> | <code>x86_64</code>).</p>
            </li>
            <li>
               <p>
                  <code>processor-info.sustained-clock-speed-in-ghz</code> - The CPU clock speed, in GHz.</p>
            </li>
            <li>
               <p>
                  <code>supported-boot-mode</code> - The boot mode (<code>legacy-bios</code> |
      <code>uefi</code>).</p>
            </li>
            <li>
               <p>
                  <code>supported-root-device-type</code> - The root device type (<code>ebs</code> |
      <code>instance-store</code>).</p>
            </li>
            <li>
               <p>
                  <code>supported-usage-class</code> - The usage class (<code>on-demand</code> |
      <code>spot</code>).</p>
            </li>
            <li>
               <p>
                  <code>supported-virtualization-type</code> - The virtualization type (<code>hvm</code> |
      <code>paravirtual</code>).</p>
            </li>
            <li>
               <p>
                  <code>vcpu-info.default-cores</code> - The default number of cores for the instance type.</p>
            </li>
            <li>
               <p>
                  <code>vcpu-info.default-threads-per-core</code> - The default number of threads per core for the instance
     type.</p>
            </li>
            <li>
               <p>
                  <code>vcpu-info.default-vcpus</code> - The default number of vCPUs for the instance type.</p>
            </li>
            <li>
               <p>
                  <code>vcpu-info.valid-cores</code> - The number of cores that can be configured for the instance type.</p>
            </li>
            <li>
               <p>
                  <code>vcpu-info.valid-threads-per-core</code> - The number of threads per core that can be configured for the instance type.
        For example, \"1\" or \"1,2\".</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc(
      "<p>The instance types. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p>"
    )
    @as("InstanceTypes")
    instanceTypes: option<requestInstanceTypeList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request,
         and provides an error response. If you have the required permissions, the error response is
         <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there
         are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>The instance type. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p>"
    )
    @as("InstanceTypes")
    instanceTypes: option<instanceTypeInfoList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeInstanceTypesCommand"
  let make = (~nextToken=?, ~maxResults=?, ~filters=?, ~instanceTypes=?, ~dryRun=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      filters: filters,
      instanceTypes: instanceTypes,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeDhcpOptions = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of results to return with a single call.
	To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<describeDhcpOptionsMaxResults>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more filters.</p>
		       <ul>
            <li>
		             <p>
                  <code>dhcp-options-id</code> - The ID of a DHCP options set.</p>
		          </li>
            <li>
		             <p>
                  <code>key</code> - The key for one of the options (for example, <code>domain-name</code>).</p>
		          </li>
            <li>
		             <p>
                  <code>value</code> - The value for one of the options.</p>
		          </li>
            <li>
		             <p>
                  <code>owner-id</code> - The ID of the Amazon Web Services account that owns the DHCP options set.</p>
		          </li>
            <li>
		             <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
		          </li>
            <li>
		             <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p>
		          </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of one or more DHCP options sets.</p>
		       <p>Default: Describes all your DHCP options sets.</p>")
    @as("DhcpOptionsIds")
    dhcpOptionsIds: option<dhcpOptionsIdStringList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about one or more DHCP options sets.</p>") @as("DhcpOptions")
    dhcpOptions: option<dhcpOptionsList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeDhcpOptionsCommand"
  let make = (~maxResults=?, ~nextToken=?, ~dryRun=?, ~filters=?, ~dhcpOptionsIds=?, ()) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      dryRun: dryRun,
      filters: filters,
      dhcpOptionsIds: dhcpOptionsIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeConversionTasks = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The conversion task IDs.</p>") @as("ConversionTaskIds")
    conversionTaskIds: option<conversionIdStringList>,
  }
  type response = {
    @ocaml.doc("<p>Information about the conversion tasks.</p>") @as("ConversionTasks")
    conversionTasks: option<describeConversionTaskList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeConversionTasksCommand"
  let make = (~dryRun=?, ~conversionTaskIds=?, ()) =>
    new({dryRun: dryRun, conversionTaskIds: conversionTaskIds})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateVpnConnection = {
  type t
  @ocaml.doc("<p>Contains the parameters for CreateVpnConnection.</p>")
  type request = {
    @ocaml.doc("<p>The tags to apply to the VPN connection.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The options for the VPN connection.</p>") @as("Options")
    options: option<vpnConnectionOptionsSpecification>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the transit gateway. If you specify a transit gateway, you cannot specify a virtual private
            gateway.</p>")
    @as("TransitGatewayId")
    transitGatewayId: option<transitGatewayId>,
    @ocaml.doc("<p>The ID of the virtual private gateway. If you specify a virtual private gateway, you
            cannot specify a transit gateway.</p>")
    @as("VpnGatewayId")
    vpnGatewayId: option<vpnGatewayId>,
    @ocaml.doc("<p>The type of VPN connection (<code>ipsec.1</code>).</p>") @as("Type")
    type_: string_,
    @ocaml.doc("<p>The ID of the customer gateway.</p>") @as("CustomerGatewayId")
    customerGatewayId: customerGatewayId,
  }
  @ocaml.doc("<p>Contains the output of CreateVpnConnection.</p>")
  type response = {
    @ocaml.doc("<p>Information about the VPN connection.</p>") @as("VpnConnection")
    vpnConnection: option<vpnConnection>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateVpnConnectionCommand"
  let make = (
    ~type_,
    ~customerGatewayId,
    ~tagSpecifications=?,
    ~options=?,
    ~dryRun=?,
    ~transitGatewayId=?,
    ~vpnGatewayId=?,
    (),
  ) =>
    new({
      tagSpecifications: tagSpecifications,
      options: options,
      dryRun: dryRun,
      transitGatewayId: transitGatewayId,
      vpnGatewayId: vpnGatewayId,
      type_: type_,
      customerGatewayId: customerGatewayId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateLaunchTemplateVersion = {
  type t
  type request = {
    @ocaml.doc("<p>The information for the launch template.</p>") @as("LaunchTemplateData")
    launchTemplateData: requestLaunchTemplateData,
    @ocaml.doc("<p>A description for the version of the launch template.</p>")
    @as("VersionDescription")
    versionDescription: option<versionDescription>,
    @ocaml.doc("<p>The version number of the launch template version on which to base the new version.
            The new version inherits the same launch parameters as the source version, except for
            parameters that you specify in <code>LaunchTemplateData</code>. Snapshots applied to the
            block device mapping are ignored when creating a new version unless they are explicitly
            included.</p>")
    @as("SourceVersion")
    sourceVersion: option<string_>,
    @ocaml.doc("<p>The name of the launch template. You must specify either the launch template ID or
            launch template name in the request.</p>")
    @as("LaunchTemplateName")
    launchTemplateName: option<launchTemplateName>,
    @ocaml.doc("<p>The ID of the launch template. You must specify either the launch template ID or
            launch template name in the request.</p>")
    @as("LaunchTemplateId")
    launchTemplateId: option<launchTemplateId>,
    @ocaml.doc("<p>Unique, case-sensitive identifier you provide to ensure the idempotency of the
            request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring
                Idempotency</a>.</p>
        <p>Constraint: Maximum 128 ASCII characters.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>If the new version of the launch template contains parameters or parameter
            combinations that are not valid, an error code and an error message are returned for
            each issue that's found.</p>")
    @as("Warning")
    warning: option<validationWarning>,
    @ocaml.doc("<p>Information about the launch template version.</p>") @as("LaunchTemplateVersion")
    launchTemplateVersion: option<launchTemplateVersion>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateLaunchTemplateVersionCommand"
  let make = (
    ~launchTemplateData,
    ~versionDescription=?,
    ~sourceVersion=?,
    ~launchTemplateName=?,
    ~launchTemplateId=?,
    ~clientToken=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      launchTemplateData: launchTemplateData,
      versionDescription: versionDescription,
      sourceVersion: sourceVersion,
      launchTemplateName: launchTemplateName,
      launchTemplateId: launchTemplateId,
      clientToken: clientToken,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateFleet = {
  type t
  type request = {
    @ocaml.doc("<p>Reserved.</p>") @as("Context") context: option<string_>,
    @ocaml.doc("<p>The key-value pair for tagging the EC2 Fleet request on creation. For more information, see 
         <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources\">Tagging your resources</a>.</p>
         <p>If the fleet type is <code>instant</code>, specify a resource type of <code>fleet</code> 
         to tag the fleet or <code>instance</code> to tag the instances at launch.</p>
         <p>If the fleet type is <code>maintain</code> or <code>request</code>, specify a resource
         type of <code>fleet</code> to tag the fleet. You cannot specify a resource type of
            <code>instance</code>. To tag instances at launch, specify the tags in a <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template\">launch template</a>.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>Indicates whether EC2 Fleet should replace unhealthy Spot Instances. Supported only for
         fleets of type <code>maintain</code>. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#ec2-fleet-health-checks\">EC2 Fleet
            health checks</a> in the <i>Amazon EC2 User Guide</i>.</p>")
    @as("ReplaceUnhealthyInstances")
    replaceUnhealthyInstances: option<boolean_>,
    @ocaml.doc("<p>The end date and time of the request, in UTC format (for example,
            <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
         At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.</p>")
    @as("ValidUntil")
    validUntil: option<dateTime>,
    @ocaml.doc("<p>The start date and time of the request, in UTC format (for example,
            <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
         The default is to start fulfilling the request immediately.</p>")
    @as("ValidFrom")
    validFrom: option<dateTime>,
    @ocaml.doc("<p>The fleet type. The default value is <code>maintain</code>.</p>
         <ul>
            <li>
               <p>
                  <code>maintain</code> - The EC2 Fleet places an asynchronous request for your desired
               capacity, and continues to maintain your desired Spot capacity by replenishing
               interrupted Spot Instances.</p>
            </li>
            <li>
               <p>
                  <code>request</code> - The EC2 Fleet places an asynchronous one-time request for your
               desired capacity, but does submit Spot requests in alternative capacity pools if Spot
               capacity is unavailable, and does not maintain Spot capacity if Spot Instances are
               interrupted.</p>
            </li>
            <li>
               <p>
                  <code>instant</code> - The EC2 Fleet places a synchronous one-time request for your
               desired capacity, and returns errors for any instances that could not be
               launched.</p>
            </li>
         </ul>
         <p>For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-request-type.html\">EC2 Fleet
            request types</a> in the <i>Amazon EC2 User Guide</i>.</p>")
    @as("Type")
    type_: option<fleetType>,
    @ocaml.doc(
      "<p>Indicates whether running instances should be terminated when the EC2 Fleet expires.</p>"
    )
    @as("TerminateInstancesWithExpiration")
    terminateInstancesWithExpiration: option<boolean_>,
    @ocaml.doc("<p>The number of units to request.</p>") @as("TargetCapacitySpecification")
    targetCapacitySpecification: targetCapacitySpecificationRequest,
    @ocaml.doc("<p>The configuration for the EC2 Fleet.</p>") @as("LaunchTemplateConfigs")
    launchTemplateConfigs: fleetLaunchTemplateConfigListRequest,
    @ocaml.doc("<p>Indicates whether running instances should be terminated if the total target capacity of
         the EC2 Fleet is decreased below the current size of the EC2 Fleet.</p>")
    @as("ExcessCapacityTerminationPolicy")
    excessCapacityTerminationPolicy: option<fleetExcessCapacityTerminationPolicy>,
    @ocaml.doc("<p>Describes the configuration of On-Demand Instances in an EC2 Fleet.</p>")
    @as("OnDemandOptions")
    onDemandOptions: option<onDemandOptionsRequest>,
    @ocaml.doc("<p>Describes the configuration of Spot Instances in an EC2 Fleet.</p>")
    @as("SpotOptions")
    spotOptions: option<spotOptionsRequest>,
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
         request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring
            idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the instances that were launched by the fleet. Supported only for
            fleets of type <code>instant</code>.</p>")
    @as("Instances")
    instances: option<createFleetInstancesSet>,
    @ocaml.doc("<p>Information about the instances that could not be launched by the fleet. Supported only for
            fleets of type <code>instant</code>.</p>")
    @as("Errors")
    errors: option<createFleetErrorsSet>,
    @ocaml.doc("<p>The ID of the EC2 Fleet.</p>") @as("FleetId") fleetId: option<fleetId>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "CreateFleetCommand"
  let make = (
    ~targetCapacitySpecification,
    ~launchTemplateConfigs,
    ~context=?,
    ~tagSpecifications=?,
    ~replaceUnhealthyInstances=?,
    ~validUntil=?,
    ~validFrom=?,
    ~type_=?,
    ~terminateInstancesWithExpiration=?,
    ~excessCapacityTerminationPolicy=?,
    ~onDemandOptions=?,
    ~spotOptions=?,
    ~clientToken=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      context: context,
      tagSpecifications: tagSpecifications,
      replaceUnhealthyInstances: replaceUnhealthyInstances,
      validUntil: validUntil,
      validFrom: validFrom,
      type_: type_,
      terminateInstancesWithExpiration: terminateInstancesWithExpiration,
      targetCapacitySpecification: targetCapacitySpecification,
      launchTemplateConfigs: launchTemplateConfigs,
      excessCapacityTerminationPolicy: excessCapacityTerminationPolicy,
      onDemandOptions: onDemandOptions,
      spotOptions: spotOptions,
      clientToken: clientToken,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RunInstances = {
  type t
  type request = {
    @ocaml.doc("<p>The maintenance and recovery options for the instance.</p>")
    @as("MaintenanceOptions")
    maintenanceOptions: option<instanceMaintenanceOptionsRequest>,
    @ocaml.doc("<p>The options for the instance hostname. The default values are inherited from the
            subnet.</p>")
    @as("PrivateDnsNameOptions")
    privateDnsNameOptions: option<privateDnsNameOptionsRequest>,
    @ocaml.doc("<p>Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For
            more information, see <a href=\"https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html\"> What is Amazon Web Services Nitro
                Enclaves?</a> in the <i>Amazon Web Services Nitro Enclaves User
                Guide</i>.</p>
        <p>You can't enable Amazon Web Services Nitro Enclaves and hibernation on the same
            instance.</p>")
    @as("EnclaveOptions")
    enclaveOptions: option<enclaveOptionsRequest>,
    @ocaml.doc(
      "<p>The metadata options for the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\">Instance metadata and user data</a>.</p>"
    )
    @as("MetadataOptions")
    metadataOptions: option<instanceMetadataOptionsRequest>,
    @ocaml.doc("<p>The license configurations.</p>") @as("LicenseSpecifications")
    licenseSpecifications: option<licenseSpecificationListRequest>,
    @ocaml.doc("<p>Indicates whether an instance is enabled for hibernation. For more information, see
                <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html\">Hibernate
                your instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
        <p>You can't enable hibernation and Amazon Web Services Nitro Enclaves on the same
            instance.</p>")
    @as("HibernationOptions")
    hibernationOptions: option<hibernationOptionsRequest>,
    @ocaml.doc("<p>Information about the Capacity Reservation targeting option. If you do not specify this parameter, the
            instance's Capacity Reservation preference defaults to <code>open</code>, which enables
            it to run in any open Capacity Reservation that has matching attributes (instance type,
            platform, Availability Zone).</p>")
    @as("CapacityReservationSpecification")
    capacityReservationSpecification: option<capacityReservationSpecification>,
    @ocaml.doc(
      "<p>The CPU options for the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html\">Optimize CPU options</a> in the <i>Amazon EC2 User Guide</i>.</p>"
    )
    @as("CpuOptions")
    cpuOptions: option<cpuOptionsRequest>,
    @ocaml.doc("<p>The credit option for CPU usage of the burstable performance instance. Valid values
            are <code>standard</code> and <code>unlimited</code>. To change this attribute after
            launch, use <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceCreditSpecification.html\">
                ModifyInstanceCreditSpecification</a>. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\">Burstable
                performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
        <p>Default: <code>standard</code> (T2 instances) or <code>unlimited</code> (T3/T3a
            instances)</p>

        <p>For T3 instances with <code>host</code> tenancy, only <code>standard</code> is
            supported.</p>")
    @as("CreditSpecification")
    creditSpecification: option<creditSpecificationRequest>,
    @ocaml.doc("<p>The market (purchasing) option for the instances.</p>
        <p>For <a>RunInstances</a>, persistent Spot Instance requests are
            only supported when <b>InstanceInterruptionBehavior</b> is set
            to either <code>hibernate</code> or <code>stop</code>.</p>")
    @as("InstanceMarketOptions")
    instanceMarketOptions: option<instanceMarketOptionsRequest>,
    @ocaml.doc("<p>The launch template to use to launch the instances. Any parameters that you specify in
                <a>RunInstances</a> override the same parameters in the launch template.
            You can specify either the name or ID of a launch template, but not both.</p>")
    @as("LaunchTemplate")
    launchTemplate: option<launchTemplateSpecification>,
    @ocaml.doc("<p>The tags to apply to the resources during launch. You can only tag instances and
            volumes on launch. The specified tags are applied to all instances or volumes that are
            created during launch. To tag a resource after it has been created, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html\">CreateTags</a>.</p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>An elastic inference accelerator to associate with the instance. Elastic inference
            accelerators are a resource you can attach to your Amazon EC2 instances to accelerate
            your Deep Learning (DL) inference workloads.</p>
        <p>You cannot specify accelerators from different generations in the same request.</p>")
    @as("ElasticInferenceAccelerators")
    elasticInferenceAccelerators: option<elasticInferenceAccelerators>,
    @ocaml.doc("<p>An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that
            you can attach to your Windows instance to accelerate the graphics performance of your
            applications. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html\">Amazon EC2 Elastic GPUs</a> in
            the <i>Amazon EC2 User Guide</i>.</p>")
    @as("ElasticGpuSpecification")
    elasticGpuSpecification: option<elasticGpuSpecifications>,
    @ocaml.doc("<p>[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address
            range of the subnet.</p>
        <p>Only one private IP address can be designated as primary. You can't specify this
            option if you've specified the option to designate a private IP address as the primary
            IP address in a network interface specification. You cannot specify this option if
            you're launching more than one instance in the request.</p>
        <p>You cannot specify this option and the network interfaces option in the same
            request.</p>")
    @as("PrivateIpAddress")
    privateIpAddress: option<string_>,
    @ocaml.doc("<p>The network interfaces to associate with the instance. If you specify a network
            interface, you must specify any security groups and subnets as part of the network
            interface.</p>")
    @as("NetworkInterfaces")
    networkInterfaces: option<instanceNetworkInterfaceSpecificationList>,
    @ocaml.doc("<p>Indicates whether an instance stops or terminates when you initiate shutdown from the
            instance (using the operating system command for system shutdown).</p>
        <p>Default: <code>stop</code>
        </p>")
    @as("InstanceInitiatedShutdownBehavior")
    instanceInitiatedShutdownBehavior: option<shutdownBehavior>,
    @ocaml.doc("<p>The name or Amazon Resource Name (ARN) of an IAM instance
            profile.</p>")
    @as("IamInstanceProfile")
    iamInstanceProfile: option<iamInstanceProfileSpecification>,
    @ocaml.doc("<p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization
            provides dedicated throughput to Amazon EBS and an optimized configuration stack to
            provide optimal Amazon EBS I/O performance. This optimization isn't available with all
            instance types. Additional usage charges apply when using an EBS-optimized
            instance.</p>
        <p>Default: <code>false</code>
        </p>")
    @as("EbsOptimized")
    ebsOptimized: option<boolean_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>If you set this parameter to <code>true</code>, you can't terminate the instance using
            the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after
            launch, use <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html\">ModifyInstanceAttribute</a>. Alternatively, if you set
                <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can
            terminate the instance by running the shutdown command from the instance.</p>
        <p>Default: <code>false</code>
        </p>")
    @as("DisableApiTermination")
    disableApiTermination: option<boolean_>,
    @ocaml.doc("<p>Unique, case-sensitive identifier you provide to ensure the idempotency of the
            request. If you do not specify a client token, a randomly generated token is used for
            the request to ensure idempotency.</p>

        <p>For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring
                Idempotency</a>.</p>
        <p>Constraints: Maximum 64 ASCII characters</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Reserved.</p>") @as("AdditionalInfo") additionalInfo: option<string_>,
    @ocaml.doc("<p>The user data to make available to the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html\">Run commands on
                your Linux instance at launch</a> and <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-windows-user-data.html\">Run commands on your
                Windows instance at launch</a>. If you are using a command line tool,
            base64-encoding is performed for you, and you can load the text from a file. Otherwise,
            you must provide base64-encoded text. User data is limited to 16 KB.</p>")
    @as("UserData")
    userData: option<string_>,
    @ocaml.doc("<p>[EC2-VPC] The ID of the subnet to launch the instance into.</p>
        <p>If you specify a network interface, you must specify any subnets as part of the
            network interface.</p>")
    @as("SubnetId")
    subnetId: option<subnetId>,
    @ocaml.doc("<p>[EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you
            must use security group IDs instead.</p>
        <p>If you specify a network interface, you must specify any security groups as part of
            the network interface.</p>
        <p>Default: Amazon EC2 uses the default security group.</p>")
    @as("SecurityGroups")
    securityGroups: option<securityGroupStringList>,
    @ocaml.doc("<p>The IDs of the security groups. You can create a security group using <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html\">CreateSecurityGroup</a>.</p>
        <p>If you specify a network interface, you must specify any security groups as part of
            the network interface.</p>")
    @as("SecurityGroupIds")
    securityGroupIds: option<securityGroupIdStringList>,
    @ocaml.doc("<p>The ID of the RAM disk to select. Some kernels require additional drivers at launch.
            Check the kernel requirements for information about whether you need to specify a RAM
            disk. To find kernel requirements, go to the Amazon Web Services Resource Center and
            search for the kernel ID.</p>
        <important>
            <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more
                information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html\">PV-GRUB</a> in the
                    <i>Amazon EC2 User Guide</i>.</p>
        </important>")
    @as("RamdiskId")
    ramdiskId: option<ramdiskId>,
    @ocaml.doc("<p>The placement for the instance.</p>") @as("Placement")
    placement: option<placement>,
    @ocaml.doc("<p>Specifies whether detailed monitoring is enabled for the instance.</p>")
    @as("Monitoring")
    monitoring: option<runInstancesMonitoringEnabled>,
    @ocaml.doc("<p>The minimum number of instances to launch. If you specify a minimum that is more
            instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2
            launches no instances.</p>
        <p>Constraints: Between 1 and the maximum number you're allowed for the specified
            instance type. For more information about the default limits, and how to request an
            increase, see <a href=\"http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2\">How many instances can I
                run in Amazon EC2</a> in the Amazon EC2 General FAQ.</p>")
    @as("MinCount")
    minCount: integer_,
    @ocaml.doc("<p>The maximum number of instances to launch. If you specify more instances than Amazon
            EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible
            number of instances above <code>MinCount</code>.</p>
        <p>Constraints: Between 1 and the maximum number you're allowed for the specified
            instance type. For more information about the default limits, and how to request an
            increase, see <a href=\"http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2\">How many instances can I
                run in Amazon EC2</a> in the Amazon EC2 FAQ.</p>")
    @as("MaxCount")
    maxCount: integer_,
    @ocaml.doc("<p>The name of the key pair. You can create a key pair using <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html\">CreateKeyPair</a> or
                <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html\">ImportKeyPair</a>.</p>
        <important>
            <p>If you do not specify a key pair, you can't connect to the instance unless you
                choose an AMI that is configured to allow users another way to log in.</p>
        </important>")
    @as("KeyName")
    keyName: option<keyPairName>,
    @ocaml.doc("<p>The ID of the kernel.</p>
        <important>
            <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more
                information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html\">PV-GRUB</a> in the
                    <i>Amazon EC2 User Guide</i>.</p>
        </important>")
    @as("KernelId")
    kernelId: option<kernelId>,
    @ocaml.doc("<p>[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the
            primary network interface. You cannot specify this option and the option to assign a
            number of IPv6 addresses in the same request. You cannot specify this option if you've
            specified a minimum number of instances to launch.</p>
        <p>You cannot specify this option and the network interfaces option in the same
            request.</p>")
    @as("Ipv6Addresses")
    ipv6Addresses: option<instanceIpv6AddressList>,
    @ocaml.doc("<p>[EC2-VPC] The number of IPv6 addresses to associate with the primary network
            interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You
            cannot specify this option and the option to assign specific IPv6 addresses in the same
            request. You can specify this option if you've specified a minimum number of instances
            to launch.</p>
        <p>You cannot specify this option and the network interfaces option in the same
            request.</p>")
    @as("Ipv6AddressCount")
    ipv6AddressCount: option<integer_>,
    @ocaml.doc("<p>The instance type. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\">Instance types</a> in the
                <i>Amazon EC2 User Guide</i>.</p>
        <p>Default: <code>m1.small</code>
         </p>")
    @as("InstanceType")
    instanceType: option<instanceType>,
    @ocaml.doc("<p>The ID of the AMI. An AMI ID is required to launch an instance and must be specified
            here or in a launch template.</p>")
    @as("ImageId")
    imageId: option<imageId>,
    @ocaml.doc("<p>The block device mapping, which defines the EBS volumes and instance store volumes to
            attach to the instance at launch. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html\">Block device
                mappings</a> in the <i>Amazon EC2 User Guide</i>.</p>")
    @as("BlockDeviceMappings")
    blockDeviceMappings: option<blockDeviceMappingRequestList>,
  }
  type response = reservation
  @module("@aws-sdk/client-ec2") @new external new: request => t = "RunInstancesCommand"
  let make = (
    ~minCount,
    ~maxCount,
    ~maintenanceOptions=?,
    ~privateDnsNameOptions=?,
    ~enclaveOptions=?,
    ~metadataOptions=?,
    ~licenseSpecifications=?,
    ~hibernationOptions=?,
    ~capacityReservationSpecification=?,
    ~cpuOptions=?,
    ~creditSpecification=?,
    ~instanceMarketOptions=?,
    ~launchTemplate=?,
    ~tagSpecifications=?,
    ~elasticInferenceAccelerators=?,
    ~elasticGpuSpecification=?,
    ~privateIpAddress=?,
    ~networkInterfaces=?,
    ~instanceInitiatedShutdownBehavior=?,
    ~iamInstanceProfile=?,
    ~ebsOptimized=?,
    ~dryRun=?,
    ~disableApiTermination=?,
    ~clientToken=?,
    ~additionalInfo=?,
    ~userData=?,
    ~subnetId=?,
    ~securityGroups=?,
    ~securityGroupIds=?,
    ~ramdiskId=?,
    ~placement=?,
    ~monitoring=?,
    ~keyName=?,
    ~kernelId=?,
    ~ipv6Addresses=?,
    ~ipv6AddressCount=?,
    ~instanceType=?,
    ~imageId=?,
    ~blockDeviceMappings=?,
    (),
  ) =>
    new({
      maintenanceOptions: maintenanceOptions,
      privateDnsNameOptions: privateDnsNameOptions,
      enclaveOptions: enclaveOptions,
      metadataOptions: metadataOptions,
      licenseSpecifications: licenseSpecifications,
      hibernationOptions: hibernationOptions,
      capacityReservationSpecification: capacityReservationSpecification,
      cpuOptions: cpuOptions,
      creditSpecification: creditSpecification,
      instanceMarketOptions: instanceMarketOptions,
      launchTemplate: launchTemplate,
      tagSpecifications: tagSpecifications,
      elasticInferenceAccelerators: elasticInferenceAccelerators,
      elasticGpuSpecification: elasticGpuSpecification,
      privateIpAddress: privateIpAddress,
      networkInterfaces: networkInterfaces,
      instanceInitiatedShutdownBehavior: instanceInitiatedShutdownBehavior,
      iamInstanceProfile: iamInstanceProfile,
      ebsOptimized: ebsOptimized,
      dryRun: dryRun,
      disableApiTermination: disableApiTermination,
      clientToken: clientToken,
      additionalInfo: additionalInfo,
      userData: userData,
      subnetId: subnetId,
      securityGroups: securityGroups,
      securityGroupIds: securityGroupIds,
      ramdiskId: ramdiskId,
      placement: placement,
      monitoring: monitoring,
      minCount: minCount,
      maxCount: maxCount,
      keyName: keyName,
      kernelId: kernelId,
      ipv6Addresses: ipv6Addresses,
      ipv6AddressCount: ipv6AddressCount,
      instanceType: instanceType,
      imageId: imageId,
      blockDeviceMappings: blockDeviceMappings,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RequestSpotInstances = {
  type t
  @ocaml.doc("<p>Contains the parameters for RequestSpotInstances.</p>")
  type request = {
    @ocaml.doc(
      "<p>The behavior when a Spot Instance is interrupted. The default is <code>terminate</code>.</p>"
    )
    @as("InstanceInterruptionBehavior")
    instanceInterruptionBehavior: option<instanceInterruptionBehavior>,
    @ocaml.doc("<p>The key-value pair for tagging the Spot Instance request on creation. The value for
                <code>ResourceType</code> must be <code>spot-instances-request</code>, otherwise the
            Spot Instance request fails. To tag the Spot Instance request after it has been created,
            see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html\">CreateTags</a>. </p>")
    @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>The end date of the request, in UTC format
                (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
        <ul>
            <li>
                <p>For a persistent request, the request remains active until the
                        <code>ValidUntil</code> date and time is reached. Otherwise, the request
                    remains active until you cancel it. </p>
            </li>
            <li>
                <p>For a one-time request, the request remains active until all instances launch,
                    the request is canceled, or the <code>ValidUntil</code> date and time is
                    reached. By default, the request is valid for 7 days from the date the request
                    was created.</p>
            </li>
         </ul>")
    @as("ValidUntil")
    validUntil: option<dateTime>,
    @ocaml.doc("<p>The start date of the request. If this is a one-time request, the request becomes
            active at this date and time and remains active until all instances launch, the request
            expires, or the request is canceled. If the request is persistent, the request becomes
            active at this date and time and remains active until it expires or is canceled.</p>
        <p>The specified start date and time cannot be equal to the current date and time. You
            must specify a start date and time that occurs after the current date and time.</p>")
    @as("ValidFrom")
    validFrom: option<dateTime>,
    @ocaml.doc("<p>The Spot Instance request type.</p>
        <p>Default: <code>one-time</code>
        </p>")
    @as("Type")
    type_: option<spotInstanceType>,
    @ocaml.doc("<p>The maximum price per hour that you are willing to pay for a Spot Instance. The
            default is the On-Demand price.</p>")
    @as("SpotPrice")
    spotPrice: option<string_>,
    @ocaml.doc("<p>The launch specification.</p>") @as("LaunchSpecification")
    launchSpecification: option<requestSpotLaunchSpecification>,
    @ocaml.doc("<p>The instance launch group. Launch groups are Spot Instances that launch together and
            terminate together.</p>
        <p>Default: Instances are launched and terminated individually</p>")
    @as("LaunchGroup")
    launchGroup: option<string_>,
    @ocaml.doc("<p>The maximum number of Spot Instances to launch.</p>
        <p>Default: 1</p>")
    @as("InstanceCount")
    instanceCount: option<integer_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to Ensure
                Idempotency</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>")
    @as("ClientToken")
    clientToken: option<string_>,
    @ocaml.doc("<p>Deprecated.</p>") @as("BlockDurationMinutes")
    blockDurationMinutes: option<integer_>,
    @ocaml.doc("<p>The user-specified name for a logical grouping of requests.</p>
        <p>When you specify an Availability Zone group in a Spot Instance request, all Spot
            Instances in the request are launched in the same Availability Zone. Instance proximity
            is maintained with this parameter, but the choice of Availability Zone is not. The group
            applies only to requests for Spot Instances of the same instance type. Any additional
            Spot Instance requests that are specified with the same Availability Zone group name are
            launched in that same Availability Zone, as long as at least one instance from the group
            is still active.</p>
        <p>If there is no active instance running in the Availability Zone group that you specify
            for a new Spot Instance request (all instances are terminated, the request is expired,
            or the maximum price you specified falls below current Spot price), then Amazon EC2 launches
            the instance in any Availability Zone where the constraint can be met. Consequently, the
            subsequent set of Spot Instances could be placed in a different zone from the original
            request, even if you specified the same Availability Zone group.</p>
        <p>Default: Instances are launched in any available Availability Zone.</p>")
    @as("AvailabilityZoneGroup")
    availabilityZoneGroup: option<string_>,
  }
  @ocaml.doc("<p>Contains the output of RequestSpotInstances.</p>")
  type response = {
    @ocaml.doc("<p>One or more Spot Instance requests.</p>") @as("SpotInstanceRequests")
    spotInstanceRequests: option<spotInstanceRequestList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "RequestSpotInstancesCommand"
  let make = (
    ~instanceInterruptionBehavior=?,
    ~tagSpecifications=?,
    ~validUntil=?,
    ~validFrom=?,
    ~type_=?,
    ~spotPrice=?,
    ~launchSpecification=?,
    ~launchGroup=?,
    ~instanceCount=?,
    ~dryRun=?,
    ~clientToken=?,
    ~blockDurationMinutes=?,
    ~availabilityZoneGroup=?,
    (),
  ) =>
    new({
      instanceInterruptionBehavior: instanceInterruptionBehavior,
      tagSpecifications: tagSpecifications,
      validUntil: validUntil,
      validFrom: validFrom,
      type_: type_,
      spotPrice: spotPrice,
      launchSpecification: launchSpecification,
      launchGroup: launchGroup,
      instanceCount: instanceCount,
      dryRun: dryRun,
      clientToken: clientToken,
      blockDurationMinutes: blockDurationMinutes,
      availabilityZoneGroup: availabilityZoneGroup,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module RequestSpotFleet = {
  type t
  @ocaml.doc("<p>Contains the parameters for RequestSpotFleet.</p>")
  type request = {
    @ocaml.doc("<p>The configuration for the Spot Fleet request.</p>") @as("SpotFleetRequestConfig")
    spotFleetRequestConfig: spotFleetRequestConfigData,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  @ocaml.doc("<p>Contains the output of RequestSpotFleet.</p>")
  type response = {
    @ocaml.doc("<p>The ID of the Spot Fleet request.</p>") @as("SpotFleetRequestId")
    spotFleetRequestId: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "RequestSpotFleetCommand"
  let make = (~spotFleetRequestConfig, ~dryRun=?, ()) =>
    new({spotFleetRequestConfig: spotFleetRequestConfig, dryRun: dryRun})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetNetworkInsightsAccessScopeContent = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The ID of the Network Access Scope.</p>") @as("NetworkInsightsAccessScopeId")
    networkInsightsAccessScopeId: networkInsightsAccessScopeId,
  }
  type response = {
    @ocaml.doc("<p>The Network Access Scope content.</p>") @as("NetworkInsightsAccessScopeContent")
    networkInsightsAccessScopeContent: option<networkInsightsAccessScopeContent>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetNetworkInsightsAccessScopeContentCommand"
  let make = (~networkInsightsAccessScopeId, ~dryRun=?, ()) =>
    new({dryRun: dryRun, networkInsightsAccessScopeId: networkInsightsAccessScopeId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetNetworkInsightsAccessScopeAnalysisFindings = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
   To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<networkInsightsMaxResults>,
    @ocaml.doc("<p>The ID of the Network Access Scope analysis.</p>")
    @as("NetworkInsightsAccessScopeAnalysisId")
    networkInsightsAccessScopeAnalysisId: networkInsightsAccessScopeAnalysisId,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The findings associated with Network Access Scope Analysis.</p>")
    @as("AnalysisFindings")
    analysisFindings: option<accessScopeAnalysisFindingList>,
    @ocaml.doc("<p>The status of Network Access Scope Analysis.</p>") @as("AnalysisStatus")
    analysisStatus: option<analysisStatus>,
    @ocaml.doc("<p>The ID of the Network Access Scope analysis.</p>")
    @as("NetworkInsightsAccessScopeAnalysisId")
    networkInsightsAccessScopeAnalysisId: option<networkInsightsAccessScopeAnalysisId>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "GetNetworkInsightsAccessScopeAnalysisFindingsCommand"
  let make = (~networkInsightsAccessScopeAnalysisId, ~dryRun=?, ~nextToken=?, ~maxResults=?, ()) =>
    new({
      dryRun: dryRun,
      nextToken: nextToken,
      maxResults: maxResults,
      networkInsightsAccessScopeAnalysisId: networkInsightsAccessScopeAnalysisId,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeVpnConnections = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeVpnConnections.</p>")
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more VPN connection IDs.</p>
        <p>Default: Describes your VPN connections.</p>")
    @as("VpnConnectionIds")
    vpnConnectionIds: option<vpnConnectionIdStringList>,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                  <code>customer-gateway-configuration</code> - The configuration information
                    for the customer gateway.</p>
            </li>
            <li>
                <p>
                  <code>customer-gateway-id</code> - The ID of a customer gateway associated
                    with the VPN connection.</p>
            </li>
            <li>
                <p>
                  <code>state</code> - The state of the VPN connection (<code>pending</code> |
                        <code>available</code> | <code>deleting</code> |
                    <code>deleted</code>).</p>
            </li>
            <li>
                <p>
                  <code>option.static-routes-only</code> - Indicates whether the connection has
                    static routes only. Used for devices that do not support Border Gateway Protocol
                    (BGP).</p>
            </li>
            <li>
                <p>
                  <code>route.destination-cidr-block</code> - The destination CIDR block. This
                    corresponds to the subnet used in a customer data center.</p>
            </li>
            <li>
                <p>
                  <code>bgp-asn</code> - The BGP Autonomous System Number (ASN) associated with
                    a BGP device.</p>
            </li>
            <li> 
               <p>
                  <code>tag</code>:<key> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> 
            </li>
            <li> 
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> 
            </li>
            <li>
                <p>
                  <code>type</code> - The type of VPN connection. Currently the only supported
                    type is <code>ipsec.1</code>.</p>
            </li>
            <li>
                <p>
                  <code>vpn-connection-id</code> - The ID of the VPN connection.</p>
            </li>
            <li>
                <p>
                  <code>vpn-gateway-id</code> - The ID of a virtual private gateway associated
                    with the VPN connection.</p>
            </li>
            <li>
                <p>
                  <code>transit-gateway-id</code> - The ID of a transit gateway associated with
                    the VPN connection.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  @ocaml.doc("<p>Contains the output of DescribeVpnConnections.</p>")
  type response = {
    @ocaml.doc("<p>Information about one or more VPN connections.</p>") @as("VpnConnections")
    vpnConnections: option<vpnConnectionList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeVpnConnectionsCommand"
  let make = (~dryRun=?, ~vpnConnectionIds=?, ~filters=?, ()) =>
    new({dryRun: dryRun, vpnConnectionIds: vpnConnectionIds, filters: filters})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeSpotInstanceRequests = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeSpotInstanceRequests.</p>")
  type request = {
    @ocaml.doc("<p>The maximum number of results to return in a single call. Specify a value between 5
            and 1000. To retrieve the remaining results, make another call with the returned
                <code>NextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>The token to request the next set of results. This value is <code>null</code> when
            there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>One or more Spot Instance request IDs.</p>") @as("SpotInstanceRequestIds")
    spotInstanceRequestIds: option<spotInstanceRequestIdList>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                  <code>availability-zone-group</code> - The Availability Zone group.</p>
            </li>
            <li>
                <p>
                  <code>create-time</code> - The time stamp when the Spot Instance request was
                    created.</p>
            </li>
            <li>
                <p>
                  <code>fault-code</code> - The fault code related to the request.</p>
            </li>
            <li>
                <p>
                  <code>fault-message</code> - The fault message related to the request.</p>
            </li>
            <li>
                <p>
                  <code>instance-id</code> - The ID of the instance that fulfilled the
                    request.</p>
            </li>
            <li>
                <p>
                  <code>launch-group</code> - The Spot Instance launch group.</p>
            </li>
            <li>
                <p>
                  <code>launch.block-device-mapping.delete-on-termination</code> - Indicates
                    whether the EBS volume is deleted on instance termination.</p>
            </li>
            <li>
                <p>
                  <code>launch.block-device-mapping.device-name</code> - The device name for the
                    volume in the block device mapping (for example, <code>/dev/sdh</code> or
                        <code>xvdh</code>).</p>
            </li>
            <li>
                <p>
                  <code>launch.block-device-mapping.snapshot-id</code> - The ID of the snapshot
                    for the EBS volume.</p>
            </li>
            <li>
                <p>
                  <code>launch.block-device-mapping.volume-size</code> - The size of the EBS
                    volume, in GiB.</p>
            </li>
            <li>
                <p>
                  <code>launch.block-device-mapping.volume-type</code> - The type of EBS volume:
                        <code>gp2</code> for General Purpose SSD, <code>io1</code> or
                        <code>io2</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput
                    Optimized HDD, <code>sc1</code>for Cold HDD, or <code>standard</code> for
                    Magnetic.</p>
            </li>
            <li>
                <p>
                  <code>launch.group-id</code> - The ID of the security group for the
                    instance.</p>
            </li>
            <li>
                <p>
                  <code>launch.group-name</code> - The name of the security group for the
                    instance.</p>
            </li>
            <li>
                <p>
                  <code>launch.image-id</code> - The ID of the AMI.</p>
            </li>
            <li>
                <p>
                  <code>launch.instance-type</code> - The type of instance (for example,
                        <code>m3.medium</code>).</p>
            </li>
            <li>
                <p>
                  <code>launch.kernel-id</code> - The kernel ID.</p>
            </li>
            <li>
                <p>
                  <code>launch.key-name</code> - The name of the key pair the instance launched
                    with.</p>
            </li>
            <li>
                <p>
                  <code>launch.monitoring-enabled</code> - Whether detailed monitoring is
                    enabled for the Spot Instance.</p>
            </li>
            <li>
                <p>
                  <code>launch.ramdisk-id</code> - The RAM disk ID.</p>
            </li>
            <li>
                <p>
                  <code>launched-availability-zone</code> - The Availability Zone in which the
                    request is launched.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.addresses.primary</code> - Indicates whether the IP
                    address is the primary private IP address.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.delete-on-termination</code> - Indicates whether the
                    network interface is deleted when the instance is terminated.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.description</code> - A description of the network
                    interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.device-index</code> - The index of the device for the
                    network interface attachment on the instance.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.group-id</code> - The ID of the security group
                    associated with the network interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.network-interface-id</code> - The ID of the network
                    interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.private-ip-address</code> - The primary private IP
                    address of the network interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.subnet-id</code> - The ID of the subnet for the
                    instance.</p>
            </li>
            <li>
                <p>
                  <code>product-description</code> - The product description associated with the
                    instance (<code>Linux/UNIX</code> | <code>Windows</code>).</p>
            </li>
            <li>
                <p>
                  <code>spot-instance-request-id</code> - The Spot Instance request ID.</p>
            </li>
            <li>
                <p>
                  <code>spot-price</code> - The maximum hourly price for any Spot Instance
                    launched to fulfill the request.</p>
            </li>
            <li>
                <p>
                  <code>state</code> - The state of the Spot Instance request (<code>open</code>
                    | <code>active</code> | <code>closed</code> | <code>cancelled</code> |
                        <code>failed</code>). Spot request status information can help you track
                    your Amazon EC2 Spot Instance requests. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html\">Spot
                        request status</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
            </li>
            <li>
                <p>
                  <code>status-code</code> - The short code describing the most recent
                    evaluation of your Spot Instance request.</p>
            </li>
            <li>
                <p>
                  <code>status-message</code> - The message explaining the status of the Spot
                    Instance request.</p>
            </li>
            <li> 
               <p>
                  <code>tag:<key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> 
            </li>
            <li> 
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> 
            </li>
            <li>
                <p>
                  <code>type</code> - The type of Spot Instance request (<code>one-time</code> |
                        <code>persistent</code>).</p>
            </li>
            <li>
                <p>
                  <code>valid-from</code> - The start date of the request.</p>
            </li>
            <li>
                <p>
                  <code>valid-until</code> - The end date of the request.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  @ocaml.doc("<p>Contains the output of DescribeSpotInstanceRequests.</p>")
  type response = {
    @ocaml.doc("<p>The token to use to retrieve the next set of results. This value is <code>null</code>
            when there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>One or more Spot Instance requests.</p>") @as("SpotInstanceRequests")
    spotInstanceRequests: option<spotInstanceRequestList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeSpotInstanceRequestsCommand"
  let make = (~maxResults=?, ~nextToken=?, ~spotInstanceRequestIds=?, ~dryRun=?, ~filters=?, ()) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      spotInstanceRequestIds: spotInstanceRequestIds,
      dryRun: dryRun,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeNetworkInsightsAnalyses = {
  type t
  type request = {
    @ocaml.doc("<p>The token for the next page of results.</p>") @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The maximum number of results to return with a single call.
   To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<networkInsightsMaxResults>,
    @ocaml.doc("<p>The filters. The following are the possible values:</p>
         <ul>
            <li>
               <p>PathFound - A Boolean value that indicates whether a feasible path is found.</p>
            </li>
            <li>
               <p>Status - The status of the analysis (running | succeeded | failed).</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The time when the network insights analyses ended.</p>") @as("AnalysisEndTime")
    analysisEndTime: option<millisecondDateTime>,
    @ocaml.doc("<p>The time when the network insights analyses started.</p>")
    @as("AnalysisStartTime")
    analysisStartTime: option<millisecondDateTime>,
    @ocaml.doc("<p>The ID of the path. You must specify either a path ID or analysis IDs.</p>")
    @as("NetworkInsightsPathId")
    networkInsightsPathId: option<networkInsightsPathId>,
    @ocaml.doc(
      "<p>The ID of the network insights analyses. You must specify either analysis IDs or a path ID.</p>"
    )
    @as("NetworkInsightsAnalysisIds")
    networkInsightsAnalysisIds: option<networkInsightsAnalysisIdList>,
  }
  type response = {
    @ocaml.doc(
      "<p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the network insights analyses.</p>")
    @as("NetworkInsightsAnalyses")
    networkInsightsAnalyses: option<networkInsightsAnalysisList>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeNetworkInsightsAnalysesCommand"
  let make = (
    ~nextToken=?,
    ~dryRun=?,
    ~maxResults=?,
    ~filters=?,
    ~analysisEndTime=?,
    ~analysisStartTime=?,
    ~networkInsightsPathId=?,
    ~networkInsightsAnalysisIds=?,
    (),
  ) =>
    new({
      nextToken: nextToken,
      dryRun: dryRun,
      maxResults: maxResults,
      filters: filters,
      analysisEndTime: analysisEndTime,
      analysisStartTime: analysisStartTime,
      networkInsightsPathId: networkInsightsPathId,
      networkInsightsAnalysisIds: networkInsightsAnalysisIds,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeLaunchTemplateVersions = {
  type t
  type request = {
    @ocaml.doc("<p>One or more filters.</p>
        <ul>
            <li>
                <p>
                  <code>create-time</code> - The time the launch template version was
                    created.</p>
            </li>
            <li>
                <p>
                  <code>ebs-optimized</code> - A boolean that indicates whether the instance is
                    optimized for Amazon EBS I/O.</p>
            </li>
            <li>
                <p>
                  <code>http-endpoint</code> - Indicates whether the HTTP metadata endpoint on
                    your instances is enabled (<code>enabled</code> | <code>disabled</code>).</p>
            </li>
            <li>
                <p>
                  <code>http-protocol-ipv4</code> - Indicates whether the IPv4 endpoint for the
                    instance metadata service is enabled (<code>enabled</code> |
                        <code>disabled</code>).</p>
            </li>
            <li>
                <p>
                  <code>host-resource-group-arn</code> - The ARN of the host resource group in
                    which to launch the instances.</p>
            </li>
            <li>
                <p>
                  <code>http-tokens</code> - The state of token usage for your instance metadata
                    requests (<code>optional</code> | <code>required</code>).</p>
            </li>
            <li>
                <p>
                  <code>iam-instance-profile</code> - The ARN of the IAM instance
                    profile.</p>
            </li>
            <li>
                <p>
                  <code>image-id</code> - The ID of the AMI.</p>
            </li>
            <li>
                <p>
                  <code>instance-type</code> - The instance type.</p>
            </li>
            <li>
                <p>
                  <code>is-default-version</code> - A boolean that indicates whether the launch
                    template version is the default version.</p>
            </li>
            <li>
                <p>
                  <code>kernel-id</code> - The kernel ID.</p>
            </li>
            <li>
                <p>
                  <code>license-configuration-arn</code> - The ARN of the license
                    configuration.</p>
            </li>
            <li>
                <p>
                  <code>network-card-index</code> - The index of the network card.</p>
            </li>
            <li>
                <p>
                  <code>ram-disk-id</code> - The RAM disk ID.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. To retrieve the remaining
            results, make another call with the returned <code>NextToken</code> value. This value
            can be between 1 and 200.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>The token to request the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The version number up to which to describe launch template versions.</p>")
    @as("MaxVersion")
    maxVersion: option<string_>,
    @ocaml.doc("<p>The version number after which to describe launch template versions.</p>")
    @as("MinVersion")
    minVersion: option<string_>,
    @ocaml.doc("<p>One or more versions of the launch template. Valid values depend on whether you are
            describing a specified launch template (by ID or name) or all launch templates in your
            account.</p>
        <p>To describe one or more versions of a specified launch template, valid values are
                <code>$Latest</code>, <code>$Default</code>, and numbers.</p>
        <p>To describe all launch templates in your account that are defined as the latest
            version, the valid value is <code>$Latest</code>. To describe all launch templates in
            your account that are defined as the default version, the valid value is
                <code>$Default</code>. You can specify <code>$Latest</code> and
                <code>$Default</code> in the same call. You cannot specify numbers.</p>")
    @as("Versions")
    versions: option<versionStringList>,
    @ocaml.doc("<p>The name of the launch template. To describe one or more versions of a specified
            launch template, you must specify either the launch template ID or the launch template
            name in the request. To describe all the latest or default launch template versions in
            your account, you must omit this parameter.</p>")
    @as("LaunchTemplateName")
    launchTemplateName: option<launchTemplateName>,
    @ocaml.doc("<p>The ID of the launch template. To describe one or more versions of a specified launch
            template, you must specify either the launch template ID or the launch template name in
            the request. To describe all the latest or default launch template versions in your
            account, you must omit this parameter.</p>")
    @as("LaunchTemplateId")
    launchTemplateId: option<launchTemplateId>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>The token to use to retrieve the next page of results. This value is <code>null</code>
            when there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the launch template versions.</p>")
    @as("LaunchTemplateVersions")
    launchTemplateVersions: option<launchTemplateVersionSet>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeLaunchTemplateVersionsCommand"
  let make = (
    ~filters=?,
    ~maxResults=?,
    ~nextToken=?,
    ~maxVersion=?,
    ~minVersion=?,
    ~versions=?,
    ~launchTemplateName=?,
    ~launchTemplateId=?,
    ~dryRun=?,
    (),
  ) =>
    new({
      filters: filters,
      maxResults: maxResults,
      nextToken: nextToken,
      maxVersion: maxVersion,
      minVersion: minVersion,
      versions: versions,
      launchTemplateName: launchTemplateName,
      launchTemplateId: launchTemplateId,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateNetworkInsightsAccessScope = {
  type t
  type request = {
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The tags to apply.</p>") @as("TagSpecifications")
    tagSpecifications: option<tagSpecificationList>,
    @ocaml.doc("<p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, 
   see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.</p>")
    @as("ClientToken")
    clientToken: string_,
    @ocaml.doc("<p>The paths to exclude.</p>") @as("ExcludePaths")
    excludePaths: option<accessScopePathListRequest>,
    @ocaml.doc("<p>The paths to match.</p>") @as("MatchPaths")
    matchPaths: option<accessScopePathListRequest>,
  }
  type response = {
    @ocaml.doc("<p>The Network Access Scope content.</p>") @as("NetworkInsightsAccessScopeContent")
    networkInsightsAccessScopeContent: option<networkInsightsAccessScopeContent>,
    @ocaml.doc("<p>The Network Access Scope.</p>") @as("NetworkInsightsAccessScope")
    networkInsightsAccessScope: option<networkInsightsAccessScope>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "CreateNetworkInsightsAccessScopeCommand"
  let make = (~clientToken, ~dryRun=?, ~tagSpecifications=?, ~excludePaths=?, ~matchPaths=?, ()) =>
    new({
      dryRun: dryRun,
      tagSpecifications: tagSpecifications,
      clientToken: clientToken,
      excludePaths: excludePaths,
      matchPaths: matchPaths,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeFleets = {
  type t
  type request = {
    @ocaml.doc("<p>The filters.</p>
         <ul>
            <li>
               <p>
                  <code>activity-status</code> - The progress of the EC2 Fleet ( <code>error</code> |
                  <code>pending-fulfillment</code> | <code>pending-termination</code> |
                  <code>fulfilled</code>).</p>
            </li>
            <li>
               <p>
                  <code>excess-capacity-termination-policy</code> - Indicates whether to terminate
               running instances if the target capacity is decreased below the current EC2 Fleet size
                  (<code>true</code> | <code>false</code>).</p>
            </li>
            <li>
               <p>
                  <code>fleet-state</code> - The state of the EC2 Fleet (<code>submitted</code> |
                  <code>active</code> | <code>deleted</code> | <code>failed</code> |
                  <code>deleted-running</code> | <code>deleted-terminating</code> |
                  <code>modifying</code>).</p>
            </li>
            <li>
               <p>
                  <code>replace-unhealthy-instances</code> - Indicates whether EC2 Fleet should replace
               unhealthy instances (<code>true</code> | <code>false</code>).</p>
            </li>
            <li>
               <p>
                  <code>type</code> - The type of request (<code>instant</code> |
                  <code>request</code> | <code>maintain</code>).</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
    @ocaml.doc("<p>The IDs of the EC2 Fleets.</p>
         <note>
            <p>If a fleet is of type <code>instant</code>, you must specify the fleet ID, otherwise
            it does not appear in the response.</p>
         </note>")
    @as("FleetIds")
    fleetIds: option<fleetIdSet>,
    @ocaml.doc("<p>The token for the next set of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. Specify a value between 1 and
         1000. The default value is 1000. To retrieve the remaining results, make another call with
         the returned <code>NextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  type response = {
    @ocaml.doc("<p>Information about the EC2 Fleets.</p>") @as("Fleets") fleets: option<fleetSet>,
    @ocaml.doc("<p>The token for the next set of results.</p>") @as("NextToken")
    nextToken: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeFleetsCommand"
  let make = (~filters=?, ~fleetIds=?, ~nextToken=?, ~maxResults=?, ~dryRun=?, ()) =>
    new({
      filters: filters,
      fleetIds: fleetIds,
      nextToken: nextToken,
      maxResults: maxResults,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeSpotFleetRequests = {
  type t
  @ocaml.doc("<p>Contains the parameters for DescribeSpotFleetRequests.</p>")
  type request = {
    @ocaml.doc("<p>The IDs of the Spot Fleet requests.</p>") @as("SpotFleetRequestIds")
    spotFleetRequestIds: option<spotFleetRequestIdList>,
    @ocaml.doc("<p>The token for the next set of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. Specify a value between 1
            and 1000. The default value is 1000. To retrieve the remaining results, make another
            call with the returned <code>NextToken</code> value.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually
            making the request, and provides an error response. If you have the required
            permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is
                <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
  }
  @ocaml.doc("<p>Contains the output of DescribeSpotFleetRequests.</p>")
  type response = {
    @ocaml.doc("<p>Information about the configuration of your Spot Fleet.</p>")
    @as("SpotFleetRequestConfigs")
    spotFleetRequestConfigs: option<spotFleetRequestConfigSet>,
    @ocaml.doc("<p>The token required to retrieve the next set of results. This value is
                <code>null</code> when there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
  }
  @module("@aws-sdk/client-ec2") @new
  external new: request => t = "DescribeSpotFleetRequestsCommand"
  let make = (~spotFleetRequestIds=?, ~nextToken=?, ~maxResults=?, ~dryRun=?, ()) =>
    new({
      spotFleetRequestIds: spotFleetRequestIds,
      nextToken: nextToken,
      maxResults: maxResults,
      dryRun: dryRun,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeInstances = {
  type t
  type request = {
    @ocaml.doc("<p>The token to request the next page of results.</p>") @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The maximum number of results to return in a single call. To retrieve the remaining
            results, make another call with the returned <code>NextToken</code> value. This value
            can be between 5 and 1000. You cannot specify this parameter and the instance IDs
            parameter in the same call.</p>")
    @as("MaxResults")
    maxResults: option<integer_>,
    @ocaml.doc("<p>Checks whether you have the required permissions for the action, without actually making the request, 
   and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. 
   Otherwise, it is <code>UnauthorizedOperation</code>.</p>")
    @as("DryRun")
    dryRun: option<boolean_>,
    @ocaml.doc("<p>The instance IDs.</p>
        <p>Default: Describes all your instances.</p>")
    @as("InstanceIds")
    instanceIds: option<instanceIdStringList>,
    @ocaml.doc("<p>The filters.</p>
        <ul>
            <li>
                <p>
                    <code>affinity</code> - The affinity setting for an instance running on a
                    Dedicated Host (<code>default</code> | <code>host</code>).</p>
            </li>
            <li>
                <p>
                    <code>architecture</code> - The instance architecture (<code>i386</code> |
                        <code>x86_64</code> | <code>arm64</code>).</p>
            </li>
            <li>
                <p>
                    <code>availability-zone</code> - The Availability Zone of the instance.</p>
            </li>
            <li>
                <p>
                    <code>block-device-mapping.attach-time</code> - The attach time for an EBS
                    volume mapped to the instance, for example,
                        <code>2010-09-15T17:15:20.000Z</code>.</p>
            </li>
            <li>
                <p>
                    <code>block-device-mapping.delete-on-termination</code> - A Boolean that
                    indicates whether the EBS volume is deleted on instance termination.</p>
            </li>
            <li>
                <p>
                    <code>block-device-mapping.device-name</code> - The device name specified in the
                    block device mapping (for example, <code>/dev/sdh</code> or
                    <code>xvdh</code>).</p>
            </li>
            <li>
                <p>
                    <code>block-device-mapping.status</code> - The status for the EBS volume
                        (<code>attaching</code> | <code>attached</code> | <code>detaching</code> |
                        <code>detached</code>).</p>
            </li>
            <li>
                <p>
                    <code>block-device-mapping.volume-id</code> - The volume ID of the EBS
                    volume.</p>
            </li>
            <li>
                <p>
                    <code>client-token</code> - The idempotency token you provided when you launched
                    the instance.</p>
            </li>
            <li>
                <p>
                  <code>dns-name</code> - The public DNS name of the instance.</p>
            </li>
            <li>
                <p>
                  <code>group-id</code> - The ID of the security group for the instance.
                    EC2-Classic only.</p>
            </li>
            <li>
                <p>
                  <code>group-name</code> - The name of the security group for the instance.
                    EC2-Classic only.</p>
            </li>
            <li>
                <p>
                  <code>hibernation-options.configured</code> - A Boolean that indicates whether
                    the instance is enabled for hibernation. A value of <code>true</code> means that
                    the instance is enabled for hibernation. </p>
            </li>
            <li>
                <p>
                  <code>host-id</code> - The ID of the Dedicated Host on which the instance is
                    running, if applicable.</p>
            </li>
            <li>
                <p>
                  <code>hypervisor</code> - The hypervisor type of the instance
                        (<code>ovm</code> | <code>xen</code>). The value <code>xen</code> is used
                    for both Xen and Nitro hypervisors.</p>
            </li>
            <li>
                <p>
                  <code>iam-instance-profile.arn</code> - The instance profile associated with
                    the instance. Specified as an ARN.</p>
            </li>
            <li>
                <p>
                  <code>image-id</code> - The ID of the image used to launch the
                    instance.</p>
            </li>
            <li>
                <p>
                  <code>instance-id</code> - The ID of the instance.</p>
            </li>
            <li>
                <p>
                  <code>instance-lifecycle</code> - Indicates whether this is a Spot Instance or
                    a Scheduled Instance (<code>spot</code> | <code>scheduled</code>).</p>
            </li>
            <li>
                <p>
                  <code>instance-state-code</code> - The state of the instance, as a 16-bit
                    unsigned integer. The high byte is used for internal purposes and should be
                    ignored. The low byte is set based on the state represented. The valid values
                    are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64
                    (stopping), and 80 (stopped).</p>
            </li>
            <li>
                <p>
                  <code>instance-state-name</code> - The state of the instance
                        (<code>pending</code> | <code>running</code> | <code>shutting-down</code> |
                        <code>terminated</code> | <code>stopping</code> |
                    <code>stopped</code>).</p>
            </li>
            <li>
                <p>
                  <code>instance-type</code> - The type of instance (for example,
                        <code>t2.micro</code>).</p>
            </li>
            <li>
                <p>
                  <code>instance.group-id</code> - The ID of the security group for the
                    instance. </p>
            </li>
            <li>
                <p>
                  <code>instance.group-name</code> - The name of the security group for the
                    instance. </p>
            </li>
            <li>
                <p>
                  <code>ip-address</code> - The public IPv4 address of the instance.</p>
            </li>
            <li>
                <p>
                  <code>kernel-id</code> - The kernel ID.</p>
            </li>
            <li>
                <p>
                  <code>key-name</code> - The name of the key pair used when the instance was
                    launched.</p>
            </li>
            <li>
                <p>
                  <code>launch-index</code> - When launching multiple instances, this is the
                    index for the instance in the launch group (for example, 0, 1, 2, and so on).
                </p>
            </li>
            <li>
                <p>
                  <code>launch-time</code> - The time when the instance was launched, in the ISO
                    8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example,
                        <code>2021-09-29T11:04:43.305Z</code>. You can use a wildcard
                        (<code>*</code>), for example, <code>2021-09-29T*</code>, which matches an
                    entire day.</p>
            </li>
            <li>
                <p>
                  <code>metadata-options.http-tokens</code> - The metadata request authorization
                    state (<code>optional</code> | <code>required</code>)</p>
            </li>
            <li>
                <p>
                  <code>metadata-options.http-put-response-hop-limit</code> - The http metadata
                    request put response hop limit (integer, possible values <code>1</code> to
                        <code>64</code>)</p>
            </li>
            <li>
                <p>
                  <code>metadata-options.http-endpoint</code> - Enable or disable metadata
                    access on http endpoint (<code>enabled</code> | <code>disabled</code>)</p>
            </li>
            <li>
                <p>
                  <code>monitoring-state</code> - Indicates whether detailed monitoring is
                    enabled (<code>disabled</code> | <code>enabled</code>).</p>
            </li>
            <li>
                <p>
                  <code>network-interface.addresses.private-ip-address</code> - The private IPv4
                    address associated with the network interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.addresses.primary</code> - Specifies whether the IPv4
                    address of the network interface is the primary private IPv4 address.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.addresses.association.public-ip</code> - The ID of the
                    association of an Elastic IP address (IPv4) with a network interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.addresses.association.ip-owner-id</code> - The owner
                    ID of the private IPv4 address associated with the network interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.association.public-ip</code> - The address of the
                    Elastic IP address (IPv4) bound to the network interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.association.ip-owner-id</code> - The owner of the
                    Elastic IP address (IPv4) associated with the network interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.association.allocation-id</code> - The allocation ID
                    returned when you allocated the Elastic IP address (IPv4) for your network
                    interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.association.association-id</code> - The association ID
                    returned when the network interface was associated with an IPv4 address.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.attachment.attachment-id</code> - The ID of the
                    interface attachment.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.attachment.instance-id</code> - The ID of the instance
                    to which the network interface is attached.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.attachment.instance-owner-id</code> - The owner ID of
                    the instance to which the network interface is attached.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.attachment.device-index</code> - The device index to
                    which the network interface is attached.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.attachment.status</code> - The status of the
                    attachment (<code>attaching</code> | <code>attached</code> |
                        <code>detaching</code> | <code>detached</code>).</p>
            </li>
            <li>
                <p>
                  <code>network-interface.attachment.attach-time</code> - The time that the
                    network interface was attached to an instance.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.attachment.delete-on-termination</code> - Specifies
                    whether the attachment is deleted when an instance is terminated.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.availability-zone</code> - The Availability Zone for
                    the network interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.description</code> - The description of the network
                    interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.group-id</code> - The ID of a security group
                    associated with the network interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.group-name</code> - The name of a security group
                    associated with the network interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.ipv6-addresses.ipv6-address</code> - The IPv6 address
                    associated with the network interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.mac-address</code> - The MAC address of the network
                    interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.network-interface-id</code> - The ID of the network
                    interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.owner-id</code> - The ID of the owner of the network
                    interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.private-dns-name</code> - The private DNS name of the
                    network interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.requester-id</code> - The requester ID for the network
                    interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.requester-managed</code> - Indicates whether the
                    network interface is being managed by Amazon Web Services.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.status</code> - The status of the network interface
                        (<code>available</code>) | <code>in-use</code>).</p>
            </li>
            <li>
                <p>
                  <code>network-interface.source-dest-check</code> - Whether the network
                    interface performs source/destination checking. A value of <code>true</code>
                    means that checking is enabled, and <code>false</code> means that checking is
                    disabled. The value must be <code>false</code> for the network interface to
                    perform network address translation (NAT) in your VPC.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.subnet-id</code> - The ID of the subnet for the
                    network interface.</p>
            </li>
            <li>
                <p>
                  <code>network-interface.vpc-id</code> - The ID of the VPC for the network
                    interface.</p>
            </li>
            <li>
                <p>
                  <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the
                    Outpost.</p>
            </li>
            <li>
                <p>
                    <code>owner-id</code> - The Amazon Web Services account ID of the instance
                    owner.</p>
            </li>
            <li>
                <p>
                    <code>placement-group-name</code> - The name of the placement group for the
                    instance.</p>
            </li>
            <li>
                <p>
                    <code>placement-partition-number</code> - The partition in which the instance is
                    located.</p>
            </li>
            <li>
                <p>
                    <code>platform</code> - The platform. To list only Windows instances, use
                        <code>windows</code>.</p>
            </li>
            <li>
                <p>
                    <code>private-dns-name</code> - The private IPv4 DNS name of the
                    instance.</p>
            </li>
            <li>
                <p>
                    <code>private-ip-address</code> - The private IPv4 address of the
                    instance.</p>
            </li>
            <li>
                <p>
                    <code>product-code</code> - The product code associated with the AMI used to
                    launch the instance.</p>
            </li>
            <li>
                <p>
                    <code>product-code.type</code> - The type of product code (<code>devpay</code> |
                        <code>marketplace</code>).</p>
            </li>
            <li>
                <p>
                    <code>ramdisk-id</code> - The RAM disk ID.</p>
            </li>
            <li>
                <p>
                    <code>reason</code> - The reason for the current state of the instance (for
                    example, shows \"User Initiated [date]\" when you stop or terminate the instance).
                    Similar to the state-reason-code filter.</p>
            </li>
            <li>
                <p>
                    <code>requester-id</code> - The ID of the entity that launched the instance on
                    your behalf (for example, Amazon Web Services Management Console, Auto Scaling, and so
                    on).</p>
            </li>
            <li>
                <p>
                    <code>reservation-id</code> - The ID of the instance's reservation. A
                    reservation ID is created any time you launch an instance. A reservation ID has
                    a one-to-one relationship with an instance launch request, but can be associated
                    with more than one instance if you launch multiple instances using the same
                    launch request. For example, if you launch one instance, you get one reservation
                    ID. If you launch ten instances using the same launch request, you also get one
                    reservation ID.</p>
            </li>
            <li>
                <p>
                    <code>root-device-name</code> - The device name of the root device volume (for
                    example, <code>/dev/sda1</code>).</p>
            </li>
            <li>
                <p>
                    <code>root-device-type</code> - The type of the root device volume
                        (<code>ebs</code> | <code>instance-store</code>).</p>
            </li>
            <li>
                <p>
                    <code>source-dest-check</code> - Indicates whether the instance performs
                    source/destination checking. A value of <code>true</code> means that checking is
                    enabled, and <code>false</code> means that checking is disabled. The value must
                    be <code>false</code> for the instance to perform network address translation
                    (NAT) in your VPC. </p>
            </li>
            <li>
                <p>
                    <code>spot-instance-request-id</code> - The ID of the Spot Instance
                    request.</p>
            </li>
            <li>
                <p>
                    <code>state-reason-code</code> - The reason code for the state change.</p>
            </li>
            <li>
                <p>
                    <code>state-reason-message</code> - A message that describes the state
                    change.</p>
            </li>
            <li>
                <p>
                    <code>subnet-id</code> - The ID of the subnet for the instance.</p>
            </li>
            <li>
               <p>
                  <code>tag:<key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value.
    For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
            </li>
            <li>
               <p>
                  <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.</p>
            </li>
            <li>
                <p>
                    <code>tenancy</code> - The tenancy of an instance (<code>dedicated</code> |
                        <code>default</code> | <code>host</code>).</p>
            </li>
            <li>
                <p>
                    <code>virtualization-type</code> - The virtualization type of the instance
                        (<code>paravirtual</code> | <code>hvm</code>).</p>
            </li>
            <li>
                <p>
                    <code>vpc-id</code> - The ID of the VPC that the instance is running in.</p>
            </li>
         </ul>")
    @as("Filters")
    filters: option<filterList>,
  }
  type response = {
    @ocaml.doc("<p>The token to use to retrieve the next page of results. This value is <code>null</code>
            when there are no more results to return.</p>")
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>Information about the reservations.</p>") @as("Reservations")
    reservations: option<reservationList>,
  }
  @module("@aws-sdk/client-ec2") @new external new: request => t = "DescribeInstancesCommand"
  let make = (~nextToken=?, ~maxResults=?, ~dryRun=?, ~instanceIds=?, ~filters=?, ()) =>
    new({
      nextToken: nextToken,
      maxResults: maxResults,
      dryRun: dryRun,
      instanceIds: instanceIds,
      filters: filters,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
