type responseMetadata = {
  httpStatusCode: option<float>,
  requestId: option<string>,
  extendedRequestId: option<string>,
  cfId: option<string>,
  attempts: option<int>,
  totalRetryDelay: option<int>,
}
type awsServiceClient
@module("@aws-sdk/client-ses") @new
external createClient: unit => awsServiceClient = "PinpointEmailClient"
type baseString = string
type baseBoolean = bool
type baseInteger = int
type baseTimestamp = Js.Date.t
type baseLong = float
@ocaml.doc("<p>The warmup status of a dedicated IP.</p>")
type warmupStatus = [@as("DONE") #DONE | @as("IN_PROGRESS") #IN_PROGRESS]
@ocaml.doc("<p>An object that contains information about inbox placement volume.</p>")
type volume = float
@ocaml.doc("<p>Specifies whether messages that use the configuration set are required to use
            Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only
            delivered if a TLS connection can be established. If the value is <code>Optional</code>,
            messages can be delivered in plain text if a TLS connection can't be established.</p>")
type tlsPolicy = [@as("OPTIONAL") #OPTIONAL | @as("REQUIRE") #REQUIRE]
type timestamp_ = Js.Date.t
type templateData = string
type templateArn = string
type tagValue = string
type tagKey = string
type subject = string
type sentLast24Hours = float
@ocaml.doc("<p>The name of the dedicated IP pool that you want to associate with the configuration
            set.</p>")
type sendingPoolName = string
@ocaml.doc(
  "<p>A name that helps you identify a report generated by the Deliverability dashboard.</p>"
)
type reportName = string
@ocaml.doc("<p>A unique string that identifies a Deliverability dashboard report.</p>")
type reportId = string
@ocaml.doc("<p>The name of a blacklist that an IP address was found on.</p>") type rblName = string
@ocaml.doc("<p>The raw email message. The message has to meet the following criteria:</p>
        <ul>
            <li>
                <p>The message has to contain a header and a body, separated by one blank
                    line.</p>
            </li>
            <li>
                <p>All of the required header fields must be present in the message.</p>
            </li>
            <li>
                <p>Each part of a multipart MIME message must be formatted properly.</p>
            </li>
            <li>
                <p>Attachments must be in a file format that Amazon Pinpoint supports.
                    </p>
            </li>
            <li>
                <p>The entire message must be Base64 encoded.</p>
            </li>
            <li>
                <p>If any of the MIME parts in your message contain content that is outside of
                    the 7-bit ASCII character range, you should encode that content to ensure that
                    recipients' email clients render the message properly.</p>
            </li>
            <li>
                <p>The length of any single line of text in the message can't exceed 1,000
                    characters. This restriction is defined in <a href=\"https://tools.ietf.org/html/rfc5321\">RFC 5321</a>.</p>
            </li>
         </ul>")
type rawMessageData = NodeJs.Buffer.t
@ocaml.doc("<p>The name of a dedicated IP pool.</p>") type poolName = string
type percentage100Wrapper = int
@ocaml.doc("<p>An object that contains information about inbox placement percentages.</p>")
type percentage = float
type outboundMessageId = string
type nextToken = string
@ocaml.doc("<p>The value of the message tag. The message tag value has to meet the following
            criteria:</p>
        <ul>
            <li>
                <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9),
                    underscores (_), or dashes (-).</p>
            </li>
            <li>
                <p>It can contain no more than 256 characters.</p>
            </li>
         </ul>")
type messageTagValue = string
@ocaml.doc("<p>The name of the message tag. The message tag name has to meet the following
            criteria:</p>
        <ul>
            <li>
                <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9),
                    underscores (_), or dashes (-).</p>
            </li>
            <li>
                <p>It can contain no more than 256 characters.</p>
            </li>
         </ul>")
type messageTagName = string
type messageData = string
@ocaml.doc("<p>The body of an email message.</p>") type messageContent = string
type maxSendRate = float
type maxItems = int
type max24HourSend = float
@ocaml.doc("<p>The status of the MAIL FROM domain. This status can have the following values:</p>
        <ul>
            <li>
                <p>
                  <code>PENDING</code> – Amazon Pinpoint hasn't started searching for the MX record
                    yet.</p>
            </li>
            <li>
                <p>
                  <code>SUCCESS</code> – Amazon Pinpoint detected the required MX record for the
                    MAIL FROM domain.</p>
            </li>
            <li>
                <p>
                  <code>FAILED</code> – Amazon Pinpoint can't find the required MX record, or the
                    record no longer exists.</p>
            </li>
            <li>
                <p>
                  <code>TEMPORARY_FAILURE</code> – A temporary issue occurred, which
                    prevented Amazon Pinpoint from determining the status of the MAIL FROM domain.</p>
            </li>
         </ul>")
type mailFromDomainStatus = [
  | @as("TEMPORARY_FAILURE") #TEMPORARY_FAILURE
  | @as("FAILED") #FAILED
  | @as("SUCCESS") #SUCCESS
  | @as("PENDING") #PENDING
]
@ocaml.doc("<p>The domain that you want to use as a MAIL FROM domain.</p>")
type mailFromDomainName = string
@ocaml.doc("<p>The date and time (in Unix time) when the reputation metrics were last given a fresh
            start. When your account is given a fresh start, your reputation metrics are calculated
            starting from the date of the fresh start.</p>")
type lastFreshStart = Js.Date.t
@ocaml.doc("<p>The name of an email provider.</p>") type ispName = string
@ocaml.doc("<p>A dedicated IP address that is associated with your Amazon Pinpoint account.</p>")
type ip = string
type imageUrl = string
@ocaml.doc("<p>The email identity type. The identity type can be one of the following:</p>
        <ul>
            <li>
                <p>
                  <code>EMAIL_ADDRESS</code> – The identity is an email address.</p>
            </li>
            <li>
                <p>
                  <code>DOMAIN</code> – The identity is a domain.</p>
            </li>
         </ul>")
type identityType = [
  | @as("MANAGED_DOMAIN") #MANAGED_DOMAIN
  | @as("DOMAIN") #DOMAIN
  | @as("EMAIL_ADDRESS") #EMAIL_ADDRESS
]
type identity = string
type generalEnforcementStatus = string
@ocaml.doc("<p>An email sending event type. For example, email sends, opens, and bounces are all
            email events.</p>")
type eventType = [
  | @as("RENDERING_FAILURE") #RENDERING_FAILURE
  | @as("CLICK") #CLICK
  | @as("OPEN") #OPEN
  | @as("DELIVERY") #DELIVERY
  | @as("COMPLAINT") #COMPLAINT
  | @as("BOUNCE") #BOUNCE
  | @as("REJECT") #REJECT
  | @as("SEND") #SEND
]
@ocaml.doc("<p>The name of an event destination.</p>
        <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens,
            clicks, bounces, and complaints. <i>Event destinations</i> are places that
            you can send information about these events to. For example, you can send event data to
            Amazon SNS to receive notifications when you receive bounces or complaints, or you can use
            Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>")
type eventDestinationName = string
type esp = string
type errorMessage = string
type enabled = bool
type emailAddress = string
type domain = string
type dnsToken = string
@ocaml.doc("<p>The DKIM authentication status of the identity. The status can be one of the
            following:</p>
        <ul>
            <li>
                <p>
                  <code>PENDING</code> – The DKIM verification process was initiated, and
                    Amazon Pinpoint is still waiting for the required CNAME records to appear in the DNS
                    configuration for the domain.</p>
            </li>
            <li>
                <p>
                  <code>SUCCESS</code> – The DKIM authentication process completed
                    successfully.</p>
            </li>
            <li>
                <p>
                  <code>FAILED</code> – The DKIM authentication process failed. This can
                    happen when Amazon Pinpoint fails to find the required CNAME records in the DNS
                    configuration of the domain.</p>
            </li>
            <li>
                <p>
                  <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon Pinpoint
                    from determining the DKIM authentication status of the domain.</p>
            </li>
            <li>
                <p>
                  <code>NOT_STARTED</code> – The DKIM verification process hasn't been
                    initiated for the domain.</p>
            </li>
         </ul>")
type dkimStatus = [
  | @as("NOT_STARTED") #NOT_STARTED
  | @as("TEMPORARY_FAILURE") #TEMPORARY_FAILURE
  | @as("FAILED") #FAILED
  | @as("SUCCESS") #SUCCESS
  | @as("PENDING") #PENDING
]
@ocaml.doc("<p>The location where Amazon Pinpoint finds the value of a dimension to publish to Amazon CloudWatch. If you
            want Amazon Pinpoint to use the message tags that you specify using an X-SES-MESSAGE-TAGS header
            or a parameter to the SendEmail/SendRawEmail API, choose <code>messageTag</code>. If you
            want Amazon Pinpoint to use your own email headers, choose <code>emailHeader</code>. If you want
            Amazon Pinpoint to use link tags, choose <code>linkTags</code>.</p>")
type dimensionValueSource = [
  | @as("LINK_TAG") #LINK_TAG
  | @as("EMAIL_HEADER") #EMAIL_HEADER
  | @as("MESSAGE_TAG") #MESSAGE_TAG
]
@ocaml.doc("<p>The name of an Amazon CloudWatch dimension associated with an email sending metric. The name has to
            meet the following criteria:</p>
        <ul>
            <li>
                <p>It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_),
                    or dashes (-).</p>
            </li>
            <li>
                <p>It can contain no more than 256 characters.</p>
            </li>
         </ul>")
type dimensionName = string
@ocaml.doc(
  "<p>The subject line for an email that you submitted in a predictive inbox placement test.</p>"
)
type deliverabilityTestSubject = string
@ocaml.doc("<p>The status of a predictive inbox placement test. If the status is <code>IN_PROGRESS</code>, then the predictive inbox placement test is
            currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test.
            If the status is <code>COMPLETE</code>, then the test is finished, and you can use the
                <code>GetDeliverabilityTestReport</code> operation to view the results of the
            test.</p>")
type deliverabilityTestStatus = [@as("COMPLETED") #COMPLETED | @as("IN_PROGRESS") #IN_PROGRESS]
@ocaml.doc("<p>The current status of your Deliverability dashboard subscription. If this value is
                <code>PENDING_EXPIRATION</code>, your subscription is scheduled to expire at the end
            of the current calendar month.</p>")
type deliverabilityDashboardAccountStatus = [
  | @as("DISABLED") #DISABLED
  | @as("PENDING_EXPIRATION") #PENDING_EXPIRATION
  | @as("ACTIVE") #ACTIVE
]
@ocaml.doc("<p>The default value of the dimension that is published to Amazon CloudWatch if you don't provide the
            value of the dimension when you send an email. This value has to meet the following
            criteria:</p>
        <ul>
            <li>
                <p>It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_),
                    or dashes (-).</p>
            </li>
            <li>
                <p>It can contain no more than 256 characters.</p>
            </li>
         </ul>")
type defaultDimensionValue = string
@ocaml.doc("<p>The domain that you want to use for tracking open and click events.</p>")
type customRedirectDomain = string
@ocaml.doc("<p>The name of a configuration set.</p>
        <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can
            apply to the emails you send. You apply a configuration set to an email by including a
            reference to the configuration set in the headers of the email. When you apply a
            configuration set to an email, all of the rules in that configuration set are applied to
            the email.</p>")
type configurationSetName = string
type charset = string
type campaignId = string
@ocaml.doc("<p>A description of the blacklisting event.</p>") type blacklistingDescription = string
@ocaml.doc("<p>An IP address that you want to obtain blacklist information for.</p>")
type blacklistItemName = string
@ocaml.doc("<p>The action that you want Amazon Pinpoint to take if it can't read the required MX record for a
            custom MAIL FROM domain. When you set this value to <code>UseDefaultValue</code>, Amazon Pinpoint
            uses <i>amazonses.com</i> as the MAIL FROM domain. When you set this value
            to <code>RejectMessage</code>, Amazon Pinpoint returns a <code>MailFromDomainNotVerified</code>
            error, and doesn't attempt to deliver the email.</p>
        <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the
                <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code>
            states.</p>")
type behaviorOnMxFailure = [
  | @as("REJECT_MESSAGE") #REJECT_MESSAGE
  | @as("USE_DEFAULT_VALUE") #USE_DEFAULT_VALUE
]
type amazonResourceName = string
@ocaml.doc("<p>An object that contains information about the amount of email that was delivered to
            recipients.</p>")
type volumeStatistics = {
  @ocaml.doc("<p>An estimate of the percentage of emails sent from the current domain that will arrive
            in recipients' spam or junk mail folders.</p>")
  @as("ProjectedSpam")
  projectedSpam: option<volume>,
  @ocaml.doc("<p>An estimate of the percentage of emails sent from the current domain that will arrive
            in recipients' inboxes.</p>")
  @as("ProjectedInbox")
  projectedInbox: option<volume>,
  @ocaml.doc("<p>The total number of emails that arrived in recipients' spam or junk mail
            folders.</p>")
  @as("SpamRawCount")
  spamRawCount: option<volume>,
  @ocaml.doc("<p>The total number of emails that arrived in recipients' inboxes.</p>")
  @as("InboxRawCount")
  inboxRawCount: option<volume>,
}
@ocaml.doc("<p>An object that defines the tracking options for a configuration set. When you use
            Amazon Pinpoint to send an email, it contains an invisible image that's used to track when
            recipients open your email. If your email contains links, those links are changed
            slightly in order to track when recipients click them.</p>
        <p>These images and links include references to a domain operated by AWS. You can
            optionally configure Amazon Pinpoint to use a domain that you operate for these images and
            links.</p>")
type trackingOptions = {
  @ocaml.doc("<p>The domain that you want to use for tracking open and click events.</p>")
  @as("CustomRedirectDomain")
  customRedirectDomain: customRedirectDomain,
}
type template = {
  @ocaml.doc(
    "<p>An object that defines the values to use for message variables in the template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the value to use for that variable.</p>"
  )
  @as("TemplateData")
  templateData: option<templateData>,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the template.</p>") @as("TemplateArn")
  templateArn: option<templateArn>,
}
type tagKeyList = array<tagKey>
@ocaml.doc("<p>An object that defines the tags that are associated with a resource.
                A <i>tag</i> is a label that you optionally define and associate with
            a resource in Amazon Pinpoint. Tags can help you categorize and manage resources in different
            ways, such as by purpose, owner, environment, or other criteria. A resource can have as
            many as 50 tags.</p>
        <p>Each tag consists of a required <i>tag key</i> and an
                associated <i>tag value</i>, both of which you define. A tag key is a
            general label that acts as a category for a more specific tag value. A tag value acts as
            a descriptor within a tag key. A tag key can contain as many as 128 characters. A tag
            value can contain as many as 256 characters. The characters can be Unicode letters,
            digits, white space, or one of the following symbols: _ . : / = + -. The following
            additional restrictions apply to tags:</p>
        <ul>
            <li>
                <p>Tag keys and values are case sensitive.</p>
            </li>
            <li>
                <p>For each associated resource, each tag key must be unique and it can have only
                    one value.</p>
            </li>
            <li>
                <p>The <code>aws:</code> prefix is reserved for use by AWS; you can’t use it in
                    any tag keys or values that you define. In addition, you can't edit or remove
                    tag keys or values that use this prefix. Tags that use this prefix don’t count
                    against the limit of 50 tags per resource.</p>
            </li>
            <li>
                <p>You can associate tags with public or shared resources, but the tags are
                    available only for your AWS account, not any other accounts that share the
                    resource. In addition, the tags are available only for resources that are
                    located in the specified AWS Region for your AWS account.</p>
            </li>
         </ul>")
type tag = {
  @ocaml.doc("<p>The optional part of a key-value pair that defines a tag. The maximum length of a tag
            value is 256 characters. The minimum length is 0 characters. If you don’t want a
            resource to have a specific tag value, don’t specify a value for this parameter. Amazon Pinpoint
            will set the value to an empty string.</p>")
  @as("Value")
  value: tagValue,
  @ocaml.doc("<p>One part of a key-value pair that defines a tag. The maximum length of a tag key is
            128 characters. The minimum length is 1 character.</p>")
  @as("Key")
  key: tagKey,
}
@ocaml.doc("<p>An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to
            send notification when certain email events occur.</p>")
type snsDestination = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Amazon SNS topic that you want to publish email
            events to. For more information about Amazon SNS topics, see the <a href=\"https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html\">Amazon SNS Developer
                Guide</a>.</p>")
  @as("TopicArn")
  topicArn: amazonResourceName,
}
@ocaml.doc("<p>Used to enable or disable email sending for messages that use this configuration set
            in the current AWS Region.</p>")
type sendingOptions = {
  @ocaml.doc("<p>If <code>true</code>, email sending is enabled for the configuration set. If
                <code>false</code>, email sending is disabled for the configuration set.</p>")
  @as("SendingEnabled")
  sendingEnabled: option<enabled>,
}
@ocaml.doc("<p>An object that contains information about the per-day and per-second sending limits
            for your Amazon Pinpoint account in the current AWS Region.</p>")
type sendQuota = {
  @ocaml.doc("<p>The number of emails sent from your Amazon Pinpoint account in the current AWS Region over the
            past 24 hours.</p>")
  @as("SentLast24Hours")
  sentLast24Hours: option<sentLast24Hours>,
  @ocaml.doc("<p>The maximum number of emails that you can send per second in the current AWS Region.
            This value is also called your <i>maximum sending rate</i> or your
                <i>maximum TPS (transactions per second) rate</i>.</p>")
  @as("MaxSendRate")
  maxSendRate: option<maxSendRate>,
  @ocaml.doc("<p>The maximum number of emails that you can send in the current AWS Region over a
            24-hour period. This value is also called your <i>sending
            quota</i>.</p>")
  @as("Max24HourSend")
  max24HourSend: option<max24HourSend>,
}
@ocaml.doc("<p>Enable or disable collection of reputation metrics for emails that you send using this
            configuration set in the current AWS Region. </p>")
type reputationOptions = {
  @ocaml.doc("<p>The date and time (in Unix time) when the reputation metrics were last given a fresh
            start. When your account is given a fresh start, your reputation metrics are calculated
            starting from the date of the fresh start.</p>")
  @as("LastFreshStart")
  lastFreshStart: option<lastFreshStart>,
  @ocaml.doc("<p>If <code>true</code>, tracking of reputation metrics is enabled for the configuration
            set. If <code>false</code>, tracking of reputation metrics is disabled for the
            configuration set.</p>")
  @as("ReputationMetricsEnabled")
  reputationMetricsEnabled: option<enabled>,
}
@ocaml.doc("<p>The raw email message.</p>")
type rawMessage = {
  @ocaml.doc("<p>The raw email message. The message has to meet the following criteria:</p>
        <ul>
            <li>
                <p>The message has to contain a header and a body, separated by one blank
                    line.</p>
            </li>
            <li>
                <p>All of the required header fields must be present in the message.</p>
            </li>
            <li>
                <p>Each part of a multipart MIME message must be formatted properly.</p>
            </li>
            <li>
                <p>Attachments must be in a file format that Amazon Pinpoint supports.
                    </p>
            </li>
            <li>
                <p>The entire message must be Base64 encoded.</p>
            </li>
            <li>
                <p>If any of the MIME parts in your message contain content that is outside of
                    the 7-bit ASCII character range, you should encode that content to ensure that
                    recipients' email clients render the message properly.</p>
            </li>
            <li>
                <p>The length of any single line of text in the message can't exceed 1,000
                    characters. This restriction is defined in <a href=\"https://tools.ietf.org/html/rfc5321\">RFC 5321</a>.</p>
            </li>
         </ul>")
  @as("Data")
  data: rawMessageData,
}
@ocaml.doc("<p>An object that contains inbox placement data for an email provider.</p>")
type placementStatistics = {
  @ocaml.doc("<p>The percentage of emails that were authenticated by using DomainKeys Identified Mail
            (DKIM) during the predictive inbox placement test.</p>")
  @as("DkimPercentage")
  dkimPercentage: option<percentage>,
  @ocaml.doc("<p>The percentage of emails that were authenticated by using Sender Policy Framework
            (SPF) during the predictive inbox placement test.</p>")
  @as("SpfPercentage")
  spfPercentage: option<percentage>,
  @ocaml.doc("<p>The percentage of emails that didn't arrive in recipients' inboxes at all during the
            predictive inbox placement test.</p>")
  @as("MissingPercentage")
  missingPercentage: option<percentage>,
  @ocaml.doc("<p>The percentage of emails that arrived in recipients' spam or junk mail folders during
            the predictive inbox placement test.</p>")
  @as("SpamPercentage")
  spamPercentage: option<percentage>,
  @ocaml.doc(
    "<p>The percentage of emails that arrived in recipients' inboxes during the predictive inbox placement test.</p>"
  )
  @as("InboxPercentage")
  inboxPercentage: option<percentage>,
}
@ocaml.doc("<p>An object that defines a Amazon Pinpoint destination for email events. You can use Amazon Pinpoint events
            to create attributes in Amazon Pinpoint projects. You can use these attributes to create segments
            for your campaigns.</p>")
type pinpointDestination = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Amazon Pinpoint project that you want to send email
            events to.</p>")
  @as("ApplicationArn")
  applicationArn: option<amazonResourceName>,
}
@ocaml.doc("<p>Contains the name and value of a tag that you apply to an email. You can use message
            tags when you publish email sending events.
            </p>")
type messageTag = {
  @ocaml.doc("<p>The value of the message tag. The message tag value has to meet the following
            criteria:</p>
        <ul>
            <li>
                <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9),
                    underscores (_), or dashes (-).</p>
            </li>
            <li>
                <p>It can contain no more than 256 characters.</p>
            </li>
         </ul>")
  @as("Value")
  value: messageTagValue,
  @ocaml.doc("<p>The name of the message tag. The message tag name has to meet the following
            criteria:</p>
        <ul>
            <li>
                <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9),
                    underscores (_), or dashes (-).</p>
            </li>
            <li>
                <p>It can contain no more than 256 characters.</p>
            </li>
         </ul>")
  @as("Name")
  name: messageTagName,
}
@ocaml.doc("<p>A list of attributes that are associated with a MAIL FROM domain.</p>")
type mailFromAttributes = {
  @ocaml.doc("<p>The action that Amazon Pinpoint to takes if it can't read the required MX record for a custom
            MAIL FROM domain. When you set this value to <code>UseDefaultValue</code>, Amazon Pinpoint uses
                <i>amazonses.com</i> as the MAIL FROM domain. When you set this value
            to <code>RejectMessage</code>, Amazon Pinpoint returns a <code>MailFromDomainNotVerified</code>
            error, and doesn't attempt to deliver the email.</p>
        <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the
                <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code>
            states.</p>")
  @as("BehaviorOnMxFailure")
  behaviorOnMxFailure: behaviorOnMxFailure,
  @ocaml.doc("<p>The status of the MAIL FROM domain. This status can have the following values:</p>
        <ul>
            <li>
                <p>
                  <code>PENDING</code> – Amazon Pinpoint hasn't started searching for the MX record
                    yet.</p>
            </li>
            <li>
                <p>
                  <code>SUCCESS</code> – Amazon Pinpoint detected the required MX record for the
                    MAIL FROM domain.</p>
            </li>
            <li>
                <p>
                  <code>FAILED</code> – Amazon Pinpoint can't find the required MX record, or the
                    record no longer exists.</p>
            </li>
            <li>
                <p>
                  <code>TEMPORARY_FAILURE</code> – A temporary issue occurred, which
                    prevented Amazon Pinpoint from determining the status of the MAIL FROM domain.</p>
            </li>
         </ul>")
  @as("MailFromDomainStatus")
  mailFromDomainStatus: mailFromDomainStatus,
  @ocaml.doc(
    "<p>The name of a domain that an email identity uses as a custom MAIL FROM domain.</p>"
  )
  @as("MailFromDomain")
  mailFromDomain: mailFromDomainName,
}
@ocaml.doc(
  "<p>A list of dedicated IP pools that are associated with your Amazon Pinpoint account.</p>"
)
type listOfDedicatedIpPools = array<poolName>
@ocaml.doc("<p>An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to
            stream data to other services, such as Amazon S3 and Amazon Redshift.</p>")
type kinesisFirehoseDestination = {
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the Amazon Kinesis Data Firehose stream that Amazon Pinpoint sends email events
            to.</p>")
  @as("DeliveryStreamArn")
  deliveryStreamArn: amazonResourceName,
  @ocaml.doc("<p>The Amazon Resource Name (ARN) of the IAM role that Amazon Pinpoint uses when sending email
            events to the Amazon Kinesis Data Firehose stream.</p>")
  @as("IamRoleArn")
  iamRoleArn: amazonResourceName,
}
type ispNameList = array<ispName>
type ipList = array<ip>
@ocaml.doc("<p>Information about an email identity.</p>")
type identityInfo = {
  @ocaml.doc("<p>Indicates whether or not you can send email from the identity.</p>
        <p>In Amazon Pinpoint, an identity is an email address or domain that you send email from. Before
            you can send email from an identity, you have to demostrate that you own the identity,
            and that you authorize Amazon Pinpoint to send email from that identity.</p>")
  @as("SendingEnabled")
  sendingEnabled: option<enabled>,
  @ocaml.doc("<p>The address or domain of the identity.</p>") @as("IdentityName")
  identityName: option<identity>,
  @ocaml.doc("<p>The email identity type. The identity type can be one of the following:</p>
        <ul>
            <li>
                <p>
                  <code>EMAIL_ADDRESS</code> – The identity is an email address.</p>
            </li>
            <li>
                <p>
                  <code>DOMAIN</code> – The identity is a domain.</p>
            </li>
            <li>
                <p>
                  <code>MANAGED_DOMAIN</code> – The identity is a domain that is managed
                    by AWS.</p>
            </li>
         </ul>")
  @as("IdentityType")
  identityType: option<identityType>,
}
type eventTypes = array<eventType>
type esps = array<esp>
type emailAddressList = array<emailAddress>
@ocaml.doc("<p>An object that contains inbox placement data for email sent from one of your email
            domains to a specific email provider.</p>")
type domainIspPlacement = {
  @ocaml.doc("<p>The percentage of messages that were sent from the selected domain to the specified
            email provider that arrived in recipients' spam or junk mail folders.</p>")
  @as("SpamPercentage")
  spamPercentage: option<percentage>,
  @ocaml.doc("<p>The percentage of messages that were sent from the selected domain to the specified
            email provider that arrived in recipients' inboxes.</p>")
  @as("InboxPercentage")
  inboxPercentage: option<percentage>,
  @ocaml.doc("<p>The total number of messages that were sent from the selected domain to the specified
            email provider that arrived in recipients' spam or junk mail folders.</p>")
  @as("SpamRawCount")
  spamRawCount: option<volume>,
  @ocaml.doc("<p>The total number of messages that were sent from the selected domain to the specified
            email provider that arrived in recipients' inboxes.</p>")
  @as("InboxRawCount")
  inboxRawCount: option<volume>,
  @ocaml.doc("<p>The name of the email provider that the inbox placement data applies to.</p>")
  @as("IspName")
  ispName: option<ispName>,
}
type dnsTokenList = array<dnsToken>
@ocaml.doc("<p>Used to associate a configuration set with a dedicated IP pool.</p>")
type deliveryOptions = {
  @ocaml.doc("<p>The name of the dedicated IP pool that you want to associate with the configuration
            set.</p>")
  @as("SendingPoolName")
  sendingPoolName: option<poolName>,
  @ocaml.doc("<p>Specifies whether messages that use the configuration set are required to use
            Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only
            delivered if a TLS connection can be established. If the value is <code>Optional</code>,
            messages can be delivered in plain text if a TLS connection can't be established.</p>")
  @as("TlsPolicy")
  tlsPolicy: option<tlsPolicy>,
}
@ocaml.doc("<p>An object that contains metadata related to a predictive inbox placement test.</p>")
type deliverabilityTestReport = {
  @ocaml.doc("<p>The status of the predictive inbox placement test. If the status is <code>IN_PROGRESS</code>, then the predictive inbox placement test
            is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the
            test. If the status is <code>COMPLETE</code>, then the test is finished, and you can use
            the <code>GetDeliverabilityTestReport</code> to view the results of the test.</p>")
  @as("DeliverabilityTestStatus")
  deliverabilityTestStatus: option<deliverabilityTestStatus>,
  @ocaml.doc(
    "<p>The date and time when the predictive inbox placement test was created, in Unix time format.</p>"
  )
  @as("CreateDate")
  createDate: option<timestamp_>,
  @ocaml.doc(
    "<p>The sender address that you specified for the predictive inbox placement test.</p>"
  )
  @as("FromEmailAddress")
  fromEmailAddress: option<emailAddress>,
  @ocaml.doc(
    "<p>The subject line for an email that you submitted in a predictive inbox placement test.</p>"
  )
  @as("Subject")
  subject: option<deliverabilityTestSubject>,
  @ocaml.doc("<p>A name that helps you identify a predictive inbox placement test report.</p>")
  @as("ReportName")
  reportName: option<reportName>,
  @ocaml.doc("<p>A unique string that identifies the predictive inbox placement test.</p>")
  @as("ReportId")
  reportId: option<reportId>,
}
@ocaml.doc("<p>Contains information about a dedicated IP address that is associated with your Amazon Pinpoint
            account.</p>
        <p></p>")
type dedicatedIp = {
  @ocaml.doc("<p>The name of the dedicated IP pool that the IP address is associated with.</p>")
  @as("PoolName")
  poolName: option<poolName>,
  @ocaml.doc("<p>Indicates how complete the dedicated IP warm-up process is. When this value equals 1,
            the address has completed the warm-up process and is ready for use.</p>")
  @as("WarmupPercentage")
  warmupPercentage: percentage100Wrapper,
  @ocaml.doc("<p>The warm-up status of a dedicated IP address. The status can have one of the following
            values:</p>
        <ul>
            <li>
                <p>
                  <code>IN_PROGRESS</code> – The IP address isn't ready to use because the
                    dedicated IP warm-up process is ongoing.</p>
            </li>
            <li>
                <p>
                  <code>DONE</code> – The dedicated IP warm-up process is complete, and
                    the IP address is ready to use.</p>
            </li>
         </ul>")
  @as("WarmupStatus")
  warmupStatus: warmupStatus,
  @ocaml.doc("<p>An IP address that is reserved for use by your Amazon Pinpoint account.</p>")
  @as("Ip")
  ip: ip,
}
@ocaml.doc("<p>An object that represents the content of the email, and optionally a character set
            specification.</p>")
type content = {
  @ocaml.doc("<p>The character set for the content. Because of the constraints of the SMTP protocol,
            Amazon Pinpoint uses 7-bit ASCII by default. If the text includes characters outside of the ASCII
            range, you have to specify a character set. For example, you could specify
                <code>UTF-8</code>, <code>ISO-8859-1</code>, or <code>Shift_JIS</code>.</p>")
  @as("Charset")
  charset: option<charset>,
  @ocaml.doc("<p>The content of the message itself.</p>") @as("Data") data: messageData,
}
type configurationSetNameList = array<configurationSetName>
@ocaml.doc("<p>An object that defines the dimension configuration to use when you send Amazon Pinpoint email
            events to Amazon CloudWatch.</p>")
type cloudWatchDimensionConfiguration = {
  @ocaml.doc("<p>The default value of the dimension that is published to Amazon CloudWatch if you don't provide the
            value of the dimension when you send an email. This value has to meet the following
            criteria:</p>
        <ul>
            <li>
                <p>It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_),
                    or dashes (-).</p>
            </li>
            <li>
                <p>It can contain no more than 256 characters.</p>
            </li>
         </ul>")
  @as("DefaultDimensionValue")
  defaultDimensionValue: defaultDimensionValue,
  @ocaml.doc("<p>The location where Amazon Pinpoint finds the value of a dimension to publish to Amazon CloudWatch. If you
            want Amazon Pinpoint to use the message tags that you specify using an X-SES-MESSAGE-TAGS header
            or a parameter to the SendEmail/SendRawEmail API, choose <code>messageTag</code>. If you
            want Amazon Pinpoint to use your own email headers, choose <code>emailHeader</code>. If you want
            Amazon Pinpoint to use link tags, choose <code>linkTags</code>.</p>")
  @as("DimensionValueSource")
  dimensionValueSource: dimensionValueSource,
  @ocaml.doc("<p>The name of an Amazon CloudWatch dimension associated with an email sending metric. The name has to
            meet the following criteria:</p>
        <ul>
            <li>
                <p>It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_),
                    or dashes (-).</p>
            </li>
            <li>
                <p>It can contain no more than 256 characters.</p>
            </li>
         </ul>")
  @as("DimensionName")
  dimensionName: dimensionName,
}
type blacklistItemNames = array<blacklistItemName>
@ocaml.doc("<p>An object that contains information about a blacklisting event that impacts one of the
            dedicated IP addresses that is associated with your account.</p>")
type blacklistEntry = {
  @ocaml.doc("<p>Additional information about the blacklisting event, as provided by the blacklist
            maintainer.</p>")
  @as("Description")
  description: option<blacklistingDescription>,
  @ocaml.doc("<p>The time when the blacklisting event occurred, shown in Unix time format.</p>")
  @as("ListingTime")
  listingTime: option<timestamp_>,
  @ocaml.doc("<p>The name of the blacklist that the IP address appears on.</p>") @as("RblName")
  rblName: option<rblName>,
}
type tagList_ = array<tag>
@ocaml.doc("<p>A list of message tags.</p>") type messageTagList = array<messageTag>
@ocaml.doc("<p>An object that describes how email sent during the predictive inbox placement test was handled by a certain
            email provider.</p>")
type ispPlacement = {
  @ocaml.doc(
    "<p>An object that contains inbox placement metrics for a specific email provider.</p>"
  )
  @as("PlacementStatistics")
  placementStatistics: option<placementStatistics>,
  @ocaml.doc("<p>The name of the email provider that the inbox placement data applies to.</p>")
  @as("IspName")
  ispName: option<ispName>,
}
@ocaml.doc("<p>An object that contains information about the inbox placement data settings for a
            verified domain that’s associated with your AWS account. This data is available only
            if you enabled the Deliverability dashboard for the domain
                (<code>PutDeliverabilityDashboardOption</code> operation).</p>")
type inboxPlacementTrackingOption = {
  @ocaml.doc("<p>An array of strings, one for each major email provider that the inbox placement data
            applies to.</p>")
  @as("TrackedIsps")
  trackedIsps: option<ispNameList>,
  @ocaml.doc("<p>Specifies whether inbox placement data is being tracked for the domain.</p>")
  @as("Global")
  global: option<enabled>,
}
type identityInfoList = array<identityInfo>
type domainIspPlacements = array<domainIspPlacement>
@ocaml.doc("<p>An object that contains the deliverability data for a specific campaign. This data is
            available for a campaign only if the campaign sent email by using a domain that the
            Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code>
            operation).</p>")
type domainDeliverabilityCampaign = {
  @ocaml.doc("<p>The major email providers who handled the email message.</p>") @as("Esps")
  esps: option<esps>,
  @ocaml.doc("<p>The projected number of recipients that the email message was sent to.</p>")
  @as("ProjectedVolume")
  projectedVolume: option<volume>,
  @ocaml.doc("<p>The percentage of email messages that were opened and then deleted by recipients. Due
            to technical limitations, this value only includes recipients who opened the message by
            using an email client that supports images.</p>")
  @as("ReadDeleteRate")
  readDeleteRate: option<percentage>,
  @ocaml.doc("<p>The percentage of email messages that were deleted by recipients, without being opened
            first. Due to technical limitations, this value only includes recipients who opened the
            message by using an email client that supports images.</p>")
  @as("DeleteRate")
  deleteRate: option<percentage>,
  @ocaml.doc("<p>The percentage of email messages that were opened by recipients. Due to technical
            limitations, this value only includes recipients who opened the message by using an
            email client that supports images.</p>")
  @as("ReadRate")
  readRate: option<percentage>,
  @ocaml.doc("<p>The number of email messages that were delivered to recipients' spam or junk mail
            folders.</p>")
  @as("SpamCount")
  spamCount: option<volume>,
  @ocaml.doc("<p>The number of email messages that were delivered to recipients’ inboxes.</p>")
  @as("InboxCount")
  inboxCount: option<volume>,
  @ocaml.doc("<p>The last time, in Unix time format, when the email message was delivered to any
            recipient's inbox. This value can help you determine how long it took for a campaign to
            deliver an email message.</p>")
  @as("LastSeenDateTime")
  lastSeenDateTime: option<timestamp_>,
  @ocaml.doc("<p>The first time, in Unix time format, when the email message was delivered to any
            recipient's inbox. This value can help you determine how long it took for a campaign to
            deliver an email message.</p>")
  @as("FirstSeenDateTime")
  firstSeenDateTime: option<timestamp_>,
  @ocaml.doc("<p>The IP addresses that were used to send the email message.</p>") @as("SendingIps")
  sendingIps: option<ipList>,
  @ocaml.doc("<p>The verified email address that the email message was sent from.</p>")
  @as("FromAddress")
  fromAddress: option<identity>,
  @ocaml.doc("<p>The subject line, or title, of the email message.</p>") @as("Subject")
  subject: option<subject>,
  @ocaml.doc("<p>The URL of an image that contains a snapshot of the email message that was
            sent.</p>")
  @as("ImageUrl")
  imageUrl: option<imageUrl>,
  @ocaml.doc("<p>The unique identifier for the campaign. Amazon Pinpoint automatically generates and assigns this
            identifier to a campaign. This value is not the same as the campaign identifier that
            Amazon Pinpoint assigns to campaigns that you create and manage by using the Amazon Pinpoint API or the
            Amazon Pinpoint console.</p>")
  @as("CampaignId")
  campaignId: option<campaignId>,
}
@ocaml.doc("<p>An object that contains information about the DKIM configuration for an email
            identity.</p>")
type dkimAttributes = {
  @ocaml.doc("<p>A set of unique strings that you use to create a set of CNAME records that you add to
            the DNS configuration for your domain. When Amazon Pinpoint detects these records in the DNS
            configuration for your domain, the DKIM authentication process is complete. Amazon Pinpoint
            usually detects these records within about 72 hours of adding them to the DNS
            configuration for your domain.</p>")
  @as("Tokens")
  tokens: option<dnsTokenList>,
  @ocaml.doc("<p>Describes whether or not Amazon Pinpoint has successfully located the DKIM records in the DNS
            records for the domain. The status can be one of the following:</p>
        <ul>
            <li>
                <p>
                  <code>PENDING</code> – Amazon Pinpoint hasn't yet located the DKIM records in the
                    DNS configuration for the domain, but will continue to attempt to locate
                    them.</p>
            </li>
            <li>
                <p>
                  <code>SUCCESS</code> – Amazon Pinpoint located the DKIM records in the DNS
                    configuration for the domain and determined that they're correct. Amazon Pinpoint can now
                    send DKIM-signed email from the identity.</p>
            </li>
            <li>
                <p>
                  <code>FAILED</code> – Amazon Pinpoint was unable to locate the DKIM records in the
                    DNS settings for the domain, and won't continue to search for them.</p>
            </li>
            <li>
                <p>
                  <code>TEMPORARY_FAILURE</code> – A temporary issue occurred, which
                    prevented Amazon Pinpoint from determining the DKIM status for the domain.</p>
            </li>
            <li>
                <p>
                  <code>NOT_STARTED</code> – Amazon Pinpoint hasn't yet started searching for the
                    DKIM records in the DKIM records for the domain.</p>
            </li>
         </ul>")
  @as("Status")
  status: option<dkimStatus>,
  @ocaml.doc("<p>If the value is <code>true</code>, then the messages that Amazon Pinpoint sends from the
            identity are DKIM-signed. If the value is <code>false</code>, then the messages that
            Amazon Pinpoint sends from the identity aren't DKIM-signed.</p>")
  @as("SigningEnabled")
  signingEnabled: option<enabled>,
}
@ocaml.doc("<p>An object that describes the recipients for an email.</p>")
type destination = {
  @ocaml.doc("<p>An array that contains the email addresses of the \"BCC\" (blind carbon copy) recipients
            for the email.</p>")
  @as("BccAddresses")
  bccAddresses: option<emailAddressList>,
  @ocaml.doc("<p>An array that contains the email addresses of the \"CC\" (carbon copy) recipients for
            the email.</p>")
  @as("CcAddresses")
  ccAddresses: option<emailAddressList>,
  @ocaml.doc("<p>An array that contains the email addresses of the \"To\" recipients for the
            email.</p>")
  @as("ToAddresses")
  toAddresses: option<emailAddressList>,
}
type deliverabilityTestReports = array<deliverabilityTestReport>
@ocaml.doc(
  "<p>A list of dedicated IP addresses that are associated with your Amazon Pinpoint account.</p>"
)
type dedicatedIpList = array<dedicatedIp>
type cloudWatchDimensionConfigurations = array<cloudWatchDimensionConfiguration>
@ocaml.doc("<p>Represents the body of the email message.</p>")
type body = {
  @ocaml.doc("<p>An object that represents the version of the message that is displayed in email
            clients that support HTML. HTML messages can include formatted text, hyperlinks, images,
            and more. </p>")
  @as("Html")
  html: option<content>,
  @ocaml.doc("<p>An object that represents the version of the message that is displayed in email
            clients that don't support HTML, or clients where the recipient has disabled HTML
            rendering.</p>")
  @as("Text")
  text: option<content>,
}
type blacklistEntries = array<blacklistEntry>
@ocaml.doc("<p>An object that contains information about email that was sent from the selected
            domain.</p>")
type overallVolume = {
  @ocaml.doc("<p>An object that contains inbox and junk mail placement metrics for individual email
            providers.</p>")
  @as("DomainIspPlacements")
  domainIspPlacements: option<domainIspPlacements>,
  @ocaml.doc("<p>The percentage of emails that were sent from the domain that were read by their
            recipients.</p>")
  @as("ReadRatePercent")
  readRatePercent: option<percentage>,
  @ocaml.doc("<p>An object that contains information about the numbers of messages that arrived in
            recipients' inboxes and junk mail folders.</p>")
  @as("VolumeStatistics")
  volumeStatistics: option<volumeStatistics>,
}
@ocaml.doc("<p>Represents the email message that you're sending. The <code>Message</code> object
            consists of a subject line and a message body.</p>")
type message = {
  @ocaml.doc("<p>The body of the message. You can specify an HTML version of the message, a text-only
            version of the message, or both.</p>")
  @as("Body")
  body: body,
  @ocaml.doc("<p>The subject line of the email. The subject line can only contain 7-bit ASCII
            characters. However, you can specify non-ASCII characters in the subject line by using
            encoded-word syntax, as described in <a href=\"https://tools.ietf.org/html/rfc2047\">RFC 2047</a>.</p>")
  @as("Subject")
  subject: content,
}
type ispPlacements = array<ispPlacement>
@ocaml.doc("<p>An object that contains information about the Deliverability dashboard subscription for a
            verified domain that you use to send email and currently has an active Deliverability dashboard
            subscription. If a Deliverability dashboard subscription is active for a domain, you gain access
            to reputation, inbox placement, and other metrics for the domain.</p>")
type domainDeliverabilityTrackingOption = {
  @ocaml.doc("<p>An object that contains information about the inbox placement data settings for the
            domain.</p>")
  @as("InboxPlacementTrackingOption")
  inboxPlacementTrackingOption: option<inboxPlacementTrackingOption>,
  @ocaml.doc("<p>The date, in Unix time format, when you enabled the Deliverability dashboard for the
            domain.</p>")
  @as("SubscriptionStartDate")
  subscriptionStartDate: option<timestamp_>,
  @ocaml.doc("<p>A verified domain that’s associated with your AWS account and currently has an
            active Deliverability dashboard subscription.</p>")
  @as("Domain")
  domain: option<domain>,
}
@ocaml.doc("<p></p>") type domainDeliverabilityCampaignList = array<domainDeliverabilityCampaign>
@ocaml.doc("<p>An object that contains information about the volume of email sent on each day of the
            analysis period.</p>")
type dailyVolume = {
  @ocaml.doc("<p>An object that contains inbox placement metrics for a specified day in the analysis
            period, broken out by the recipient's email provider.</p>")
  @as("DomainIspPlacements")
  domainIspPlacements: option<domainIspPlacements>,
  @ocaml.doc("<p>An object that contains inbox placement metrics for a specific day in the analysis
            period.</p>")
  @as("VolumeStatistics")
  volumeStatistics: option<volumeStatistics>,
  @ocaml.doc("<p>The date that the DailyVolume metrics apply to, in Unix time.</p>")
  @as("StartDate")
  startDate: option<timestamp_>,
}
@ocaml.doc("<p>An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to
            monitor and gain insights on your email sending metrics.</p>")
type cloudWatchDestination = {
  @ocaml.doc("<p>An array of objects that define the dimensions to use when you send email events to
            Amazon CloudWatch.</p>")
  @as("DimensionConfigurations")
  dimensionConfigurations: cloudWatchDimensionConfigurations,
}
type blacklistReport = Js.Dict.t<blacklistEntries>
@ocaml.doc("<p>An object that defines the event destination. Specifically, it defines which services
            receive events from emails sent using the configuration set that the event destination
            is associated with. Also defines the types of events that are sent to the event
            destination.</p>")
type eventDestinationDefinition = {
  @ocaml.doc("<p>An object that defines a Amazon Pinpoint destination for email events. You can use Amazon Pinpoint events
            to create attributes in Amazon Pinpoint projects. You can use these attributes to create segments
            for your campaigns.</p>")
  @as("PinpointDestination")
  pinpointDestination: option<pinpointDestination>,
  @ocaml.doc("<p>An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to
            send notification when certain email events occur.</p>")
  @as("SnsDestination")
  snsDestination: option<snsDestination>,
  @ocaml.doc("<p>An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to
            monitor and gain insights on your email sending metrics.</p>")
  @as("CloudWatchDestination")
  cloudWatchDestination: option<cloudWatchDestination>,
  @ocaml.doc("<p>An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to
            stream data to other services, such as Amazon S3 and Amazon Redshift.</p>")
  @as("KinesisFirehoseDestination")
  kinesisFirehoseDestination: option<kinesisFirehoseDestination>,
  @ocaml.doc("<p>An array that specifies which events Amazon Pinpoint should send to the destinations in this
                <code>EventDestinationDefinition</code>.</p>")
  @as("MatchingEventTypes")
  matchingEventTypes: option<eventTypes>,
  @ocaml.doc("<p>If <code>true</code>, the event destination is enabled. When the event destination is
            enabled, the specified event types are sent to the destinations in this
                <code>EventDestinationDefinition</code>.</p>
        <p>If <code>false</code>, the event destination is disabled. When the event destination
            is disabled, events aren't sent to the specified destinations.</p>")
  @as("Enabled")
  enabled: option<enabled>,
}
@ocaml.doc("<p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens,
            clicks, bounces, and complaints. <i>Event destinations</i> are places that
            you can send information about these events to. For example, you can send event data to
            Amazon SNS to receive notifications when you receive bounces or complaints, or you can use
            Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>")
type eventDestination = {
  @ocaml.doc("<p>An object that defines a Amazon Pinpoint destination for email events. You can use Amazon Pinpoint events
            to create attributes in Amazon Pinpoint projects. You can use these attributes to create segments
            for your campaigns.</p>")
  @as("PinpointDestination")
  pinpointDestination: option<pinpointDestination>,
  @ocaml.doc("<p>An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to
            send notification when certain email events occur.</p>")
  @as("SnsDestination")
  snsDestination: option<snsDestination>,
  @ocaml.doc("<p>An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to
            monitor and gain insights on your email sending metrics.</p>")
  @as("CloudWatchDestination")
  cloudWatchDestination: option<cloudWatchDestination>,
  @ocaml.doc("<p>An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to
            stream data to other services, such as Amazon S3 and Amazon Redshift.</p>")
  @as("KinesisFirehoseDestination")
  kinesisFirehoseDestination: option<kinesisFirehoseDestination>,
  @ocaml.doc(
    "<p>The types of events that Amazon Pinpoint sends to the specified event destinations.</p>"
  )
  @as("MatchingEventTypes")
  matchingEventTypes: eventTypes,
  @ocaml.doc("<p>If <code>true</code>, the event destination is enabled. When the event destination is
            enabled, the specified event types are sent to the destinations in this
                <code>EventDestinationDefinition</code>.</p>
        <p>If <code>false</code>, the event destination is disabled. When the event destination
            is disabled, events aren't sent to the specified destinations.</p>")
  @as("Enabled")
  enabled: option<enabled>,
  @ocaml.doc("<p>A name that identifies the event destination.</p>") @as("Name")
  name: eventDestinationName,
}
@ocaml.doc("<p>An object that defines the entire content of the email, including the message headers
            and the body content. You can create a simple email message, in which you specify the
            subject and the text and HTML versions of the message body. You can also create raw
            messages, in which you specify a complete MIME-formatted message. Raw messages can
            include attachments and custom headers.</p>")
type emailContent = {
  @ocaml.doc("<p>The template to use for the email message.</p>") @as("Template")
  template: option<template>,
  @ocaml.doc("<p>The raw email message. The message has to meet the following criteria:</p>
        <ul>
            <li>
                <p>The message has to contain a header and a body, separated by one blank
                    line.</p>
            </li>
            <li>
                <p>All of the required header fields must be present in the message.</p>
            </li>
            <li>
                <p>Each part of a multipart MIME message must be formatted properly.</p>
            </li>
            <li>
                <p>If you include attachments, they must be in a file format that Amazon Pinpoint supports.
                    </p>
            </li>
            <li>
                <p>The entire message must be Base64 encoded.</p>
            </li>
            <li>
                <p>If any of the MIME parts in your message contain content that is outside of
                    the 7-bit ASCII character range, you should encode that content to ensure that
                    recipients' email clients render the message properly.</p>
            </li>
            <li>
                <p>The length of any single line of text in the message can't exceed 1,000
                    characters. This restriction is defined in <a href=\"https://tools.ietf.org/html/rfc5321\">RFC 5321</a>.</p>
            </li>
         </ul>")
  @as("Raw")
  raw: option<rawMessage>,
  @ocaml.doc(
    "<p>The simple email message. The message consists of a subject and a message body.</p>"
  )
  @as("Simple")
  simple: option<message>,
}
@ocaml.doc("<p>An object that contains information about the Deliverability dashboard subscription for a
            verified domain that you use to send email and currently has an active Deliverability dashboard
            subscription. If a Deliverability dashboard subscription is active for a domain, you gain access
            to reputation, inbox placement, and other metrics for the domain.</p>")
type domainDeliverabilityTrackingOptions = array<domainDeliverabilityTrackingOption>
type dailyVolumes = array<dailyVolume>
type eventDestinations = array<eventDestination>
@ocaml.doc("<fullname>Amazon Pinpoint Email Service</fullname>
        <p>Welcome to the <i>Amazon Pinpoint Email API Reference</i>. This guide provides
            information about the Amazon Pinpoint Email API (version 1.0), including supported
            operations, data types, parameters, and schemas.</p>
        <p>
            <a href=\"https://aws.amazon.com/pinpoint\">Amazon Pinpoint</a> is an AWS service that you
            can use to engage with your customers across multiple messaging channels. You can use
            Amazon Pinpoint to send email, SMS text messages, voice messages, and push notifications. The
            Amazon Pinpoint Email API provides programmatic access to options that are unique to the
            email channel and supplement the options provided by the Amazon Pinpoint API.</p>
        <p>If you're new to Amazon Pinpoint, you might find it helpful to also review the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/welcome.html\">Amazon
                Pinpoint Developer Guide</a>. The <i>Amazon Pinpoint Developer
                Guide</i> provides tutorials, code samples, and procedures that demonstrate
            how to use Amazon Pinpoint features programmatically and how to integrate Amazon Pinpoint functionality into
            mobile apps and other types of applications. The guide also provides information about
            key topics such as Amazon Pinpoint integration with other AWS services and the limits that apply
            to using the service.</p>
        <p>The Amazon Pinpoint Email API is available in several AWS Regions and it provides an endpoint
            for each of these Regions. For a list of all the Regions and endpoints where the API is
            currently available, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#pinpoint_region\">AWS Service Endpoints</a> in
            the <i>Amazon Web Services General Reference</i>. To learn more about AWS Regions, see
                <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande-manage.html\">Managing AWS
                Regions</a> in the <i>Amazon Web Services General Reference</i>.</p>
        <p>In each Region, AWS maintains multiple Availability Zones. These Availability Zones
            are physically isolated from each other, but are united by private, low-latency,
            high-throughput, and highly redundant network connections. These Availability Zones
            enable us to provide very high levels of availability and redundancy, while also
            minimizing latency. To learn more about the number of Availability Zones that are
            available in each Region, see <a href=\"http://aws.amazon.com/about-aws/global-infrastructure/\">AWS Global Infrastructure</a>.</p>")
module PutEmailIdentityMailFromAttributes = {
  type t
  @ocaml.doc("<p>A request to configure the custom MAIL FROM domain for a verified identity.</p>")
  type request = {
    @ocaml.doc("<p>The action that you want Amazon Pinpoint to take if it can't read the required MX record when
            you send an email. When you set this value to <code>UseDefaultValue</code>, Amazon Pinpoint uses
                <i>amazonses.com</i> as the MAIL FROM domain. When you set this value
            to <code>RejectMessage</code>, Amazon Pinpoint returns a <code>MailFromDomainNotVerified</code>
            error, and doesn't attempt to deliver the email.</p>
        <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the
                <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code>
            states.</p>")
    @as("BehaviorOnMxFailure")
    behaviorOnMxFailure: option<behaviorOnMxFailure>,
    @ocaml.doc("<p> The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM
            domain must meet the following criteria:</p>
        <ul>
            <li>
                <p>It has to be a subdomain of the verified identity.</p>
            </li>
            <li>
                <p>It can't be used to receive email.</p>
            </li>
            <li>
                <p>It can't be used in a \"From\" address if the MAIL FROM domain is a destination
                    for feedback forwarding emails.</p>
            </li>
         </ul>")
    @as("MailFromDomain")
    mailFromDomain: option<mailFromDomainName>,
    @ocaml.doc("<p>The verified email identity that you want to set up the custom MAIL FROM domain
            for.</p>")
    @as("EmailIdentity")
    emailIdentity: identity,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutEmailIdentityMailFromAttributesCommand"
  let make = (~emailIdentity, ~behaviorOnMxFailure=?, ~mailFromDomain=?, ()) =>
    new({
      behaviorOnMxFailure: behaviorOnMxFailure,
      mailFromDomain: mailFromDomain,
      emailIdentity: emailIdentity,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutEmailIdentityFeedbackAttributes = {
  type t
  @ocaml.doc("<p>A request to set the attributes that control how bounce and complaint events are
            processed.</p>")
  type request = {
    @ocaml.doc("<p>Sets the feedback forwarding configuration for the identity.</p>
        <p>If the value is <code>true</code>, Amazon Pinpoint sends you email notifications when bounce or
            complaint events occur. Amazon Pinpoint sends this notification to the address that you specified
            in the Return-Path header of the original email.</p>
        <p>When you set this value to <code>false</code>, Amazon Pinpoint sends notifications through other
            mechanisms, such as by notifying an Amazon SNS topic or another event destination. You're
            required to have a method of tracking bounces and complaints. If you haven't set up
            another mechanism for receiving bounce or complaint notifications, Amazon Pinpoint sends an email
            notification when these events occur (even if this setting is disabled).</p>")
    @as("EmailForwardingEnabled")
    emailForwardingEnabled: option<enabled>,
    @ocaml.doc("<p>The email identity that you want to configure bounce and complaint feedback forwarding
            for.</p>")
    @as("EmailIdentity")
    emailIdentity: identity,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutEmailIdentityFeedbackAttributesCommand"
  let make = (~emailIdentity, ~emailForwardingEnabled=?, ()) =>
    new({emailForwardingEnabled: emailForwardingEnabled, emailIdentity: emailIdentity})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutEmailIdentityDkimAttributes = {
  type t
  @ocaml.doc("<p>A request to enable or disable DKIM signing of email that you send from an email
            identity.</p>")
  type request = {
    @ocaml.doc("<p>Sets the DKIM signing configuration for the identity.</p>
        <p>When you set this value <code>true</code>, then the messages that Amazon Pinpoint sends from the
            identity are DKIM-signed. When you set this value to <code>false</code>, then the
            messages that Amazon Pinpoint sends from the identity aren't DKIM-signed.</p>")
    @as("SigningEnabled")
    signingEnabled: option<enabled>,
    @ocaml.doc("<p>The email identity that you want to change the DKIM settings for.</p>")
    @as("EmailIdentity")
    emailIdentity: identity,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutEmailIdentityDkimAttributesCommand"
  let make = (~emailIdentity, ~signingEnabled=?, ()) =>
    new({signingEnabled: signingEnabled, emailIdentity: emailIdentity})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutDedicatedIpWarmupAttributes = {
  type t
  @ocaml.doc("<p>A request to change the warm-up attributes for a dedicated IP address. This operation
            is useful when you want to resume the warm-up process for an existing IP address.</p>")
  type request = {
    @ocaml.doc("<p>The warm-up percentage that you want to associate with the dedicated IP
            address.</p>")
    @as("WarmupPercentage")
    warmupPercentage: percentage100Wrapper,
    @ocaml.doc(
      "<p>The dedicated IP address that you want to update the warm-up attributes for.</p>"
    )
    @as("Ip")
    ip: ip,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutDedicatedIpWarmupAttributesCommand"
  let make = (~warmupPercentage, ~ip, ()) => new({warmupPercentage: warmupPercentage, ip: ip})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutDedicatedIpInPool = {
  type t
  @ocaml.doc("<p>A request to move a dedicated IP address to a dedicated IP pool.</p>")
  type request = {
    @ocaml.doc("<p>The name of the IP pool that you want to add the dedicated IP address to. You have to
            specify an IP pool that already exists.</p>")
    @as("DestinationPoolName")
    destinationPoolName: poolName,
    @ocaml.doc("<p>The IP address that you want to move to the dedicated IP pool. The value you specify
            has to be a dedicated IP address that's associated with your Amazon Pinpoint account.</p>")
    @as("Ip")
    ip: ip,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "PutDedicatedIpInPoolCommand"
  let make = (~destinationPoolName, ~ip, ()) =>
    new({destinationPoolName: destinationPoolName, ip: ip})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutConfigurationSetTrackingOptions = {
  type t
  @ocaml.doc("<p>A request to add a custom domain for tracking open and click events to a configuration
            set.</p>")
  type request = {
    @ocaml.doc("<p>The domain that you want to use to track open and click events.</p>")
    @as("CustomRedirectDomain")
    customRedirectDomain: option<customRedirectDomain>,
    @ocaml.doc("<p>The name of the configuration set that you want to add a custom tracking domain
            to.</p>")
    @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutConfigurationSetTrackingOptionsCommand"
  let make = (~configurationSetName, ~customRedirectDomain=?, ()) =>
    new({customRedirectDomain: customRedirectDomain, configurationSetName: configurationSetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutConfigurationSetSendingOptions = {
  type t
  @ocaml.doc("<p>A request to enable or disable the ability of Amazon Pinpoint to send emails that use a specific
            configuration set.</p>")
  type request = {
    @ocaml.doc("<p>If <code>true</code>, email sending is enabled for the configuration set. If
                <code>false</code>, email sending is disabled for the configuration set.</p>")
    @as("SendingEnabled")
    sendingEnabled: option<enabled>,
    @ocaml.doc("<p>The name of the configuration set that you want to enable or disable email sending
            for.</p>")
    @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutConfigurationSetSendingOptionsCommand"
  let make = (~configurationSetName, ~sendingEnabled=?, ()) =>
    new({sendingEnabled: sendingEnabled, configurationSetName: configurationSetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutConfigurationSetReputationOptions = {
  type t
  @ocaml.doc("<p>A request to enable or disable tracking of reputation metrics for a configuration
            set.</p>")
  type request = {
    @ocaml.doc("<p>If <code>true</code>, tracking of reputation metrics is enabled for the configuration
            set. If <code>false</code>, tracking of reputation metrics is disabled for the
            configuration set.</p>")
    @as("ReputationMetricsEnabled")
    reputationMetricsEnabled: option<enabled>,
    @ocaml.doc("<p>The name of the configuration set that you want to enable or disable reputation metric
            tracking for.</p>")
    @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutConfigurationSetReputationOptionsCommand"
  let make = (~configurationSetName, ~reputationMetricsEnabled=?, ()) =>
    new({
      reputationMetricsEnabled: reputationMetricsEnabled,
      configurationSetName: configurationSetName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutConfigurationSetDeliveryOptions = {
  type t
  @ocaml.doc("<p>A request to associate a configuration set with a dedicated IP pool.</p>")
  type request = {
    @ocaml.doc("<p>The name of the dedicated IP pool that you want to associate with the configuration
            set.</p>")
    @as("SendingPoolName")
    sendingPoolName: option<sendingPoolName>,
    @ocaml.doc("<p>Specifies whether messages that use the configuration set are required to use
            Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only
            delivered if a TLS connection can be established. If the value is <code>Optional</code>,
            messages can be delivered in plain text if a TLS connection can't be established.</p>")
    @as("TlsPolicy")
    tlsPolicy: option<tlsPolicy>,
    @ocaml.doc("<p>The name of the configuration set that you want to associate with a dedicated IP
            pool.</p>")
    @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutConfigurationSetDeliveryOptionsCommand"
  let make = (~configurationSetName, ~sendingPoolName=?, ~tlsPolicy=?, ()) =>
    new({
      sendingPoolName: sendingPoolName,
      tlsPolicy: tlsPolicy,
      configurationSetName: configurationSetName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutAccountSendingAttributes = {
  type t
  @ocaml.doc("<p>A request to change the ability of your account to send email.</p>")
  type request = {
    @ocaml.doc("<p>Enables or disables your account's ability to send email. Set to <code>true</code> to
            enable email sending, or set to <code>false</code> to disable email sending.</p>
        <note>
            <p>If AWS paused your account's ability to send email, you can't use this operation
                to resume your account's ability to send email.</p>
        </note>")
    @as("SendingEnabled")
    sendingEnabled: option<enabled>,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutAccountSendingAttributesCommand"
  let make = (~sendingEnabled=?, ()) => new({sendingEnabled: sendingEnabled})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module PutAccountDedicatedIpWarmupAttributes = {
  type t
  @ocaml.doc("<p>A request to enable or disable the automatic IP address warm-up feature.</p>")
  type request = {
    @ocaml.doc("<p>Enables or disables the automatic warm-up feature for dedicated IP addresses that are
            associated with your Amazon Pinpoint account in the current AWS Region. Set to <code>true</code>
            to enable the automatic warm-up feature, or set to <code>false</code> to disable
            it.</p>")
    @as("AutoWarmupEnabled")
    autoWarmupEnabled: option<enabled>,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutAccountDedicatedIpWarmupAttributesCommand"
  let make = (~autoWarmupEnabled=?, ()) => new({autoWarmupEnabled: autoWarmupEnabled})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteEmailIdentity = {
  type t
  @ocaml.doc("<p>A request to delete an existing email identity. When you delete an identity, you lose
            the ability to use Amazon Pinpoint to send email from that identity. You can restore your ability
            to send email by completing the verification process for the identity again.</p>")
  type request = {
    @ocaml.doc("<p>The identity (that is, the email address or domain) that you want to delete from your
            Amazon Pinpoint account.</p>")
    @as("EmailIdentity")
    emailIdentity: identity,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "DeleteEmailIdentityCommand"
  let make = (~emailIdentity, ()) => new({emailIdentity: emailIdentity})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteDedicatedIpPool = {
  type t
  @ocaml.doc("<p>A request to delete a dedicated IP pool.</p>")
  type request = {
    @ocaml.doc("<p>The name of the dedicated IP pool that you want to delete.</p>") @as("PoolName")
    poolName: poolName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "DeleteDedicatedIpPoolCommand"
  let make = (~poolName, ()) => new({poolName: poolName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteConfigurationSetEventDestination = {
  type t
  @ocaml.doc("<p>A request to delete an event destination from a configuration set.</p>")
  type request = {
    @ocaml.doc("<p>The name of the event destination that you want to delete.</p>")
    @as("EventDestinationName")
    eventDestinationName: eventDestinationName,
    @ocaml.doc("<p>The name of the configuration set that contains the event destination that you want to
            delete.</p>")
    @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "DeleteConfigurationSetEventDestinationCommand"
  let make = (~eventDestinationName, ~configurationSetName, ()) =>
    new({eventDestinationName: eventDestinationName, configurationSetName: configurationSetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module DeleteConfigurationSet = {
  type t
  @ocaml.doc("<p>A request to delete a configuration set.</p>")
  type request = {
    @ocaml.doc("<p>The name of the configuration set that you want to delete.</p>")
    @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "DeleteConfigurationSetCommand"
  let make = (~configurationSetName, ()) => new({configurationSetName: configurationSetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module UntagResource = {
  type t
  type request = {
    @ocaml.doc("<p>The tags (tag keys) that you want to remove from the resource. When you specify a tag
            key, the action removes both that key and its associated tag value.</p>
        <p>To remove more than one tag from the resource, append the <code>TagKeys</code>
            parameter and argument for each additional tag to remove, separated by an ampersand. For
            example:
                <code>/v1/email/tags?ResourceArn=ResourceArn&TagKeys=Key1&TagKeys=Key2</code>
        </p>")
    @as("TagKeys")
    tagKeys: tagKeyList,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the resource that you want to remove one or more
            tags from.</p>")
    @as("ResourceArn")
    resourceArn: amazonResourceName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "UntagResourceCommand"
  let make = (~tagKeys, ~resourceArn, ()) => new({tagKeys: tagKeys, resourceArn: resourceArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ListDedicatedIpPools = {
  type t
  @ocaml.doc("<p>A request to obtain a list of dedicated IP pools.</p>")
  type request = {
    @ocaml.doc("<p>The number of results to show in a single call to <code>ListDedicatedIpPools</code>.
            If the number of results is larger than the number you specified in this parameter, then
            the response includes a <code>NextToken</code> element, which you can use to obtain
            additional results.</p>")
    @as("PageSize")
    pageSize: option<maxItems>,
    @ocaml.doc("<p>A token returned from a previous call to <code>ListDedicatedIpPools</code> to indicate
            the position in the list of dedicated IP pools.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @ocaml.doc("<p>A list of dedicated IP pools.</p>")
  type response = {
    @ocaml.doc("<p>A token that indicates that there are additional IP pools to list. To view additional
            IP pools, issue another request to <code>ListDedicatedIpPools</code>, passing this token
            in the <code>NextToken</code> parameter.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of all of the dedicated IP pools that are associated with your Amazon Pinpoint
            account.</p>")
    @as("DedicatedIpPools")
    dedicatedIpPools: option<listOfDedicatedIpPools>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "ListDedicatedIpPoolsCommand"
  let make = (~pageSize=?, ~nextToken=?, ()) => new({pageSize: pageSize, nextToken: nextToken})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ListConfigurationSets = {
  type t
  @ocaml.doc("<p>A request to obtain a list of configuration sets for your Amazon Pinpoint account in the current
            AWS Region.</p>")
  type request = {
    @ocaml.doc("<p>The number of results to show in a single call to <code>ListConfigurationSets</code>.
            If the number of results is larger than the number you specified in this parameter, then
            the response includes a <code>NextToken</code> element, which you can use to obtain
            additional results.</p>")
    @as("PageSize")
    pageSize: option<maxItems>,
    @ocaml.doc("<p>A token returned from a previous call to <code>ListConfigurationSets</code> to
            indicate the position in the list of configuration sets.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @ocaml.doc(
    "<p>A list of configuration sets in your Amazon Pinpoint account in the current AWS Region.</p>"
  )
  type response = {
    @ocaml.doc("<p>A token that indicates that there are additional configuration sets to list. To view
            additional configuration sets, issue another request to
                <code>ListConfigurationSets</code>, and pass this token in the
                <code>NextToken</code> parameter.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array that contains all of the configuration sets in your Amazon Pinpoint account in the
            current AWS Region.</p>")
    @as("ConfigurationSets")
    configurationSets: option<configurationSetNameList>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "ListConfigurationSetsCommand"
  let make = (~pageSize=?, ~nextToken=?, ()) => new({pageSize: pageSize, nextToken: nextToken})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetDedicatedIp = {
  type t
  @ocaml.doc("<p>A request to obtain more information about a dedicated IP address.</p>")
  type request = {
    @ocaml.doc("<p>The IP address that you want to obtain more information about. The value you specify
            has to be a dedicated IP address that's assocaited with your Amazon Pinpoint account.</p>")
    @as("Ip")
    ip: ip,
  }
  @ocaml.doc("<p>Information about a dedicated IP address.</p>")
  type response = {
    @ocaml.doc("<p>An object that contains information about a dedicated IP address.</p>")
    @as("DedicatedIp")
    dedicatedIp: option<dedicatedIp>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "GetDedicatedIpCommand"
  let make = (~ip, ()) => new({ip: ip})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetAccount = {
  type t
  type request = {.}
  @ocaml.doc("<p>A list of details about the email-sending capabilities of your Amazon Pinpoint account in the
            current AWS Region.</p>")
  type response = {
    @ocaml.doc("<p>Indicates whether or not your account has production access in the current AWS
            Region.</p>
        <p>If the value is <code>false</code>, then your account is in the
                <i>sandbox</i>. When your account is in the sandbox, you can only send
            email to verified identities. Additionally, the maximum number of emails you can send in
            a 24-hour period (your sending quota) is 200, and the maximum number of emails you can
            send per second (your maximum sending rate) is 1.</p>
        <p>If the value is <code>true</code>, then your account has production access. When your
            account has production access, you can send email to any address. The sending quota and
            maximum sending rate for your account vary based on your specific use case.</p>")
    @as("ProductionAccessEnabled")
    productionAccessEnabled: option<enabled>,
    @ocaml.doc("<p>The reputation status of your Amazon Pinpoint account. The status can be one of the
            following:</p>
        <ul>
            <li>
                <p>
                  <code>HEALTHY</code> – There are no reputation-related issues that
                    currently impact your account.</p>
            </li>
            <li>
                <p>
                  <code>PROBATION</code> – We've identified some issues with your Amazon Pinpoint
                    account. We're placing your account under review while you work on correcting
                    these issues.</p>
            </li>
            <li>
                <p>
                  <code>SHUTDOWN</code> – Your account's ability to send email is
                    currently paused because of an issue with the email sent from your account. When
                    you correct the issue, you can contact us and request that your account's
                    ability to send email is resumed.</p>
            </li>
         </ul>")
    @as("EnforcementStatus")
    enforcementStatus: option<generalEnforcementStatus>,
    @ocaml.doc("<p>Indicates whether or not the automatic warm-up feature is enabled for dedicated IP
            addresses that are associated with your account.</p>")
    @as("DedicatedIpAutoWarmupEnabled")
    dedicatedIpAutoWarmupEnabled: option<enabled>,
    @ocaml.doc("<p>Indicates whether or not email sending is enabled for your Amazon Pinpoint account in the
            current AWS Region.</p>")
    @as("SendingEnabled")
    sendingEnabled: option<enabled>,
    @ocaml.doc("<p>An object that contains information about the per-day and per-second sending limits
            for your Amazon Pinpoint account in the current AWS Region.</p>")
    @as("SendQuota")
    sendQuota: option<sendQuota>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "GetAccountCommand"
  let make = () => new(Js.Obj.empty())
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module TagResource = {
  type t
  type request = {
    @ocaml.doc("<p>A list of the tags that you want to add to the resource. A tag consists of a required
            tag key (<code>Key</code>) and an associated tag value (<code>Value</code>). The maximum
            length of a tag key is 128 characters. The maximum length of a tag value is 256
            characters.</p>")
    @as("Tags")
    tags: tagList_,
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the resource that you want to add one or more tags
            to.</p>")
    @as("ResourceArn")
    resourceArn: amazonResourceName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "TagResourceCommand"
  let make = (~tags, ~resourceArn, ()) => new({tags: tags, resourceArn: resourceArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ListTagsForResource = {
  type t
  type request = {
    @ocaml.doc("<p>The Amazon Resource Name (ARN) of the resource that you want to retrieve tag
            information for.</p>")
    @as("ResourceArn")
    resourceArn: amazonResourceName,
  }
  type response = {
    @ocaml.doc("<p>An array that lists all the tags that are associated with the resource. Each tag
            consists of a required tag key (<code>Key</code>) and an associated tag value
                (<code>Value</code>)</p>")
    @as("Tags")
    tags: tagList_,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "ListTagsForResourceCommand"
  let make = (~resourceArn, ()) => new({resourceArn: resourceArn})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ListEmailIdentities = {
  type t
  @ocaml.doc("<p>A request to list all of the email identities associated with your Amazon Pinpoint account. This
            list includes identities that you've already verified, identities that are unverified,
            and identities that were verified in the past, but are no longer verified.</p>")
  type request = {
    @ocaml.doc("<p>The number of results to show in a single call to <code>ListEmailIdentities</code>. If
            the number of results is larger than the number you specified in this parameter, then
            the response includes a <code>NextToken</code> element, which you can use to obtain
            additional results.</p>
        <p>The value you specify has to be at least 0, and can be no more than 1000.</p>")
    @as("PageSize")
    pageSize: option<maxItems>,
    @ocaml.doc("<p>A token returned from a previous call to <code>ListEmailIdentities</code> to indicate
            the position in the list of identities.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @ocaml.doc("<p>A list of all of the identities that you've attempted to verify for use with Amazon Pinpoint,
            regardless of whether or not those identities were successfully verified.</p>")
  type response = {
    @ocaml.doc("<p>A token that indicates that there are additional configuration sets to list. To view
            additional configuration sets, issue another request to
            <code>ListEmailIdentities</code>, and pass this token in the <code>NextToken</code>
            parameter.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array that includes all of the identities associated with your Amazon Pinpoint
            account.</p>")
    @as("EmailIdentities")
    emailIdentities: option<identityInfoList>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "ListEmailIdentitiesCommand"
  let make = (~pageSize=?, ~nextToken=?, ()) => new({pageSize: pageSize, nextToken: nextToken})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ListDeliverabilityTestReports = {
  type t
  @ocaml.doc(
    "<p>A request to list all of the predictive inbox placement tests that you've performed.</p>"
  )
  type request = {
    @ocaml.doc("<p>The number of results to show in a single call to
                <code>ListDeliverabilityTestReports</code>. If the number of results is larger than
            the number you specified in this parameter, then the response includes a
                <code>NextToken</code> element, which you can use to obtain additional
            results.</p>
        <p>The value you specify has to be at least 0, and can be no more than 1000.</p>")
    @as("PageSize")
    pageSize: option<maxItems>,
    @ocaml.doc("<p>A token returned from a previous call to <code>ListDeliverabilityTestReports</code> to
            indicate the position in the list of predictive inbox placement tests.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
  }
  @ocaml.doc("<p>A list of the predictive inbox placement test reports that are available for your account, regardless of
            whether or not those tests are complete.</p>")
  type response = {
    @ocaml.doc("<p>A token that indicates that there are additional predictive inbox placement tests to list. To view additional
            predictive inbox placement tests, issue another request to <code>ListDeliverabilityTestReports</code>, and pass
            this token in the <code>NextToken</code> parameter.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc(
      "<p>An object that contains a lists of predictive inbox placement tests that you've performed.</p>"
    )
    @as("DeliverabilityTestReports")
    deliverabilityTestReports: deliverabilityTestReports,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "ListDeliverabilityTestReportsCommand"
  let make = (~pageSize=?, ~nextToken=?, ()) => new({pageSize: pageSize, nextToken: nextToken})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetEmailIdentity = {
  type t
  @ocaml.doc("<p>A request to return details about an email identity.</p>")
  type request = {
    @ocaml.doc("<p>The email identity that you want to retrieve details for.</p>")
    @as("EmailIdentity")
    emailIdentity: identity,
  }
  @ocaml.doc("<p>Details about an email identity.</p>")
  type response = {
    @ocaml.doc("<p>An array of objects that define the tags (keys and values) that are associated with
            the email identity.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>An object that contains information about the Mail-From attributes for the email
            identity.</p>")
    @as("MailFromAttributes")
    mailFromAttributes: option<mailFromAttributes>,
    @ocaml.doc("<p>An object that contains information about the DKIM attributes for the identity. This
            object includes the tokens that you use to create the CNAME records that are required to
            complete the DKIM verification process.</p>")
    @as("DkimAttributes")
    dkimAttributes: option<dkimAttributes>,
    @ocaml.doc("<p>Specifies whether or not the identity is verified. In Amazon Pinpoint, you can only send email
            from verified email addresses or domains. For more information about verifying
            identities, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html\">Amazon Pinpoint User Guide</a>.</p>")
    @as("VerifiedForSendingStatus")
    verifiedForSendingStatus: option<enabled>,
    @ocaml.doc("<p>The feedback forwarding configuration for the identity.</p>
        <p>If the value is <code>true</code>, Amazon Pinpoint sends you email notifications when bounce or
            complaint events occur. Amazon Pinpoint sends this notification to the address that you specified
            in the Return-Path header of the original email.</p>
        <p>When you set this value to <code>false</code>, Amazon Pinpoint sends notifications through other
            mechanisms, such as by notifying an Amazon SNS topic or another event destination. You're
            required to have a method of tracking bounces and complaints. If you haven't set up
            another mechanism for receiving bounce or complaint notifications, Amazon Pinpoint sends an email
            notification when these events occur (even if this setting is disabled).</p>")
    @as("FeedbackForwardingStatus")
    feedbackForwardingStatus: option<enabled>,
    @ocaml.doc("<p>The email identity type.</p>") @as("IdentityType")
    identityType: option<identityType>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "GetEmailIdentityCommand"
  let make = (~emailIdentity, ()) => new({emailIdentity: emailIdentity})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetDomainDeliverabilityCampaign = {
  type t
  @ocaml.doc("<p>Retrieve all the deliverability data for a specific campaign. This data is available
            for a campaign only if the campaign sent email by using a domain that the
            Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code>
            operation).</p>")
  type request = {
    @ocaml.doc("<p>The unique identifier for the campaign. Amazon Pinpoint automatically generates and assigns this
            identifier to a campaign. This value is not the same as the campaign identifier that
            Amazon Pinpoint assigns to campaigns that you create and manage by using the Amazon Pinpoint API or the
            Amazon Pinpoint console.</p>")
    @as("CampaignId")
    campaignId: campaignId,
  }
  @ocaml.doc("<p>An object that contains all the deliverability data for a specific campaign. This data
            is available for a campaign only if the campaign sent email by using a domain that the
            Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code>
            operation).</p>")
  type response = {
    @ocaml.doc("<p>An object that contains the deliverability data for the campaign.</p>")
    @as("DomainDeliverabilityCampaign")
    domainDeliverabilityCampaign: domainDeliverabilityCampaign,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "GetDomainDeliverabilityCampaignCommand"
  let make = (~campaignId, ()) => new({campaignId: campaignId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetDedicatedIps = {
  type t
  @ocaml.doc("<p>A request to obtain more information about dedicated IP pools.</p>")
  type request = {
    @ocaml.doc("<p>The number of results to show in a single call to <code>GetDedicatedIpsRequest</code>.
            If the number of results is larger than the number you specified in this parameter, then
            the response includes a <code>NextToken</code> element, which you can use to obtain
            additional results.</p>")
    @as("PageSize")
    pageSize: option<maxItems>,
    @ocaml.doc("<p>A token returned from a previous call to <code>GetDedicatedIps</code> to indicate the
            position of the dedicated IP pool in the list of IP pools.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The name of the IP pool that the dedicated IP address is associated with.</p>")
    @as("PoolName")
    poolName: option<poolName>,
  }
  @ocaml.doc("<p>Information about the dedicated IP addresses that are associated with your Amazon Pinpoint
            account.</p>")
  type response = {
    @ocaml.doc("<p>A token that indicates that there are additional dedicated IP addresses to list. To
            view additional addresses, issue another request to <code>GetDedicatedIps</code>,
            passing this token in the <code>NextToken</code> parameter.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>A list of dedicated IP addresses that are reserved for use by your Amazon Pinpoint
            account.</p>")
    @as("DedicatedIps")
    dedicatedIps: option<dedicatedIpList>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "GetDedicatedIpsCommand"
  let make = (~pageSize=?, ~nextToken=?, ~poolName=?, ()) =>
    new({pageSize: pageSize, nextToken: nextToken, poolName: poolName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetConfigurationSet = {
  type t
  @ocaml.doc("<p>A request to obtain information about a configuration set.</p>")
  type request = {
    @ocaml.doc("<p>The name of the configuration set that you want to obtain more information
            about.</p>")
    @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  @ocaml.doc("<p>Information about a configuration set.</p>")
  type response = {
    @ocaml.doc("<p>An array of objects that define the tags (keys and values) that are associated with
            the configuration set.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>An object that defines whether or not Amazon Pinpoint can send email that you send using the
            configuration set.</p>")
    @as("SendingOptions")
    sendingOptions: option<sendingOptions>,
    @ocaml.doc("<p>An object that defines whether or not Amazon Pinpoint collects reputation metrics for the emails
            that you send that use the configuration set.</p>")
    @as("ReputationOptions")
    reputationOptions: option<reputationOptions>,
    @ocaml.doc("<p>An object that defines the dedicated IP pool that is used to send emails that you send
            using the configuration set.</p>")
    @as("DeliveryOptions")
    deliveryOptions: option<deliveryOptions>,
    @ocaml.doc("<p>An object that defines the open and click tracking options for emails that you send
            using the configuration set.</p>")
    @as("TrackingOptions")
    trackingOptions: option<trackingOptions>,
    @ocaml.doc("<p>The name of the configuration set.</p>") @as("ConfigurationSetName")
    configurationSetName: option<configurationSetName>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "GetConfigurationSetCommand"
  let make = (~configurationSetName, ()) => new({configurationSetName: configurationSetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateEmailIdentity = {
  type t
  @ocaml.doc("<p>A request to begin the verification process for an email identity (an email address or
            domain).</p>")
  type request = {
    @ocaml.doc("<p>An array of objects that define the tags (keys and values) that you want to associate
            with the email identity.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The email address or domain that you want to verify.</p>") @as("EmailIdentity")
    emailIdentity: identity,
  }
  @ocaml.doc("<p>If the email identity is a domain, this object contains tokens that you can use to
            create a set of CNAME records. To sucessfully verify your domain, you have to add these
            records to the DNS configuration for your domain.</p>
        <p>If the email identity is an email address, this object is empty. </p>")
  type response = {
    @ocaml.doc("<p>An object that contains information about the DKIM attributes for the identity. This
            object includes the tokens that you use to create the CNAME records that are required to
            complete the DKIM verification process.</p>")
    @as("DkimAttributes")
    dkimAttributes: option<dkimAttributes>,
    @ocaml.doc("<p>Specifies whether or not the identity is verified. In Amazon Pinpoint, you can only send email
            from verified email addresses or domains. For more information about verifying
            identities, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html\">Amazon Pinpoint User Guide</a>.</p>")
    @as("VerifiedForSendingStatus")
    verifiedForSendingStatus: option<enabled>,
    @ocaml.doc("<p>The email identity type.</p>") @as("IdentityType")
    identityType: option<identityType>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "CreateEmailIdentityCommand"
  let make = (~emailIdentity, ~tags=?, ()) => new({tags: tags, emailIdentity: emailIdentity})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateDedicatedIpPool = {
  type t
  @ocaml.doc("<p>A request to create a new dedicated IP pool.</p>")
  type request = {
    @ocaml.doc("<p>An object that defines the tags (keys and values) that you want to associate with the
            pool.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>The name of the dedicated IP pool.</p>") @as("PoolName") poolName: poolName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "CreateDedicatedIpPoolCommand"
  let make = (~poolName, ~tags=?, ()) => new({tags: tags, poolName: poolName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module CreateConfigurationSet = {
  type t
  @ocaml.doc("<p>A request to create a configuration set.</p>")
  type request = {
    @ocaml.doc("<p>An array of objects that define the tags (keys and values) that you want to associate
            with the configuration set.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>An object that defines whether or not Amazon Pinpoint can send email that you send using the
            configuration set.</p>")
    @as("SendingOptions")
    sendingOptions: option<sendingOptions>,
    @ocaml.doc("<p>An object that defines whether or not Amazon Pinpoint collects reputation metrics for the emails
            that you send that use the configuration set.</p>")
    @as("ReputationOptions")
    reputationOptions: option<reputationOptions>,
    @ocaml.doc("<p>An object that defines the dedicated IP pool that is used to send emails that you send
            using the configuration set.</p>")
    @as("DeliveryOptions")
    deliveryOptions: option<deliveryOptions>,
    @ocaml.doc("<p>An object that defines the open and click tracking options for emails that you send
            using the configuration set.</p>")
    @as("TrackingOptions")
    trackingOptions: option<trackingOptions>,
    @ocaml.doc("<p>The name of the configuration set.</p>") @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new external new: request => t = "CreateConfigurationSetCommand"
  let make = (
    ~configurationSetName,
    ~tags=?,
    ~sendingOptions=?,
    ~reputationOptions=?,
    ~deliveryOptions=?,
    ~trackingOptions=?,
    (),
  ) =>
    new({
      tags: tags,
      sendingOptions: sendingOptions,
      reputationOptions: reputationOptions,
      deliveryOptions: deliveryOptions,
      trackingOptions: trackingOptions,
      configurationSetName: configurationSetName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module ListDomainDeliverabilityCampaigns = {
  type t
  @ocaml.doc("<p>Retrieve deliverability data for all the campaigns that used a specific domain to send
            email during a specified time range. This data is available for a domain only if you
            enabled the Deliverability dashboard (<code>PutDeliverabilityDashboardOption</code> operation)
            for the domain.</p>")
  type request = {
    @ocaml.doc("<p>The maximum number of results to include in response to a single call to the
                <code>ListDomainDeliverabilityCampaigns</code> operation. If the number of results
            is larger than the number that you specify in this parameter, the response includes a
                <code>NextToken</code> element, which you can use to obtain additional
            results.</p>")
    @as("PageSize")
    pageSize: option<maxItems>,
    @ocaml.doc("<p>A token that’s returned from a previous call to the
                <code>ListDomainDeliverabilityCampaigns</code> operation. This token indicates the
            position of a campaign in the list of campaigns.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>The domain to obtain deliverability data for.</p>") @as("SubscribedDomain")
    subscribedDomain: domain,
    @ocaml.doc("<p>The last day, in Unix time format, that you want to obtain deliverability data for.
            This value has to be less than or equal to 30 days after the value of the
                <code>StartDate</code> parameter.</p>")
    @as("EndDate")
    endDate: timestamp_,
    @ocaml.doc("<p>The first day, in Unix time format, that you want to obtain deliverability data
            for.</p>")
    @as("StartDate")
    startDate: timestamp_,
  }
  @ocaml.doc("<p>An array of objects that provide deliverability data for all the campaigns that used a
            specific domain to send email during a specified time range. This data is available for
            a domain only if you enabled the Deliverability dashboard
                (<code>PutDeliverabilityDashboardOption</code> operation) for the domain.</p>")
  type response = {
    @ocaml.doc("<p>A token that’s returned from a previous call to the
                <code>ListDomainDeliverabilityCampaigns</code> operation. This token indicates the
            position of the campaign in the list of campaigns.</p>")
    @as("NextToken")
    nextToken: option<nextToken>,
    @ocaml.doc("<p>An array of responses, one for each campaign that used the domain to send email during
            the specified time range.</p>")
    @as("DomainDeliverabilityCampaigns")
    domainDeliverabilityCampaigns: domainDeliverabilityCampaignList,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "ListDomainDeliverabilityCampaignsCommand"
  let make = (~subscribedDomain, ~endDate, ~startDate, ~pageSize=?, ~nextToken=?, ()) =>
    new({
      pageSize: pageSize,
      nextToken: nextToken,
      subscribedDomain: subscribedDomain,
      endDate: endDate,
      startDate: startDate,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetDeliverabilityTestReport = {
  type t
  @ocaml.doc("<p>A request to retrieve the results of a predictive inbox placement test.</p>")
  type request = {
    @ocaml.doc("<p>A unique string that identifies the predictive inbox placement test.</p>")
    @as("ReportId")
    reportId: reportId,
  }
  @ocaml.doc("<p>The results of the predictive inbox placement test.</p>")
  type response = {
    @ocaml.doc("<p>An array of objects that define the tags (keys and values) that are associated with
            the predictive inbox placement test.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc("<p>An object that contains the message that you sent when you performed this
            predictive inbox placement test.</p>")
    @as("Message")
    message: option<messageContent>,
    @ocaml.doc("<p>An object that describes how the test email was handled by several email providers,
            including Gmail, Hotmail, Yahoo, AOL, and others.</p>")
    @as("IspPlacements")
    ispPlacements: ispPlacements,
    @ocaml.doc("<p>An object that specifies how many test messages that were sent during the predictive inbox placement test were
            delivered to recipients' inboxes, how many were sent to recipients' spam folders, and
            how many weren't delivered.</p>")
    @as("OverallPlacement")
    overallPlacement: placementStatistics,
    @ocaml.doc("<p>An object that contains the results of the predictive inbox placement test.</p>")
    @as("DeliverabilityTestReport")
    deliverabilityTestReport: deliverabilityTestReport,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "GetDeliverabilityTestReportCommand"
  let make = (~reportId, ()) => new({reportId: reportId})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetBlacklistReports = {
  type t
  @ocaml.doc("<p>A request to retrieve a list of the blacklists that your dedicated IP addresses appear
            on.</p>")
  type request = {
    @ocaml.doc("<p>A list of IP addresses that you want to retrieve blacklist information about. You can
            only specify the dedicated IP addresses that you use to send email using Amazon Pinpoint or
            Amazon SES.</p>")
    @as("BlacklistItemNames")
    blacklistItemNames: blacklistItemNames,
  }
  @ocaml.doc("<p>An object that contains information about blacklist events.</p>")
  type response = {
    @ocaml.doc("<p>An object that contains information about a blacklist that one of your dedicated IP
            addresses appears on.</p>")
    @as("BlacklistReport")
    blacklistReport: blacklistReport,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "GetBlacklistReportsCommand"
  let make = (~blacklistItemNames, ()) => new({blacklistItemNames: blacklistItemNames})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module UpdateConfigurationSetEventDestination = {
  type t
  @ocaml.doc("<p>A request to change the settings for an event destination for a configuration
            set.</p>")
  type request = {
    @ocaml.doc("<p>An object that defines the event destination.</p>") @as("EventDestination")
    eventDestination: eventDestinationDefinition,
    @ocaml.doc("<p>The name of the event destination that you want to modify.</p>")
    @as("EventDestinationName")
    eventDestinationName: eventDestinationName,
    @ocaml.doc("<p>The name of the configuration set that contains the event destination that you want to
            modify.</p>")
    @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "UpdateConfigurationSetEventDestinationCommand"
  let make = (~eventDestination, ~eventDestinationName, ~configurationSetName, ()) =>
    new({
      eventDestination: eventDestination,
      eventDestinationName: eventDestinationName,
      configurationSetName: configurationSetName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module SendEmail = {
  type t
  @ocaml.doc("<p>A request to send an email message.</p>")
  type request = {
    @ocaml.doc(
      "<p>The name of the configuration set that you want to use when sending the email.</p>"
    )
    @as("ConfigurationSetName")
    configurationSetName: option<configurationSetName>,
    @ocaml.doc("<p>A list of tags, in the form of name/value pairs, to apply to an email that you send
            using the <code>SendEmail</code> operation. Tags correspond to characteristics of the
            email that you define, so that you can publish email sending events. </p>")
    @as("EmailTags")
    emailTags: option<messageTagList>,
    @ocaml.doc("<p>An object that contains the body of the message. You can send either a Simple message
            or a Raw message.</p>")
    @as("Content")
    content: emailContent,
    @ocaml.doc(
      "<p>The address that Amazon Pinpoint should send bounce and complaint notifications to.</p>"
    )
    @as("FeedbackForwardingEmailAddress")
    feedbackForwardingEmailAddress: option<emailAddress>,
    @ocaml.doc("<p>The \"Reply-to\" email addresses for the message. When the recipient replies to the
            message, each Reply-to address receives the reply.</p>")
    @as("ReplyToAddresses")
    replyToAddresses: option<emailAddressList>,
    @ocaml.doc("<p>An object that contains the recipients of the email message.</p>")
    @as("Destination")
    destination: destination,
    @ocaml.doc("<p>The email address that you want to use as the \"From\" address for the email. The
            address that you specify has to be verified.
            </p>")
    @as("FromEmailAddress")
    fromEmailAddress: option<emailAddress>,
  }
  @ocaml.doc(
    "<p>A unique message ID that you receive when Amazon Pinpoint accepts an email for sending.</p>"
  )
  type response = {
    @ocaml.doc("<p>A unique identifier for the message that is generated when Amazon Pinpoint accepts the
            message.</p>
        <note>
            <p>It is possible for Amazon Pinpoint to accept a message without sending it. This can happen
                when the message you're trying to send has an attachment doesn't pass a virus check,
                or when you send a templated email that contains invalid personalization content,
                for example.</p>
        </note>")
    @as("MessageId")
    messageId: option<outboundMessageId>,
  }
  @module("@aws-sdk/client-ses") @new external new: request => t = "SendEmailCommand"
  let make = (
    ~content,
    ~destination,
    ~configurationSetName=?,
    ~emailTags=?,
    ~feedbackForwardingEmailAddress=?,
    ~replyToAddresses=?,
    ~fromEmailAddress=?,
    (),
  ) =>
    new({
      configurationSetName: configurationSetName,
      emailTags: emailTags,
      content: content,
      feedbackForwardingEmailAddress: feedbackForwardingEmailAddress,
      replyToAddresses: replyToAddresses,
      destination: destination,
      fromEmailAddress: fromEmailAddress,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module PutDeliverabilityDashboardOption = {
  type t
  @ocaml.doc("<p>Enable or disable the Deliverability dashboard for your Amazon Pinpoint account. When you enable the
            Deliverability dashboard, you gain access to reputation, deliverability, and other metrics for
            the domains that you use to send email using Amazon Pinpoint. You also gain the ability to perform
            predictive inbox placement tests.</p>
        <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition
            to any other fees that you accrue by using Amazon Pinpoint. For more information about the
            features and cost of a Deliverability dashboard subscription, see <a href=\"http://aws.amazon.com/pinpoint/pricing/\">Amazon Pinpoint Pricing</a>.</p>")
  type request = {
    @ocaml.doc("<p>An array of objects, one for each verified domain that you use to send email and
            enabled the Deliverability dashboard for.</p>")
    @as("SubscribedDomains")
    subscribedDomains: option<domainDeliverabilityTrackingOptions>,
    @ocaml.doc("<p>Specifies whether to enable the Deliverability dashboard for your Amazon Pinpoint account. To enable the
            dashboard, set this value to <code>true</code>.</p>")
    @as("DashboardEnabled")
    dashboardEnabled: enabled,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "PutDeliverabilityDashboardOptionCommand"
  let make = (~dashboardEnabled, ~subscribedDomains=?, ()) =>
    new({subscribedDomains: subscribedDomains, dashboardEnabled: dashboardEnabled})
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module GetDomainStatisticsReport = {
  type t
  @ocaml.doc("<p>A request to obtain deliverability metrics for a domain.</p>")
  type request = {
    @ocaml.doc("<p>The last day (in Unix time) that you want to obtain domain deliverability metrics for.
            The <code>EndDate</code> that you specify has to be less than or equal to 30 days after
            the <code>StartDate</code>.</p>")
    @as("EndDate")
    endDate: timestamp_,
    @ocaml.doc("<p>The first day (in Unix time) that you want to obtain domain deliverability metrics
            for.</p>")
    @as("StartDate")
    startDate: timestamp_,
    @ocaml.doc("<p>The domain that you want to obtain deliverability metrics for.</p>")
    @as("Domain")
    domain: identity,
  }
  @ocaml.doc("<p>An object that includes statistics that are related to the domain that you
            specified.</p>")
  type response = {
    @ocaml.doc("<p>An object that contains deliverability metrics for the domain that you specified. This
            object contains data for each day, starting on the <code>StartDate</code> and ending on
            the <code>EndDate</code>.</p>")
    @as("DailyVolumes")
    dailyVolumes: dailyVolumes,
    @ocaml.doc("<p>An object that contains deliverability metrics for the domain that you specified. The
            data in this object is a summary of all of the data that was collected from the
                <code>StartDate</code> to the <code>EndDate</code>.</p>")
    @as("OverallVolume")
    overallVolume: overallVolume,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "GetDomainStatisticsReportCommand"
  let make = (~endDate, ~startDate, ~domain, ()) =>
    new({endDate: endDate, startDate: startDate, domain: domain})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetDeliverabilityDashboardOptions = {
  type t
  type request = {.}
  @ocaml.doc(
    "<p>An object that shows the status of the Deliverability dashboard for your Amazon Pinpoint account.</p>"
  )
  type response = {
    @ocaml.doc("<p>An array of objects, one for each verified domain that you use to send email and
            currently has an active Deliverability dashboard subscription that's scheduled to expire at the
            end of the current calendar month.</p>")
    @as("PendingExpirationSubscribedDomains")
    pendingExpirationSubscribedDomains: option<domainDeliverabilityTrackingOptions>,
    @ocaml.doc("<p>An array of objects, one for each verified domain that you use to send email and
            currently has an active Deliverability dashboard subscription that isn’t scheduled to expire at
            the end of the current calendar month.</p>")
    @as("ActiveSubscribedDomains")
    activeSubscribedDomains: option<domainDeliverabilityTrackingOptions>,
    @ocaml.doc("<p>The current status of your Deliverability dashboard subscription. If this value is
                <code>PENDING_EXPIRATION</code>, your subscription is scheduled to expire at the end
            of the current calendar month.</p>")
    @as("AccountStatus")
    accountStatus: option<deliverabilityDashboardAccountStatus>,
    @ocaml.doc("<p>The date, in Unix time format, when your current subscription to the Deliverability dashboard
            is scheduled to expire, if your subscription is scheduled to expire at the end of the
            current calendar month. This value is null if you have an active subscription that isn’t
            due to expire at the end of the month.</p>")
    @as("SubscriptionExpiryDate")
    subscriptionExpiryDate: option<timestamp_>,
    @ocaml.doc("<p>Specifies whether the Deliverability dashboard is enabled for your Amazon Pinpoint account. If this value
            is <code>true</code>, the dashboard is enabled.</p>")
    @as("DashboardEnabled")
    dashboardEnabled: enabled,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "GetDeliverabilityDashboardOptionsCommand"
  let make = () => new(Js.Obj.empty())
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateDeliverabilityTestReport = {
  type t
  @ocaml.doc("<p>A request to perform a predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will
            be handled by various email providers around the world. When you perform a predictive inbox placement test, you
            provide a sample message that contains the content that you plan to send to your
            customers. Amazon Pinpoint then sends that message to special email addresses spread across
            several major email providers. After about 24 hours, the test is complete, and you can
            use the <code>GetDeliverabilityTestReport</code> operation to view the results of the
            test.</p>")
  type request = {
    @ocaml.doc("<p>An array of objects that define the tags (keys and values) that you want to associate
            with the predictive inbox placement test.</p>")
    @as("Tags")
    tags: option<tagList_>,
    @ocaml.doc(
      "<p>The HTML body of the message that you sent when you performed the predictive inbox placement test.</p>"
    )
    @as("Content")
    content: emailContent,
    @ocaml.doc(
      "<p>The email address that the predictive inbox placement test email was sent from.</p>"
    )
    @as("FromEmailAddress")
    fromEmailAddress: emailAddress,
    @ocaml.doc("<p>A unique name that helps you to identify the predictive inbox placement test when you retrieve the
            results.</p>")
    @as("ReportName")
    reportName: option<reportName>,
  }
  @ocaml.doc("<p>Information about the predictive inbox placement test that you created.</p>")
  type response = {
    @ocaml.doc("<p>The status of the predictive inbox placement test. If the status is <code>IN_PROGRESS</code>, then the predictive inbox placement test
            is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the
            test. If the status is <code>COMPLETE</code>, then the test is finished, and you can use
            the <code>GetDeliverabilityTestReport</code> to view the results of the test.</p>")
    @as("DeliverabilityTestStatus")
    deliverabilityTestStatus: deliverabilityTestStatus,
    @ocaml.doc("<p>A unique string that identifies the predictive inbox placement test.</p>")
    @as("ReportId")
    reportId: reportId,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "CreateDeliverabilityTestReportCommand"
  let make = (~content, ~fromEmailAddress, ~tags=?, ~reportName=?, ()) =>
    new({tags: tags, content: content, fromEmailAddress: fromEmailAddress, reportName: reportName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CreateConfigurationSetEventDestination = {
  type t
  @ocaml.doc("<p>A request to add an event destination to a configuration set.</p>")
  type request = {
    @ocaml.doc("<p>An object that defines the event destination.</p>") @as("EventDestination")
    eventDestination: eventDestinationDefinition,
    @ocaml.doc("<p>A name that identifies the event destination within the configuration set.</p>")
    @as("EventDestinationName")
    eventDestinationName: eventDestinationName,
    @ocaml.doc(
      "<p>The name of the configuration set that you want to add an event destination to.</p>"
    )
    @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  type response = {.}
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "CreateConfigurationSetEventDestinationCommand"
  let make = (~eventDestination, ~eventDestinationName, ~configurationSetName, ()) =>
    new({
      eventDestination: eventDestination,
      eventDestinationName: eventDestinationName,
      configurationSetName: configurationSetName,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<unit> = "send"
}

module GetConfigurationSetEventDestinations = {
  type t
  @ocaml.doc("<p>A request to obtain information about the event destinations for a configuration
            set.</p>")
  type request = {
    @ocaml.doc("<p>The name of the configuration set that contains the event destination.</p>")
    @as("ConfigurationSetName")
    configurationSetName: configurationSetName,
  }
  @ocaml.doc("<p>Information about an event destination for a configuration set.</p>")
  type response = {
    @ocaml.doc("<p>An array that includes all of the events destinations that have been configured for
            the configuration set.</p>")
    @as("EventDestinations")
    eventDestinations: option<eventDestinations>,
  }
  @module("@aws-sdk/client-ses") @new
  external new: request => t = "GetConfigurationSetEventDestinationsCommand"
  let make = (~configurationSetName, ()) => new({configurationSetName: configurationSetName})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
