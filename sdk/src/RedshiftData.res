type responseMetadata = {
  httpStatusCode: option<float>,
  requestId: option<string>,
  extendedRequestId: option<string>,
  cfId: option<string>,
  attempts: option<int>,
  totalRetryDelay: option<int>,
}
type awsServiceClient
@module("@aws-sdk/client-redshift-data") @new
external createClient: unit => awsServiceClient = "RedshiftDataClient"
type baseString = string
type baseBoolean = bool
type baseInteger = int
type baseTimestamp = Js.Date.t
type baseLong = float
type bool_ = bool
type uuid = string
type string_ = string
type statusString = [
  | @as("ALL") #ALL
  | @as("FAILED") #FAILED
  | @as("ABORTED") #ABORTED
  | @as("FINISHED") #FINISHED
  | @as("STARTED") #STARTED
  | @as("PICKED") #PICKED
  | @as("SUBMITTED") #SUBMITTED
]
type statementString = string
type statementNameString = string
type secretArn = string
type pageSize = int
type long = float
type location = string
type listStatementsLimit = int
type integer_ = int
type boxedLong = float
type boxedDouble = float
type boxedBoolean = bool
type blob = NodeJs.Buffer.t
@ocaml.doc("<p>The properties of a table. </p>")
type tableMember = {
  @ocaml.doc("<p>The schema containing the table. </p>") schema: option<string_>,
  @ocaml.doc("<p>The type of the table. Possible values include TABLE, VIEW, SYSTEM TABLE, GLOBAL
      TEMPORARY, LOCAL TEMPORARY, ALIAS, and SYNONYM. </p>")
  @as("type")
  type_: option<string_>,
  @ocaml.doc("<p>The name of the table. </p>") name: option<string_>,
}
@ocaml.doc("<p>The SQL statement to run.</p>")
type statementData = {
  @ocaml.doc("<p>The date and time (UTC) that the statement metadata was last updated.</p>")
  @as("UpdatedAt")
  updatedAt: option<baseTimestamp>,
  @ocaml.doc("<p>The date and time (UTC) the statement was created. </p>") @as("CreatedAt")
  createdAt: option<baseTimestamp>,
  @ocaml.doc("<p>The name of the SQL statement. </p>") @as("StatementName")
  statementName: option<statementNameString>,
  @ocaml.doc("<p>The status of the SQL statement. An
       example is the that the SQL statement finished.
      </p>")
  @as("Status")
  status: option<statusString>,
  @ocaml.doc(
    "<p>The name or Amazon Resource Name (ARN) of the secret that enables access to the database. </p>"
  )
  @as("SecretArn")
  secretArn: option<secretArn>,
  @ocaml.doc("<p>The SQL statement.</p>") @as("QueryString") queryString: option<statementString>,
  @ocaml.doc(
    "<p>The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>"
  )
  @as("Id")
  id: uuid,
}
type schemaList = array<string_>
@ocaml.doc("<p>A data value in a column. </p>")
type field = {
  @ocaml.doc("<p>A value of the BLOB data type. </p>") blobValue: option<blob>,
  @ocaml.doc("<p>A value of the string data type. </p>") stringValue: option<string_>,
  @ocaml.doc("<p>A value of the double data type. </p>") doubleValue: option<boxedDouble>,
  @ocaml.doc("<p>A value of the long data type. </p>") longValue: option<boxedLong>,
  @ocaml.doc("<p>A value of the Boolean data type. </p>") booleanValue: option<boxedBoolean>,
  @ocaml.doc("<p>A value that indicates whether the data is NULL. </p>")
  isNull: option<boxedBoolean>,
}
module Field = {
  type t =
    | BlobValue(blob)
    | StringValue(string_)
    | DoubleValue(boxedDouble)
    | LongValue(boxedLong)
    | BooleanValue(boxedBoolean)
    | IsNull(boxedBoolean)
  exception FieldUnspecified
  let classify = value =>
    switch value {
    | {blobValue: Some(x)} => BlobValue(x)
    | {stringValue: Some(x)} => StringValue(x)
    | {doubleValue: Some(x)} => DoubleValue(x)
    | {longValue: Some(x)} => LongValue(x)
    | {booleanValue: Some(x)} => BooleanValue(x)
    | {isNull: Some(x)} => IsNull(x)
    | _ => raise(FieldUnspecified)
    }

  let make = value =>
    switch value {
    | BlobValue(x) => {
        blobValue: Some(x),
        stringValue: None,
        doubleValue: None,
        longValue: None,
        booleanValue: None,
        isNull: None,
      }
    | StringValue(x) => {
        stringValue: Some(x),
        blobValue: None,
        doubleValue: None,
        longValue: None,
        booleanValue: None,
        isNull: None,
      }
    | DoubleValue(x) => {
        doubleValue: Some(x),
        blobValue: None,
        stringValue: None,
        longValue: None,
        booleanValue: None,
        isNull: None,
      }
    | LongValue(x) => {
        longValue: Some(x),
        blobValue: None,
        stringValue: None,
        doubleValue: None,
        booleanValue: None,
        isNull: None,
      }
    | BooleanValue(x) => {
        booleanValue: Some(x),
        blobValue: None,
        stringValue: None,
        doubleValue: None,
        longValue: None,
        isNull: None,
      }
    | IsNull(x) => {
        isNull: Some(x),
        blobValue: None,
        stringValue: None,
        doubleValue: None,
        longValue: None,
        booleanValue: None,
      }
    }
}
type databaseList = array<string_>
@ocaml.doc("<p>The properties (metadata) of a column. </p>")
type columnMetadata = {
  @ocaml.doc("<p>The default value of the column. </p>") columnDefault: option<string_>,
  @ocaml.doc("<p>The length of the column.</p>") length: option<integer_>,
  @ocaml.doc("<p>The database-specific data type of the column. </p>") typeName: option<string_>,
  @ocaml.doc("<p>The name of the table that includes the column. </p>") tableName: option<string_>,
  @ocaml.doc("<p>The name of the schema that contains the table that includes the column.</p>")
  schemaName: option<string_>,
  @ocaml.doc("<p>The scale value of a decimal number column. </p>") scale: option<integer_>,
  @ocaml.doc("<p>The precision value of a decimal number column. </p>") precision: option<integer_>,
  @ocaml.doc("<p>A value that indicates whether the column is nullable. </p>")
  nullable: option<integer_>,
  @ocaml.doc("<p>The name of the column. </p>") name: option<string_>,
  @ocaml.doc("<p>The label for the column. </p>") label: option<string_>,
  @ocaml.doc("<p>A value that indicates whether an integer column is signed.</p>")
  isSigned: option<bool_>,
  @ocaml.doc("<p>A value that indicates whether the column contains currency values.</p>")
  isCurrency: option<bool_>,
  @ocaml.doc("<p>A value that indicates whether the column is case-sensitive. </p>")
  isCaseSensitive: option<bool_>,
}
type tableList = array<tableMember>
type statementList = array<statementData>
type fieldList = array<field>
type columnMetadataList = array<columnMetadata>
type columnList = array<columnMetadata>
type sqlRecords = array<fieldList>
@ocaml.doc("<p>You can use the Amazon Redshift Data API to run queries on Amazon Redshift tables. You
      can run individual SQL statements, which are committed if the statement succeeds. </p>
         <p>For more information about the Amazon Redshift Data API, see 
       <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/data-api.html\">Using the Amazon Redshift Data API</a> in the 
       <i>Amazon Redshift Cluster Management Guide</i>. </p>")
module ExecuteStatement = {
  type t
  type request = {
    @ocaml.doc(
      "<p>The name of the SQL statement. You can name the SQL statement when you create it to identify the query. </p>"
    )
    @as("StatementName")
    statementName: option<statementNameString>,
    @ocaml.doc(
      "<p>A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statement runs. </p>"
    )
    @as("WithEvent")
    withEvent: option<baseBoolean>,
    @ocaml.doc(
      "<p>The name of the database. This parameter is required when authenticating using temporary credentials.</p>"
    )
    @as("Database")
    database: option<string_>,
    @ocaml.doc(
      "<p>The database user name. This parameter is required when authenticating using temporary credentials. </p>"
    )
    @as("DbUser")
    dbUser: option<string_>,
    @ocaml.doc(
      "<p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. </p>"
    )
    @as("SecretArn")
    secretArn: option<secretArn>,
    @ocaml.doc(
      "<p>The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. </p>"
    )
    @as("ClusterIdentifier")
    clusterIdentifier: location,
    @ocaml.doc("<p>The SQL statement text to run. </p>") @as("Sql") sql: statementString,
  }
  type response = {
    @ocaml.doc("<p>The name or ARN of the secret that enables access to the database. </p>")
    @as("SecretArn")
    secretArn: option<secretArn>,
    @ocaml.doc("<p>The name of the database.</p>") @as("Database") database: option<string_>,
    @ocaml.doc("<p>The database user name.</p>") @as("DbUser") dbUser: option<string_>,
    @ocaml.doc("<p>The cluster identifier. </p>") @as("ClusterIdentifier")
    clusterIdentifier: option<location>,
    @ocaml.doc("<p>The date and time (UTC) the statement was created. </p>") @as("CreatedAt")
    createdAt: option<baseTimestamp>,
    @ocaml.doc(
      "<p>The identifier of the statement to be run. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>"
    )
    @as("Id")
    id: option<uuid>,
  }
  @module("@aws-sdk/client-redshift-data") @new
  external new: request => t = "ExecuteStatementCommand"
  let make = (
    ~clusterIdentifier,
    ~sql,
    ~statementName=?,
    ~withEvent=?,
    ~database=?,
    ~dbUser=?,
    ~secretArn=?,
    (),
  ) =>
    new({
      statementName: statementName,
      withEvent: withEvent,
      database: database,
      dbUser: dbUser,
      secretArn: secretArn,
      clusterIdentifier: clusterIdentifier,
      sql: sql,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeStatement = {
  type t
  type request = {
    @ocaml.doc("<p>The identifier of the SQL statement to describe. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. 
       This identifier is returned by <code>ExecuteStatment</code> and <code>ListStatements</code>. </p>")
    @as("Id")
    id: uuid,
  }
  type response = {
    @ocaml.doc(
      "<p>A value that indicates whether the statement has a result set. The result set can be empty. </p>"
    )
    @as("HasResultSet")
    hasResultSet: option<baseBoolean>,
    @ocaml.doc("<p>The process identifier from Amazon Redshift. </p>") @as("RedshiftPid")
    redshiftPid: option<long>,
    @ocaml.doc("<p>The identifier of the query generated by Amazon Redshift. 
      These identifiers are also available in the <code>query</code> column of the <code>STL_QUERY</code> system view. </p>")
    @as("RedshiftQueryId")
    redshiftQueryId: option<long>,
    @ocaml.doc("<p>The date and time (UTC) that the metadata for the SQL statement was last updated. An
      example is the time the status last changed. </p>")
    @as("UpdatedAt")
    updatedAt: option<baseTimestamp>,
    @ocaml.doc("<p>The date and time (UTC) when the SQL statement was submitted to run. </p>")
    @as("CreatedAt")
    createdAt: option<baseTimestamp>,
    @ocaml.doc("<p>The status of the SQL statement being described. Status values are defined as follows: </p>
         <ul>
            <li>
               <p>ABORTED - The query run was stopped by the user. </p>
            </li>
            <li>
               <p>ALL -  A status value that includes all query statuses. This value can be used to filter results. </p>
            </li>
            <li>
               <p>FAILED - The query run failed. </p>
            </li>
            <li>
               <p>FINISHED - The query has finished running. </p>
            </li>
            <li>
               <p>PICKED - The query has been chosen to be run. </p>
            </li>
            <li>
               <p>STARTED - The query run has started. </p>
            </li>
            <li>
               <p>SUBMITTED - The query was submitted, but not yet processed. </p>
            </li>
         </ul>")
    @as("Status")
    status: option<statusString>,
    @ocaml.doc(
      "<p>The error message from the cluster if the SQL statement encountered an error while running. </p>"
    )
    @as("Error")
    error: option<string_>,
    @ocaml.doc("<p>The amount of time in nanoseconds that the statement ran. </p>") @as("Duration")
    duration: option<long>,
    @ocaml.doc("<p>The size in bytes of the returned results. </p>") @as("ResultSize")
    resultSize: option<long>,
    @ocaml.doc("<p>Either the number of rows returned from the SQL statement or the number of rows affected.
       If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others. </p>")
    @as("ResultRows")
    resultRows: option<long>,
    @ocaml.doc("<p>The cluster identifier. </p>") @as("ClusterIdentifier")
    clusterIdentifier: option<string_>,
    @ocaml.doc("<p>The name of the database. </p>") @as("Database") database: option<string_>,
    @ocaml.doc("<p>The database user name. </p>") @as("DbUser") dbUser: option<string_>,
    @ocaml.doc(
      "<p>The name or Amazon Resource Name (ARN) of the secret that enables access to the database. </p>"
    )
    @as("SecretArn")
    secretArn: option<secretArn>,
    @ocaml.doc("<p>The SQL statement text. </p>") @as("QueryString")
    queryString: option<statementString>,
    @ocaml.doc(
      "<p>The identifier of the SQL statement described. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>"
    )
    @as("Id")
    id: uuid,
  }
  @module("@aws-sdk/client-redshift-data") @new
  external new: request => t = "DescribeStatementCommand"
  let make = (~id, ()) => new({id: id})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module CancelStatement = {
  type t
  type request = {
    @ocaml.doc("<p>The identifier of the SQL statement to cancel. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. 
      This identifier is returned by <code>ExecuteStatment</code> and <code>ListStatements</code>. </p>")
    @as("Id")
    id: uuid,
  }
  type response = {
    @ocaml.doc("<p>A value that indicates whether the cancel statement succeeded (true). </p>")
    @as("Status")
    status: option<baseBoolean>,
  }
  @module("@aws-sdk/client-redshift-data") @new
  external new: request => t = "CancelStatementCommand"
  let make = (~id, ()) => new({id: id})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ListSchemas = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of schemas to return in the response. 
       If more schemas exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>")
    @as("MaxResults")
    maxResults: option<pageSize>,
    @ocaml.doc(
      "<p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>A pattern to filter results by schema name. Within a schema pattern, \"%\" means match any
      substring of 0 or more characters and \"_\" means match any one character. Only schema name
      entries matching the search pattern are returned. </p>")
    @as("SchemaPattern")
    schemaPattern: option<string_>,
    @ocaml.doc(
      "<p>A database name. The connected database is specified when you connect with your authentication credentials. </p>"
    )
    @as("ConnectedDatabase")
    connectedDatabase: option<string_>,
    @ocaml.doc("<p>The name of the database that contains the schemas to list. 
     If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>")
    @as("Database")
    database: string_,
    @ocaml.doc(
      "<p>The database user name. This parameter is required when authenticating using temporary credentials. </p>"
    )
    @as("DbUser")
    dbUser: option<string_>,
    @ocaml.doc(
      "<p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. </p>"
    )
    @as("SecretArn")
    secretArn: option<secretArn>,
    @ocaml.doc(
      "<p>The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. </p>"
    )
    @as("ClusterIdentifier")
    clusterIdentifier: location,
  }
  type response = {
    @ocaml.doc(
      "<p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The schemas that match the request pattern. </p>") @as("Schemas")
    schemas: option<schemaList>,
  }
  @module("@aws-sdk/client-redshift-data") @new external new: request => t = "ListSchemasCommand"
  let make = (
    ~database,
    ~clusterIdentifier,
    ~maxResults=?,
    ~nextToken=?,
    ~schemaPattern=?,
    ~connectedDatabase=?,
    ~dbUser=?,
    ~secretArn=?,
    (),
  ) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      schemaPattern: schemaPattern,
      connectedDatabase: connectedDatabase,
      database: database,
      dbUser: dbUser,
      secretArn: secretArn,
      clusterIdentifier: clusterIdentifier,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ListDatabases = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of databases to return in the response. 
       If more databases exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>")
    @as("MaxResults")
    maxResults: option<pageSize>,
    @ocaml.doc(
      "<p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc(
      "<p>The database user name. This parameter is required when authenticating using temporary credentials. </p>"
    )
    @as("DbUser")
    dbUser: option<string_>,
    @ocaml.doc(
      "<p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. </p>"
    )
    @as("SecretArn")
    secretArn: option<secretArn>,
    @ocaml.doc(
      "<p>The name of the database. This parameter is required when authenticating using temporary credentials. </p>"
    )
    @as("Database")
    database: option<string_>,
    @ocaml.doc(
      "<p>The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. </p>"
    )
    @as("ClusterIdentifier")
    clusterIdentifier: location,
  }
  type response = {
    @ocaml.doc(
      "<p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The names of databases. </p>") @as("Databases") databases: option<databaseList>,
  }
  @module("@aws-sdk/client-redshift-data") @new external new: request => t = "ListDatabasesCommand"
  let make = (
    ~clusterIdentifier,
    ~maxResults=?,
    ~nextToken=?,
    ~dbUser=?,
    ~secretArn=?,
    ~database=?,
    (),
  ) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      dbUser: dbUser,
      secretArn: secretArn,
      database: database,
      clusterIdentifier: clusterIdentifier,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ListTables = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of tables to return in the response. 
       If more tables exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>")
    @as("MaxResults")
    maxResults: option<pageSize>,
    @ocaml.doc(
      "<p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>A pattern to filter results by table name. Within a table pattern, \"%\" means match any
      substring of 0 or more characters and \"_\" means match any one character. Only table name
      entries matching the search pattern are returned. If <code>TablePattern</code> is not specified, then all tables that match 
       <code>SchemaPattern</code>are returned.  
       If neither <code>SchemaPattern</code> or <code>TablePattern</code> are specified, then all tables are returned. </p>")
    @as("TablePattern")
    tablePattern: option<string_>,
    @ocaml.doc("<p>A pattern to filter results by schema name. Within a schema pattern, \"%\" means match any
      substring of 0 or more characters and \"_\" means match any one character. Only schema name
      entries matching the search pattern are returned. If <code>SchemaPattern</code> is not specified, then all tables that match 
       <code>TablePattern</code> are returned. 
       If neither <code>SchemaPattern</code> or <code>TablePattern</code> are specified, then all tables are returned. </p>")
    @as("SchemaPattern")
    schemaPattern: option<string_>,
    @ocaml.doc(
      "<p>A database name. The connected database is specified when you connect with your authentication credentials. </p>"
    )
    @as("ConnectedDatabase")
    connectedDatabase: option<string_>,
    @ocaml.doc("<p>The name of the database that contains the tables to list. 
      If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>")
    @as("Database")
    database: string_,
    @ocaml.doc(
      "<p>The database user name. This parameter is required when authenticating using temporary credentials. </p>"
    )
    @as("DbUser")
    dbUser: option<string_>,
    @ocaml.doc(
      "<p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. </p>"
    )
    @as("SecretArn")
    secretArn: option<secretArn>,
    @ocaml.doc(
      "<p>The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. </p>"
    )
    @as("ClusterIdentifier")
    clusterIdentifier: location,
  }
  type response = {
    @ocaml.doc(
      "<p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The tables that match the request pattern. </p>") @as("Tables")
    tables: option<tableList>,
  }
  @module("@aws-sdk/client-redshift-data") @new external new: request => t = "ListTablesCommand"
  let make = (
    ~database,
    ~clusterIdentifier,
    ~maxResults=?,
    ~nextToken=?,
    ~tablePattern=?,
    ~schemaPattern=?,
    ~connectedDatabase=?,
    ~dbUser=?,
    ~secretArn=?,
    (),
  ) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      tablePattern: tablePattern,
      schemaPattern: schemaPattern,
      connectedDatabase: connectedDatabase,
      database: database,
      dbUser: dbUser,
      secretArn: secretArn,
      clusterIdentifier: clusterIdentifier,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module ListStatements = {
  type t
  type request = {
    @ocaml.doc("<p>A value that filters which statements to return in the response. If true, all statements run by the caller's IAM role are returned. 
      If false, only statements run by the caller's IAM role in the current IAM session are returned.  The default is true. </p>")
    @as("RoleLevel")
    roleLevel: option<baseBoolean>,
    @ocaml.doc("<p>The status of the SQL statement to list. Status values are defined as follows: </p>
         <ul>
            <li>
               <p>ABORTED - The query run was stopped by the user. </p>
            </li>
            <li>
               <p>ALL -  A status value that includes all query statuses. This value can be used to filter results. </p>
            </li>
            <li>
               <p>FAILED - The query run failed. </p>
            </li>
            <li>
               <p>FINISHED - The query has finished running. </p>
            </li>
            <li>
               <p>PICKED - The query has been chosen to be run. </p>
            </li>
            <li>
               <p>STARTED - The query run has started. </p>
            </li>
            <li>
               <p>SUBMITTED - The query was submitted, but not yet processed. </p>
            </li>
         </ul>")
    @as("Status")
    status: option<statusString>,
    @ocaml.doc("<p>The name of the SQL statement specified as input to <code>ExecuteStatement</code> to identify the query. 
      You can list multiple statements by providing a prefix that matches the beginning of the statement name. 
      For example, to list myStatement1, myStatement2, myStatement3, and so on, then provide the a value of <code>myStatement</code>.  
      Data API does a case-sensitive match of SQL statement names to the prefix value you provide. </p>")
    @as("StatementName")
    statementName: option<statementNameString>,
    @ocaml.doc("<p>The maximum number of SQL statements to return in the response. 
       If more SQL statements exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>")
    @as("MaxResults")
    maxResults: option<listStatementsLimit>,
    @ocaml.doc(
      "<p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
  }
  type response = {
    @ocaml.doc(
      "<p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The SQL statements. </p>") @as("Statements") statements: statementList,
  }
  @module("@aws-sdk/client-redshift-data") @new external new: request => t = "ListStatementsCommand"
  let make = (~roleLevel=?, ~status=?, ~statementName=?, ~maxResults=?, ~nextToken=?, ()) =>
    new({
      roleLevel: roleLevel,
      status: status,
      statementName: statementName,
      maxResults: maxResults,
      nextToken: nextToken,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module DescribeTable = {
  type t
  type request = {
    @ocaml.doc("<p>The maximum number of tables to return in the response. 
      If more tables exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>")
    @as("MaxResults")
    maxResults: option<pageSize>,
    @ocaml.doc(
      "<p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The table name. If no table is specified, then all tables for all matching schemas are returned. 
       If no table and no schema is specified, then all tables for all schemas in the database are returned</p>")
    @as("Table")
    table: option<string_>,
    @ocaml.doc(
      "<p>The schema that contains the table. If no schema is specified, then matching tables for all schemas are returned. </p>"
    )
    @as("Schema")
    schema: option<string_>,
    @ocaml.doc(
      "<p>A database name. The connected database is specified when you connect with your authentication credentials. </p>"
    )
    @as("ConnectedDatabase")
    connectedDatabase: option<string_>,
    @ocaml.doc("<p>The name of the database that contains the tables to be described.  
      If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>")
    @as("Database")
    database: string_,
    @ocaml.doc(
      "<p>The database user name. This parameter is required when authenticating using temporary credentials. </p>"
    )
    @as("DbUser")
    dbUser: option<string_>,
    @ocaml.doc(
      "<p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using AWS Secrets Manager. </p>"
    )
    @as("SecretArn")
    secretArn: option<secretArn>,
    @ocaml.doc(
      "<p>The cluster identifier. This parameter is required when authenticating using either AWS Secrets Manager or temporary credentials. </p>"
    )
    @as("ClusterIdentifier")
    clusterIdentifier: location,
  }
  type response = {
    @ocaml.doc(
      "<p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>A list of columns in the table. </p>") @as("ColumnList")
    columnList: option<columnList>,
    @ocaml.doc("<p>The table name. </p>") @as("TableName") tableName: option<string_>,
  }
  @module("@aws-sdk/client-redshift-data") @new external new: request => t = "DescribeTableCommand"
  let make = (
    ~database,
    ~clusterIdentifier,
    ~maxResults=?,
    ~nextToken=?,
    ~table=?,
    ~schema=?,
    ~connectedDatabase=?,
    ~dbUser=?,
    ~secretArn=?,
    (),
  ) =>
    new({
      maxResults: maxResults,
      nextToken: nextToken,
      table: table,
      schema: schema,
      connectedDatabase: connectedDatabase,
      database: database,
      dbUser: dbUser,
      secretArn: secretArn,
      clusterIdentifier: clusterIdentifier,
    })
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}

module GetStatementResult = {
  type t
  type request = {
    @ocaml.doc(
      "<p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. 
       This identifier is returned by <code>ExecuteStatment</code> and <code>ListStatements</code>. </p>")
    @as("Id")
    id: uuid,
  }
  type response = {
    @ocaml.doc(
      "<p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>"
    )
    @as("NextToken")
    nextToken: option<string_>,
    @ocaml.doc("<p>The total number of rows in the result set returned from a query. 
       You can use this number to estimate the number of calls to the <code>GetStatementResult</code> operation needed to page through the results. </p>")
    @as("TotalNumRows")
    totalNumRows: option<long>,
    @ocaml.doc("<p>The properties (metadata) of a column. </p>") @as("ColumnMetadata")
    columnMetadata: option<columnMetadataList>,
    @ocaml.doc("<p>The results of the SQL statement.</p>") @as("Records") records: sqlRecords,
  }
  @module("@aws-sdk/client-redshift-data") @new
  external new: request => t = "GetStatementResultCommand"
  let make = (~id, ~nextToken=?, ()) => new({nextToken: nextToken, id: id})
  @send external send: (awsServiceClient, t) => Js.Promise.t<response> = "send"
}
